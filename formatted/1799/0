<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
<span class="l">81: </span>
<span class="l">82: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// LinearStudent: a first tutorial on programming the Simplex method in F#</span>
<span class="c">/// F# is a functional-first programming language developed in the Cambridge Microsoft research lab</span>
<span class="c">/// under the direction of a group of well-qualified researchers headed by Simon Peyton-Jones</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">A2FM</span> <span class="o">=</span> <span class="s">&quot;good class!&quot;</span>

<span class="c">// glorified calculator</span>
<span class="n">2.</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">asin</span>(<span class="n">1.0</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">pi</span> <span class="o">=</span> <span class="n">3.141592654</span>
<span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="f">sin</span>(<span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="i">pi</span><span class="o">/</span><span class="n">2.0</span>)

[|<span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="f">sin</span>(<span class="n">3.</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs3', 7)" onmouseover="showTip(event, 'fs3', 7)" class="i">pi</span><span class="o">/</span><span class="n">2.0</span>); <span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="f">cos</span>(<span class="n">2.</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs3', 9)" onmouseover="showTip(event, 'fs3', 9)" class="i">pi</span><span class="o">/</span><span class="n">3.0</span>); <span onmouseout="hideTip(event, 'fs4', 10)" onmouseover="showTip(event, 'fs4', 10)" class="f">sin</span>(<span class="n">2.</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs3', 11)" onmouseover="showTip(event, 'fs3', 11)" class="i">pi</span><span class="o">/</span><span class="n">3.</span>); <span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="f">sqrt</span>(<span class="n">3.</span>)<span class="o">/</span><span class="n">2.</span>|]

(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">y</span> <span class="k">-&gt;</span> <span class="n">2</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs7', 14)" onmouseover="showTip(event, 'fs7', 14)" class="i">y</span>) (<span class="n">3</span><span class="o">+</span><span class="n">2</span>)

<span class="c">// Create a matrix of floating point numbers</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 15)" onmouseover="showTip(event, 'fs8', 15)" class="i">matrix</span> <span class="o">=</span> [| [| <span class="n">0.</span>; <span class="n">1.</span>; <span class="n">2.</span>; <span class="n">3.</span> |]; [|<span class="n">4.0</span>; <span class="n">5.0</span>; <span class="n">6.0</span>; <span class="n">7.0</span>|]; [|<span class="n">8.0</span>; <span class="n">9.0</span>; <span class="n">10.0</span>; <span class="n">11.0</span>|]|]

<span class="c">// float converts an integer to a float</span>
<span class="c">// and Array.map float r converts all the entries of the array r to floats</span>

<span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>]<span class="o">.</span>[<span class="n">1</span>]
<span class="c">// this takes the 2nd element of the 1st row of matrix.</span>
<span class="c">// in F# arrays are indexed from 0 rather than 1.  Cope!</span>

<span class="c">// pivotDivideMax: ensures the maximum entry in an array is 1</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs9', 17)" onmouseover="showTip(event, 'fs9', 17)" class="f">pivotDivideMax</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="i">l</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="i">x</span><span class="o">/</span>(<span onmouseout="hideTip(event, 'fs11', 23)" onmouseover="showTip(event, 'fs11', 23)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="f">max</span> <span onmouseout="hideTip(event, 'fs10', 25)" onmouseover="showTip(event, 'fs10', 25)" class="i">l</span>)) <span onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26)" class="i">l</span>

<span class="c">// Array.map f builds a new array whose elements have all had function f applied to them</span>
<span onmouseout="hideTip(event, 'fs11', 27)" onmouseover="showTip(event, 'fs11', 27)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 28)" onmouseover="showTip(event, 'fs12', 28)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 29)" onmouseover="showTip(event, 'fs15', 29)" class="i">x</span> <span class="k">-&gt;</span> <span class="n">2.</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs15', 30)" onmouseover="showTip(event, 'fs15', 30)" class="i">x</span> ) <span onmouseout="hideTip(event, 'fs8', 31)" onmouseover="showTip(event, 'fs8', 31)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>]

<span onmouseout="hideTip(event, 'fs8', 32)" onmouseover="showTip(event, 'fs8', 32)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>]
<span class="c">// The old array is still there. This is functional (first) programming</span>

<span class="c">// A better but more generic version without requiring the &quot;inline&quot; directive</span>
<span class="c">// pivotDivideMaxHigher : div:(&#39;a -&gt; &#39;a -&gt; &#39;b) -&gt; l:&#39;a [] -&gt; &#39;b []</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs16', 33)" onmouseover="showTip(event, 'fs16', 33)" class="f">pivotDivideMaxHigher</span> <span onmouseout="hideTip(event, 'fs17', 34)" onmouseover="showTip(event, 'fs17', 34)" class="f">div</span> <span onmouseout="hideTip(event, 'fs18', 35)" onmouseover="showTip(event, 'fs18', 35)" class="i">l</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 36)" onmouseover="showTip(event, 'fs11', 36)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 37)" onmouseover="showTip(event, 'fs12', 37)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs19', 38)" onmouseover="showTip(event, 'fs19', 38)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 39)" onmouseover="showTip(event, 'fs17', 39)" class="f">div</span> <span onmouseout="hideTip(event, 'fs19', 40)" onmouseover="showTip(event, 'fs19', 40)" class="i">x</span> (<span onmouseout="hideTip(event, 'fs11', 41)" onmouseover="showTip(event, 'fs11', 41)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 42)" onmouseover="showTip(event, 'fs14', 42)" class="f">max</span> <span onmouseout="hideTip(event, 'fs18', 43)" onmouseover="showTip(event, 'fs18', 43)" class="i">l</span>)) <span onmouseout="hideTip(event, 'fs18', 44)" onmouseover="showTip(event, 'fs18', 44)" class="i">l</span>

<span class="c">// Test better version</span>
<span onmouseout="hideTip(event, 'fs16', 45)" onmouseover="showTip(event, 'fs16', 45)" class="f">pivotDivideMaxHigher</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 46)" onmouseover="showTip(event, 'fs15', 46)" class="i">x</span> <span onmouseout="hideTip(event, 'fs20', 47)" onmouseover="showTip(event, 'fs20', 47)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 48)" onmouseover="showTip(event, 'fs15', 48)" class="i">x</span><span class="o">/</span><span onmouseout="hideTip(event, 'fs20', 49)" onmouseover="showTip(event, 'fs20', 49)" class="i">y</span>) <span onmouseout="hideTip(event, 'fs8', 50)" onmouseover="showTip(event, 'fs8', 50)" class="i">matrix</span><span class="o">.</span>[<span class="n">1</span>]

<span class="c">// F# uses a special syntax x &lt;- v to change the value of mutable variables</span>
<span onmouseout="hideTip(event, 'fs8', 51)" onmouseover="showTip(event, 'fs8', 51)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>] <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs16', 52)" onmouseover="showTip(event, 'fs16', 52)" class="f">pivotDivideMaxHigher</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 53)" onmouseover="showTip(event, 'fs15', 53)" class="i">x</span> <span onmouseout="hideTip(event, 'fs20', 54)" onmouseover="showTip(event, 'fs20', 54)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 55)" onmouseover="showTip(event, 'fs15', 55)" class="i">x</span><span class="o">/</span><span onmouseout="hideTip(event, 'fs20', 56)" onmouseover="showTip(event, 'fs20', 56)" class="i">y</span>) <span onmouseout="hideTip(event, 'fs8', 57)" onmouseover="showTip(event, 'fs8', 57)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>]

<span class="c">// The entire first row of matrix has now been normalised</span>
<span onmouseout="hideTip(event, 'fs8', 58)" onmouseover="showTip(event, 'fs8', 58)" class="i">matrix</span>

<span class="c">// we could -- with a bit of jiggery pokery -- define a generic division function ...</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs21', 59)" onmouseover="showTip(event, 'fs21', 59)" class="f">myDiv</span> (<span onmouseout="hideTip(event, 'fs22', 60)" onmouseover="showTip(event, 'fs22', 60)" class="i">x</span><span class="o">:</span><span class="o">^</span><span class="i">a</span>) (<span onmouseout="hideTip(event, 'fs23', 61)" onmouseover="showTip(event, 'fs23', 61)" class="i">y</span><span class="o">:</span><span class="o">^</span><span class="i">a</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 62)" onmouseover="showTip(event, 'fs22', 62)" class="i">x</span><span class="o">/</span><span onmouseout="hideTip(event, 'fs23', 63)" onmouseover="showTip(event, 'fs23', 63)" class="i">y</span>
<span class="c">// test myDiv</span>
<span onmouseout="hideTip(event, 'fs21', 64)" onmouseover="showTip(event, 'fs21', 64)" class="f">myDiv</span> <span class="n">3</span> <span class="n">4</span>
<span onmouseout="hideTip(event, 'fs21', 65)" onmouseover="showTip(event, 'fs21', 65)" class="f">myDiv</span> <span class="n">3.0</span> <span class="n">4.0</span>

<span class="c">// .... and use it to abbreviate pivot division actions</span>
<span onmouseout="hideTip(event, 'fs16', 66)" onmouseover="showTip(event, 'fs16', 66)" class="f">pivotDivideMaxHigher</span> <span onmouseout="hideTip(event, 'fs21', 67)" onmouseover="showTip(event, 'fs21', 67)" class="f">myDiv</span> <span onmouseout="hideTip(event, 'fs8', 68)" onmouseover="showTip(event, 'fs8', 68)" class="i">matrix</span><span class="o">.</span>[<span class="n">1</span>]
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs24', 69)" onmouseover="showTip(event, 'fs24', 69)" class="f">pivotDivideMax2</span> <span onmouseout="hideTip(event, 'fs25', 70)" onmouseover="showTip(event, 'fs25', 70)" class="i">l</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 71)" onmouseover="showTip(event, 'fs16', 71)" class="f">pivotDivideMaxHigher</span> <span onmouseout="hideTip(event, 'fs21', 72)" onmouseover="showTip(event, 'fs21', 72)" class="f">myDiv</span> <span onmouseout="hideTip(event, 'fs25', 73)" onmouseover="showTip(event, 'fs25', 73)" class="i">l</span>

<span onmouseout="hideTip(event, 'fs8', 74)" onmouseover="showTip(event, 'fs8', 74)" class="i">matrix</span><span class="o">.</span>[<span class="n">1</span>] <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs24', 75)" onmouseover="showTip(event, 'fs24', 75)" class="f">pivotDivideMax2</span> <span onmouseout="hideTip(event, 'fs8', 76)" onmouseover="showTip(event, 'fs8', 76)" class="i">matrix</span><span class="o">.</span>[<span class="n">1</span>]
<span class="c">// The second row of matrix has been normalised as well</span>
<span onmouseout="hideTip(event, 'fs8', 77)" onmouseover="showTip(event, 'fs8', 77)" class="i">matrix</span>

<span class="c">// rowOp applies a generic row operation to 2 rows</span>
<span class="c">// rowOp : (&#39;a -&gt; &#39;b -&gt; &#39;c) -&gt; &#39;a [] -&gt; &#39;b [] -&gt; &#39;c []</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 78)" onmouseover="showTip(event, 'fs26', 78)" class="f">rowOp</span> <span onmouseout="hideTip(event, 'fs27', 79)" onmouseover="showTip(event, 'fs27', 79)" class="f">op</span> <span onmouseout="hideTip(event, 'fs28', 80)" onmouseover="showTip(event, 'fs28', 80)" class="i">r1</span> <span onmouseout="hideTip(event, 'fs29', 81)" onmouseover="showTip(event, 'fs29', 81)" class="i">r2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 82)" onmouseover="showTip(event, 'fs11', 82)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 83)" onmouseover="showTip(event, 'fs30', 83)" class="f">map2</span> <span onmouseout="hideTip(event, 'fs27', 84)" onmouseover="showTip(event, 'fs27', 84)" class="f">op</span> <span onmouseout="hideTip(event, 'fs28', 85)" onmouseover="showTip(event, 'fs28', 85)" class="i">r1</span> <span onmouseout="hideTip(event, 'fs29', 86)" onmouseover="showTip(event, 'fs29', 86)" class="i">r2</span>

<span class="c">// Compute r1 - 2 r2 as a new row</span>
<span onmouseout="hideTip(event, 'fs26', 87)" onmouseover="showTip(event, 'fs26', 87)" class="f">rowOp</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 88)" onmouseover="showTip(event, 'fs15', 88)" class="i">x</span> <span onmouseout="hideTip(event, 'fs20', 89)" onmouseover="showTip(event, 'fs20', 89)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 90)" onmouseover="showTip(event, 'fs15', 90)" class="i">x</span> <span class="o">-</span> <span class="n">2.0</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs20', 91)" onmouseover="showTip(event, 'fs20', 91)" class="i">y</span>) <span onmouseout="hideTip(event, 'fs8', 92)" onmouseover="showTip(event, 'fs8', 92)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>] <span onmouseout="hideTip(event, 'fs8', 93)" onmouseover="showTip(event, 'fs8', 93)" class="i">matrix</span><span class="o">.</span>[<span class="n">1</span>]

<span class="c">// Note that rowOp works on any array, so columns work as well</span>

<span class="c">// let badDiv x y = x/y // this does not have a general type</span>
<span class="c">// badDiv 3 4 // this is ok</span>
<span class="c">// badDiv 3.0 4.0 // but this is not ok</span>

<span class="c">/// How to locate the _position_ of an element in an Array</span>
(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 94)" onmouseover="showTip(event, 'fs15', 94)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 95)" onmouseover="showTip(event, 'fs15', 95)" class="i">x</span> <span class="o">=</span> <span class="n">1.0</span>) <span class="n">2.0</span> <span class="c">// false</span>
(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 96)" onmouseover="showTip(event, 'fs15', 96)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 97)" onmouseover="showTip(event, 'fs15', 97)" class="i">x</span> <span class="o">=</span> <span class="n">1.0</span>) <span class="n">1.0</span> <span class="c">// true</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 98)" onmouseover="showTip(event, 'fs31', 98)" class="i">unit</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 99)" onmouseover="showTip(event, 'fs11', 99)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 100)" onmouseover="showTip(event, 'fs32', 100)" class="f">findIndex</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 101)" onmouseover="showTip(event, 'fs15', 101)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 102)" onmouseover="showTip(event, 'fs15', 102)" class="i">x</span> <span class="o">=</span> <span class="n">1.0</span>) <span onmouseout="hideTip(event, 'fs8', 103)" onmouseover="showTip(event, 'fs8', 103)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>] <span class="c">// find the (first) element equal to 1.0</span>
<span onmouseout="hideTip(event, 'fs8', 104)" onmouseover="showTip(event, 'fs8', 104)" class="i">matrix</span><span class="o">.</span>[<span class="n">0</span>]<span class="o">.</span>[<span onmouseout="hideTip(event, 'fs31', 105)" onmouseover="showTip(event, 'fs31', 105)" class="i">unit</span>]

<span class="c">/// Exercise: now find the position of the _maximum_ element in the 3rd row of matrix</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val A2FM : string<br /><br />Full name: Script.A2FM<br /><em><br /><br />&#160;LinearStudent: a first tutorial on programming the Simplex method in F#<br />&#160;F# is a functional-first programming language developed in the Cambridge Microsoft research lab<br />&#160;under the direction of a group of well-qualified researchers headed by Simon Peyton-Jones</em></div>
<div class="tip" id="fs2">val asin : value:&#39;T -&gt; &#39;T (requires member Asin)<br /><br />Full name: Microsoft.FSharp.Core.Operators.asin</div>
<div class="tip" id="fs3">val pi : float<br /><br />Full name: Script.pi</div>
<div class="tip" id="fs4">val sin : value:&#39;T -&gt; &#39;T (requires member Sin)<br /><br />Full name: Microsoft.FSharp.Core.Operators.sin</div>
<div class="tip" id="fs5">val cos : value:&#39;T -&gt; &#39;T (requires member Cos)<br /><br />Full name: Microsoft.FSharp.Core.Operators.cos</div>
<div class="tip" id="fs6">val sqrt : value:&#39;T -&gt; &#39;U (requires member Sqrt)<br /><br />Full name: Microsoft.FSharp.Core.Operators.sqrt</div>
<div class="tip" id="fs7">val y : int</div>
<div class="tip" id="fs8">val matrix : float [] []<br /><br />Full name: Script.matrix</div>
<div class="tip" id="fs9">val pivotDivideMax : l:&#39;a [] -&gt; &#39;b [] (requires comparison and member ( / ))<br /><br />Full name: Script.pivotDivideMax</div>
<div class="tip" id="fs10">val l : &#39;a [] (requires comparison and member ( / ))</div>
<div class="tip" id="fs11">module Array<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs12">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; array:&#39;T [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.map</div>
<div class="tip" id="fs13">val x : &#39;a (requires comparison and member ( / ))</div>
<div class="tip" id="fs14">val max : array:&#39;T [] -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Array.max</div>
<div class="tip" id="fs15">val x : float</div>
<div class="tip" id="fs16">val pivotDivideMaxHigher : div:(&#39;a -&gt; &#39;a -&gt; &#39;b) -&gt; l:&#39;a [] -&gt; &#39;b [] (requires comparison)<br /><br />Full name: Script.pivotDivideMaxHigher</div>
<div class="tip" id="fs17">val div : (&#39;a -&gt; &#39;a -&gt; &#39;b) (requires comparison)</div>
<div class="tip" id="fs18">val l : &#39;a [] (requires comparison)</div>
<div class="tip" id="fs19">val x : &#39;a (requires comparison)</div>
<div class="tip" id="fs20">val y : float</div>
<div class="tip" id="fs21">val myDiv : x:&#39;a -&gt; y:&#39;a -&gt; &#39;a0 (requires member ( / ))<br /><br />Full name: Script.myDiv</div>
<div class="tip" id="fs22">val x : &#39;a (requires member ( / ))</div>
<div class="tip" id="fs23">val y : &#39;a (requires member ( / ))</div>
<div class="tip" id="fs24">val pivotDivideMax2 : l:&#39;a [] -&gt; &#39;b [] (requires member ( / ) and comparison)<br /><br />Full name: Script.pivotDivideMax2</div>
<div class="tip" id="fs25">val l : &#39;a [] (requires member ( / ) and comparison)</div>
<div class="tip" id="fs26">val rowOp : op:(&#39;a -&gt; &#39;b -&gt; &#39;c) -&gt; r1:&#39;a [] -&gt; r2:&#39;b [] -&gt; &#39;c []<br /><br />Full name: Script.rowOp</div>
<div class="tip" id="fs27">val op : (&#39;a -&gt; &#39;b -&gt; &#39;c)</div>
<div class="tip" id="fs28">val r1 : &#39;a []</div>
<div class="tip" id="fs29">val r2 : &#39;b []</div>
<div class="tip" id="fs30">val map2 : mapping:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;U) -&gt; array1:&#39;T1 [] -&gt; array2:&#39;T2 [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.map2</div>
<div class="tip" id="fs31">Multiple items<br />val unit : int<br /><br />Full name: Script.unit<br /><em><br /><br />&#160;How to locate the _position_ of an element in an Array</em><br /><br />--------------------<br />type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs32">val findIndex : predicate:(&#39;T -&gt; bool) -&gt; array:&#39;T [] -&gt; int<br /><br />Full name: Microsoft.FSharp.Collections.Array.findIndex</div>

