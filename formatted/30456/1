<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Numerics</span>

<span class="c">// I wanted to share this neat trick for making recursive types countable. Let&#39;s say you had tree of integers like so:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">Tree</span> <span class="o">=</span> 
    | <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="p">Empty</span>
    | <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="p">Node</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">BigInteger</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs3', 7)" onmouseover="showTip(event, 'fs3', 7)" class="t">Tree</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs3', 8)" onmouseover="showTip(event, 'fs3', 8)" class="t">Tree</span>

<span class="c">//  Before we continue, let&#39;s we&#39;re going to need a sqrt function for BigIntegers (Pardon the shoddy implementation)</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="t">BigInteger</span> <span class="o">=</span> <span class="k">begin</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="f">sqrt</span> (<span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">A</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="t">BigInteger</span>) <span class="o">=</span>
        <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs9', 13)" onmouseover="showTip(event, 'fs9', 13)" class="f">f</span>(<span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="i">x</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 15)" onmouseover="showTip(event, 'fs6', 15)" class="t">BigInteger</span>) (<span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="i">maxCount</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs12', 17)" onmouseover="showTip(event, 'fs12', 17)" class="t">int</span>) <span class="o">=</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 19)" onmouseover="showTip(event, 'fs8', 19)" class="i">A</span><span class="o">/</span><span onmouseout="hideTip(event, 'fs10', 20)" onmouseover="showTip(event, 'fs10', 20)" class="i">x</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="i">x&#39;</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs10', 22)" onmouseover="showTip(event, 'fs10', 22)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="i">b</span>) <span class="o">/</span> <span class="n">2I</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 24)" onmouseover="showTip(event, 'fs15', 24)" class="i">t</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 25)" onmouseover="showTip(event, 'fs16', 25)" class="f">abs</span>(<span onmouseout="hideTip(event, 'fs14', 26)" onmouseover="showTip(event, 'fs14', 26)" class="i">x&#39;</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="i">x</span>)
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 28)" onmouseover="showTip(event, 'fs17', 28)" class="i">thresh</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 29)" onmouseover="showTip(event, 'fs16', 29)" class="f">abs</span>(<span onmouseout="hideTip(event, 'fs10', 30)" onmouseover="showTip(event, 'fs10', 30)" class="i">x</span> <span class="o">/</span> <span class="n">100000000I</span>)
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs10', 31)" onmouseover="showTip(event, 'fs10', 31)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 32)" onmouseover="showTip(event, 'fs14', 32)" class="i">x&#39;</span> <span class="o">+</span> <span class="n">1I</span> <span class="o">&amp;&amp;</span> (<span onmouseout="hideTip(event, 'fs10', 33)" onmouseover="showTip(event, 'fs10', 33)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs10', 34)" onmouseover="showTip(event, 'fs10', 34)" class="i">x</span>) <span class="o">&gt;</span><span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 35)" onmouseover="showTip(event, 'fs8', 35)" class="i">A</span> <span class="o">&amp;&amp;</span> (<span onmouseout="hideTip(event, 'fs14', 36)" onmouseover="showTip(event, 'fs14', 36)" class="i">x&#39;</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs14', 37)" onmouseover="showTip(event, 'fs14', 37)" class="i">x&#39;</span>) <span class="o">&lt;=</span> <span onmouseout="hideTip(event, 'fs8', 38)" onmouseover="showTip(event, 'fs8', 38)" class="i">A</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs14', 39)" onmouseover="showTip(event, 'fs14', 39)" class="i">x&#39;</span>
            <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs10', 40)" onmouseover="showTip(event, 'fs10', 40)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 41)" onmouseover="showTip(event, 'fs14', 41)" class="i">x&#39;</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs14', 42)" onmouseover="showTip(event, 'fs14', 42)" class="i">x&#39;</span>
            <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs15', 43)" onmouseover="showTip(event, 'fs15', 43)" class="i">t</span> <span class="o">&lt;</span> <span onmouseout="hideTip(event, 'fs17', 44)" onmouseover="showTip(event, 'fs17', 44)" class="i">thresh</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs14', 45)" onmouseover="showTip(event, 'fs14', 45)" class="i">x&#39;</span>
            <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs11', 46)" onmouseover="showTip(event, 'fs11', 46)" class="i">maxCount</span> <span class="o">&lt;=</span> <span class="n">0</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs14', 47)" onmouseover="showTip(event, 'fs14', 47)" class="i">x&#39;</span>
            <span class="k">else</span> <span onmouseout="hideTip(event, 'fs9', 48)" onmouseover="showTip(event, 'fs9', 48)" class="f">f</span> <span onmouseout="hideTip(event, 'fs14', 49)" onmouseover="showTip(event, 'fs14', 49)" class="i">x&#39;</span> (<span onmouseout="hideTip(event, 'fs11', 50)" onmouseover="showTip(event, 'fs11', 50)" class="i">maxCount</span> <span class="o">-</span> <span class="n">1</span>)
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs8', 51)" onmouseover="showTip(event, 'fs8', 51)" class="i">A</span> <span class="o">=</span> <span class="n">0I</span> <span class="k">then</span> <span class="n">0I</span>
        <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs8', 52)" onmouseover="showTip(event, 'fs8', 52)" class="i">A</span> <span class="o">&lt;</span> <span class="n">4I</span> <span class="k">then</span> <span class="n">1I</span> 
        <span class="k">else</span> (<span onmouseout="hideTip(event, 'fs9', 53)" onmouseover="showTip(event, 'fs9', 53)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs8', 54)" onmouseover="showTip(event, 'fs8', 54)" class="i">A</span> <span class="o">/</span> <span class="n">2I</span>) <span class="n">1000</span>)

<span class="k">end</span>

<span class="k">module</span> <span class="t">Cantor</span> <span class="o">=</span> <span class="k">begin</span>

    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs6', 55)" onmouseover="showTip(event, 'fs6', 55)" class="i">BigInteger</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 56)" onmouseover="showTip(event, 'fs18', 56)" class="f">cantor</span>(<span onmouseout="hideTip(event, 'fs19', 57)" onmouseover="showTip(event, 'fs19', 57)" class="i">k1</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 58)" onmouseover="showTip(event, 'fs6', 58)" class="t">BigInteger</span>, <span onmouseout="hideTip(event, 'fs20', 59)" onmouseover="showTip(event, 'fs20', 59)" class="i">k2</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 60)" onmouseover="showTip(event, 'fs6', 60)" class="t">BigInteger</span>) <span class="o">=</span> 
        ((<span onmouseout="hideTip(event, 'fs19', 61)" onmouseover="showTip(event, 'fs19', 61)" class="i">k1</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs20', 62)" onmouseover="showTip(event, 'fs20', 62)" class="i">k2</span>) <span class="o">*</span> (<span onmouseout="hideTip(event, 'fs19', 63)" onmouseover="showTip(event, 'fs19', 63)" class="i">k1</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs20', 64)" onmouseover="showTip(event, 'fs20', 64)" class="i">k2</span> <span class="o">+</span> <span class="n">1I</span>) <span class="o">/</span> <span class="n">2I</span>) <span class="o">+</span> <span onmouseout="hideTip(event, 'fs20', 65)" onmouseover="showTip(event, 'fs20', 65)" class="i">k2</span>

    <span class="c">// We can write a function that will turn any integer into a unique instance of our tree type.</span>

    <span class="c">//  Let&#39;s use the Cantor&#39;s inv pairing function (https://en.wikipedia.org/wiki/Pairing_function):</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 66)" onmouseover="showTip(event, 'fs21', 66)" class="f">invCantor</span>(<span onmouseout="hideTip(event, 'fs22', 67)" onmouseover="showTip(event, 'fs22', 67)" class="i">z</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 68)" onmouseover="showTip(event, 'fs6', 68)" class="t">BigInteger</span>) <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 69)" onmouseover="showTip(event, 'fs23', 69)" class="i">w</span> <span class="o">=</span> ((<span onmouseout="hideTip(event, 'fs7', 70)" onmouseover="showTip(event, 'fs7', 70)" class="f">sqrt</span>(<span class="n">8I</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs22', 71)" onmouseover="showTip(event, 'fs22', 71)" class="i">z</span> <span class="o">+</span> <span class="n">1I</span>) <span class="o">-</span> <span class="n">1I</span>) <span class="o">/</span> <span class="n">2I</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 72)" onmouseover="showTip(event, 'fs15', 72)" class="i">t</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs23', 73)" onmouseover="showTip(event, 'fs23', 73)" class="i">w</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs23', 74)" onmouseover="showTip(event, 'fs23', 74)" class="i">w</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs23', 75)" onmouseover="showTip(event, 'fs23', 75)" class="i">w</span>) <span class="o">/</span> <span class="n">2I</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 76)" onmouseover="showTip(event, 'fs24', 76)" class="i">y</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 77)" onmouseover="showTip(event, 'fs22', 77)" class="i">z</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs15', 78)" onmouseover="showTip(event, 'fs15', 78)" class="i">t</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 79)" onmouseover="showTip(event, 'fs10', 79)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 80)" onmouseover="showTip(event, 'fs23', 80)" class="i">w</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs24', 81)" onmouseover="showTip(event, 'fs24', 81)" class="i">y</span>
        (<span onmouseout="hideTip(event, 'fs10', 82)" onmouseover="showTip(event, 'fs10', 82)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs24', 83)" onmouseover="showTip(event, 'fs24', 83)" class="i">y</span>)

    <span class="c">//  Cantor&#39;s pairing function maps all unique pairs of natural numbers to a unique natural number.  </span>
    <span class="c">//  The inverted function has the signature: int -&gt; int * int.</span>

    <span class="c">//  Using invCantor, we can make a function that maps any integer to an integer list of any size:</span>

    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs25', 84)" onmouseover="showTip(event, 'fs25', 84)" class="f">invCantorList</span> (<span onmouseout="hideTip(event, 'fs26', 85)" onmouseover="showTip(event, 'fs26', 85)" class="i">length</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs27', 86)" onmouseover="showTip(event, 'fs27', 86)" class="t">uint32</span>) (<span onmouseout="hideTip(event, 'fs28', 87)" onmouseover="showTip(event, 'fs28', 87)" class="i">n</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 88)" onmouseover="showTip(event, 'fs6', 88)" class="t">BigInteger</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs6', 89)" onmouseover="showTip(event, 'fs6', 89)" class="t">BigInteger</span> <span onmouseout="hideTip(event, 'fs29', 90)" onmouseover="showTip(event, 'fs29', 90)" class="t">list</span> <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs26', 91)" onmouseover="showTip(event, 'fs26', 91)" class="i">length</span> <span class="k">with</span>
        | <span class="n">0u</span> <span class="k">-&gt;</span> []
        | <span class="n">1u</span> <span class="k">-&gt;</span> [<span onmouseout="hideTip(event, 'fs28', 92)" onmouseover="showTip(event, 'fs28', 92)" class="i">n</span>]
        | <span onmouseout="hideTip(event, 'fs30', 93)" onmouseover="showTip(event, 'fs30', 93)" class="i">l</span> <span class="k">-&gt;</span> <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs10', 94)" onmouseover="showTip(event, 'fs10', 94)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs24', 95)" onmouseover="showTip(event, 'fs24', 95)" class="i">y</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs21', 96)" onmouseover="showTip(event, 'fs21', 96)" class="f">invCantor</span>(<span onmouseout="hideTip(event, 'fs28', 97)" onmouseover="showTip(event, 'fs28', 97)" class="i">n</span>)
               <span onmouseout="hideTip(event, 'fs10', 98)" onmouseover="showTip(event, 'fs10', 98)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs25', 99)" onmouseover="showTip(event, 'fs25', 99)" class="f">invCantorList</span> (<span onmouseout="hideTip(event, 'fs30', 100)" onmouseover="showTip(event, 'fs30', 100)" class="i">l</span> <span class="o">-</span> <span class="n">1u</span>) <span onmouseout="hideTip(event, 'fs24', 101)" onmouseover="showTip(event, 'fs24', 101)" class="i">y</span>



<span class="k">end</span>

<span class="k">open</span> <span onmouseout="hideTip(event, 'fs31', 102)" onmouseover="showTip(event, 'fs31', 102)" class="i">Cantor</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 103)" onmouseover="showTip(event, 'fs1', 103)" class="i">System</span>

<span class="c">// We&#39;re almost done. With invCantorList, we can use it to map the set of integers to our Tree type.</span>

<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs32', 104)" onmouseover="showTip(event, 'fs32', 104)" class="f">intToTree</span> (<span onmouseout="hideTip(event, 'fs28', 105)" onmouseover="showTip(event, 'fs28', 105)" class="i">n</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 106)" onmouseover="showTip(event, 'fs6', 106)" class="t">BigInteger</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 107)" onmouseover="showTip(event, 'fs3', 107)" class="t">Tree</span> <span class="o">=</span> 
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs28', 108)" onmouseover="showTip(event, 'fs28', 108)" class="i">n</span> <span class="o">=</span> <span class="n">0I</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs4', 109)" onmouseover="showTip(event, 'fs4', 109)" class="p">Empty</span>
    <span class="k">else</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs28', 110)" onmouseover="showTip(event, 'fs28', 110)" class="i">n</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 111)" onmouseover="showTip(event, 'fs28', 111)" class="i">n</span> <span class="o">-</span> <span class="n">1I</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 112)" onmouseover="showTip(event, 'fs33', 112)" class="i">max</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 113)" onmouseover="showTip(event, 'fs6', 113)" class="t">BigInteger</span>(<span onmouseout="hideTip(event, 'fs34', 114)" onmouseover="showTip(event, 'fs34', 114)" class="t">UInt32</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 115)" onmouseover="showTip(event, 'fs35', 115)" class="i">MaxValue</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 116)" onmouseover="showTip(event, 'fs36', 116)" class="i">i</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 117)" onmouseover="showTip(event, 'fs28', 117)" class="i">n</span> <span class="o">%</span> <span onmouseout="hideTip(event, 'fs33', 118)" onmouseover="showTip(event, 'fs33', 118)" class="i">max</span>
        <span class="k">let</span> [<span onmouseout="hideTip(event, 'fs10', 119)" onmouseover="showTip(event, 'fs10', 119)" class="i">x</span>;<span onmouseout="hideTip(event, 'fs24', 120)" onmouseover="showTip(event, 'fs24', 120)" class="i">y</span>;<span onmouseout="hideTip(event, 'fs22', 121)" onmouseover="showTip(event, 'fs22', 121)" class="i">z</span>] <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 122)" onmouseover="showTip(event, 'fs28', 122)" class="i">n</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs25', 123)" onmouseover="showTip(event, 'fs25', 123)" class="f">invCantorList</span> <span class="n">3u</span>
        <span onmouseout="hideTip(event, 'fs5', 124)" onmouseover="showTip(event, 'fs5', 124)" class="p">Node</span>(<span onmouseout="hideTip(event, 'fs10', 125)" onmouseover="showTip(event, 'fs10', 125)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs32', 126)" onmouseover="showTip(event, 'fs32', 126)" class="f">intToTree</span> <span onmouseout="hideTip(event, 'fs24', 127)" onmouseover="showTip(event, 'fs24', 127)" class="i">y</span>, <span onmouseout="hideTip(event, 'fs32', 128)" onmouseover="showTip(event, 'fs32', 128)" class="f">intToTree</span> <span onmouseout="hideTip(event, 'fs22', 129)" onmouseover="showTip(event, 'fs22', 129)" class="i">z</span>)

<span class="c">// Now you have a predictable and deterministic method for enumerating test cases for recursive types.</span>

[ <span class="k">for</span> <span onmouseout="hideTip(event, 'fs10', 130)" onmouseover="showTip(event, 'fs10', 130)" class="i">x</span> <span class="k">in</span> <span class="n">0I</span><span class="o">..</span><span class="n">10000I</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 131)" onmouseover="showTip(event, 'fs10', 131)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs32', 132)" onmouseover="showTip(event, 'fs32', 132)" class="f">intToTree</span> <span onmouseout="hideTip(event, 'fs10', 133)" onmouseover="showTip(event, 'fs10', 133)" class="i">x</span> ] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs37', 134)" onmouseover="showTip(event, 'fs37', 134)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 135)" onmouseover="showTip(event, 'fs38', 135)" class="f">iter</span> (<span onmouseout="hideTip(event, 'fs39', 136)" onmouseover="showTip(event, 'fs39', 136)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Numerics</div>
<div class="tip" id="fs3">type Tree =<br />&#160;&#160;| Empty<br />&#160;&#160;| Node of BigInteger * Tree * Tree<br /><br />Full name: Script.Tree</div>
<div class="tip" id="fs4">union case Tree.Empty: Tree</div>
<div class="tip" id="fs5">union case Tree.Node: BigInteger * Tree * Tree -&gt; Tree</div>
<div class="tip" id="fs6">Multiple items<br />type BigInteger =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;new : value:int -&gt; BigInteger + 7 overloads<br />&#160;&#160;&#160;&#160;member CompareTo : other:int64 -&gt; int + 3 overloads<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 3 overloads<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member IsEven : bool<br />&#160;&#160;&#160;&#160;member IsOne : bool<br />&#160;&#160;&#160;&#160;member IsPowerOfTwo : bool<br />&#160;&#160;&#160;&#160;member IsZero : bool<br />&#160;&#160;&#160;&#160;member Sign : int<br />&#160;&#160;&#160;&#160;member ToByteArray : unit -&gt; byte[]<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Numerics.BigInteger<br /><br />--------------------<br />BigInteger()<br />BigInteger(value: int) : unit<br />BigInteger(value: uint32) : unit<br />BigInteger(value: int64) : unit<br />BigInteger(value: uint64) : unit<br />BigInteger(value: float32) : unit<br />BigInteger(value: float) : unit<br />BigInteger(value: decimal) : unit<br />BigInteger(value: byte []) : unit</div>
<div class="tip" id="fs7">val sqrt : A:BigInteger -&gt; BigInteger<br /><br />Full name: Script.BigInteger.sqrt</div>
<div class="tip" id="fs8">val A : BigInteger</div>
<div class="tip" id="fs9">val f : (BigInteger -&gt; int -&gt; BigInteger)</div>
<div class="tip" id="fs10">val x : BigInteger</div>
<div class="tip" id="fs11">val maxCount : int</div>
<div class="tip" id="fs12">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs13">val b : BigInteger</div>
<div class="tip" id="fs14">val x&#39; : BigInteger</div>
<div class="tip" id="fs15">val t : BigInteger</div>
<div class="tip" id="fs16">val abs : value:&#39;T -&gt; &#39;T (requires member Abs)<br /><br />Full name: Microsoft.FSharp.Core.Operators.abs</div>
<div class="tip" id="fs17">val thresh : BigInteger</div>
<div class="tip" id="fs18">val cantor : k1:BigInteger * k2:BigInteger -&gt; BigInteger<br /><br />Full name: Script.Cantor.cantor</div>
<div class="tip" id="fs19">val k1 : BigInteger</div>
<div class="tip" id="fs20">val k2 : BigInteger</div>
<div class="tip" id="fs21">val invCantor : z:BigInteger -&gt; BigInteger * BigInteger<br /><br />Full name: Script.Cantor.invCantor</div>
<div class="tip" id="fs22">val z : BigInteger</div>
<div class="tip" id="fs23">val w : BigInteger</div>
<div class="tip" id="fs24">val y : BigInteger</div>
<div class="tip" id="fs25">val invCantorList : length:uint32 -&gt; n:BigInteger -&gt; BigInteger list<br /><br />Full name: Script.Cantor.invCantorList</div>
<div class="tip" id="fs26">val length : uint32</div>
<div class="tip" id="fs27">Multiple items<br />val uint32 : value:&#39;T -&gt; uint32 (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.uint32<br /><br />--------------------<br />type uint32 = System.UInt32<br /><br />Full name: Microsoft.FSharp.Core.uint32</div>
<div class="tip" id="fs28">val n : BigInteger</div>
<div class="tip" id="fs29">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs30">val l : uint32</div>
<div class="tip" id="fs31">module Cantor<br /><br />from Script</div>
<div class="tip" id="fs32">val intToTree : n:BigInteger -&gt; Tree<br /><br />Full name: Script.intToTree</div>
<div class="tip" id="fs33">val max : BigInteger</div>
<div class="tip" id="fs34">type UInt32 =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 3 overloads<br />&#160;&#160;&#160;&#160;static val MaxValue : uint32<br />&#160;&#160;&#160;&#160;static val MinValue : uint32<br />&#160;&#160;&#160;&#160;static member Parse : s:string -&gt; uint32 + 3 overloads<br />&#160;&#160;&#160;&#160;static member TryParse : s:string * result:uint32 -&gt; bool + 1 overload<br />&#160;&#160;end<br /><br />Full name: System.UInt32</div>
<div class="tip" id="fs35">field uint32.MaxValue = 4294967295u</div>
<div class="tip" id="fs36">val i : BigInteger</div>
<div class="tip" id="fs37">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member GetSlice : startIndex:int option * endIndex:int option -&gt; &#39;T list<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs38">val iter : action:(&#39;T -&gt; unit) -&gt; list:&#39;T list -&gt; unit<br /><br />Full name: Microsoft.FSharp.Collections.List.iter</div>
<div class="tip" id="fs39">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

