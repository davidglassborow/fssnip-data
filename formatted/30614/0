<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
<span class="l">81: </span>
<span class="l">82: </span>
<span class="l">83: </span>
<span class="l">84: </span>
<span class="l">85: </span>
<span class="l">86: </span>
<span class="l">87: </span>
<span class="l">88: </span>
<span class="l">89: </span>
<span class="l">90: </span>
<span class="l">91: </span>
<span class="l">92: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Canonical list definition, just for comparison.</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">List</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">item</span><span class="o">&gt;</span> <span class="o">=</span>
    | <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="p">Cons</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">item</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">List</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">item</span><span class="o">&gt;</span>
    | <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="p">Nil</span>

<span class="c">/// A link consists of an item followed by a tail of some type.</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">Link</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">item</span>, <span class="o">&#39;</span><span class="i">tail</span><span class="o">&gt;</span> <span class="o">=</span>

    <span class="c">/// Just like Cons, but not recursive.</span>
    | <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="p">Link</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">item</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">tail</span>

    <span class="c">/// Just like Nil.</span>
    | <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="p">Done</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">Link</span> <span class="o">=</span>

    <span class="c">/// An example of length 0.</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">example0</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 10)" onmouseover="showTip(event, 'fs6', 10)" class="p">Done</span>

    <span class="c">/// An example of length 1.</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="i">example1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 12)" onmouseover="showTip(event, 'fs5', 12)" class="p">Link</span> (<span class="s">&#39;A&#39;</span>, <span onmouseout="hideTip(event, 'fs6', 13)" onmouseover="showTip(event, 'fs6', 13)" class="p">Done</span>)

    <span class="c">/// An example of length 2.</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="i">example2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="p">Link</span> (<span class="s">&#39;A&#39;</span>, <span onmouseout="hideTip(event, 'fs5', 16)" onmouseover="showTip(event, 'fs5', 16)" class="p">Link</span> (<span class="s">&#39;B&#39;</span>, <span onmouseout="hideTip(event, 'fs6', 17)" onmouseover="showTip(event, 'fs6', 17)" class="p">Done</span>))

    <span class="c">/// We can map over a link (which means it&#39;s a functor). Since the item</span>
    <span class="c">/// and the tail are two different types, we choose to leave the item</span>
    <span class="c">/// alone and map over the tail.</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="f">map</span> <span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="f">f</span> <span class="o">=</span> <span class="k">function</span>
        | <span onmouseout="hideTip(event, 'fs5', 20)" onmouseover="showTip(event, 'fs5', 20)" class="p">Link</span> (<span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">item</span>, <span onmouseout="hideTip(event, 'fs14', 22)" onmouseover="showTip(event, 'fs14', 22)" class="i">tail</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs5', 23)" onmouseover="showTip(event, 'fs5', 23)" class="p">Link</span> (<span onmouseout="hideTip(event, 'fs13', 24)" onmouseover="showTip(event, 'fs13', 24)" class="i">item</span>, <span onmouseout="hideTip(event, 'fs12', 25)" onmouseover="showTip(event, 'fs12', 25)" class="f">f</span> <span onmouseout="hideTip(event, 'fs14', 26)" onmouseover="showTip(event, 'fs14', 26)" class="i">tail</span>)
        | <span onmouseout="hideTip(event, 'fs6', 27)" onmouseover="showTip(event, 'fs6', 27)" class="p">Done</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs6', 28)" onmouseover="showTip(event, 'fs6', 28)" class="p">Done</span>

<span class="c">/// A recursive chain of links (i.e. its free monad).</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs15', 29)" onmouseover="showTip(event, 'fs15', 29)" class="t">Chain</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">item</span>, <span class="o">&#39;</span><span class="i">next</span><span class="o">&gt;</span> <span class="o">=</span>

    <span class="c">/// Link&#39;s &quot;fixed point&quot;.</span>
    | <span onmouseout="hideTip(event, 'fs16', 30)" onmouseover="showTip(event, 'fs16', 30)" class="p">Free</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs17', 31)" onmouseover="showTip(event, 'fs17', 31)" class="t">Link</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">item</span>, <span onmouseout="hideTip(event, 'fs15', 32)" onmouseover="showTip(event, 'fs15', 32)" class="t">Chain</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">item</span>, <span class="o">&#39;</span><span class="i">next</span><span class="o">&gt;</span><span class="o">&gt;</span>

    <span class="c">/// Lifts a value directly into the monad.</span>
    | <span onmouseout="hideTip(event, 'fs18', 33)" onmouseover="showTip(event, 'fs18', 33)" class="p">Pure</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">next</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs15', 34)" onmouseover="showTip(event, 'fs15', 34)" class="t">Chain</span> <span class="o">=</span>

    <span class="c">/// Binds two chains together.</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="f">bind</span> <span onmouseout="hideTip(event, 'fs20', 36)" onmouseover="showTip(event, 'fs20', 36)" class="f">f</span> <span class="o">=</span> <span class="k">function</span>
        | <span onmouseout="hideTip(event, 'fs16', 37)" onmouseover="showTip(event, 'fs16', 37)" class="p">Free</span> <span onmouseout="hideTip(event, 'fs21', 38)" onmouseover="showTip(event, 'fs21', 38)" class="i">link</span> <span class="k">-&gt;</span>
            <span onmouseout="hideTip(event, 'fs21', 39)" onmouseover="showTip(event, 'fs21', 39)" class="i">link</span>
                <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs17', 40)" onmouseover="showTip(event, 'fs17', 40)" class="t">Link</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 41)" onmouseover="showTip(event, 'fs11', 41)" class="f">map</span> (<span onmouseout="hideTip(event, 'fs19', 42)" onmouseover="showTip(event, 'fs19', 42)" class="f">bind</span> <span onmouseout="hideTip(event, 'fs20', 43)" onmouseover="showTip(event, 'fs20', 43)" class="f">f</span>)   <span class="c">// pass the given function along to the next link</span>
                <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs16', 44)" onmouseover="showTip(event, 'fs16', 44)" class="p">Free</span>
        | <span onmouseout="hideTip(event, 'fs18', 45)" onmouseover="showTip(event, 'fs18', 45)" class="p">Pure</span> <span onmouseout="hideTip(event, 'fs22', 46)" onmouseover="showTip(event, 'fs22', 46)" class="i">next</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 47)" onmouseover="showTip(event, 'fs20', 47)" class="f">f</span> <span onmouseout="hideTip(event, 'fs22', 48)" onmouseover="showTip(event, 'fs22', 48)" class="i">next</span>          <span class="c">// we&#39;re at the end: glue the two chains together</span>

<span class="c">/// Workflow builder for chains.</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs23', 49)" onmouseover="showTip(event, 'fs23', 49)" class="t">ChainBuilder</span>() <span class="o">=</span>
    <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 50)" onmouseover="showTip(event, 'fs24', 50)" class="f">Bind</span>(<span onmouseout="hideTip(event, 'fs25', 51)" onmouseover="showTip(event, 'fs25', 51)" class="i">chain</span>, <span onmouseout="hideTip(event, 'fs26', 52)" onmouseover="showTip(event, 'fs26', 52)" class="f">func</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs25', 53)" onmouseover="showTip(event, 'fs25', 53)" class="i">chain</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs27', 54)" onmouseover="showTip(event, 'fs27', 54)" class="t">Chain</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 55)" onmouseover="showTip(event, 'fs19', 55)" class="f">bind</span> <span onmouseout="hideTip(event, 'fs26', 56)" onmouseover="showTip(event, 'fs26', 56)" class="f">func</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 57)" onmouseover="showTip(event, 'fs28', 57)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 58)" onmouseover="showTip(event, 'fs29', 58)" class="f">Return</span>(<span onmouseout="hideTip(event, 'fs30', 59)" onmouseover="showTip(event, 'fs30', 59)" class="i">value</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 60)" onmouseover="showTip(event, 'fs18', 60)" class="p">Pure</span> <span onmouseout="hideTip(event, 'fs30', 61)" onmouseover="showTip(event, 'fs30', 61)" class="i">value</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 62)" onmouseover="showTip(event, 'fs28', 62)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 63)" onmouseover="showTip(event, 'fs31', 63)" class="f">ReturnFrom</span>(<span onmouseout="hideTip(event, 'fs32', 64)" onmouseover="showTip(event, 'fs32', 64)" class="i">value</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs32', 65)" onmouseover="showTip(event, 'fs32', 65)" class="i">value</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 66)" onmouseover="showTip(event, 'fs28', 66)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 67)" onmouseover="showTip(event, 'fs33', 67)" class="f">Zero</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 68)" onmouseover="showTip(event, 'fs18', 68)" class="p">Pure</span> ()

<span class="c">/// Workflow builder for chains.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 69)" onmouseover="showTip(event, 'fs34', 69)" class="i">chain</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 70)" onmouseover="showTip(event, 'fs23', 70)" class="t">ChainBuilder</span>()

<span class="c">/// Creates a one-link chain with the given item, ready for binding.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 71)" onmouseover="showTip(event, 'fs35', 71)" class="f">toChain</span> <span onmouseout="hideTip(event, 'fs36', 72)" onmouseover="showTip(event, 'fs36', 72)" class="i">item</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 73)" onmouseover="showTip(event, 'fs16', 73)" class="p">Free</span> (<span onmouseout="hideTip(event, 'fs17', 74)" onmouseover="showTip(event, 'fs17', 74)" class="p">Link</span> (<span onmouseout="hideTip(event, 'fs36', 75)" onmouseover="showTip(event, 'fs36', 75)" class="i">item</span>, <span onmouseout="hideTip(event, 'fs18', 76)" onmouseover="showTip(event, 'fs18', 76)" class="p">Pure</span> ()))

<span class="c">/// Example: Creates a chain the verbose way.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 77)" onmouseover="showTip(event, 'fs37', 77)" class="i">chainPlain</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs35', 78)" onmouseover="showTip(event, 'fs35', 78)" class="f">toChain</span> <span class="s">&#39;A&#39;</span>
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs27', 79)" onmouseover="showTip(event, 'fs27', 79)" class="t">Chain</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 80)" onmouseover="showTip(event, 'fs19', 80)" class="f">bind</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs35', 81)" onmouseover="showTip(event, 'fs35', 81)" class="f">toChain</span> <span class="s">&#39;B&#39;</span>)   <span class="c">// replace chain A&#39;s tail with chain B</span>

<span class="c">/// Example: Creates a chain using the builder.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 82)" onmouseover="showTip(event, 'fs38', 82)" class="i">chainSugar</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs34', 83)" onmouseover="showTip(event, 'fs34', 83)" class="i">chain</span> {
        <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs35', 84)" onmouseover="showTip(event, 'fs35', 84)" class="f">toChain</span> <span class="s">&#39;A&#39;</span>
        <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs35', 85)" onmouseover="showTip(event, 'fs35', 85)" class="f">toChain</span> <span class="s">&#39;B&#39;</span>
        <span class="k">return</span> ()
    }

<span class="c">/// These two chains are the same.</span>
<span class="c">///</span>
<span class="c">/// Output:</span>
<span class="c">/// Free (Link (&#39;A&#39;, Free (Link (&#39;B&#39;, Pure ()))))</span>
<span class="c">/// Free (Link (&#39;A&#39;, Free (Link (&#39;B&#39;, Pure ()))))</span>
[&lt;<span onmouseout="hideTip(event, 'fs39', 86)" onmouseover="showTip(event, 'fs39', 86)" class="t">EntryPoint</span>&gt;]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 87)" onmouseover="showTip(event, 'fs40', 87)" class="f">main</span> <span onmouseout="hideTip(event, 'fs41', 88)" onmouseover="showTip(event, 'fs41', 88)" class="i">argv</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs42', 89)" onmouseover="showTip(event, 'fs42', 89)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs37', 90)" onmouseover="showTip(event, 'fs37', 90)" class="i">chainPlain</span>
    <span onmouseout="hideTip(event, 'fs42', 91)" onmouseover="showTip(event, 'fs42', 91)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs38', 92)" onmouseover="showTip(event, 'fs38', 92)" class="i">chainSugar</span>
    <span class="n">0</span>

<span class="c">// For more information:</span>
<span class="c">// * http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html</span>
<span class="c">// * https://blog.ploeh.dk/2017/08/07/f-free-monad-recipe/</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member GetSlice : startIndex:int option * endIndex:int option -&gt; &#39;T list<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs2">union case List.Cons: &#39;item * List&lt;&#39;item&gt; -&gt; List&lt;&#39;item&gt;</div>
<div class="tip" id="fs3">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;item&gt; =<br />&#160;&#160;| Cons of &#39;item * List&lt;&#39;item&gt;<br />&#160;&#160;| Nil<br /><br />Full name: Script.List&lt;_&gt;<br /><em><br /><br />&#160;Canonical list definition, just for comparison.</em></div>
<div class="tip" id="fs4">union case List.Nil: List&lt;&#39;item&gt;</div>
<div class="tip" id="fs5">Multiple items<br />union case Link.Link: &#39;item * &#39;tail -&gt; Link&lt;&#39;item,&#39;tail&gt;<br /><em><br /><br />&#160;Just like Cons, but not recursive.</em><br /><br />--------------------<br />type Link&lt;&#39;item,&#39;tail&gt; =<br />&#160;&#160;| Link of &#39;item * &#39;tail<br />&#160;&#160;| Done<br /><br />Full name: Script.Link&lt;_,_&gt;<br /><em><br /><br />&#160;A link consists of an item followed by a tail of some type.</em></div>
<div class="tip" id="fs6">union case Link.Done: Link&lt;&#39;item,&#39;tail&gt;<br /><em><br /><br />&#160;Just like Nil.</em></div>
<div class="tip" id="fs7">type Link&lt;&#39;item,&#39;tail&gt; =<br />&#160;&#160;| Link of &#39;item * &#39;tail<br />&#160;&#160;| Done<br /><br />Full name: Script.Link&lt;_,_&gt;<br /><em><br /><br />&#160;A link consists of an item followed by a tail of some type.</em></div>
<div class="tip" id="fs8">val example0 : Link&lt;&#39;a,&#39;b&gt;<br /><br />Full name: Script.Link.example0<br /><em><br /><br />&#160;An example of length 0.</em></div>
<div class="tip" id="fs9">val example1 : Link&lt;char,Link&lt;&#39;a,&#39;b&gt;&gt;<br /><br />Full name: Script.Link.example1<br /><em><br /><br />&#160;An example of length 1.</em></div>
<div class="tip" id="fs10">val example2 : Link&lt;char,Link&lt;char,Link&lt;&#39;a,&#39;b&gt;&gt;&gt;<br /><br />Full name: Script.Link.example2<br /><em><br /><br />&#160;An example of length 2.</em></div>
<div class="tip" id="fs11">val map : f:(&#39;a -&gt; &#39;b) -&gt; _arg1:Link&lt;&#39;c,&#39;a&gt; -&gt; Link&lt;&#39;c,&#39;b&gt;<br /><br />Full name: Script.Link.map<br /><em><br /><br />&#160;We can map over a link (which means it&#39;s a functor). Since the item<br />&#160;and the tail are two different types, we choose to leave the item<br />&#160;alone and map over the tail.</em></div>
<div class="tip" id="fs12">val f : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs13">val item : &#39;c</div>
<div class="tip" id="fs14">val tail : &#39;a</div>
<div class="tip" id="fs15">type Chain&lt;&#39;item,&#39;next&gt; =<br />&#160;&#160;| Free of Link&lt;&#39;item,Chain&lt;&#39;item,&#39;next&gt;&gt;<br />&#160;&#160;| Pure of &#39;next<br /><br />Full name: Script.Chain&lt;_,_&gt;<br /><em><br /><br />&#160;A recursive chain of links (i.e. its free monad).</em></div>
<div class="tip" id="fs16">union case Chain.Free: Link&lt;&#39;item,Chain&lt;&#39;item,&#39;next&gt;&gt; -&gt; Chain&lt;&#39;item,&#39;next&gt;<br /><em><br /><br />&#160;Link&#39;s &quot;fixed point&quot;.</em></div>
<div class="tip" id="fs17">Multiple items<br />union case Link.Link: &#39;item * &#39;tail -&gt; Link&lt;&#39;item,&#39;tail&gt;<br /><em><br /><br />&#160;Just like Cons, but not recursive.</em><br /><br />--------------------<br />module Link<br /><br />from Script<br /><br />--------------------<br />type Link&lt;&#39;item,&#39;tail&gt; =<br />&#160;&#160;| Link of &#39;item * &#39;tail<br />&#160;&#160;| Done<br /><br />Full name: Script.Link&lt;_,_&gt;<br /><em><br /><br />&#160;A link consists of an item followed by a tail of some type.</em></div>
<div class="tip" id="fs18">union case Chain.Pure: &#39;next -&gt; Chain&lt;&#39;item,&#39;next&gt;<br /><em><br /><br />&#160;Lifts a value directly into the monad.</em></div>
<div class="tip" id="fs19">val bind : f:(&#39;a -&gt; Chain&lt;&#39;b,&#39;c&gt;) -&gt; _arg1:Chain&lt;&#39;b,&#39;a&gt; -&gt; Chain&lt;&#39;b,&#39;c&gt;<br /><br />Full name: Script.Chain.bind<br /><em><br /><br />&#160;Binds two chains together.</em></div>
<div class="tip" id="fs20">val f : (&#39;a -&gt; Chain&lt;&#39;b,&#39;c&gt;)</div>
<div class="tip" id="fs21">val link : Link&lt;&#39;b,Chain&lt;&#39;b,&#39;a&gt;&gt;</div>
<div class="tip" id="fs22">val next : &#39;a</div>
<div class="tip" id="fs23">Multiple items<br />type ChainBuilder =<br />&#160;&#160;new : unit -&gt; ChainBuilder<br />&#160;&#160;member Bind : chain:Chain&lt;&#39;e,&#39;f&gt; * func:(&#39;f -&gt; Chain&lt;&#39;e,&#39;g&gt;) -&gt; Chain&lt;&#39;e,&#39;g&gt;<br />&#160;&#160;member Return : value:&#39;c -&gt; Chain&lt;&#39;d,&#39;c&gt;<br />&#160;&#160;member ReturnFrom : value:&#39;b -&gt; &#39;b<br />&#160;&#160;member Zero : unit -&gt; Chain&lt;&#39;a,unit&gt;<br /><br />Full name: Script.ChainBuilder<br /><em><br /><br />&#160;Workflow builder for chains.</em><br /><br />--------------------<br />new : unit -&gt; ChainBuilder</div>
<div class="tip" id="fs24">member ChainBuilder.Bind : chain:Chain&lt;&#39;e,&#39;f&gt; * func:(&#39;f -&gt; Chain&lt;&#39;e,&#39;g&gt;) -&gt; Chain&lt;&#39;e,&#39;g&gt;<br /><br />Full name: Script.ChainBuilder.Bind</div>
<div class="tip" id="fs25">val chain : Chain&lt;&#39;e,&#39;f&gt;</div>
<div class="tip" id="fs26">val func : (&#39;f -&gt; Chain&lt;&#39;e,&#39;g&gt;)</div>
<div class="tip" id="fs27">Multiple items<br />module Chain<br /><br />from Script<br /><br />--------------------<br />type Chain&lt;&#39;item,&#39;next&gt; =<br />&#160;&#160;| Free of Link&lt;&#39;item,Chain&lt;&#39;item,&#39;next&gt;&gt;<br />&#160;&#160;| Pure of &#39;next<br /><br />Full name: Script.Chain&lt;_,_&gt;<br /><em><br /><br />&#160;A recursive chain of links (i.e. its free monad).</em></div>
<div class="tip" id="fs28">val __ : ChainBuilder</div>
<div class="tip" id="fs29">member ChainBuilder.Return : value:&#39;c -&gt; Chain&lt;&#39;d,&#39;c&gt;<br /><br />Full name: Script.ChainBuilder.Return</div>
<div class="tip" id="fs30">val value : &#39;c</div>
<div class="tip" id="fs31">member ChainBuilder.ReturnFrom : value:&#39;b -&gt; &#39;b<br /><br />Full name: Script.ChainBuilder.ReturnFrom</div>
<div class="tip" id="fs32">val value : &#39;b</div>
<div class="tip" id="fs33">member ChainBuilder.Zero : unit -&gt; Chain&lt;&#39;a,unit&gt;<br /><br />Full name: Script.ChainBuilder.Zero</div>
<div class="tip" id="fs34">val chain : ChainBuilder<br /><br />Full name: Script.chain<br /><em><br /><br />&#160;Workflow builder for chains.</em></div>
<div class="tip" id="fs35">val toChain : item:&#39;a -&gt; Chain&lt;&#39;a,unit&gt;<br /><br />Full name: Script.toChain<br /><em><br /><br />&#160;Creates a one-link chain with the given item, ready for binding.</em></div>
<div class="tip" id="fs36">val item : &#39;a</div>
<div class="tip" id="fs37">val chainPlain : Chain&lt;char,unit&gt;<br /><br />Full name: Script.chainPlain<br /><em><br /><br />&#160;Example: Creates a chain the verbose way.</em></div>
<div class="tip" id="fs38">val chainSugar : Chain&lt;char,unit&gt;<br /><br />Full name: Script.chainSugar<br /><em><br /><br />&#160;Example: Creates a chain using the builder.</em></div>
<div class="tip" id="fs39">Multiple items<br />type EntryPointAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; EntryPointAttribute<br /><br />Full name: Microsoft.FSharp.Core.EntryPointAttribute<br /><br />--------------------<br />new : unit -&gt; EntryPointAttribute</div>
<div class="tip" id="fs40">val main : argv:string [] -&gt; int<br /><br />Full name: Script.main<br /><em><br /><br />&#160;These two chains are the same.<br /><br />&#160;Output:<br />&#160;Free (Link (&#39;A&#39;, Free (Link (&#39;B&#39;, Pure ()))))<br />&#160;Free (Link (&#39;A&#39;, Free (Link (&#39;B&#39;, Pure ()))))</em></div>
<div class="tip" id="fs41">val argv : string []</div>
<div class="tip" id="fs42">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

