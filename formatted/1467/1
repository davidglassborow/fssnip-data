<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="prep">#if</span> <span class="i">INTERACTIVE</span>
<span class="inactive">#r</span><span class="inactive"> </span><span class="inactive">&quot;FSharp.Data.dll&quot;</span>
<span class="inactive">#r</span><span class="inactive"> </span><span class="inactive">&quot;FSharp.Data.DesignTime.dll&quot;</span>
<span class="prep">#endif</span>

<span class="c">// NOTE: This code is using the type provider internals and so it needs</span>
<span class="c">// reference to both &quot;FSharp.Data.dll&quot; and &quot;FSharp.Data.DesignTime.dll&quot;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Data</span>
<span class="k">open</span> <span class="i">ProviderImplementation</span>

<span class="c">// Initialize the type provider &amp; get ITypeProvider implementation</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">loc</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs2', 6)" onmouseover="showTip(event, 'fs2', 6)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 7)" onmouseover="showTip(event, 'fs3', 7)" class="i">Data</span><span class="o">.</span><span class="i">CsvFile</span><span class="o">&gt;</span><span class="o">.</span><span class="i">Assembly</span><span class="o">.</span><span class="i">Location</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="f">fl</span> _ <span class="o">=</span> <span class="k">false</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="i">config</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">CompilerServices</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="t">TypeProviderConfig</span>(<span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="f">fl</span>, <span class="i">RuntimeAssembly</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs4', 13)" onmouseover="showTip(event, 'fs4', 13)" class="i">loc</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="i">fb</span> <span class="o">=</span> <span class="k">new</span> <span class="i">FreebaseTypeProvider</span>(<span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="i">config</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="i">tp</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="i">fb</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs8', 18)" onmouseover="showTip(event, 'fs8', 18)" class="i">CompilerServices</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="t">ITypeProvider</span>)

<span class="c">// Given a System.Type, get the names of all its nested </span>
<span class="c">// types (recursively until &#39;level&#39; reaches zero)</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs13', 20)" onmouseover="showTip(event, 'fs13', 20)" class="f">getTypeNames</span> <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="i">level</span> (<span onmouseout="hideTip(event, 'fs15', 22)" onmouseover="showTip(event, 'fs15', 22)" class="i">typ</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 23)" onmouseover="showTip(event, 'fs1', 23)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="t">Type</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="i">seq</span> {
  <span class="k">for</span> <span onmouseout="hideTip(event, 'fs18', 26)" onmouseover="showTip(event, 'fs18', 26)" class="i">nested</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs15', 27)" onmouseover="showTip(event, 'fs15', 27)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 28)" onmouseover="showTip(event, 'fs19', 28)" class="f">GetNestedTypes</span>() <span class="k">do</span>
    <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs18', 29)" onmouseover="showTip(event, 'fs18', 29)" class="i">nested</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 30)" onmouseover="showTip(event, 'fs20', 30)" class="i">Name</span> 
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs14', 31)" onmouseover="showTip(event, 'fs14', 31)" class="i">level</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="k">then</span> 
      <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs13', 32)" onmouseover="showTip(event, 'fs13', 32)" class="f">getTypeNames</span> (<span onmouseout="hideTip(event, 'fs14', 33)" onmouseover="showTip(event, 'fs14', 33)" class="i">level</span> <span class="o">-</span> <span class="n">1</span>) <span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="i">nested</span> }

<span class="c">// Get the types in the Freebase namespace </span>
<span class="c">// (recursively using &#39;getTypeNames&#39;)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 35)" onmouseover="showTip(event, 'fs21', 35)" class="f">getFreebaseTypes</span> <span onmouseout="hideTip(event, 'fs14', 36)" onmouseover="showTip(event, 'fs14', 36)" class="i">level</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs22', 37)" onmouseover="showTip(event, 'fs22', 37)" class="f">set</span> [ <span class="k">for</span> <span onmouseout="hideTip(event, 'fs23', 38)" onmouseover="showTip(event, 'fs23', 38)" class="i">ns</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs11', 39)" onmouseover="showTip(event, 'fs11', 39)" class="i">tp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 40)" onmouseover="showTip(event, 'fs24', 40)" class="f">GetNamespaces</span>() <span class="k">do</span>
          <span class="k">for</span> <span onmouseout="hideTip(event, 'fs25', 41)" onmouseover="showTip(event, 'fs25', 41)" class="i">t</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs23', 42)" onmouseover="showTip(event, 'fs23', 42)" class="i">ns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 43)" onmouseover="showTip(event, 'fs26', 43)" class="f">GetTypes</span>() <span class="k">do</span>
            <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs25', 44)" onmouseover="showTip(event, 'fs25', 44)" class="i">t</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs13', 45)" onmouseover="showTip(event, 'fs13', 45)" class="f">getTypeNames</span> <span onmouseout="hideTip(event, 'fs14', 46)" onmouseover="showTip(event, 'fs14', 46)" class="i">level</span> ]

<span class="c">// For &quot;level=2&quot;, this returns reasonable type names</span>
<span class="c">// (representing the different entities in Freebase)</span>
<span class="k">for</span> <span onmouseout="hideTip(event, 'fs27', 47)" onmouseover="showTip(event, 'fs27', 47)" class="i">n</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs21', 48)" onmouseover="showTip(event, 'fs21', 48)" class="f">getFreebaseTypes</span> <span class="n">2</span> <span class="k">do</span> 
  <span onmouseout="hideTip(event, 'fs28', 49)" onmouseover="showTip(event, 'fs28', 49)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs27', 50)" onmouseover="showTip(event, 'fs27', 50)" class="i">n</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace Microsoft.FSharp</div>
<div class="tip" id="fs3">namespace Microsoft.FSharp.Data</div>
<div class="tip" id="fs4">val loc : string<br /><br />Full name: Script.loc</div>
<div class="tip" id="fs5">val typeof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs6">val fl : &#39;a -&gt; bool<br /><br />Full name: Script.fl</div>
<div class="tip" id="fs7">val config : CompilerServices.TypeProviderConfig<br /><br />Full name: Script.config</div>
<div class="tip" id="fs8">namespace Microsoft.FSharp.Core.CompilerServices</div>
<div class="tip" id="fs9">Multiple items<br />type TypeProviderConfig =<br />&#160;&#160;new : systemRuntimeContainsType:(string -&gt; bool) -&gt; TypeProviderConfig<br />&#160;&#160;member SystemRuntimeContainsType : string -&gt; bool<br />&#160;&#160;member IsHostedExecution : bool<br />&#160;&#160;member IsInvalidationSupported : bool<br />&#160;&#160;member ReferencedAssemblies : string []<br />&#160;&#160;member ResolutionFolder : string<br />&#160;&#160;member RuntimeAssembly : string<br />&#160;&#160;member SystemRuntimeAssemblyVersion : Version<br />&#160;&#160;member TemporaryFolder : string<br />&#160;&#160;member IsHostedExecution : bool with set<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Core.CompilerServices.TypeProviderConfig<br /><br />--------------------<br />new : systemRuntimeContainsType:(string -&gt; bool) -&gt; CompilerServices.TypeProviderConfig</div>
<div class="tip" id="fs10">val fb : CompilerServices.ITypeProvider<br /><br />Full name: Script.fb</div>
<div class="tip" id="fs11">val tp : CompilerServices.ITypeProvider<br /><br />Full name: Script.tp</div>
<div class="tip" id="fs12">type ITypeProvider =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;inherit IDisposable<br />&#160;&#160;&#160;&#160;abstract member ApplyStaticArguments : typeWithoutArguments:Type * typePathWithArguments:string [] * staticArguments:obj [] -&gt; Type<br />&#160;&#160;&#160;&#160;abstract member GetGeneratedAssemblyContents : assembly:Assembly -&gt; byte []<br />&#160;&#160;&#160;&#160;abstract member GetInvokerExpression : syntheticMethodBase:MethodBase * parameters:Expr [] -&gt; Expr<br />&#160;&#160;&#160;&#160;abstract member GetNamespaces : unit -&gt; IProvidedNamespace []<br />&#160;&#160;&#160;&#160;abstract member GetStaticParameters : typeWithoutArguments:Type -&gt; ParameterInfo []<br />&#160;&#160;&#160;&#160;abstract member add_Invalidate : EventHandler -&gt; unit<br />&#160;&#160;&#160;&#160;abstract member Invalidate : IEvent&lt;EventHandler,EventArgs&gt;<br />&#160;&#160;&#160;&#160;abstract member remove_Invalidate : EventHandler -&gt; unit<br />&#160;&#160;end<br /><br />Full name: Microsoft.FSharp.Core.CompilerServices.ITypeProvider</div>
<div class="tip" id="fs13">val getTypeNames : level:int -&gt; typ:Type -&gt; seq&lt;string&gt;<br /><br />Full name: Script.getTypeNames</div>
<div class="tip" id="fs14">val level : int</div>
<div class="tip" id="fs15">val typ : Type</div>
<div class="tip" id="fs16">type Type =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Assembly : Assembly<br />&#160;&#160;member AssemblyQualifiedName : string<br />&#160;&#160;member Attributes : TypeAttributes<br />&#160;&#160;member BaseType : Type<br />&#160;&#160;member ContainsGenericParameters : bool<br />&#160;&#160;member DeclaringMethod : MethodBase<br />&#160;&#160;member DeclaringType : Type<br />&#160;&#160;member Equals : o:obj -&gt; bool + 1 overload<br />&#160;&#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&gt; Type[]<br />&#160;&#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&gt; MemberInfo[]<br />&#160;&#160;...<br /><br />Full name: System.Type</div>
<div class="tip" id="fs17">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs18">val nested : Type</div>
<div class="tip" id="fs19">Type.GetNestedTypes() : Type []<br />Type.GetNestedTypes(bindingAttr: Reflection.BindingFlags) : Type []</div>
<div class="tip" id="fs20">property Reflection.MemberInfo.Name: string</div>
<div class="tip" id="fs21">val getFreebaseTypes : level:int -&gt; Set&lt;string&gt;<br /><br />Full name: Script.getFreebaseTypes</div>
<div class="tip" id="fs22">val set : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set</div>
<div class="tip" id="fs23">val ns : CompilerServices.IProvidedNamespace</div>
<div class="tip" id="fs24">abstract member CompilerServices.ITypeProvider.GetNamespaces : unit -&gt; CompilerServices.IProvidedNamespace []</div>
<div class="tip" id="fs25">val t : Type</div>
<div class="tip" id="fs26">abstract member CompilerServices.IProvidedNamespace.GetTypes : unit -&gt; Type []</div>
<div class="tip" id="fs27">val n : string</div>
<div class="tip" id="fs28">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

