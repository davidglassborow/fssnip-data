<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//</span>
<span class="c">// Object Oriented Programming in F#</span>
<span class="c">//</span>

<span class="c">// Passed in default Constructor, Visible Everywhere After</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">SimpleClass</span> (<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">myInt</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">int</span>) <span class="o">=</span>
    <span class="c">// Calculated in Constructor, Visible Everywhere After</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">internalInt</span> <span class="o">=</span> <span class="n">20</span>
    
    <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="v">mutableInternalInt</span> <span class="o">=</span> <span class="n">25</span>
    <span class="c">// Int Property</span>
    <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="i">ReadProperty</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 7)" onmouseover="showTip(event, 'fs2', 7)" class="i">myInt</span>
    <span class="c">// Automatic Backing Field, Evaluated Once</span>
    <span class="k">member</span> <span class="k">val</span> <span class="v">ReadWriteProperty</span> <span class="o">=</span> <span class="n">0</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">set</span>
    <span class="c">// Manual Backing Field</span>
    <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">ExplicitReadWriteProperty</span> 
            <span class="k">with</span> <span class="i">get</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="v">mutableInternalInt</span>
            <span class="k">and</span>  <span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="i">set</span> <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="i">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="v">mutableInternalInt</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="i">v</span>
    <span class="c">// Int Methods </span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="f">GetInt</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 17)" onmouseover="showTip(event, 'fs2', 17)" class="i">myInt</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="f">ReturnInt</span> (<span onmouseout="hideTip(event, 'fs2', 20)" onmouseover="showTip(event, 'fs2', 20)" class="i">myInt</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 21)" onmouseover="showTip(event, 'fs3', 21)" class="t">int</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 22)" onmouseover="showTip(event, 'fs2', 22)" class="i">myInt</span>
    <span class="c">// Static Methods and Properties</span>
    <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="i">MyNumber</span> <span class="o">=</span> <span class="n">10.0</span>
    <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="f">GetMySumber</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 25)" onmouseover="showTip(event, 'fs1', 25)" class="t">SimpleClass</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="i">MyNumber</span>
    <span class="k">static</span> <span class="k">member</span> <span class="k">val</span> <span class="v">GlobalReadWriteProperty</span> <span class="o">=</span> <span class="n">10</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 27)" onmouseover="showTip(event, 'fs7', 27)" class="i">set</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs16', 28)" onmouseover="showTip(event, 'fs16', 28)" class="t">OptionalArgExample</span>(<span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="i">optInt</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 30)" onmouseover="showTip(event, 'fs3', 30)" class="t">int</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 31)" onmouseover="showTip(event, 'fs18', 31)" class="i">actualInt</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 32)" onmouseover="showTip(event, 'fs19', 32)" class="f">defaultArg</span> <span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="i">optInt</span> <span class="n">0</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs20', 34)" onmouseover="showTip(event, 'fs20', 34)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 35)" onmouseover="showTip(event, 'fs21', 35)" class="i">IntValue</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 36)" onmouseover="showTip(event, 'fs18', 36)" class="i">actualInt</span>


<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 37)" onmouseover="showTip(event, 'fs22', 37)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs23', 38)" onmouseover="showTip(event, 'fs23', 38)" class="i">x</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs24', 39)" onmouseover="showTip(event, 'fs24', 39)" class="t">obj</span> <span onmouseout="hideTip(event, 'fs25', 40)" onmouseover="showTip(event, 'fs25', 40)" class="t">option</span>) <span class="o">=</span> 
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs23', 41)" onmouseover="showTip(event, 'fs23', 41)" class="i">x</span> <span class="k">with</span>
    | <span onmouseout="hideTip(event, 'fs26', 42)" onmouseover="showTip(event, 'fs26', 42)" class="p">Some</span> (<span class="o">:?</span> <span onmouseout="hideTip(event, 'fs27', 43)" onmouseover="showTip(event, 'fs27', 43)" class="t">string</span> <span class="k">as</span> <span onmouseout="hideTip(event, 'fs28', 44)" onmouseover="showTip(event, 'fs28', 44)" class="i">str</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs28', 45)" onmouseover="showTip(event, 'fs28', 45)" class="i">str</span>
    | <span onmouseout="hideTip(event, 'fs26', 46)" onmouseover="showTip(event, 'fs26', 46)" class="p">Some</span> (<span class="o">:?</span> <span onmouseout="hideTip(event, 'fs3', 47)" onmouseover="showTip(event, 'fs3', 47)" class="t">int</span> <span class="k">as</span> <span onmouseout="hideTip(event, 'fs29', 48)" onmouseover="showTip(event, 'fs29', 48)" class="i">i</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs30', 49)" onmouseover="showTip(event, 'fs30', 49)" class="f">sprintf</span> <span class="s">&quot;</span><span class="pf">%i</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs29', 50)" onmouseover="showTip(event, 'fs29', 50)" class="i">i</span>

<span class="c">// </span>
<span class="c">// Interfaces</span>
<span class="c">//</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs31', 51)" onmouseover="showTip(event, 'fs31', 51)" class="t">IExampleMethod</span> <span class="o">=</span> 
    <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs32', 52)" onmouseover="showTip(event, 'fs32', 52)" class="f">MyMethod</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 53)" onmouseover="showTip(event, 'fs3', 53)" class="t">int</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs33', 54)" onmouseover="showTip(event, 'fs33', 54)" class="t">bool</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs34', 55)" onmouseover="showTip(event, 'fs34', 55)" class="t">IExampleProps</span> <span class="o">=</span>
    <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs35', 56)" onmouseover="showTip(event, 'fs35', 56)" class="i">MyProp</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 57)" onmouseover="showTip(event, 'fs3', 57)" class="t">int</span>
    <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs36', 58)" onmouseover="showTip(event, 'fs36', 58)" class="i">MyGetSetProp</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 59)" onmouseover="showTip(event, 'fs3', 59)" class="t">int</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 60)" onmouseover="showTip(event, 'fs7', 60)" class="i">set</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs37', 61)" onmouseover="showTip(event, 'fs37', 61)" class="t">InheritedType</span> () <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 62)" onmouseover="showTip(event, 'fs38', 62)" class="i">propValue</span> <span class="o">=</span> <span class="n">10</span>
    <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs39', 63)" onmouseover="showTip(event, 'fs39', 63)" class="v">getSetPropValue</span> <span class="o">=</span> <span class="n">0</span>

    <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs31', 64)" onmouseover="showTip(event, 'fs31', 64)" class="t">IExampleMethod</span> <span class="k">with</span> 
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs40', 65)" onmouseover="showTip(event, 'fs40', 65)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs41', 66)" onmouseover="showTip(event, 'fs41', 66)" class="f">MyMethod</span> <span onmouseout="hideTip(event, 'fs29', 67)" onmouseover="showTip(event, 'fs29', 67)" class="i">i</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs29', 68)" onmouseover="showTip(event, 'fs29', 68)" class="i">i</span> <span class="o">&gt;</span> <span class="n">0</span>

    <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs34', 69)" onmouseover="showTip(event, 'fs34', 69)" class="t">IExampleProps</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs40', 70)" onmouseover="showTip(event, 'fs40', 70)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs42', 71)" onmouseover="showTip(event, 'fs42', 71)" class="i">MyProp</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 72)" onmouseover="showTip(event, 'fs38', 72)" class="i">propValue</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs40', 73)" onmouseover="showTip(event, 'fs40', 73)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs43', 74)" onmouseover="showTip(event, 'fs43', 74)" class="i">MyGetSetProp</span> <span class="k">with</span> <span class="i">get</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 75)" onmouseover="showTip(event, 'fs39', 75)" class="v">getSetPropValue</span>
                               <span class="k">and</span> <span onmouseout="hideTip(event, 'fs7', 76)" onmouseover="showTip(event, 'fs7', 76)" class="i">set</span> <span onmouseout="hideTip(event, 'fs9', 77)" onmouseover="showTip(event, 'fs9', 77)" class="i">v</span>  <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 78)" onmouseover="showTip(event, 'fs39', 78)" class="v">getSetPropValue</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs9', 79)" onmouseover="showTip(event, 'fs9', 79)" class="i">v</span>


<span class="k">let</span> _ <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 80)" onmouseover="showTip(event, 'fs40', 80)" class="i">t</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs37', 81)" onmouseover="showTip(event, 'fs37', 81)" class="t">InheritedType</span>()
    <span class="c">//t.MyMethod</span>
    (<span onmouseout="hideTip(event, 'fs40', 82)" onmouseover="showTip(event, 'fs40', 82)" class="i">t</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs34', 83)" onmouseover="showTip(event, 'fs34', 83)" class="t">IExampleProps</span>)<span class="o">.</span><span class="i">MyProp</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs44', 84)" onmouseover="showTip(event, 'fs44', 84)" class="f">ignore</span>
    (<span onmouseout="hideTip(event, 'fs40', 85)" onmouseover="showTip(event, 'fs40', 85)" class="i">t</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs31', 86)" onmouseover="showTip(event, 'fs31', 86)" class="t">IExampleMethod</span>)<span class="o">.</span><span class="f">MyMethod</span> <span class="n">10</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs44', 87)" onmouseover="showTip(event, 'fs44', 87)" class="f">ignore</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 88)" onmouseover="showTip(event, 'fs45', 88)" class="f">objectExpressionInterface</span> (<span onmouseout="hideTip(event, 'fs38', 89)" onmouseover="showTip(event, 'fs38', 89)" class="i">propValue</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 90)" onmouseover="showTip(event, 'fs3', 90)" class="t">int</span>) <span class="o">=</span> 
    <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs39', 91)" onmouseover="showTip(event, 'fs39', 91)" class="v">getSetPropValue</span> <span class="o">=</span> <span class="n">0</span>
    {
        <span class="k">new</span> <span onmouseout="hideTip(event, 'fs31', 92)" onmouseover="showTip(event, 'fs31', 92)" class="t">IExampleMethod</span> <span class="k">with</span> 
            <span class="k">member</span> <span onmouseout="hideTip(event, 'fs46', 93)" onmouseover="showTip(event, 'fs46', 93)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 94)" onmouseover="showTip(event, 'fs47', 94)" class="f">MyMethod</span> <span onmouseout="hideTip(event, 'fs29', 95)" onmouseover="showTip(event, 'fs29', 95)" class="i">i</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs29', 96)" onmouseover="showTip(event, 'fs29', 96)" class="i">i</span> <span class="o">&gt;</span> <span class="n">0</span>

        <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs34', 97)" onmouseover="showTip(event, 'fs34', 97)" class="t">IExampleProps</span> <span class="k">with</span>
            <span class="k">member</span> <span onmouseout="hideTip(event, 'fs48', 98)" onmouseover="showTip(event, 'fs48', 98)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs49', 99)" onmouseover="showTip(event, 'fs49', 99)" class="i">MyProp</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 100)" onmouseover="showTip(event, 'fs38', 100)" class="i">propValue</span>
            <span class="k">member</span> <span onmouseout="hideTip(event, 'fs48', 101)" onmouseover="showTip(event, 'fs48', 101)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs50', 102)" onmouseover="showTip(event, 'fs50', 102)" class="i">MyGetSetProp</span> <span class="k">with</span> <span class="i">get</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 103)" onmouseover="showTip(event, 'fs39', 103)" class="v">getSetPropValue</span>
                                    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs7', 104)" onmouseover="showTip(event, 'fs7', 104)" class="i">set</span> <span onmouseout="hideTip(event, 'fs9', 105)" onmouseover="showTip(event, 'fs9', 105)" class="i">v</span>  <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 106)" onmouseover="showTip(event, 'fs39', 106)" class="v">getSetPropValue</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs9', 107)" onmouseover="showTip(event, 'fs9', 107)" class="i">v</span>
            
    }

<span class="k">let</span> _ <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs51', 108)" onmouseover="showTip(event, 'fs51', 108)" class="i">anonObj</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs45', 109)" onmouseover="showTip(event, 'fs45', 109)" class="f">objectExpressionInterface</span> <span class="n">10</span>
    <span onmouseout="hideTip(event, 'fs51', 110)" onmouseover="showTip(event, 'fs51', 110)" class="i">anonObj</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 111)" onmouseover="showTip(event, 'fs47', 111)" class="f">MyMethod</span> <span class="o">-</span><span class="n">5</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs44', 112)" onmouseover="showTip(event, 'fs44', 112)" class="f">ignore</span>
    (<span onmouseout="hideTip(event, 'fs51', 113)" onmouseover="showTip(event, 'fs51', 113)" class="i">anonObj</span> <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs34', 114)" onmouseover="showTip(event, 'fs34', 114)" class="t">IExampleProps</span>)<span class="o">.</span><span class="i">MyGetSetProp</span>

<span class="c">//</span>
<span class="c">// Abstract Classes in F#, Plz Not Without a Good Reason</span>
<span class="c">//</span>

[&lt;<span onmouseout="hideTip(event, 'fs52', 115)" onmouseover="showTip(event, 'fs52', 115)" class="t">AbstractClass</span>&gt;]
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs53', 116)" onmouseover="showTip(event, 'fs53', 116)" class="t">AbstractBase</span>(<span onmouseout="hideTip(event, 'fs2', 117)" onmouseover="showTip(event, 'fs2', 117)" class="i">myInt</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 118)" onmouseover="showTip(event, 'fs3', 118)" class="t">int</span>) <span class="o">=</span>
    <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs54', 119)" onmouseover="showTip(event, 'fs54', 119)" class="i">AbstractProp</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 120)" onmouseover="showTip(event, 'fs3', 120)" class="t">int</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 121)" onmouseover="showTip(event, 'fs7', 121)" class="i">set</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs55', 122)" onmouseover="showTip(event, 'fs55', 122)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 123)" onmouseover="showTip(event, 'fs56', 123)" class="i">ConcreteProp</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 124)" onmouseover="showTip(event, 'fs2', 124)" class="i">myInt</span>
 
    <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs57', 125)" onmouseover="showTip(event, 'fs57', 125)" class="i">AbastractWithDefault</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 126)" onmouseover="showTip(event, 'fs3', 126)" class="t">int</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 127)" onmouseover="showTip(event, 'fs7', 127)" class="i">set</span>
    <span class="c">// Virtual Method Implementation</span>
    <span class="k">default</span> <span class="k">val</span> <span class="v">AbastractWithDefault</span> <span class="o">=</span> <span class="n">10</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 128)" onmouseover="showTip(event, 'fs7', 128)" class="i">set</span>


<span class="k">type</span> <span onmouseout="hideTip(event, 'fs58', 129)" onmouseover="showTip(event, 'fs58', 129)" class="t">Derived</span>(<span onmouseout="hideTip(event, 'fs2', 130)" onmouseover="showTip(event, 'fs2', 130)" class="i">myInt</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 131)" onmouseover="showTip(event, 'fs3', 131)" class="t">int</span>) <span class="o">=</span>
    <span class="c">// Can&#39;t put anything here in the constructor</span>
    <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs53', 132)" onmouseover="showTip(event, 'fs53', 132)" class="t">AbstractBase</span>(<span class="i">myInt</span>)
    <span class="k">override</span> <span class="k">val</span> <span class="v">AbstractProp</span> <span class="o">=</span> <span class="n">0</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 133)" onmouseover="showTip(event, 'fs7', 133)" class="i">set</span>

<span class="c">// private, public, internal</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs59', 134)" onmouseover="showTip(event, 'fs59', 134)" class="t">DerivedWithCtorWork</span> <span class="k">private</span> (<span onmouseout="hideTip(event, 'fs2', 135)" onmouseover="showTip(event, 'fs2', 135)" class="i">myInt</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 136)" onmouseover="showTip(event, 'fs3', 136)" class="t">int</span>) <span class="o">=</span>
    <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs53', 137)" onmouseover="showTip(event, 'fs53', 137)" class="t">AbstractBase</span>(<span class="i">myInt</span>)
    <span class="c">//new(whatInt: int) = DerivedWithWork(whatInt + 10)</span>
    <span class="k">new</span>(<span onmouseout="hideTip(event, 'fs60', 138)" onmouseover="showTip(event, 'fs60', 138)" class="i">whatInt</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 139)" onmouseover="showTip(event, 'fs3', 139)" class="t">int</span> <span onmouseout="hideTip(event, 'fs25', 140)" onmouseover="showTip(event, 'fs25', 140)" class="t">option</span>) <span class="o">=</span> <span class="c">// Can&#39;t be the same type as the default c&#39;tor</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 141)" onmouseover="showTip(event, 'fs18', 141)" class="i">actualInt</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 142)" onmouseover="showTip(event, 'fs19', 142)" class="f">defaultArg</span> <span onmouseout="hideTip(event, 'fs60', 143)" onmouseover="showTip(event, 'fs60', 143)" class="i">whatInt</span> <span class="n">0</span>
        <span onmouseout="hideTip(event, 'fs59', 144)" onmouseover="showTip(event, 'fs59', 144)" class="t">DerivedWithCtorWork</span>(<span onmouseout="hideTip(event, 'fs18', 145)" onmouseover="showTip(event, 'fs18', 145)" class="i">actualInt</span> <span class="o">+</span> <span class="n">10</span>)
    <span class="k">override</span> <span class="k">val</span> <span class="v">AbstractProp</span> <span class="o">=</span> <span class="n">0</span> <span class="k">with</span> <span class="i">get</span>, <span onmouseout="hideTip(event, 'fs7', 146)" onmouseover="showTip(event, 'fs7', 146)" class="i">set</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs61', 147)" onmouseover="showTip(event, 'fs61', 147)" class="f">objectExpressionAbstract</span> (<span onmouseout="hideTip(event, 'fs38', 148)" onmouseover="showTip(event, 'fs38', 148)" class="i">propValue</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 149)" onmouseover="showTip(event, 'fs3', 149)" class="t">int</span>) <span class="o">=</span> 
    <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs62', 150)" onmouseover="showTip(event, 'fs62', 150)" class="v">innerVal</span> <span class="o">=</span> <span class="n">0</span>
    {
        <span class="k">new</span> <span onmouseout="hideTip(event, 'fs53', 151)" onmouseover="showTip(event, 'fs53', 151)" class="t">AbstractBase</span>(<span onmouseout="hideTip(event, 'fs38', 152)" onmouseover="showTip(event, 'fs38', 152)" class="i">propValue</span>) <span class="k">with</span>
            <span class="c">// Can&#39;t do override or val here</span>
            <span class="k">member</span> <span onmouseout="hideTip(event, 'fs55', 153)" onmouseover="showTip(event, 'fs55', 153)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs63', 154)" onmouseover="showTip(event, 'fs63', 154)" class="i">AbstractProp</span> <span class="k">with</span> <span class="i">get</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs62', 155)" onmouseover="showTip(event, 'fs62', 155)" class="v">innerVal</span> 
                                   <span class="k">and</span> <span onmouseout="hideTip(event, 'fs7', 156)" onmouseover="showTip(event, 'fs7', 156)" class="i">set</span> <span onmouseout="hideTip(event, 'fs9', 157)" onmouseover="showTip(event, 'fs9', 157)" class="i">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs62', 158)" onmouseover="showTip(event, 'fs62', 158)" class="v">innerVal</span> <span class="o">&lt;-</span><span onmouseout="hideTip(event, 'fs9', 159)" onmouseover="showTip(event, 'fs9', 159)" class="i">v</span> 
    }

<span class="c">// #1 - Interfaces</span>
<span class="c">// #1a - Create two Interfaces</span>
<span class="c">// #1b - Create a class that inherits from those interfaces</span>
<span class="c">// #1c - Create a function that takes the class and calls members from both interfaces</span>

<span class="c">// #2 - Abstract Classes</span>
<span class="c">// #2a - Create an abstract class with an abstract, virtual and concrete member</span>
<span class="c">// #2b - Create a concrete class that inherits from the abstract class, and overrides the virtual member</span>
<span class="c">// #2c - Create a function that takes the abstract class and calls the members on it</span>
<span class="c">//       Pass this function the concrete implementation and see what happens</span>

<span class="c">// #3 - Object Expressions</span>
<span class="c">// #3a - Create an object expression that implements both interfaces defined above</span>
<span class="c">// #3b - Create an object expression that implements the abstract class defined above</span>
<span class="c">// #3c - Create an object expression that implements both interfaces and the abstract class defined above</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />type SimpleClass =<br />&#160;&#160;new : myInt:int -&gt; SimpleClass<br />&#160;&#160;member GetInt : unit -&gt; int<br />&#160;&#160;member ReturnInt : myInt:int -&gt; int<br />&#160;&#160;member ExplicitReadWriteProperty : int<br />&#160;&#160;member ReadProperty : int<br />&#160;&#160;member ReadWriteProperty : int<br />&#160;&#160;member ExplicitReadWriteProperty : int with set<br />&#160;&#160;member ReadWriteProperty : int with set<br />&#160;&#160;static member GetMySumber : unit -&gt; float<br />&#160;&#160;static member GlobalReadWriteProperty : int<br />&#160;&#160;...<br /><br />Full name: Script.SimpleClass<br /><br />--------------------<br />new : myInt:int -&gt; SimpleClass</div>
<div class="tip" id="fs2">val myInt : int</div>
<div class="tip" id="fs3">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs4">val internalInt : int</div>
<div class="tip" id="fs5">val mutable mutableInternalInt : int</div>
<div class="tip" id="fs6">member SimpleClass.ReadProperty : int<br /><br />Full name: Script.SimpleClass.ReadProperty</div>
<div class="tip" id="fs7">val set : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set</div>
<div class="tip" id="fs8">member SimpleClass.ExplicitReadWriteProperty : int with set<br /><br />Full name: Script.SimpleClass.ExplicitReadWriteProperty</div>
<div class="tip" id="fs9">val v : int</div>
<div class="tip" id="fs10">val __ : SimpleClass</div>
<div class="tip" id="fs11">member SimpleClass.GetInt : unit -&gt; int<br /><br />Full name: Script.SimpleClass.GetInt</div>
<div class="tip" id="fs12">member SimpleClass.ReturnInt : myInt:int -&gt; int<br /><br />Full name: Script.SimpleClass.ReturnInt</div>
<div class="tip" id="fs13">static member SimpleClass.MyNumber : float<br /><br />Full name: Script.SimpleClass.MyNumber</div>
<div class="tip" id="fs14">static member SimpleClass.GetMySumber : unit -&gt; float<br /><br />Full name: Script.SimpleClass.GetMySumber</div>
<div class="tip" id="fs15">property SimpleClass.MyNumber: float</div>
<div class="tip" id="fs16">Multiple items<br />type OptionalArgExample =<br />&#160;&#160;new : ?optInt:int -&gt; OptionalArgExample<br />&#160;&#160;member IntValue : int<br /><br />Full name: Script.OptionalArgExample<br /><br />--------------------<br />new : ?optInt:int -&gt; OptionalArgExample</div>
<div class="tip" id="fs17">val optInt : int option</div>
<div class="tip" id="fs18">val actualInt : int</div>
<div class="tip" id="fs19">val defaultArg : arg:&#39;T option -&gt; defaultValue:&#39;T -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.defaultArg</div>
<div class="tip" id="fs20">val t : OptionalArgExample</div>
<div class="tip" id="fs21">member OptionalArgExample.IntValue : int<br /><br />Full name: Script.OptionalArgExample.IntValue</div>
<div class="tip" id="fs22">val f : x:obj option -&gt; string<br /><br />Full name: Script.f</div>
<div class="tip" id="fs23">val x : obj option</div>
<div class="tip" id="fs24">type obj = System.Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs25">type &#39;T option = Option&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.option&lt;_&gt;</div>
<div class="tip" id="fs26">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs27">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs28">val str : string</div>
<div class="tip" id="fs29">val i : int</div>
<div class="tip" id="fs30">val sprintf : format:Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>
<div class="tip" id="fs31">type IExampleMethod =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member MyMethod : int -&gt; bool<br />&#160;&#160;end<br /><br />Full name: Script.IExampleMethod</div>
<div class="tip" id="fs32">abstract member IExampleMethod.MyMethod : int -&gt; bool<br /><br />Full name: Script.IExampleMethod.MyMethod</div>
<div class="tip" id="fs33">type bool = System.Boolean<br /><br />Full name: Microsoft.FSharp.Core.bool</div>
<div class="tip" id="fs34">type IExampleProps =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member MyGetSetProp : int<br />&#160;&#160;&#160;&#160;abstract member MyProp : int<br />&#160;&#160;&#160;&#160;abstract member MyGetSetProp : int with set<br />&#160;&#160;end<br /><br />Full name: Script.IExampleProps</div>
<div class="tip" id="fs35">abstract member IExampleProps.MyProp : int<br /><br />Full name: Script.IExampleProps.MyProp</div>
<div class="tip" id="fs36">abstract member IExampleProps.MyGetSetProp : int with set<br /><br />Full name: Script.IExampleProps.MyGetSetProp</div>
<div class="tip" id="fs37">Multiple items<br />type InheritedType =<br />&#160;&#160;interface IExampleProps<br />&#160;&#160;interface IExampleMethod<br />&#160;&#160;new : unit -&gt; InheritedType<br /><br />Full name: Script.InheritedType<br /><br />--------------------<br />new : unit -&gt; InheritedType</div>
<div class="tip" id="fs38">val propValue : int</div>
<div class="tip" id="fs39">val mutable getSetPropValue : int</div>
<div class="tip" id="fs40">val t : InheritedType</div>
<div class="tip" id="fs41">override InheritedType.MyMethod : i:int -&gt; bool<br /><br />Full name: Script.InheritedType.MyMethod</div>
<div class="tip" id="fs42">override InheritedType.MyProp : int<br /><br />Full name: Script.InheritedType.MyProp</div>
<div class="tip" id="fs43">override InheritedType.MyGetSetProp : int with set<br /><br />Full name: Script.InheritedType.MyGetSetProp</div>
<div class="tip" id="fs44">val ignore : value:&#39;T -&gt; unit<br /><br />Full name: Microsoft.FSharp.Core.Operators.ignore</div>
<div class="tip" id="fs45">val objectExpressionInterface : propValue:int -&gt; IExampleMethod<br /><br />Full name: Script.objectExpressionInterface</div>
<div class="tip" id="fs46">val t : IExampleMethod</div>
<div class="tip" id="fs47">abstract member IExampleMethod.MyMethod : int -&gt; bool</div>
<div class="tip" id="fs48">val t : IExampleProps</div>
<div class="tip" id="fs49">property IExampleProps.MyProp: int</div>
<div class="tip" id="fs50">property IExampleProps.MyGetSetProp: int</div>
<div class="tip" id="fs51">val anonObj : IExampleMethod</div>
<div class="tip" id="fs52">Multiple items<br />type AbstractClassAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; AbstractClassAttribute<br /><br />Full name: Microsoft.FSharp.Core.AbstractClassAttribute<br /><br />--------------------<br />new : unit -&gt; AbstractClassAttribute</div>
<div class="tip" id="fs53">Multiple items<br />type AbstractBase =<br />&#160;&#160;new : myInt:int -&gt; AbstractBase<br />&#160;&#160;abstract member AbastractWithDefault : int<br />&#160;&#160;abstract member AbstractProp : int<br />&#160;&#160;abstract member AbastractWithDefault : int with set<br />&#160;&#160;abstract member AbstractProp : int with set<br />&#160;&#160;override AbastractWithDefault : int<br />&#160;&#160;member ConcreteProp : int<br />&#160;&#160;override AbastractWithDefault : int with set<br /><br />Full name: Script.AbstractBase<br /><br />--------------------<br />new : myInt:int -&gt; AbstractBase</div>
<div class="tip" id="fs54">abstract member AbstractBase.AbstractProp : int with set<br /><br />Full name: Script.AbstractBase.AbstractProp</div>
<div class="tip" id="fs55">val t : AbstractBase</div>
<div class="tip" id="fs56">member AbstractBase.ConcreteProp : int<br /><br />Full name: Script.AbstractBase.ConcreteProp</div>
<div class="tip" id="fs57">abstract member AbstractBase.AbastractWithDefault : int with set<br /><br />Full name: Script.AbstractBase.AbastractWithDefault</div>
<div class="tip" id="fs58">Multiple items<br />type Derived =<br />&#160;&#160;inherit AbstractBase<br />&#160;&#160;new : myInt:int -&gt; Derived<br />&#160;&#160;override AbstractProp : int<br />&#160;&#160;override AbstractProp : int with set<br /><br />Full name: Script.Derived<br /><br />--------------------<br />new : myInt:int -&gt; Derived</div>
<div class="tip" id="fs59">Multiple items<br />type DerivedWithCtorWork =<br />&#160;&#160;inherit AbstractBase<br />&#160;&#160;private new : myInt:int -&gt; DerivedWithCtorWork<br />&#160;&#160;new : whatInt:int option -&gt; DerivedWithCtorWork<br />&#160;&#160;override AbstractProp : int<br />&#160;&#160;override AbstractProp : int with set<br /><br />Full name: Script.DerivedWithCtorWork<br /><br />--------------------<br />new : whatInt:int option -&gt; DerivedWithCtorWork<br />private new : myInt:int -&gt; DerivedWithCtorWork</div>
<div class="tip" id="fs60">val whatInt : int option</div>
<div class="tip" id="fs61">val objectExpressionAbstract : propValue:int -&gt; AbstractBase<br /><br />Full name: Script.objectExpressionAbstract</div>
<div class="tip" id="fs62">val mutable innerVal : int</div>
<div class="tip" id="fs63">property AbstractBase.AbstractProp: int</div>

