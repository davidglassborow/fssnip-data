<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">module</span> <span class="t">NumericLiteralG</span> <span class="o">=</span>
    <span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">FromZero</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">LanguagePrimitives</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">GenericZero</span>
    <span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="f">FromOne</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="t">LanguagePrimitives</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">GenericOne</span>

<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="f">isqrt</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">num</span> <span class="o">=</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="i">num</span> <span class="o">&gt;</span> <span class="n">0G</span> <span class="k">then</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">two</span> <span class="o">=</span> <span class="n">1G</span> <span class="o">+</span> <span class="n">1G</span>
        <span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="f">reduce</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">n</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">num</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="i">n</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="i">n</span>) <span class="o">/</span> <span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="i">two</span>
        <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="f">impl</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="i">n</span> <span class="o">=</span> <span class="k">function</span>
            | <span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="i">n&#39;</span> <span class="k">when</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="i">n&#39;</span> <span class="o">&lt;=</span> <span onmouseout="hideTip(event, 'fs10', 21)" onmouseover="showTip(event, 'fs10', 21)" class="i">n</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="i">n&#39;</span>
            | _               <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs11', 23)" onmouseover="showTip(event, 'fs11', 23)" class="f">impl</span> (<span onmouseout="hideTip(event, 'fs9', 24)" onmouseover="showTip(event, 'fs9', 24)" class="f">reduce</span> <span onmouseout="hideTip(event, 'fs10', 25)" onmouseover="showTip(event, 'fs10', 25)" class="i">n</span>) <span onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26)" class="i">n</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="i">n</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 28)" onmouseover="showTip(event, 'fs7', 28)" class="i">num</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs8', 29)" onmouseover="showTip(event, 'fs8', 29)" class="i">two</span> <span class="o">+</span> <span class="n">1G</span>
        <span onmouseout="hideTip(event, 'fs11', 30)" onmouseover="showTip(event, 'fs11', 30)" class="f">impl</span> (<span onmouseout="hideTip(event, 'fs9', 31)" onmouseover="showTip(event, 'fs9', 31)" class="f">reduce</span> <span onmouseout="hideTip(event, 'fs10', 32)" onmouseover="showTip(event, 'fs10', 32)" class="i">n</span>) <span onmouseout="hideTip(event, 'fs10', 33)" onmouseover="showTip(event, 'fs10', 33)" class="i">n</span>
    <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs7', 34)" onmouseover="showTip(event, 'fs7', 34)" class="i">num</span> <span class="o">=</span> <span class="n">0G</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs7', 35)" onmouseover="showTip(event, 'fs7', 35)" class="i">num</span>
    <span class="k">else</span> <span onmouseout="hideTip(event, 'fs13', 36)" onmouseover="showTip(event, 'fs13', 36)" class="f">invalidArg</span> <span class="s">&quot;num&quot;</span> <span class="s">&quot;negative numbers are not supported&quot;</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val FromZero : unit -&gt; &#39;a (requires member get_Zero)<br /><br />Full name: Script.NumericLiteralG.FromZero</div>
<div class="tip" id="fs2">module LanguagePrimitives<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs3">val GenericZero&lt;&#39;T (requires member get_Zero)&gt; : &#39;T (requires member get_Zero)<br /><br />Full name: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero</div>
<div class="tip" id="fs4">val FromOne : unit -&gt; &#39;a (requires member get_One)<br /><br />Full name: Script.NumericLiteralG.FromOne</div>
<div class="tip" id="fs5">val GenericOne&lt;&#39;T (requires member get_One)&gt; : &#39;T (requires member get_One)<br /><br />Full name: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne</div>
<div class="tip" id="fs6">val isqrt : num:&#39;a -&gt; &#39;a (requires member ( + ) and member get_Zero and member ( / ) and member ( / ) and comparison and member ( / ) and member get_One and member ( + ) and member get_One and member ( + ) and member get_One)<br /><br />Full name: Script.isqrt</div>
<div class="tip" id="fs7">val num : &#39;a (requires member ( + ) and member get_Zero and member ( / ) and member ( / ) and comparison and member ( / ) and member get_One and member ( + ) and member get_One and member ( + ) and member get_One)</div>
<div class="tip" id="fs8">val two : &#39;d (requires member ( / ) and member ( / ) and member get_One and member ( + ) and member get_One and member ( + ) and member get_Zero and member ( / ) and comparison and member ( + ) and member get_One)</div>
<div class="tip" id="fs9">val reduce : (&#39;a -&gt; &#39;a) (requires member ( + ) and member get_Zero and member ( / ) and member ( / ) and comparison and member ( / ) and member get_One and member ( + ) and member get_One and member ( + ) and member get_One)</div>
<div class="tip" id="fs10">val n : &#39;a (requires member ( + ) and member get_Zero and member ( / ) and member ( / ) and comparison and member ( / ) and member get_One and member ( + ) and member get_One and member ( + ) and member get_One)</div>
<div class="tip" id="fs11">val impl : (&#39;a -&gt; &#39;a -&gt; &#39;a) (requires member ( + ) and member get_Zero and member ( / ) and member ( / ) and comparison and member ( / ) and member get_One and member ( + ) and member get_One and member ( + ) and member get_One)</div>
<div class="tip" id="fs12">val n&#39; : &#39;a (requires member ( + ) and member get_Zero and member ( / ) and member ( / ) and comparison and member ( / ) and member get_One and member ( + ) and member get_One and member ( + ) and member get_One)</div>
<div class="tip" id="fs13">val invalidArg : argumentName:string -&gt; message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.invalidArg</div>

