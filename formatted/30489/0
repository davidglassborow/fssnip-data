<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>

<span class="c">/// An event that can defer publication of certain values until a later time.</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">DeferrableEvent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">transformDeferred</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">list</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="t">list</span>) <span class="o">=</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">locker</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">obj</span>()
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">event</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="t">Event</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>()

  <span class="c">/// The deferred predicates keyed by deferral ID</span>
  <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="v">deferPredicates</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="t">Map</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="t">Guid</span>, <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="t">bool</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="t">Map</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 15)" onmouseover="showTip(event, 'fs13', 15)" class="i">empty</span>

  <span class="c">/// The deferred arguments with the list the deferral IDs that caused them to be deferred</span>
  <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs14', 16)" onmouseover="showTip(event, 'fs14', 16)" class="v">deferredArgs</span> <span class="o">:</span> (<span class="o">&#39;</span><span class="i">a</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs15', 17)" onmouseover="showTip(event, 'fs15', 17)" class="t">Set</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="t">Guid</span><span class="o">&gt;</span>) <span onmouseout="hideTip(event, 'fs4', 19)" onmouseover="showTip(event, 'fs4', 19)" class="t">list</span> <span class="o">=</span> []

  <span class="k">new</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 20)" onmouseover="showTip(event, 'fs2', 20)" class="t">DeferrableEvent</span>(<span onmouseout="hideTip(event, 'fs16', 21)" onmouseover="showTip(event, 'fs16', 21)" class="f">id</span>)

  <span class="c">/// Defers publication of values for which the predicate returns true.</span>
  <span class="c">/// The deferral ends when the returned object is disposed. When the deferral</span>
  <span class="c">/// ends, all deferred values that are no longer deferred will be transformed</span>
  <span class="c">/// according to the constructor parameter and then triggered. Note that a call</span>
  <span class="c">/// to Defer will only affect later calls to Trigger; any values that are already</span>
  <span class="c">/// deferred and match the specified predicate will not be affected by this call.</span>
  <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 22)" onmouseover="showTip(event, 'fs17', 22)" class="f">Defer</span> (<span onmouseout="hideTip(event, 'fs18', 23)" onmouseover="showTip(event, 'fs18', 23)" class="f">predicate</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="t">bool</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs19', 25)" onmouseover="showTip(event, 'fs19', 25)" class="f">lock</span> <span onmouseout="hideTip(event, 'fs5', 26)" onmouseover="showTip(event, 'fs5', 26)" class="i">locker</span> (<span class="k">fun</span> () <span class="k">-&gt;</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 27)" onmouseover="showTip(event, 'fs20', 27)" class="i">deferralId</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 28)" onmouseover="showTip(event, 'fs11', 28)" class="t">Guid</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 29)" onmouseover="showTip(event, 'fs21', 29)" class="f">NewGuid</span> ()
      <span onmouseout="hideTip(event, 'fs9', 30)" onmouseover="showTip(event, 'fs9', 30)" class="v">deferPredicates</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs9', 31)" onmouseover="showTip(event, 'fs9', 31)" class="v">deferPredicates</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 32)" onmouseover="showTip(event, 'fs22', 32)" class="f">Add</span> (<span onmouseout="hideTip(event, 'fs20', 33)" onmouseover="showTip(event, 'fs20', 33)" class="i">deferralId</span>, <span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="f">predicate</span>)
      { <span class="k">new</span> <span onmouseout="hideTip(event, 'fs23', 35)" onmouseover="showTip(event, 'fs23', 35)" class="t">IDisposable</span> <span class="k">with</span>
          <span class="k">member</span> <span onmouseout="hideTip(event, 'fs24', 36)" onmouseover="showTip(event, 'fs24', 36)" class="i">__</span><span class="o">.</span><span class="f">Dispose</span> () <span class="o">=</span>
            <span onmouseout="hideTip(event, 'fs19', 37)" onmouseover="showTip(event, 'fs19', 37)" class="f">lock</span> <span onmouseout="hideTip(event, 'fs5', 38)" onmouseover="showTip(event, 'fs5', 38)" class="i">locker</span> (<span class="k">fun</span> () <span class="k">-&gt;</span>
              <span class="c">// Remove the deferral predicate</span>
              <span onmouseout="hideTip(event, 'fs9', 39)" onmouseover="showTip(event, 'fs9', 39)" class="v">deferPredicates</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs9', 40)" onmouseover="showTip(event, 'fs9', 40)" class="v">deferPredicates</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs25', 41)" onmouseover="showTip(event, 'fs25', 41)" class="f">Remove</span> <span onmouseout="hideTip(event, 'fs20', 42)" onmouseover="showTip(event, 'fs20', 42)" class="i">deferralId</span>

              <span class="c">// Remove the deferral ID from the args that have been deferred from itS</span>
              <span onmouseout="hideTip(event, 'fs14', 43)" onmouseover="showTip(event, 'fs14', 43)" class="v">deferredArgs</span> <span class="o">&lt;-</span>
                <span onmouseout="hideTip(event, 'fs14', 44)" onmouseover="showTip(event, 'fs14', 44)" class="v">deferredArgs</span>
                <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 45)" onmouseover="showTip(event, 'fs26', 45)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 46)" onmouseover="showTip(event, 'fs27', 46)" class="f">map</span> (<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs28', 47)" onmouseover="showTip(event, 'fs28', 47)" class="i">arg</span>, <span onmouseout="hideTip(event, 'fs29', 48)" onmouseover="showTip(event, 'fs29', 48)" class="i">defIds</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs28', 49)" onmouseover="showTip(event, 'fs28', 49)" class="i">arg</span>, <span onmouseout="hideTip(event, 'fs29', 50)" onmouseover="showTip(event, 'fs29', 50)" class="i">defIds</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 51)" onmouseover="showTip(event, 'fs30', 51)" class="f">Remove</span> <span onmouseout="hideTip(event, 'fs20', 52)" onmouseover="showTip(event, 'fs20', 52)" class="i">deferralId</span>)

              <span class="c">// Remove arguments that are no longer deferred and trigger them</span>
              <span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 53)" onmouseover="showTip(event, 'fs31', 53)" class="i">noLongerDeferred</span>, <span onmouseout="hideTip(event, 'fs32', 54)" onmouseover="showTip(event, 'fs32', 54)" class="i">stillDeferred</span> <span class="o">=</span>
                <span onmouseout="hideTip(event, 'fs14', 55)" onmouseover="showTip(event, 'fs14', 55)" class="v">deferredArgs</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 56)" onmouseover="showTip(event, 'fs26', 56)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 57)" onmouseover="showTip(event, 'fs33', 57)" class="f">partition</span> (<span onmouseout="hideTip(event, 'fs34', 58)" onmouseover="showTip(event, 'fs34', 58)" class="f">snd</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs15', 59)" onmouseover="showTip(event, 'fs15', 59)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 60)" onmouseover="showTip(event, 'fs35', 60)" class="f">isEmpty</span>)
              <span onmouseout="hideTip(event, 'fs14', 61)" onmouseover="showTip(event, 'fs14', 61)" class="v">deferredArgs</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs32', 62)" onmouseover="showTip(event, 'fs32', 62)" class="i">stillDeferred</span>
              <span onmouseout="hideTip(event, 'fs31', 63)" onmouseover="showTip(event, 'fs31', 63)" class="i">noLongerDeferred</span>
              <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 64)" onmouseover="showTip(event, 'fs26', 64)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 65)" onmouseover="showTip(event, 'fs27', 65)" class="f">map</span> <span onmouseout="hideTip(event, 'fs36', 66)" onmouseover="showTip(event, 'fs36', 66)" class="f">fst</span>
              <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs3', 67)" onmouseover="showTip(event, 'fs3', 67)" class="f">transformDeferred</span>
              <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 68)" onmouseover="showTip(event, 'fs26', 68)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 69)" onmouseover="showTip(event, 'fs37', 69)" class="f">iter</span> <span onmouseout="hideTip(event, 'fs7', 70)" onmouseover="showTip(event, 'fs7', 70)" class="i">event</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 71)" onmouseover="showTip(event, 'fs38', 71)" class="f">Trigger</span>
            )
      }
    )

  <span class="c">/// Publishes an observation as a first class value.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs24', 72)" onmouseover="showTip(event, 'fs24', 72)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 73)" onmouseover="showTip(event, 'fs39', 73)" class="i">Publish</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 74)" onmouseover="showTip(event, 'fs7', 74)" class="i">event</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 75)" onmouseover="showTip(event, 'fs40', 75)" class="i">Publish</span>

  <span class="c">/// Triggers the observation using the given parameter. If the value is deferred,</span>
  <span class="c">/// it will only be deferred by the deferrals that are currently active when Trigger</span>
  <span class="c">/// is called. Subsequent calls to Defer with predicates that match the value</span>
  <span class="c">/// will not affect the deferral of this particular value (but future identical</span>
  <span class="c">/// values will be affected).</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs24', 76)" onmouseover="showTip(event, 'fs24', 76)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs41', 77)" onmouseover="showTip(event, 'fs41', 77)" class="f">Trigger</span> <span onmouseout="hideTip(event, 'fs28', 78)" onmouseover="showTip(event, 'fs28', 78)" class="i">arg</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs19', 79)" onmouseover="showTip(event, 'fs19', 79)" class="f">lock</span> <span onmouseout="hideTip(event, 'fs5', 80)" onmouseover="showTip(event, 'fs5', 80)" class="i">locker</span> (<span class="k">fun</span> () <span class="k">-&gt;</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 81)" onmouseover="showTip(event, 'fs29', 81)" class="i">defIds</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs9', 82)" onmouseover="showTip(event, 'fs9', 82)" class="v">deferPredicates</span>
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 83)" onmouseover="showTip(event, 'fs10', 83)" class="t">Map</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs42', 84)" onmouseover="showTip(event, 'fs42', 84)" class="f">filter</span> (<span class="k">fun</span> _ <span onmouseout="hideTip(event, 'fs18', 85)" onmouseover="showTip(event, 'fs18', 85)" class="f">predicate</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs18', 86)" onmouseover="showTip(event, 'fs18', 86)" class="f">predicate</span> <span onmouseout="hideTip(event, 'fs28', 87)" onmouseover="showTip(event, 'fs28', 87)" class="i">arg</span>)
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 88)" onmouseover="showTip(event, 'fs10', 88)" class="t">Map</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs43', 89)" onmouseover="showTip(event, 'fs43', 89)" class="f">toSeq</span>
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs44', 90)" onmouseover="showTip(event, 'fs44', 90)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 91)" onmouseover="showTip(event, 'fs45', 91)" class="f">map</span> <span onmouseout="hideTip(event, 'fs36', 92)" onmouseover="showTip(event, 'fs36', 92)" class="f">fst</span>
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs15', 93)" onmouseover="showTip(event, 'fs15', 93)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs46', 94)" onmouseover="showTip(event, 'fs46', 94)" class="f">ofSeq</span>
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs29', 95)" onmouseover="showTip(event, 'fs29', 95)" class="i">defIds</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 96)" onmouseover="showTip(event, 'fs47', 96)" class="i">IsEmpty</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs7', 97)" onmouseover="showTip(event, 'fs7', 97)" class="i">event</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 98)" onmouseover="showTip(event, 'fs38', 98)" class="f">Trigger</span> <span onmouseout="hideTip(event, 'fs28', 99)" onmouseover="showTip(event, 'fs28', 99)" class="i">arg</span>
      <span class="k">else</span> <span onmouseout="hideTip(event, 'fs14', 100)" onmouseover="showTip(event, 'fs14', 100)" class="v">deferredArgs</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs14', 101)" onmouseover="showTip(event, 'fs14', 101)" class="v">deferredArgs</span> <span class="o">@</span> [<span onmouseout="hideTip(event, 'fs28', 102)" onmouseover="showTip(event, 'fs28', 102)" class="i">arg</span>, <span onmouseout="hideTip(event, 'fs29', 103)" onmouseover="showTip(event, 'fs29', 103)" class="i">defIds</span>]
    )

<span class="c">///////////</span>
<span class="c">// USAGE //</span>
<span class="c">///////////</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 104)" onmouseover="showTip(event, 'fs48', 104)" class="i">e</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 105)" onmouseover="showTip(event, 'fs2', 105)" class="t">DeferrableEvent</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs49', 106)" onmouseover="showTip(event, 'fs49', 106)" class="t">int</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs26', 107)" onmouseover="showTip(event, 'fs26', 107)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs50', 108)" onmouseover="showTip(event, 'fs50', 108)" class="f">distinct</span>)
<span onmouseout="hideTip(event, 'fs48', 109)" onmouseover="showTip(event, 'fs48', 109)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs51', 110)" onmouseover="showTip(event, 'fs51', 110)" class="i">Publish</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 111)" onmouseover="showTip(event, 'fs52', 111)" class="f">Add</span> (<span onmouseout="hideTip(event, 'fs53', 112)" onmouseover="showTip(event, 'fs53', 112)" class="f">printfn</span> <span class="s">&quot;Triggered: </span><span class="pf">%i</span><span class="s">&quot;</span>)

<span onmouseout="hideTip(event, 'fs48', 113)" onmouseover="showTip(event, 'fs48', 113)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 114)" onmouseover="showTip(event, 'fs54', 114)" class="f">Trigger</span> <span class="n">1</span>  <span class="c">// &quot;Triggered: 1&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 115)" onmouseover="showTip(event, 'fs55', 115)" class="i">d</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs48', 116)" onmouseover="showTip(event, 'fs48', 116)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 117)" onmouseover="showTip(event, 'fs56', 117)" class="f">Defer</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs57', 118)" onmouseover="showTip(event, 'fs57', 118)" class="i">i</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs57', 119)" onmouseover="showTip(event, 'fs57', 119)" class="i">i</span> <span class="o">&gt;</span> <span class="n">5</span>)  <span class="c">// Normally you&#39;d use the &quot;use&quot; keyword</span>
<span onmouseout="hideTip(event, 'fs48', 120)" onmouseover="showTip(event, 'fs48', 120)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 121)" onmouseover="showTip(event, 'fs54', 121)" class="f">Trigger</span> <span class="n">2</span>  <span class="c">// &quot;Triggered: 2&quot;</span>
<span onmouseout="hideTip(event, 'fs48', 122)" onmouseover="showTip(event, 'fs48', 122)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 123)" onmouseover="showTip(event, 'fs54', 123)" class="f">Trigger</span> <span class="n">6</span>  <span class="c">// (no output)</span>
<span onmouseout="hideTip(event, 'fs48', 124)" onmouseover="showTip(event, 'fs48', 124)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 125)" onmouseover="showTip(event, 'fs54', 125)" class="f">Trigger</span> <span class="n">7</span>  <span class="c">// (no output)</span>
<span onmouseout="hideTip(event, 'fs48', 126)" onmouseover="showTip(event, 'fs48', 126)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 127)" onmouseover="showTip(event, 'fs54', 127)" class="f">Trigger</span> <span class="n">6</span>  <span class="c">// (no output)</span>
<span onmouseout="hideTip(event, 'fs48', 128)" onmouseover="showTip(event, 'fs48', 128)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 129)" onmouseover="showTip(event, 'fs54', 129)" class="f">Trigger</span> <span class="n">10</span>  <span class="c">// (no output)</span>

<span onmouseout="hideTip(event, 'fs55', 130)" onmouseover="showTip(event, 'fs55', 130)" class="i">d</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs58', 131)" onmouseover="showTip(event, 'fs58', 131)" class="f">Dispose</span>()
<span class="c">// &quot;Triggered: 6&quot;</span>
<span class="c">// &quot;Triggered: 7&quot;</span>
<span class="c">// &quot;Triggered: 10&quot;</span>

<span onmouseout="hideTip(event, 'fs48', 132)" onmouseover="showTip(event, 'fs48', 132)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 133)" onmouseover="showTip(event, 'fs54', 133)" class="f">Trigger</span> <span class="n">6</span>  <span class="c">// &quot;Triggered: 6&quot;</span>


<span class="c">// Example of behavior with multiple overlapping deferrals</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs59', 134)" onmouseover="showTip(event, 'fs59', 134)" class="i">d1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs48', 135)" onmouseover="showTip(event, 'fs48', 135)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 136)" onmouseover="showTip(event, 'fs56', 136)" class="f">Defer</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs57', 137)" onmouseover="showTip(event, 'fs57', 137)" class="i">i</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs57', 138)" onmouseover="showTip(event, 'fs57', 138)" class="i">i</span> <span class="o">&gt;</span> <span class="n">5</span>)
<span onmouseout="hideTip(event, 'fs48', 139)" onmouseover="showTip(event, 'fs48', 139)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 140)" onmouseover="showTip(event, 'fs54', 140)" class="f">Trigger</span> <span class="n">11</span> <span class="c">// (no output)</span>
<span onmouseout="hideTip(event, 'fs48', 141)" onmouseover="showTip(event, 'fs48', 141)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 142)" onmouseover="showTip(event, 'fs54', 142)" class="f">Trigger</span> <span class="n">12</span> <span class="c">// (no output)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 143)" onmouseover="showTip(event, 'fs60', 143)" class="i">d2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs48', 144)" onmouseover="showTip(event, 'fs48', 144)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 145)" onmouseover="showTip(event, 'fs56', 145)" class="f">Defer</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs57', 146)" onmouseover="showTip(event, 'fs57', 146)" class="i">i</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs57', 147)" onmouseover="showTip(event, 'fs57', 147)" class="i">i</span> <span class="o">&gt;</span> <span class="n">10</span>)
<span onmouseout="hideTip(event, 'fs48', 148)" onmouseover="showTip(event, 'fs48', 148)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 149)" onmouseover="showTip(event, 'fs54', 149)" class="f">Trigger</span> <span class="n">11</span> <span class="c">// (no output)</span>

<span onmouseout="hideTip(event, 'fs59', 150)" onmouseover="showTip(event, 'fs59', 150)" class="i">d1</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs58', 151)" onmouseover="showTip(event, 'fs58', 151)" class="f">Dispose</span> ()
<span class="c">// &quot;Triggered: 11&quot;</span>
<span class="c">// &quot;Triggered: 12&quot;</span>

<span onmouseout="hideTip(event, 'fs48', 152)" onmouseover="showTip(event, 'fs48', 152)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 153)" onmouseover="showTip(event, 'fs54', 153)" class="f">Trigger</span> <span class="n">13</span> <span class="c">// (no output)</span>

<span onmouseout="hideTip(event, 'fs60', 154)" onmouseover="showTip(event, 'fs60', 154)" class="i">d2</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs58', 155)" onmouseover="showTip(event, 'fs58', 155)" class="f">Dispose</span> ()
<span class="c">// &quot;Triggered: 11&quot;</span>
<span class="c">// &quot;Triggered: 13&quot;</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">Multiple items<br />type DeferrableEvent&lt;&#39;a&gt; =<br />&#160;&#160;new : unit -&gt; DeferrableEvent&lt;&#39;a&gt;<br />&#160;&#160;new : transformDeferred:(&#39;a list -&gt; &#39;a list) -&gt; DeferrableEvent&lt;&#39;a&gt;<br />&#160;&#160;member Defer : predicate:(&#39;a -&gt; bool) -&gt; IDisposable<br />&#160;&#160;member Trigger : arg:&#39;a -&gt; unit<br />&#160;&#160;member Publish : IEvent&lt;&#39;a&gt;<br /><br />Full name: Script.DeferrableEvent&lt;_&gt;<br /><em><br /><br />&#160;An event that can defer publication of certain values until a later time.</em><br /><br />--------------------<br />new : unit -&gt; DeferrableEvent&lt;&#39;a&gt;<br />new : transformDeferred:(&#39;a list -&gt; &#39;a list) -&gt; DeferrableEvent&lt;&#39;a&gt;</div>
<div class="tip" id="fs3">val transformDeferred : (&#39;a list -&gt; &#39;a list)</div>
<div class="tip" id="fs4">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs5">val locker : Object</div>
<div class="tip" id="fs6">type obj = Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs7">val event : Event&lt;&#39;a&gt;</div>
<div class="tip" id="fs8">Multiple items<br />module Event<br /><br />from Microsoft.FSharp.Control<br /><br />--------------------<br />type Event&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; Event&lt;&#39;T&gt;<br />&#160;&#160;member Trigger : arg:&#39;T -&gt; unit<br />&#160;&#160;member Publish : IEvent&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Event&lt;_&gt;<br /><br />--------------------<br />type Event&lt;&#39;Delegate,&#39;Args (requires delegate and &#39;Delegate :&gt; Delegate)&gt; =<br />&#160;&#160;new : unit -&gt; Event&lt;&#39;Delegate,&#39;Args&gt;<br />&#160;&#160;member Trigger : sender:obj * args:&#39;Args -&gt; unit<br />&#160;&#160;member Publish : IEvent&lt;&#39;Delegate,&#39;Args&gt;<br /><br />Full name: Microsoft.FSharp.Control.Event&lt;_,_&gt;<br /><br />--------------------<br />new : unit -&gt; Event&lt;&#39;T&gt;<br /><br />--------------------<br />new : unit -&gt; Event&lt;&#39;Delegate,&#39;Args&gt;</div>
<div class="tip" id="fs9">val mutable deferPredicates : Map&lt;Guid,(&#39;a -&gt; bool)&gt;<br /><em><br /><br />&#160;The deferred predicates keyed by deferral ID</em></div>
<div class="tip" id="fs10">Multiple items<br />module Map<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Map&lt;&#39;Key,&#39;Value (requires comparison)&gt; =<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface ICollection&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface IDictionary&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member Add : key:&#39;Key * value:&#39;Value -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member ContainsKey : key:&#39;Key -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member Remove : key:&#39;Key -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Map&lt;_,_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;</div>
<div class="tip" id="fs11">Multiple items<br />type Guid =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;new : b:byte[] -&gt; Guid + 4 overloads<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : o:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member ToByteArray : unit -&gt; byte[]<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 2 overloads<br />&#160;&#160;&#160;&#160;static val Empty : Guid<br />&#160;&#160;&#160;&#160;static member NewGuid : unit -&gt; Guid<br />&#160;&#160;&#160;&#160;static member Parse : input:string -&gt; Guid<br />&#160;&#160;&#160;&#160;static member ParseExact : input:string * format:string -&gt; Guid<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Guid<br /><br />--------------------<br />Guid()<br />Guid(b: byte []) : unit<br />Guid(g: string) : unit<br />Guid(a: int, b: int16, c: int16, d: byte []) : unit<br />Guid(a: uint32, b: uint16, c: uint16, d: byte, e: byte, f: byte, g: byte, h: byte, i: byte, j: byte, k: byte) : unit<br />Guid(a: int, b: int16, c: int16, d: byte, e: byte, f: byte, g: byte, h: byte, i: byte, j: byte, k: byte) : unit</div>
<div class="tip" id="fs12">type bool = Boolean<br /><br />Full name: Microsoft.FSharp.Core.bool</div>
<div class="tip" id="fs13">val empty&lt;&#39;Key,&#39;T (requires comparison)&gt; : Map&lt;&#39;Key,&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Map.empty</div>
<div class="tip" id="fs14">val mutable deferredArgs : (&#39;a * Set&lt;Guid&gt;) list<br /><em><br /><br />&#160;The deferred arguments with the list the deferral IDs that caused them to be deferred</em></div>
<div class="tip" id="fs15">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;member IsProperSupersetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Set&lt;_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs16">val id : x:&#39;T -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.id</div>
<div class="tip" id="fs17">member DeferrableEvent.Defer : predicate:(&#39;a -&gt; bool) -&gt; IDisposable<br /><br />Full name: Script.DeferrableEvent`1.Defer<br /><em><br /><br />&#160;Defers publication of values for which the predicate returns true.<br />&#160;The deferral ends when the returned object is disposed. When the deferral<br />&#160;ends, all deferred values that are no longer deferred will be transformed<br />&#160;according to the constructor parameter and then triggered. Note that a call<br />&#160;to Defer will only affect later calls to Trigger; any values that are already<br />&#160;deferred and match the specified predicate will not be affected by this call.</em></div>
<div class="tip" id="fs18">val predicate : (&#39;a -&gt; bool)</div>
<div class="tip" id="fs19">val lock : lockObject:&#39;Lock -&gt; action:(unit -&gt; &#39;T) -&gt; &#39;T (requires reference type)<br /><br />Full name: Microsoft.FSharp.Core.Operators.lock</div>
<div class="tip" id="fs20">val deferralId : Guid</div>
<div class="tip" id="fs21">Guid.NewGuid() : Guid</div>
<div class="tip" id="fs22">member Map.Add : key:&#39;Key * value:&#39;Value -&gt; Map&lt;&#39;Key,&#39;Value&gt;</div>
<div class="tip" id="fs23">type IDisposable =<br />&#160;&#160;member Dispose : unit -&gt; unit<br /><br />Full name: System.IDisposable</div>
<div class="tip" id="fs24">val __ : DeferrableEvent&lt;&#39;a&gt;</div>
<div class="tip" id="fs25">member Map.Remove : key:&#39;Key -&gt; Map&lt;&#39;Key,&#39;Value&gt;</div>
<div class="tip" id="fs26">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member GetSlice : startIndex:int option * endIndex:int option -&gt; &#39;T list<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs27">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.map</div>
<div class="tip" id="fs28">val arg : &#39;a</div>
<div class="tip" id="fs29">val defIds : Set&lt;Guid&gt;</div>
<div class="tip" id="fs30">member Set.Remove : value:&#39;T -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs31">val noLongerDeferred : (&#39;a * Set&lt;Guid&gt;) list</div>
<div class="tip" id="fs32">val stillDeferred : (&#39;a * Set&lt;Guid&gt;) list</div>
<div class="tip" id="fs33">val partition : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list * &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.partition</div>
<div class="tip" id="fs34">val snd : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T2<br /><br />Full name: Microsoft.FSharp.Core.Operators.snd</div>
<div class="tip" id="fs35">val isEmpty : set:Set&lt;&#39;T&gt; -&gt; bool (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.isEmpty</div>
<div class="tip" id="fs36">val fst : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T1<br /><br />Full name: Microsoft.FSharp.Core.Operators.fst</div>
<div class="tip" id="fs37">val iter : action:(&#39;T -&gt; unit) -&gt; list:&#39;T list -&gt; unit<br /><br />Full name: Microsoft.FSharp.Collections.List.iter</div>
<div class="tip" id="fs38">member Event.Trigger : arg:&#39;T -&gt; unit</div>
<div class="tip" id="fs39">member DeferrableEvent.Publish : IEvent&lt;&#39;a&gt;<br /><br />Full name: Script.DeferrableEvent`1.Publish<br /><em><br /><br />&#160;Publishes an observation as a first class value.</em></div>
<div class="tip" id="fs40">property Event.Publish: IEvent&lt;&#39;a&gt;</div>
<div class="tip" id="fs41">member DeferrableEvent.Trigger : arg:&#39;a -&gt; unit<br /><br />Full name: Script.DeferrableEvent`1.Trigger<br /><em><br /><br />&#160;Triggers the observation using the given parameter. If the value is deferred,<br />&#160;it will only be deferred by the deferrals that are currently active when Trigger<br />&#160;is called. Subsequent calls to Defer with predicates that match the value<br />&#160;will not affect the deferral of this particular value (but future identical<br />&#160;values will be affected).</em></div>
<div class="tip" id="fs42">val filter : predicate:(&#39;Key -&gt; &#39;T -&gt; bool) -&gt; table:Map&lt;&#39;Key,&#39;T&gt; -&gt; Map&lt;&#39;Key,&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Map.filter</div>
<div class="tip" id="fs43">val toSeq : table:Map&lt;&#39;Key,&#39;T&gt; -&gt; seq&lt;&#39;Key * &#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Map.toSeq</div>
<div class="tip" id="fs44">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs45">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs46">val ofSeq : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.ofSeq</div>
<div class="tip" id="fs47">property Set.IsEmpty: bool</div>
<div class="tip" id="fs48">val e : DeferrableEvent&lt;int&gt;<br /><br />Full name: Script.e</div>
<div class="tip" id="fs49">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs50">val distinct : list:&#39;T list -&gt; &#39;T list (requires equality)<br /><br />Full name: Microsoft.FSharp.Collections.List.distinct</div>
<div class="tip" id="fs51">property DeferrableEvent.Publish: IEvent&lt;int&gt;<br /><em><br /><br />&#160;Publishes an observation as a first class value.</em></div>
<div class="tip" id="fs52">member IObservable.Add : callback:(&#39;T -&gt; unit) -&gt; unit</div>
<div class="tip" id="fs53">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs54">member DeferrableEvent.Trigger : arg:&#39;a -&gt; unit<br /><em><br /><br />&#160;Triggers the observation using the given parameter. If the value is deferred,<br />&#160;it will only be deferred by the deferrals that are currently active when Trigger<br />&#160;is called. Subsequent calls to Defer with predicates that match the value<br />&#160;will not affect the deferral of this particular value (but future identical<br />&#160;values will be affected).</em></div>
<div class="tip" id="fs55">val d : IDisposable<br /><br />Full name: Script.d</div>
<div class="tip" id="fs56">member DeferrableEvent.Defer : predicate:(&#39;a -&gt; bool) -&gt; IDisposable<br /><em><br /><br />&#160;Defers publication of values for which the predicate returns true.<br />&#160;The deferral ends when the returned object is disposed. When the deferral<br />&#160;ends, all deferred values that are no longer deferred will be transformed<br />&#160;according to the constructor parameter and then triggered. Note that a call<br />&#160;to Defer will only affect later calls to Trigger; any values that are already<br />&#160;deferred and match the specified predicate will not be affected by this call.</em></div>
<div class="tip" id="fs57">val i : int</div>
<div class="tip" id="fs58">IDisposable.Dispose() : unit</div>
<div class="tip" id="fs59">val d1 : IDisposable<br /><br />Full name: Script.d1</div>
<div class="tip" id="fs60">val d2 : IDisposable<br /><br />Full name: Script.d2</div>

