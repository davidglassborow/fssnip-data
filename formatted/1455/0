<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="o">--</span> <span class="i">a</span> <span class="k">function</span> <span class="k">to</span> <span class="i">find</span> <span class="i">the</span> <span class="i">state</span> <span class="k">of</span> <span class="i">a</span> <span class="i">certain</span> <span class="i">cell</span><span class="o">.</span> <span class="i">This</span> <span class="i">is</span> <span class="k">done</span> <span class="i">by</span> <span class="i">pulling</span> <span class="i">out</span>
<span class="o">--</span> <span class="i">the</span> <span class="i">corresponding</span> <span class="i">values</span> <span class="k">of</span> <span class="i">each</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">list</span> <span class="k">to</span> <span class="i">find</span> <span class="i">a</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">single</span> <span class="i">state</span> <span class="i">value</span><span class="o">.</span>

<span class="i">getState</span> <span class="o">::</span> <span class="i">World</span> <span class="k">-&gt;</span> <span class="i">Cell</span> <span class="k">-&gt;</span> <span class="i">State</span>
<span class="i">getState</span> <span class="i">world</span> (<span class="i">x</span>,<span class="i">y</span>) <span class="o">=</span> (<span class="i">world</span> <span class="o">!!</span> <span class="i">y</span>) <span class="o">!!</span> <span class="i">x</span>

<span class="o">--</span><span class="i">This</span> <span class="i">will</span> <span class="i">show</span> <span class="i">the</span> <span class="i">relative</span> <span class="i">cell</span> <span class="k">in</span> <span class="i">a</span> <span class="i">wrapped</span> <span class="i">world</span> <span class="k">if</span>
<span class="o">--</span> <span class="i">the</span> <span class="i">cell</span> <span class="i">is</span> <span class="i">outside</span> <span class="i">the</span> <span class="i">scope</span> <span class="k">of</span> <span class="i">the</span> <span class="i">worlds</span> <span class="i">dimensions</span>

<span class="i">wrap</span> <span class="o">::</span> <span class="i">Int</span> <span class="k">-&gt;</span> <span class="i">Int</span> <span class="k">-&gt;</span> <span class="i">Cell</span> <span class="k">-&gt;</span> <span class="i">Cell</span>
<span class="i">wrap</span> <span class="i">w</span> <span class="i">h</span> (<span class="i">x</span>,<span class="i">y</span>) 
    | <span class="i">negx</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="i">negy</span> <span class="o">&lt;</span> <span class="n">0</span> 		<span class="o">=</span> (<span class="i">w</span> <span class="o">+</span> <span class="i">negx</span>,<span class="i">h</span> <span class="o">+</span> <span class="i">negy</span>)
	| <span class="i">negx</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="i">negy</span> <span class="o">&gt;</span><span class="o">=</span><span class="n">0</span>		<span class="o">=</span> (<span class="i">w</span> <span class="o">+</span> <span class="i">negx</span>,<span class="i">negy</span>)
	| <span class="i">negx</span> <span class="o">&gt;</span><span class="o">=</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="i">negy</span> <span class="o">&lt;</span> <span class="n">0</span> 		<span class="o">=</span> (<span class="i">negx</span>,<span class="i">h</span> <span class="o">+</span> <span class="i">negy</span>)
	| <span class="i">negx</span> <span class="o">&gt;</span><span class="o">=</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="i">negy</span> <span class="o">&gt;</span><span class="o">=</span> <span class="n">0</span> 	<span class="o">=</span> (<span class="i">negx</span>,<span class="i">negy</span>)
	<span class="i">where</span>
	<span class="i">negx</span> <span class="o">=</span> <span class="i">x</span> <span class="k">`</span><span class="i">rem</span><span class="k">`</span> <span class="i">w</span>
	<span class="i">negy</span> <span class="o">=</span> <span class="i">y</span> <span class="k">`</span><span class="i">rem</span><span class="k">`</span> <span class="i">h</span>


<span class="o">--</span> <span class="i">This</span> <span class="i">is</span> <span class="i">a</span> <span class="k">function</span> <span class="k">to</span> <span class="i">find</span> <span class="i">the</span> <span class="i">Moore</span> <span class="i">neighbourhood</span> <span class="i">around</span> <span class="i">a</span> <span class="i">particular</span> <span class="i">cell</span>,
<span class="o">--</span> <span class="i">This</span> <span class="i">was</span> <span class="k">done</span> <span class="i">by</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">using</span> <span class="i">the</span> <span class="i">wrap</span> <span class="k">function</span> <span class="k">and</span> <span class="i">simply</span> <span class="i">finding</span> <span class="i">the</span> <span class="i">cells</span> 
<span class="o">--</span> <span class="i">plus</span> <span class="k">or</span> <span class="i">minus</span> <span class="i">around</span> <span class="i">the</span> <span class="i">particular</span> <span class="i">cell</span><span class="o">.</span> <span class="i">We</span> <span class="k">use</span> <span class="i">the</span> <span class="i">getstate</span> <span class="k">function</span> <span class="k">as</span> <span class="i">well</span><span class="o">.</span>

<span class="i">mooreHood</span> <span class="o">::</span> <span class="i">World</span> <span class="k">-&gt;</span> <span class="i">Cell</span> <span class="k">-&gt;</span> [<span class="i">State</span>]
<span class="i">mooreHood</span> <span class="i">world</span> (<span class="i">x</span>,<span class="i">y</span>) <span class="o">=</span> [<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">+</span> <span class="n">1</span>, <span class="i">y</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">-</span> <span class="n">1</span>, <span class="i">y</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">+</span> <span class="n">1</span>, <span class="i">y</span> <span class="o">+</span> <span class="n">1</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">+</span> <span class="n">1</span>, <span class="i">y</span> <span class="o">-</span> <span class="n">1</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">-</span> <span class="n">1</span>, <span class="i">y</span> <span class="o">+</span> <span class="n">1</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">-</span> <span class="n">1</span>, <span class="i">y</span> <span class="o">-</span> <span class="n">1</span>)),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span>, <span class="i">y</span> <span class="o">+</span> <span class="n">1</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span>, <span class="i">y</span> <span class="o">-</span> <span class="n">1</span>))]


<span class="i">mooreCells</span> <span class="o">::</span> <span class="i">Int</span> <span class="k">-&gt;</span> <span class="i">Int</span> <span class="k">-&gt;</span> <span class="i">Cell</span> <span class="k">-&gt;</span> [<span class="i">Cell</span>]
<span class="i">mooreCells</span> <span class="o">=</span> <span class="i">error</span> <span class="s">&quot;mooreCells not implemented&quot;</span>



<span class="o">--</span> <span class="i">This</span> <span class="i">is</span> <span class="i">the</span> <span class="i">same</span> <span class="i">general</span> <span class="i">funtion</span> <span class="k">as</span> <span class="i">mooreHood</span> <span class="i">however</span> <span class="i">it</span> <span class="i">is</span> <span class="i">only</span> <span class="i">finding</span> <span class="n">4</span> <span class="i">values</span> <span class="k">and</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">not</span> <span class="i">eight</span><span class="o">.</span>

<span class="i">vnHood</span> <span class="o">::</span> <span class="i">World</span> <span class="k">-&gt;</span> <span class="i">Cell</span> <span class="k">-&gt;</span> [<span class="i">State</span>]
<span class="i">vnHood</span> <span class="i">world</span> (<span class="i">x</span>,<span class="i">y</span>) <span class="o">=</span> 	[<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">+</span> <span class="n">1</span>, <span class="i">y</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span> <span class="o">-</span> <span class="n">1</span>, <span class="i">y</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span>, <span class="i">y</span> <span class="o">+</span> <span class="n">1</span> )),
			<span class="i">getState</span> <span class="i">world</span> (<span class="i">wrap</span> (<span class="i">width</span> <span class="i">world</span>) (<span class="i">height</span> <span class="i">world</span>) (<span class="i">x</span>, <span class="i">y</span> <span class="o">-</span> <span class="n">1</span>))]


<span class="i">vnCells</span> <span class="o">::</span> <span class="i">Int</span> <span class="k">-&gt;</span> <span class="i">Int</span> <span class="k">-&gt;</span> <span class="i">Cell</span> <span class="k">-&gt;</span> [<span class="i">Cell</span>]
<span class="i">vnCells</span> <span class="o">=</span> <span class="i">error</span> <span class="s">&quot;vnCells not implemented.&quot;</span>


<span class="o">--</span> <span class="i">This</span> <span class="k">function</span> <span class="i">finds</span> <span class="i">the</span> <span class="i">cells</span> <span class="k">in</span> <span class="i">a</span> <span class="i">row</span> <span class="i">firstly</span> <span class="k">and</span> <span class="i">will</span> <span class="i">be</span> <span class="i">used</span> <span class="i">later</span> <span class="k">in</span>
<span class="o">--</span> <span class="i">the</span> <span class="i">allCells</span> <span class="k">function</span><span class="o">.</span>

<span class="i">rowCells</span> <span class="o">::</span> <span class="i">Int</span> <span class="k">-&gt;</span> <span class="i">Int</span> <span class="k">-&gt;</span> [<span class="i">Cell</span>]
<span class="i">rowCells</span> <span class="i">width</span> <span class="i">y</span> <span class="o">=</span> [( <span class="i">x</span> , <span class="i">y</span> ) | <span class="i">x</span> <span class="o">&lt;-</span>[<span class="n">0..</span>(<span class="i">width</span> <span class="o">-</span> <span class="n">1</span>)]]


<span class="o">--</span> <span class="i">This</span> <span class="i">Function</span> <span class="i">will</span> <span class="i">output</span> <span class="i">all</span> <span class="i">Cells</span> <span class="k">in</span> <span class="i">a</span> <span class="i">given</span> <span class="i">world</span> (<span class="k">with</span> <span class="i">the</span>
<span class="o">--</span> <span class="i">help</span> <span class="k">of</span> <span class="i">the</span> <span class="i">rowCells</span> <span class="k">function</span>) <span class="k">and</span> <span class="i">it</span> <span class="i">uses</span> <span onmouseout="hideTip(event, 'fs1', 5)" onmouseover="showTip(event, 'fs1', 5)" class="i">list</span> <span class="i">functions</span>

<span class="i">allCells</span> <span class="o">::</span> <span class="i">World</span> <span class="k">-&gt;</span> [[<span class="i">Cell</span>]]
<span class="i">allCells</span> <span class="i">world</span><span class="o">=</span> [ <span class="i">rowCells</span> (<span class="i">width</span> <span class="i">world</span>) <span class="i">y</span> | <span class="i">y</span> <span class="o">&lt;-</span> [<span class="n">0..</span>((<span class="i">height</span> <span class="i">world</span>) <span class="o">-</span><span class="n">1</span>)]]

<span class="i">worldColor</span> <span class="o">::</span> <span class="i">World</span> <span class="k">-&gt;</span> [[<span class="i">Color</span>]]
<span class="i">worldColor</span> []		<span class="o">=</span> []
<span class="i">worldColor</span> (<span class="i">x</span><span class="o">:</span><span class="i">xs</span>)  	<span class="o">=</span> <span class="i">map</span> <span class="i">stateColor</span> <span class="i">x</span> <span class="o">:</span> <span class="i">worldColor</span> <span class="i">xs</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs2">Multiple items<br />val single : value:&#39;T -&gt; single (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.single<br /><br />--------------------<br />type single = System.Single<br /><br />Full name: Microsoft.FSharp.Core.single</div>
<div class="tip" id="fs3">val using : resource:&#39;T -&gt; action:(&#39;T -&gt; &#39;U) -&gt; &#39;U (requires &#39;T :&gt; System.IDisposable)<br /><br />Full name: Microsoft.FSharp.Core.Operators.using</div>
<div class="tip" id="fs4">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>

