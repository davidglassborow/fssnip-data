<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
<span class="l">184: </span>
<span class="l">185: </span>
<span class="l">186: </span>
<span class="l">187: </span>
<span class="l">188: </span>
<span class="l">189: </span>
<span class="l">190: </span>
<span class="l">191: </span>
<span class="l">192: </span>
<span class="l">193: </span>
<span class="l">194: </span>
<span class="l">195: </span>
<span class="l">196: </span>
<span class="l">197: </span>
<span class="l">198: </span>
<span class="l">199: </span>
<span class="l">200: </span>
<span class="l">201: </span>
<span class="l">202: </span>
<span class="l">203: </span>
<span class="l">204: </span>
<span class="l">205: </span>
<span class="l">206: </span>
<span class="l">207: </span>
<span class="l">208: </span>
<span class="l">209: </span>
<span class="l">210: </span>
<span class="l">211: </span>
<span class="l">212: </span>
<span class="l">213: </span>
<span class="l">214: </span>
<span class="l">215: </span>
<span class="l">216: </span>
<span class="l">217: </span>
<span class="l">218: </span>
<span class="l">219: </span>
<span class="l">220: </span>
<span class="l">221: </span>
<span class="l">222: </span>
<span class="l">223: </span>
<span class="l">224: </span>
<span class="l">225: </span>
<span class="l">226: </span>
<span class="l">227: </span>
<span class="l">228: </span>
<span class="l">229: </span>
<span class="l">230: </span>
<span class="l">231: </span>
<span class="l">232: </span>
<span class="l">233: </span>
<span class="l">234: </span>
<span class="l">235: </span>
<span class="l">236: </span>
<span class="l">237: </span>
<span class="l">238: </span>
<span class="l">239: </span>
<span class="l">240: </span>
<span class="l">241: </span>
<span class="l">242: </span>
<span class="l">243: </span>
<span class="l">244: </span>
<span class="l">245: </span>
<span class="l">246: </span>
<span class="l">247: </span>
<span class="l">248: </span>
<span class="l">249: </span>
<span class="l">250: </span>
<span class="l">251: </span>
<span class="l">252: </span>
<span class="l">253: </span>
<span class="l">254: </span>
<span class="l">255: </span>
<span class="l">256: </span>
<span class="l">257: </span>
<span class="l">258: </span>
<span class="l">259: </span>
<span class="l">260: </span>
<span class="l">261: </span>
<span class="l">262: </span>
<span class="l">263: </span>
<span class="l">264: </span>
<span class="l">265: </span>
<span class="l">266: </span>
<span class="l">267: </span>
<span class="l">268: </span>
<span class="l">269: </span>
<span class="l">270: </span>
<span class="l">271: </span>
<span class="l">272: </span>
<span class="l">273: </span>
<span class="l">274: </span>
<span class="l">275: </span>
<span class="l">276: </span>
<span class="l">277: </span>
<span class="l">278: </span>
<span class="l">279: </span>
<span class="l">280: </span>
<span class="l">281: </span>
<span class="l">282: </span>
<span class="l">283: </span>
<span class="l">284: </span>
<span class="l">285: </span>
<span class="l">286: </span>
<span class="l">287: </span>
<span class="l">288: </span>
<span class="l">289: </span>
<span class="l">290: </span>
<span class="l">291: </span>
<span class="l">292: </span>
<span class="l">293: </span>
<span class="l">294: </span>
<span class="l">295: </span>
<span class="l">296: </span>
<span class="l">297: </span>
<span class="l">298: </span>
<span class="l">299: </span>
<span class="l">300: </span>
<span class="l">301: </span>
<span class="l">302: </span>
<span class="l">303: </span>
<span class="l">304: </span>
<span class="l">305: </span>
<span class="l">306: </span>
<span class="l">307: </span>
<span class="l">308: </span>
<span class="l">309: </span>
<span class="l">310: </span>
<span class="l">311: </span>
<span class="l">312: </span>
<span class="l">313: </span>
<span class="l">314: </span>
<span class="l">315: </span>
<span class="l">316: </span>
<span class="l">317: </span>
<span class="l">318: </span>
<span class="l">319: </span>
<span class="l">320: </span>
<span class="l">321: </span>
<span class="l">322: </span>
<span class="l">323: </span>
<span class="l">324: </span>
<span class="l">325: </span>
<span class="l">326: </span>
<span class="l">327: </span>
<span class="l">328: </span>
<span class="l">329: </span>
<span class="l">330: </span>
<span class="l">331: </span>
<span class="l">332: </span>
<span class="l">333: </span>
<span class="l">334: </span>
<span class="l">335: </span>
<span class="l">336: </span>
<span class="l">337: </span>
<span class="l">338: </span>
<span class="l">339: </span>
<span class="l">340: </span>
<span class="l">341: </span>
<span class="l">342: </span>
<span class="l">343: </span>
<span class="l">344: </span>
<span class="l">345: </span>
<span class="l">346: </span>
<span class="l">347: </span>
<span class="l">348: </span>
<span class="l">349: </span>
<span class="l">350: </span>
<span class="l">351: </span>
<span class="l">352: </span>
<span class="l">353: </span>
<span class="l">354: </span>
<span class="l">355: </span>
<span class="l">356: </span>
<span class="l">357: </span>
<span class="l">358: </span>
<span class="l">359: </span>
<span class="l">360: </span>
<span class="l">361: </span>
<span class="l">362: </span>
<span class="l">363: </span>
<span class="l">364: </span>
<span class="l">365: </span>
<span class="l">366: </span>
<span class="l">367: </span>
<span class="l">368: </span>
<span class="l">369: </span>
<span class="l">370: </span>
<span class="l">371: </span>
<span class="l">372: </span>
<span class="l">373: </span>
<span class="l">374: </span>
<span class="l">375: </span>
<span class="l">376: </span>
<span class="l">377: </span>
<span class="l">378: </span>
<span class="l">379: </span>
<span class="l">380: </span>
<span class="l">381: </span>
<span class="l">382: </span>
<span class="l">383: </span>
<span class="l">384: </span>
<span class="l">385: </span>
<span class="l">386: </span>
<span class="l">387: </span>
<span class="l">388: </span>
<span class="l">389: </span>
<span class="l">390: </span>
<span class="l">391: </span>
<span class="l">392: </span>
<span class="l">393: </span>
<span class="l">394: </span>
<span class="l">395: </span>
<span class="l">396: </span>
<span class="l">397: </span>
<span class="l">398: </span>
<span class="l">399: </span>
<span class="l">400: </span>
<span class="l">401: </span>
<span class="l">402: </span>
<span class="l">403: </span>
<span class="l">404: </span>
<span class="l">405: </span>
<span class="l">406: </span>
<span class="l">407: </span>
<span class="l">408: </span>
<span class="l">409: </span>
<span class="l">410: </span>
<span class="l">411: </span>
<span class="l">412: </span>
<span class="l">413: </span>
<span class="l">414: </span>
<span class="l">415: </span>
<span class="l">416: </span>
<span class="l">417: </span>
<span class="l">418: </span>
<span class="l">419: </span>
<span class="l">420: </span>
<span class="l">421: </span>
<span class="l">422: </span>
<span class="l">423: </span>
<span class="l">424: </span>
<span class="l">425: </span>
<span class="l">426: </span>
<span class="l">427: </span>
<span class="l">428: </span>
<span class="l">429: </span>
<span class="l">430: </span>
<span class="l">431: </span>
<span class="l">432: </span>
<span class="l">433: </span>
<span class="l">434: </span>
<span class="l">435: </span>
<span class="l">436: </span>
<span class="l">437: </span>
<span class="l">438: </span>
<span class="l">439: </span>
<span class="l">440: </span>
<span class="l">441: </span>
<span class="l">442: </span>
<span class="l">443: </span>
<span class="l">444: </span>
<span class="l">445: </span>
<span class="l">446: </span>
<span class="l">447: </span>
<span class="l">448: </span>
<span class="l">449: </span>
<span class="l">450: </span>
<span class="l">451: </span>
<span class="l">452: </span>
<span class="l">453: </span>
<span class="l">454: </span>
<span class="l">455: </span>
<span class="l">456: </span>
<span class="l">457: </span>
<span class="l">458: </span>
<span class="l">459: </span>
<span class="l">460: </span>
<span class="l">461: </span>
<span class="l">462: </span>
<span class="l">463: </span>
<span class="l">464: </span>
<span class="l">465: </span>
<span class="l">466: </span>
<span class="l">467: </span>
<span class="l">468: </span>
<span class="l">469: </span>
<span class="l">470: </span>
<span class="l">471: </span>
<span class="l">472: </span>
<span class="l">473: </span>
<span class="l">474: </span>
<span class="l">475: </span>
<span class="l">476: </span>
<span class="l">477: </span>
<span class="l">478: </span>
<span class="l">479: </span>
<span class="l">480: </span>
<span class="l">481: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//---------------------------------------------------------------</span>
<span class="c">// Overview</span>
<span class="c">//</span>
<span class="c">// Below is a set of exercises designed to get you familiar </span>
<span class="c">// with F#. By the time you&#39;re done, you&#39;ll have a basic </span>
<span class="c">// understanding of the syntax of F# and learn a little more</span>
<span class="c">// about functional programming in general.</span>
<span class="c">//</span>
<span class="c">// Answering Problems</span>
<span class="c">// </span>
<span class="c">// This is where the fun begins! Each dashed section contains an </span>
<span class="c">// example designed to teach you a lesson about the F# language. </span>
<span class="c">// If you highlight the code in an example and execute it (use </span>
<span class="c">// Ctrl+Enter or the run button) it will initially fail. Your</span>
<span class="c">// job is to fill in the blanks to make it pass. With each</span>
<span class="c">// passing section, you&#39;ll learn more about F#, and add another</span>
<span class="c">// weapon to your F# programming arsenal.</span>
<span class="c">//</span>
<span class="c">// Start by highlighitng the section below and running it. Once</span>
<span class="c">// you see it fail, replace the __ with 2 to make it pass.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- about asserts -------------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">expected_value</span> <span class="o">=</span> <span class="n">1</span> <span class="o">+</span> <span class="n">1</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">actual_value</span> <span class="o">=</span> <span class="i">__</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="i">expected_value</span> <span onmouseout="hideTip(event, 'fs2', 4)" onmouseover="showTip(event, 'fs2', 4)" class="i">actual_value</span>

<span class="c">//Easy, right? Try the next one.</span>

<span class="c">//---------------------------------------------------------------</span>
 
<span class="c">// ---- more about asserts --------------------------------------</span>

<span class="i">AssertEquality</span> <span class="s">&quot;foo&quot;</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Let</span>
<span class="c">//</span>
<span class="c">// The let keyword is one of the most fundamental parts of F#.</span>
<span class="c">// You&#39;ll use it in almost every line of F# code you write, so</span>
<span class="c">// let&#39;s get to know it well! (no pun intended)</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- let binds a name to a value -----------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="i">x</span> <span class="o">=</span> <span class="n">50</span>
        
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">x</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- let infers the type of values when it can ---------------</span>

<span class="c">(* In F#, values created with let are inferred to have a type like</span>
<span class="c">   &quot;int&quot; for integer values, &quot;string&quot; for text values, and &quot;bool&quot; </span>
<span class="c">   for true or false values. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 7)" onmouseover="showTip(event, 'fs3', 7)" class="i">x</span> <span class="o">=</span> <span class="n">50</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="i">typeOfX</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 9)" onmouseover="showTip(event, 'fs3', 9)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="f">GetType</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs4', 11)" onmouseover="showTip(event, 'fs4', 11)" class="i">typeOfX</span> <span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">int</span><span class="o">&gt;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 14)" onmouseover="showTip(event, 'fs8', 14)" class="i">y</span> <span class="o">=</span> <span class="s">&quot;a string&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="i">expectedType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="i">y</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 17)" onmouseover="showTip(event, 'fs5', 17)" class="f">GetType</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 18)" onmouseover="showTip(event, 'fs9', 18)" class="i">expectedType</span> <span onmouseout="hideTip(event, 'fs6', 19)" onmouseover="showTip(event, 'fs6', 19)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can make the types explicit -------------------------</span>

<span class="k">let</span> (<span onmouseout="hideTip(event, 'fs3', 20)" onmouseover="showTip(event, 'fs3', 20)" class="i">x</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs7', 21)" onmouseover="showTip(event, 'fs7', 21)" class="t">int</span>) <span class="o">=</span> <span class="n">42</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 22)" onmouseover="showTip(event, 'fs4', 22)" class="i">typeOfX</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 23)" onmouseover="showTip(event, 'fs3', 23)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 24)" onmouseover="showTip(event, 'fs5', 24)" class="f">GetType</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 25)" onmouseover="showTip(event, 'fs8', 25)" class="i">y</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26)" class="t">string</span> <span class="o">=</span> <span class="s">&quot;forty two&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 27)" onmouseover="showTip(event, 'fs11', 27)" class="i">typeOfY</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 28)" onmouseover="showTip(event, 'fs8', 28)" class="i">y</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 29)" onmouseover="showTip(event, 'fs5', 29)" class="f">GetType</span>()

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs4', 30)" onmouseover="showTip(event, 'fs4', 30)" class="i">typeOfX</span> <span onmouseout="hideTip(event, 'fs6', 31)" onmouseover="showTip(event, 'fs6', 31)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs11', 32)" onmouseover="showTip(event, 'fs11', 32)" class="i">typeOfY</span> <span onmouseout="hideTip(event, 'fs6', 33)" onmouseover="showTip(event, 'fs6', 33)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>

<span class="c">(* You don&#39;t usually need to provide explicit type annotations </span>
<span class="c">   types for local varaibles, but type annotations can come in </span>
<span class="c">   handy in other contexts as you&#39;ll see later. *)</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- modifying the value of variables ------------------------</span>

<span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs12', 34)" onmouseover="showTip(event, 'fs12', 34)" class="v">x</span> <span class="o">=</span> <span class="n">100</span>
<span onmouseout="hideTip(event, 'fs12', 35)" onmouseover="showTip(event, 'fs12', 35)" class="v">x</span> <span class="o">&lt;-</span> <span class="n">200</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs12', 36)" onmouseover="showTip(event, 'fs12', 36)" class="i">x</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can&#39;t modify a value if it isn&#39;t mutable ------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 37)" onmouseover="showTip(event, 'fs3', 37)" class="i">x</span> <span class="o">=</span> <span class="n">50</span>

<span class="c">//What happens if you try to run the following line of code?</span>
<span onmouseout="hideTip(event, 'fs3', 38)" onmouseover="showTip(event, 'fs3', 38)" class="i">x</span> <span class="o">&lt;-</span> <span class="n">100</span>

<span class="c">//NOTE: Although you can&#39;t modify immutable values, it is </span>
<span class="c">//      possible to reuse the name of a value in some cases </span>
<span class="c">//      using &quot;shadowing&quot;.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 39)" onmouseover="showTip(event, 'fs3', 39)" class="i">x</span> <span class="o">=</span> <span class="n">100</span>
 
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs3', 40)" onmouseover="showTip(event, 'fs3', 40)" class="i">x</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Functions</span>
<span class="c">//</span>
<span class="c">// Now that you&#39;ve seen how to bind a name to a value with let,</span>
<span class="c">// you&#39;ll learn to use the let keyword to create functions.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating functions with let -----------------------------</span>

<span class="c">(* By default, F# is whitespace sensitive. For functions, this </span>
<span class="c">   means that the last line of a function is its return value,</span>
<span class="c">   and the body of a function is denoted by indentation. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 41)" onmouseover="showTip(event, 'fs13', 41)" class="f">add</span> <span onmouseout="hideTip(event, 'fs14', 42)" onmouseover="showTip(event, 'fs14', 42)" class="i">x</span> <span onmouseout="hideTip(event, 'fs15', 43)" onmouseover="showTip(event, 'fs15', 43)" class="i">y</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs14', 44)" onmouseover="showTip(event, 'fs14', 44)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs15', 45)" onmouseover="showTip(event, 'fs15', 45)" class="i">y</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs16', 46)" onmouseover="showTip(event, 'fs16', 46)" class="i">result1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 47)" onmouseover="showTip(event, 'fs13', 47)" class="f">add</span> <span class="n">2</span> <span class="n">2</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 48)" onmouseover="showTip(event, 'fs17', 48)" class="i">result2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 49)" onmouseover="showTip(event, 'fs13', 49)" class="f">add</span> <span class="n">5</span> <span class="n">2</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs16', 50)" onmouseover="showTip(event, 'fs16', 50)" class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs17', 51)" onmouseover="showTip(event, 'fs17', 51)" class="i">result2</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- nesting functions ---------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 52)" onmouseover="showTip(event, 'fs18', 52)" class="f">quadruple</span> <span onmouseout="hideTip(event, 'fs14', 53)" onmouseover="showTip(event, 'fs14', 53)" class="i">x</span> <span class="o">=</span>    
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 54)" onmouseover="showTip(event, 'fs19', 54)" class="f">double</span> <span onmouseout="hideTip(event, 'fs14', 55)" onmouseover="showTip(event, 'fs14', 55)" class="i">x</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs14', 56)" onmouseover="showTip(event, 'fs14', 56)" class="i">x</span> <span class="o">*</span> <span class="n">2</span>

    <span onmouseout="hideTip(event, 'fs19', 57)" onmouseover="showTip(event, 'fs19', 57)" class="f">double</span>(<span onmouseout="hideTip(event, 'fs19', 58)" onmouseover="showTip(event, 'fs19', 58)" class="f">double</span>(<span onmouseout="hideTip(event, 'fs14', 59)" onmouseover="showTip(event, 'fs14', 59)" class="i">x</span>))

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 60)" onmouseover="showTip(event, 'fs20', 60)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 61)" onmouseover="showTip(event, 'fs18', 61)" class="f">quadruple</span> <span class="n">4</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs20', 62)" onmouseover="showTip(event, 'fs20', 62)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- adding type annotations ---------------------------------</span>

<span class="c">(* Sometimes you need to help F#&#39;s type inference system out with</span>
<span class="c">   an explicit type annotation *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 63)" onmouseover="showTip(event, 'fs21', 63)" class="f">sayItLikeAnAuctioneer</span> (<span onmouseout="hideTip(event, 'fs22', 64)" onmouseover="showTip(event, 'fs22', 64)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 65)" onmouseover="showTip(event, 'fs10', 65)" class="t">string</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs22', 66)" onmouseover="showTip(event, 'fs22', 66)" class="i">text</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 67)" onmouseover="showTip(event, 'fs23', 67)" class="f">Replace</span>(<span class="s">&quot; &quot;</span>, <span class="s">&quot;&quot;</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 68)" onmouseover="showTip(event, 'fs24', 68)" class="i">auctioneered</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs21', 69)" onmouseover="showTip(event, 'fs21', 69)" class="f">sayItLikeAnAuctioneer</span> <span class="s">&quot;going once going twice sold to the lady in red&quot;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs24', 70)" onmouseover="showTip(event, 'fs24', 70)" class="i">auctioneered</span> <span class="i">__</span>

<span class="c">//TRY IT: What happens if you remove the type annotation on text?</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- using parenthesis to control the order of operation -----</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 71)" onmouseover="showTip(event, 'fs13', 71)" class="f">add</span> <span onmouseout="hideTip(event, 'fs14', 72)" onmouseover="showTip(event, 'fs14', 72)" class="i">x</span> <span onmouseout="hideTip(event, 'fs15', 73)" onmouseover="showTip(event, 'fs15', 73)" class="i">y</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs14', 74)" onmouseover="showTip(event, 'fs14', 74)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs15', 75)" onmouseover="showTip(event, 'fs15', 75)" class="i">y</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 76)" onmouseover="showTip(event, 'fs20', 76)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 77)" onmouseover="showTip(event, 'fs13', 77)" class="f">add</span> (<span onmouseout="hideTip(event, 'fs13', 78)" onmouseover="showTip(event, 'fs13', 78)" class="f">add</span> <span class="n">5</span> <span class="n">8</span>) (<span onmouseout="hideTip(event, 'fs13', 79)" onmouseover="showTip(event, 'fs13', 79)" class="f">add</span> <span class="n">1</span> <span class="n">1</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs20', 80)" onmouseover="showTip(event, 'fs20', 80)" class="i">result</span> <span class="i">__</span>

<span class="c">(* TRY IT: What happens if you remove the parensthesis?*)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Tuples</span>
<span class="c">//</span>
<span class="c">// Tuples are used to easily group together values in F#. They&#39;re </span>
<span class="c">// another fundamental construct of the language.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating tuples -----</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 81)" onmouseover="showTip(event, 'fs25', 81)" class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs25', 82)" onmouseover="showTip(event, 'fs25', 82)" class="i">items</span> (<span class="s">&quot;apple&quot;</span>, <span class="i">__</span>)

<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- accessing tuple elements --------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 83)" onmouseover="showTip(event, 'fs26', 83)" class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>, <span class="s">&quot;Mustang&quot;</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 84)" onmouseover="showTip(event, 'fs27', 84)" class="i">fruit</span>, <span onmouseout="hideTip(event, 'fs28', 85)" onmouseover="showTip(event, 'fs28', 85)" class="i">animal</span>, <span onmouseout="hideTip(event, 'fs29', 86)" onmouseover="showTip(event, 'fs29', 86)" class="i">car</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs26', 87)" onmouseover="showTip(event, 'fs26', 87)" class="i">items</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs27', 88)" onmouseover="showTip(event, 'fs27', 88)" class="i">fruit</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs28', 89)" onmouseover="showTip(event, 'fs28', 89)" class="i">animal</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs29', 90)" onmouseover="showTip(event, 'fs29', 90)" class="i">car</span> <span class="i">__</span>

<span class="c">(* Breaking apart tuples in this way uses a F# feature called </span>
<span class="c">   pattern matching. Pattern matching is another key concept in </span>
<span class="c">   F#, and you&#39;ll see more examples of it later on. *)</span>

<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- ignoring values when pattern matching -------------------</span>
       
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 91)" onmouseover="showTip(event, 'fs26', 91)" class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>, <span class="s">&quot;Mustang&quot;</span>)

<span class="k">let</span> _, <span onmouseout="hideTip(event, 'fs28', 92)" onmouseover="showTip(event, 'fs28', 92)" class="i">animal</span>, _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs26', 93)" onmouseover="showTip(event, 'fs26', 93)" class="i">items</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs28', 94)" onmouseover="showTip(event, 'fs28', 94)" class="i">animal</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- using tuples to return multiple values from a function --</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 95)" onmouseover="showTip(event, 'fs30', 95)" class="f">squareAndCube</span> <span onmouseout="hideTip(event, 'fs31', 96)" onmouseover="showTip(event, 'fs31', 96)" class="i">x</span> <span class="o">=</span>
    (<span onmouseout="hideTip(event, 'fs31', 97)" onmouseover="showTip(event, 'fs31', 97)" class="i">x</span> <span class="o">**</span> <span class="n">2.0</span>, <span onmouseout="hideTip(event, 'fs31', 98)" onmouseover="showTip(event, 'fs31', 98)" class="i">x</span> <span class="o">**</span> <span class="n">3.0</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 99)" onmouseover="showTip(event, 'fs32', 99)" class="i">squared</span>, <span onmouseout="hideTip(event, 'fs33', 100)" onmouseover="showTip(event, 'fs33', 100)" class="i">cubed</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 101)" onmouseover="showTip(event, 'fs30', 101)" class="f">squareAndCube</span> <span class="n">3.0</span>


<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs32', 102)" onmouseover="showTip(event, 'fs32', 102)" class="i">squared</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs33', 103)" onmouseover="showTip(event, 'fs33', 103)" class="i">cubed</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Branching</span>
<span class="c">//</span>
<span class="c">// Branching is used to tell a program to conditionally perform</span>
<span class="c">// an operation. It&#39;s another fundamental part of F#.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- basic if statements -------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 104)" onmouseover="showTip(event, 'fs34', 104)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs14', 105)" onmouseover="showTip(event, 'fs14', 105)" class="i">x</span> <span class="o">=</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs14', 106)" onmouseover="showTip(event, 'fs14', 106)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span>
        <span class="s">&quot;it&#39;s even!&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;it&#39;s odd!&quot;</span>
        
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 107)" onmouseover="showTip(event, 'fs35', 107)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs34', 108)" onmouseover="showTip(event, 'fs34', 108)" class="f">isEven</span> <span class="n">2</span>                
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs35', 109)" onmouseover="showTip(event, 'fs35', 109)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- if statements return values -----------------------------</span>
    
<span class="c">(* If you&#39;ve worked with other programming languages, you might</span>
<span class="c">   be surprised to find out that if statements in F# return</span>
<span class="c">   values. *)</span>
   
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 110)" onmouseover="showTip(event, 'fs35', 110)" class="i">result</span> <span class="o">=</span> 
    <span class="k">if</span> <span class="n">2</span> <span class="o">=</span> <span class="n">3</span> <span class="k">then</span>
        <span class="s">&quot;something is REALLY wrong&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;math is workng!&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs35', 111)" onmouseover="showTip(event, 'fs35', 111)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- branching with pattern matching -------------------------</span>
 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 112)" onmouseover="showTip(event, 'fs36', 112)" class="f">isApple</span> <span onmouseout="hideTip(event, 'fs37', 113)" onmouseover="showTip(event, 'fs37', 113)" class="i">x</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs37', 114)" onmouseover="showTip(event, 'fs37', 114)" class="i">x</span> <span class="k">with</span>
    | <span class="s">&quot;apple&quot;</span> <span class="k">-&gt;</span> <span class="k">true</span>
    | _ <span class="k">-&gt;</span> <span class="k">false</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 115)" onmouseover="showTip(event, 'fs38', 115)" class="i">result1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs36', 116)" onmouseover="showTip(event, 'fs36', 116)" class="f">isApple</span> <span class="s">&quot;apple&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 117)" onmouseover="showTip(event, 'fs39', 117)" class="i">result2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs36', 118)" onmouseover="showTip(event, 'fs36', 118)" class="f">isApple</span> <span class="s">&quot;&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs38', 119)" onmouseover="showTip(event, 'fs38', 119)" class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 120)" onmouseover="showTip(event, 'fs39', 120)" class="i">result2</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- branching with tuples and pattern matching --------------</span>
    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 121)" onmouseover="showTip(event, 'fs40', 121)" class="f">getDinner</span> <span onmouseout="hideTip(event, 'fs41', 122)" onmouseover="showTip(event, 'fs41', 122)" class="i">x</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs41', 123)" onmouseover="showTip(event, 'fs41', 123)" class="i">x</span> <span class="k">with</span>
    | (<span onmouseout="hideTip(event, 'fs42', 124)" onmouseover="showTip(event, 'fs42', 124)" class="i">name</span>, <span class="s">&quot;veggies&quot;</span>)
    | (<span onmouseout="hideTip(event, 'fs42', 125)" onmouseover="showTip(event, 'fs42', 125)" class="i">name</span>, <span class="s">&quot;fish&quot;</span>)
    | (<span onmouseout="hideTip(event, 'fs42', 126)" onmouseover="showTip(event, 'fs42', 126)" class="i">name</span>, <span class="s">&quot;chicken&quot;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs43', 127)" onmouseover="showTip(event, 'fs43', 127)" class="f">sprintf</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> doesn&#39;t want red meat&quot;</span> <span onmouseout="hideTip(event, 'fs42', 128)" onmouseover="showTip(event, 'fs42', 128)" class="i">name</span>
    | (<span onmouseout="hideTip(event, 'fs42', 129)" onmouseover="showTip(event, 'fs42', 129)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs44', 130)" onmouseover="showTip(event, 'fs44', 130)" class="i">foodChoice</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs43', 131)" onmouseover="showTip(event, 'fs43', 131)" class="f">sprintf</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> wants &#39;em some </span><span class="pf">%s</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs42', 132)" onmouseover="showTip(event, 'fs42', 132)" class="i">name</span> <span onmouseout="hideTip(event, 'fs44', 133)" onmouseover="showTip(event, 'fs44', 133)" class="i">foodChoice</span> 
    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 134)" onmouseover="showTip(event, 'fs45', 134)" class="i">person1</span> <span class="o">=</span> (<span class="s">&quot;Bob&quot;</span>, <span class="s">&quot;fish&quot;</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs46', 135)" onmouseover="showTip(event, 'fs46', 135)" class="i">person2</span> <span class="o">=</span> (<span class="s">&quot;Sally&quot;</span>, <span class="s">&quot;Burger&quot;</span>)

<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs40', 136)" onmouseover="showTip(event, 'fs40', 136)" class="i">getDinner</span> <span onmouseout="hideTip(event, 'fs45', 137)" onmouseover="showTip(event, 'fs45', 137)" class="i">person1</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs40', 138)" onmouseover="showTip(event, 'fs40', 138)" class="i">getDinner</span> <span onmouseout="hideTip(event, 'fs46', 139)" onmouseover="showTip(event, 'fs46', 139)" class="i">person2</span>) <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Lists</span>
<span class="c">//</span>
<span class="c">// Lists are a another important building block to use in F# </span>
<span class="c">// programming. They are used to group an arbitrarily large </span>
<span class="c">// sequence of values. It&#39;s very common to store a values in a </span>
<span class="c">// list and perform operations across each value in the list.</span>
<span class="c">//---------------------------------------------------------------</span>
   
<span class="c">// ---- creating lists ------------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs47', 140)" onmouseover="showTip(event, 'fs47', 140)" class="i">list</span> <span class="o">=</span> [<span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs47', 141)" onmouseover="showTip(event, 'fs47', 141)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs48', 142)" onmouseover="showTip(event, 'fs48', 142)" class="i">Head</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs47', 143)" onmouseover="showTip(event, 'fs47', 143)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs49', 144)" onmouseover="showTip(event, 'fs49', 144)" class="i">Tail</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs47', 145)" onmouseover="showTip(event, 'fs47', 145)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs50', 146)" onmouseover="showTip(event, 'fs50', 146)" class="i">Length</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- building new lists---------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs51', 147)" onmouseover="showTip(event, 'fs51', 147)" class="i">first</span> <span class="o">=</span> [<span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs52', 148)" onmouseover="showTip(event, 'fs52', 148)" class="i">second</span> <span class="o">=</span> <span class="s">&quot;pear&quot;</span> <span class="o">::</span> <span onmouseout="hideTip(event, 'fs51', 149)" onmouseover="showTip(event, 'fs51', 149)" class="i">first</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs53', 150)" onmouseover="showTip(event, 'fs53', 150)" class="i">third</span> <span class="o">=</span> <span class="s">&quot;apple&quot;</span> <span class="o">::</span> <span onmouseout="hideTip(event, 'fs52', 151)" onmouseover="showTip(event, 'fs52', 151)" class="i">second</span>

<span class="c">//Note: &quot;::&quot; is known as &quot;cons&quot;</span>

<span class="i">AssertEquality</span> [<span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>] <span onmouseout="hideTip(event, 'fs53', 152)" onmouseover="showTip(event, 'fs53', 152)" class="i">third</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs52', 153)" onmouseover="showTip(event, 'fs52', 153)" class="i">second</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs51', 154)" onmouseover="showTip(event, 'fs51', 154)" class="i">first</span> <span class="i">__</span>

<span class="c">//What happens if you uncomment the following?</span>

<span class="c">//first.Head &lt;- &quot;apple&quot;</span>
<span class="c">//first.Tail &lt;- [&quot;peach&quot;; &quot;pear&quot;]</span>

<span class="c">//THINK ABOUT IT: Can you change the contents of a list once it </span>
<span class="c">//                has been created?</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists with a range------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs54', 155)" onmouseover="showTip(event, 'fs54', 155)" class="i">list</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">4</span>]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs54', 156)" onmouseover="showTip(event, 'fs54', 156)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs55', 157)" onmouseover="showTip(event, 'fs55', 157)" class="i">Head</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs54', 158)" onmouseover="showTip(event, 'fs54', 158)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 159)" onmouseover="showTip(event, 'fs56', 159)" class="i">Tail</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists with comprehensions-----------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs54', 160)" onmouseover="showTip(event, 'fs54', 160)" class="i">list</span> <span class="o">=</span> [<span class="k">for</span> <span onmouseout="hideTip(event, 'fs57', 161)" onmouseover="showTip(event, 'fs57', 161)" class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">4</span> <span class="k">do</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs57', 162)" onmouseover="showTip(event, 'fs57', 162)" class="i">i</span> ]
                            
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs54', 163)" onmouseover="showTip(event, 'fs54', 163)" class="i">list</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- comprehensions with conditions --------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs54', 164)" onmouseover="showTip(event, 'fs54', 164)" class="i">list</span> <span class="o">=</span> [<span class="k">for</span> <span onmouseout="hideTip(event, 'fs57', 165)" onmouseover="showTip(event, 'fs57', 165)" class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">10</span> <span class="k">do</span> 
                <span class="k">if</span> <span onmouseout="hideTip(event, 'fs57', 166)" onmouseover="showTip(event, 'fs57', 166)" class="i">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs57', 167)" onmouseover="showTip(event, 'fs57', 167)" class="i">i</span> ]
                    
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs54', 168)" onmouseover="showTip(event, 'fs54', 168)" class="i">list</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- transforming lits with map ------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs58', 169)" onmouseover="showTip(event, 'fs58', 169)" class="f">square</span> <span onmouseout="hideTip(event, 'fs14', 170)" onmouseover="showTip(event, 'fs14', 170)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs14', 171)" onmouseover="showTip(event, 'fs14', 171)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs14', 172)" onmouseover="showTip(event, 'fs14', 172)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs59', 173)" onmouseover="showTip(event, 'fs59', 173)" class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 174)" onmouseover="showTip(event, 'fs60', 174)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs61', 175)" onmouseover="showTip(event, 'fs61', 175)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs62', 176)" onmouseover="showTip(event, 'fs62', 176)" class="f">map</span> <span onmouseout="hideTip(event, 'fs58', 177)" onmouseover="showTip(event, 'fs58', 177)" class="f">square</span> <span onmouseout="hideTip(event, 'fs59', 178)" onmouseover="showTip(event, 'fs59', 178)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs59', 179)" onmouseover="showTip(event, 'fs59', 179)" class="i">original</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs60', 180)" onmouseover="showTip(event, 'fs60', 180)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- filtering lists -----------------------------------------</span>
 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 181)" onmouseover="showTip(event, 'fs63', 181)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs14', 182)" onmouseover="showTip(event, 'fs14', 182)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs14', 183)" onmouseover="showTip(event, 'fs14', 183)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs59', 184)" onmouseover="showTip(event, 'fs59', 184)" class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 185)" onmouseover="showTip(event, 'fs60', 185)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs61', 186)" onmouseover="showTip(event, 'fs61', 186)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs64', 187)" onmouseover="showTip(event, 'fs64', 187)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs63', 188)" onmouseover="showTip(event, 'fs63', 188)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs59', 189)" onmouseover="showTip(event, 'fs59', 189)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs59', 190)" onmouseover="showTip(event, 'fs59', 190)" class="i">original</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs60', 191)" onmouseover="showTip(event, 'fs60', 191)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- dividing lists with partition ---------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs65', 192)" onmouseover="showTip(event, 'fs65', 192)" class="f">isOdd</span> <span onmouseout="hideTip(event, 'fs14', 193)" onmouseover="showTip(event, 'fs14', 193)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs66', 194)" onmouseover="showTip(event, 'fs66', 194)" class="f">not</span>(<span onmouseout="hideTip(event, 'fs14', 195)" onmouseover="showTip(event, 'fs14', 195)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs59', 196)" onmouseover="showTip(event, 'fs59', 196)" class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs67', 197)" onmouseover="showTip(event, 'fs67', 197)" class="i">result1</span>, <span onmouseout="hideTip(event, 'fs68', 198)" onmouseover="showTip(event, 'fs68', 198)" class="i">result2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs61', 199)" onmouseover="showTip(event, 'fs61', 199)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 200)" onmouseover="showTip(event, 'fs69', 200)" class="f">partition</span> <span onmouseout="hideTip(event, 'fs65', 201)" onmouseover="showTip(event, 'fs65', 201)" class="f">isOdd</span> <span onmouseout="hideTip(event, 'fs59', 202)" onmouseover="showTip(event, 'fs59', 202)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs67', 203)" onmouseover="showTip(event, 'fs67', 203)" class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs68', 204)" onmouseover="showTip(event, 'fs68', 204)" class="i">result2</span> <span class="i">__</span>

<span class="c">(* Note: There are many other useful methods in the List module. Check them</span>
<span class="c">   via intellisense in Visual Studio by typing &#39;.&#39; after List, or online at</span>
<span class="c">   http://msdn.microsoft.com/en-us/library/ee353738.aspx *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Pipelining</span>
<span class="c">//</span>
<span class="c">// Now that you&#39;ve seen a few operations for working with lists, </span>
<span class="c">// you can  combine them to do more interesting things</span>
<span class="c">//---------------------------------------------------------------</span>


<span class="c">// ---- squaring even numbers with separate statements ----------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs58', 205)" onmouseover="showTip(event, 'fs58', 205)" class="f">square</span> <span onmouseout="hideTip(event, 'fs14', 206)" onmouseover="showTip(event, 'fs14', 206)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs14', 207)" onmouseover="showTip(event, 'fs14', 207)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs14', 208)" onmouseover="showTip(event, 'fs14', 208)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 209)" onmouseover="showTip(event, 'fs63', 209)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs14', 210)" onmouseover="showTip(event, 'fs14', 210)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs14', 211)" onmouseover="showTip(event, 'fs14', 211)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>

<span class="c">(* One way to combine the operations is by using separate statements.</span>
<span class="c">   However, this is can be clumsy since you have to name each result. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs70', 212)" onmouseover="showTip(event, 'fs70', 212)" class="i">numbers</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 213)" onmouseover="showTip(event, 'fs71', 213)" class="i">evens</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs61', 214)" onmouseover="showTip(event, 'fs61', 214)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs64', 215)" onmouseover="showTip(event, 'fs64', 215)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs63', 216)" onmouseover="showTip(event, 'fs63', 216)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs70', 217)" onmouseover="showTip(event, 'fs70', 217)" class="i">numbers</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 218)" onmouseover="showTip(event, 'fs60', 218)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs61', 219)" onmouseover="showTip(event, 'fs61', 219)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs62', 220)" onmouseover="showTip(event, 'fs62', 220)" class="f">map</span> <span onmouseout="hideTip(event, 'fs58', 221)" onmouseover="showTip(event, 'fs58', 221)" class="f">square</span> <span onmouseout="hideTip(event, 'fs71', 222)" onmouseover="showTip(event, 'fs71', 222)" class="i">evens</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs60', 223)" onmouseover="showTip(event, 'fs60', 223)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- squaring even numbers with parens -----------------------</span>

<span class="c">(* You can avoid this problem by using parens to pass the result of one</span>
<span class="c">   funciton to another. This can be difficult to read since you have to </span>
<span class="c">   start from the innermost function and work your way out. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs70', 224)" onmouseover="showTip(event, 'fs70', 224)" class="i">numbers</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 225)" onmouseover="showTip(event, 'fs60', 225)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs61', 226)" onmouseover="showTip(event, 'fs61', 226)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs62', 227)" onmouseover="showTip(event, 'fs62', 227)" class="f">map</span> <span onmouseout="hideTip(event, 'fs58', 228)" onmouseover="showTip(event, 'fs58', 228)" class="f">square</span> (<span onmouseout="hideTip(event, 'fs61', 229)" onmouseover="showTip(event, 'fs61', 229)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs64', 230)" onmouseover="showTip(event, 'fs64', 230)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs63', 231)" onmouseover="showTip(event, 'fs63', 231)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs70', 232)" onmouseover="showTip(event, 'fs70', 232)" class="i">numbers</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs60', 233)" onmouseover="showTip(event, 'fs60', 233)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- squaring even numbers with the pipeline operator --------</span>

<span class="c">(* In F#, you can use the pipeline operator to get the benefit of the </span>
<span class="c">   parens style with the readablity of the statement style. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 234)" onmouseover="showTip(event, 'fs60', 234)" class="i">result</span> <span class="o">=</span>
    [<span class="n">0..</span><span class="n">5</span>]
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs61', 235)" onmouseover="showTip(event, 'fs61', 235)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs64', 236)" onmouseover="showTip(event, 'fs64', 236)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs63', 237)" onmouseover="showTip(event, 'fs63', 237)" class="f">isEven</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs61', 238)" onmouseover="showTip(event, 'fs61', 238)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs62', 239)" onmouseover="showTip(event, 'fs62', 239)" class="f">map</span> <span onmouseout="hideTip(event, 'fs58', 240)" onmouseover="showTip(event, 'fs58', 240)" class="f">square</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs60', 241)" onmouseover="showTip(event, 'fs60', 241)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- using lambdas -------------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs72', 242)" onmouseover="showTip(event, 'fs72', 242)" class="i">colors</span> <span class="o">=</span> [<span class="s">&quot;maize&quot;</span>; <span class="s">&quot;blue&quot;</span>]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs73', 243)" onmouseover="showTip(event, 'fs73', 243)" class="i">echo</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs72', 244)" onmouseover="showTip(event, 'fs72', 244)" class="i">colors</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs61', 245)" onmouseover="showTip(event, 'fs61', 245)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs62', 246)" onmouseover="showTip(event, 'fs62', 246)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs37', 247)" onmouseover="showTip(event, 'fs37', 247)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs37', 248)" onmouseover="showTip(event, 'fs37', 248)" class="i">x</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs37', 249)" onmouseover="showTip(event, 'fs37', 249)" class="i">x</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs73', 250)" onmouseover="showTip(event, 'fs73', 250)" class="i">echo</span> <span class="i">__</span>

<span class="c">(* The fun keyword allows you to create a function inline without giving</span>
<span class="c">   it a name. These functions are known as anonymous functions, lambdas,</span>
<span class="c">   or lambda functions. *)</span>

<span class="c">//---------------------------------------------------------------</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val expected_value : int<br /><br />Full name: Script.expected_value</div>
<div class="tip" id="fs2">val actual_value : obj<br /><br />Full name: Script.actual_value</div>
<div class="tip" id="fs3">val x : int<br /><br />Full name: Script.x</div>
<div class="tip" id="fs4">val typeOfX : System.Type<br /><br />Full name: Script.typeOfX</div>
<div class="tip" id="fs5">System.Object.GetType() : System.Type</div>
<div class="tip" id="fs6">val typeof&lt;&#39;T&gt; : System.Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs7">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs8">val y : string<br /><br />Full name: Script.y</div>
<div class="tip" id="fs9">val expectedType : System.Type<br /><br />Full name: Script.expectedType</div>
<div class="tip" id="fs10">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs11">val typeOfY : System.Type<br /><br />Full name: Script.typeOfY</div>
<div class="tip" id="fs12">val mutable x : int<br /><br />Full name: Script.x</div>
<div class="tip" id="fs13">val add : x:int -&gt; y:int -&gt; int<br /><br />Full name: Script.add</div>
<div class="tip" id="fs14">val x : int</div>
<div class="tip" id="fs15">val y : int</div>
<div class="tip" id="fs16">val result1 : int<br /><br />Full name: Script.result1</div>
<div class="tip" id="fs17">val result2 : int<br /><br />Full name: Script.result2</div>
<div class="tip" id="fs18">val quadruple : x:int -&gt; int<br /><br />Full name: Script.quadruple</div>
<div class="tip" id="fs19">Multiple items<br />val double : (int -&gt; int)<br /><br />--------------------<br />type double = System.Double<br /><br />Full name: Microsoft.FSharp.Core.double</div>
<div class="tip" id="fs20">val result : int<br /><br />Full name: Script.result</div>
<div class="tip" id="fs21">val sayItLikeAnAuctioneer : text:string -&gt; string<br /><br />Full name: Script.sayItLikeAnAuctioneer</div>
<div class="tip" id="fs22">val text : string</div>
<div class="tip" id="fs23">System.String.Replace(oldValue: string, newValue: string) : string<br />System.String.Replace(oldChar: char, newChar: char) : string</div>
<div class="tip" id="fs24">val auctioneered : string<br /><br />Full name: Script.auctioneered</div>
<div class="tip" id="fs25">val items : string * string<br /><br />Full name: Script.items</div>
<div class="tip" id="fs26">val items : string * string * string<br /><br />Full name: Script.items</div>
<div class="tip" id="fs27">val fruit : string<br /><br />Full name: Script.fruit</div>
<div class="tip" id="fs28">val animal : string<br /><br />Full name: Script.animal</div>
<div class="tip" id="fs29">val car : string<br /><br />Full name: Script.car</div>
<div class="tip" id="fs30">val squareAndCube : x:float -&gt; float * float<br /><br />Full name: Script.squareAndCube</div>
<div class="tip" id="fs31">val x : float</div>
<div class="tip" id="fs32">val squared : float<br /><br />Full name: Script.squared</div>
<div class="tip" id="fs33">val cubed : float<br /><br />Full name: Script.cubed</div>
<div class="tip" id="fs34">val isEven : x:int -&gt; string<br /><br />Full name: Script.isEven</div>
<div class="tip" id="fs35">val result : string<br /><br />Full name: Script.result</div>
<div class="tip" id="fs36">val isApple : x:string -&gt; bool<br /><br />Full name: Script.isApple</div>
<div class="tip" id="fs37">val x : string</div>
<div class="tip" id="fs38">val result1 : bool<br /><br />Full name: Script.result1</div>
<div class="tip" id="fs39">val result2 : bool<br /><br />Full name: Script.result2</div>
<div class="tip" id="fs40">val getDinner : string * string -&gt; string<br /><br />Full name: Script.getDinner</div>
<div class="tip" id="fs41">val x : string * string</div>
<div class="tip" id="fs42">val name : string</div>
<div class="tip" id="fs43">val sprintf : format:Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>
<div class="tip" id="fs44">val foodChoice : string</div>
<div class="tip" id="fs45">val person1 : string * string<br /><br />Full name: Script.person1</div>
<div class="tip" id="fs46">val person2 : string * string<br /><br />Full name: Script.person2</div>
<div class="tip" id="fs47">Multiple items<br />val list : string list<br /><br />Full name: Script.list<br /><br />--------------------<br />type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs48">property List.Head: string</div>
<div class="tip" id="fs49">property List.Tail: string list</div>
<div class="tip" id="fs50">property List.Length: int</div>
<div class="tip" id="fs51">val first : string list<br /><br />Full name: Script.first</div>
<div class="tip" id="fs52">val second : string list<br /><br />Full name: Script.second</div>
<div class="tip" id="fs53">val third : string list<br /><br />Full name: Script.third</div>
<div class="tip" id="fs54">Multiple items<br />val list : int list<br /><br />Full name: Script.list<br /><br />--------------------<br />type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs55">property List.Head: int</div>
<div class="tip" id="fs56">property List.Tail: int list</div>
<div class="tip" id="fs57">val i : int</div>
<div class="tip" id="fs58">val square : x:int -&gt; int<br /><br />Full name: Script.square</div>
<div class="tip" id="fs59">val original : int list<br /><br />Full name: Script.original</div>
<div class="tip" id="fs60">val result : int list<br /><br />Full name: Script.result</div>
<div class="tip" id="fs61">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs62">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.map</div>
<div class="tip" id="fs63">val isEven : x:int -&gt; bool<br /><br />Full name: Script.isEven</div>
<div class="tip" id="fs64">val filter : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.filter</div>
<div class="tip" id="fs65">val isOdd : x:int -&gt; bool<br /><br />Full name: Script.isOdd</div>
<div class="tip" id="fs66">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs67">val result1 : int list<br /><br />Full name: Script.result1</div>
<div class="tip" id="fs68">val result2 : int list<br /><br />Full name: Script.result2</div>
<div class="tip" id="fs69">val partition : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list * &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.partition</div>
<div class="tip" id="fs70">val numbers : int list<br /><br />Full name: Script.numbers</div>
<div class="tip" id="fs71">val evens : int list<br /><br />Full name: Script.evens</div>
<div class="tip" id="fs72">val colors : string list<br /><br />Full name: Script.colors</div>
<div class="tip" id="fs73">val echo : string list<br /><br />Full name: Script.echo</div>

