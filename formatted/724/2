<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
<span class="l">184: </span>
<span class="l">185: </span>
<span class="l">186: </span>
<span class="l">187: </span>
<span class="l">188: </span>
<span class="l">189: </span>
<span class="l">190: </span>
<span class="l">191: </span>
<span class="l">192: </span>
<span class="l">193: </span>
<span class="l">194: </span>
<span class="l">195: </span>
<span class="l">196: </span>
<span class="l">197: </span>
<span class="l">198: </span>
<span class="l">199: </span>
<span class="l">200: </span>
<span class="l">201: </span>
<span class="l">202: </span>
<span class="l">203: </span>
<span class="l">204: </span>
<span class="l">205: </span>
<span class="l">206: </span>
<span class="l">207: </span>
<span class="l">208: </span>
<span class="l">209: </span>
<span class="l">210: </span>
<span class="l">211: </span>
<span class="l">212: </span>
<span class="l">213: </span>
<span class="l">214: </span>
<span class="l">215: </span>
<span class="l">216: </span>
<span class="l">217: </span>
<span class="l">218: </span>
<span class="l">219: </span>
<span class="l">220: </span>
<span class="l">221: </span>
<span class="l">222: </span>
<span class="l">223: </span>
<span class="l">224: </span>
<span class="l">225: </span>
<span class="l">226: </span>
<span class="l">227: </span>
<span class="l">228: </span>
<span class="l">229: </span>
<span class="l">230: </span>
<span class="l">231: </span>
<span class="l">232: </span>
<span class="l">233: </span>
<span class="l">234: </span>
<span class="l">235: </span>
<span class="l">236: </span>
<span class="l">237: </span>
<span class="l">238: </span>
<span class="l">239: </span>
<span class="l">240: </span>
<span class="l">241: </span>
<span class="l">242: </span>
<span class="l">243: </span>
<span class="l">244: </span>
<span class="l">245: </span>
<span class="l">246: </span>
<span class="l">247: </span>
<span class="l">248: </span>
<span class="l">249: </span>
<span class="l">250: </span>
<span class="l">251: </span>
<span class="l">252: </span>
<span class="l">253: </span>
<span class="l">254: </span>
<span class="l">255: </span>
<span class="l">256: </span>
<span class="l">257: </span>
<span class="l">258: </span>
<span class="l">259: </span>
<span class="l">260: </span>
<span class="l">261: </span>
<span class="l">262: </span>
<span class="l">263: </span>
<span class="l">264: </span>
<span class="l">265: </span>
<span class="l">266: </span>
<span class="l">267: </span>
<span class="l">268: </span>
<span class="l">269: </span>
<span class="l">270: </span>
<span class="l">271: </span>
<span class="l">272: </span>
<span class="l">273: </span>
<span class="l">274: </span>
<span class="l">275: </span>
<span class="l">276: </span>
<span class="l">277: </span>
<span class="l">278: </span>
<span class="l">279: </span>
<span class="l">280: </span>
<span class="l">281: </span>
<span class="l">282: </span>
<span class="l">283: </span>
<span class="l">284: </span>
<span class="l">285: </span>
<span class="l">286: </span>
<span class="l">287: </span>
<span class="l">288: </span>
<span class="l">289: </span>
<span class="l">290: </span>
<span class="l">291: </span>
<span class="l">292: </span>
<span class="l">293: </span>
<span class="l">294: </span>
<span class="l">295: </span>
<span class="l">296: </span>
<span class="l">297: </span>
<span class="l">298: </span>
<span class="l">299: </span>
<span class="l">300: </span>
<span class="l">301: </span>
<span class="l">302: </span>
<span class="l">303: </span>
<span class="l">304: </span>
<span class="l">305: </span>
<span class="l">306: </span>
<span class="l">307: </span>
<span class="l">308: </span>
<span class="l">309: </span>
<span class="l">310: </span>
<span class="l">311: </span>
<span class="l">312: </span>
<span class="l">313: </span>
<span class="l">314: </span>
<span class="l">315: </span>
<span class="l">316: </span>
<span class="l">317: </span>
<span class="l">318: </span>
<span class="l">319: </span>
<span class="l">320: </span>
<span class="l">321: </span>
<span class="l">322: </span>
<span class="l">323: </span>
<span class="l">324: </span>
<span class="l">325: </span>
<span class="l">326: </span>
<span class="l">327: </span>
<span class="l">328: </span>
<span class="l">329: </span>
<span class="l">330: </span>
<span class="l">331: </span>
<span class="l">332: </span>
<span class="l">333: </span>
<span class="l">334: </span>
<span class="l">335: </span>
<span class="l">336: </span>
<span class="l">337: </span>
<span class="l">338: </span>
<span class="l">339: </span>
<span class="l">340: </span>
<span class="l">341: </span>
<span class="l">342: </span>
<span class="l">343: </span>
<span class="l">344: </span>
<span class="l">345: </span>
<span class="l">346: </span>
<span class="l">347: </span>
<span class="l">348: </span>
<span class="l">349: </span>
<span class="l">350: </span>
<span class="l">351: </span>
<span class="l">352: </span>
<span class="l">353: </span>
<span class="l">354: </span>
<span class="l">355: </span>
<span class="l">356: </span>
<span class="l">357: </span>
<span class="l">358: </span>
<span class="l">359: </span>
<span class="l">360: </span>
<span class="l">361: </span>
<span class="l">362: </span>
<span class="l">363: </span>
<span class="l">364: </span>
<span class="l">365: </span>
<span class="l">366: </span>
<span class="l">367: </span>
<span class="l">368: </span>
<span class="l">369: </span>
<span class="l">370: </span>
<span class="l">371: </span>
<span class="l">372: </span>
<span class="l">373: </span>
<span class="l">374: </span>
<span class="l">375: </span>
<span class="l">376: </span>
<span class="l">377: </span>
<span class="l">378: </span>
<span class="l">379: </span>
<span class="l">380: </span>
<span class="l">381: </span>
<span class="l">382: </span>
<span class="l">383: </span>
<span class="l">384: </span>
<span class="l">385: </span>
<span class="l">386: </span>
<span class="l">387: </span>
<span class="l">388: </span>
<span class="l">389: </span>
<span class="l">390: </span>
<span class="l">391: </span>
<span class="l">392: </span>
<span class="l">393: </span>
<span class="l">394: </span>
<span class="l">395: </span>
<span class="l">396: </span>
<span class="l">397: </span>
<span class="l">398: </span>
<span class="l">399: </span>
<span class="l">400: </span>
<span class="l">401: </span>
<span class="l">402: </span>
<span class="l">403: </span>
<span class="l">404: </span>
<span class="l">405: </span>
<span class="l">406: </span>
<span class="l">407: </span>
<span class="l">408: </span>
<span class="l">409: </span>
<span class="l">410: </span>
<span class="l">411: </span>
<span class="l">412: </span>
<span class="l">413: </span>
<span class="l">414: </span>
<span class="l">415: </span>
<span class="l">416: </span>
<span class="l">417: </span>
<span class="l">418: </span>
<span class="l">419: </span>
<span class="l">420: </span>
<span class="l">421: </span>
<span class="l">422: </span>
<span class="l">423: </span>
<span class="l">424: </span>
<span class="l">425: </span>
<span class="l">426: </span>
<span class="l">427: </span>
<span class="l">428: </span>
<span class="l">429: </span>
<span class="l">430: </span>
<span class="l">431: </span>
<span class="l">432: </span>
<span class="l">433: </span>
<span class="l">434: </span>
<span class="l">435: </span>
<span class="l">436: </span>
<span class="l">437: </span>
<span class="l">438: </span>
<span class="l">439: </span>
<span class="l">440: </span>
<span class="l">441: </span>
<span class="l">442: </span>
<span class="l">443: </span>
<span class="l">444: </span>
<span class="l">445: </span>
<span class="l">446: </span>
<span class="l">447: </span>
<span class="l">448: </span>
<span class="l">449: </span>
<span class="l">450: </span>
<span class="l">451: </span>
<span class="l">452: </span>
<span class="l">453: </span>
<span class="l">454: </span>
<span class="l">455: </span>
<span class="l">456: </span>
<span class="l">457: </span>
<span class="l">458: </span>
<span class="l">459: </span>
<span class="l">460: </span>
<span class="l">461: </span>
<span class="l">462: </span>
<span class="l">463: </span>
<span class="l">464: </span>
<span class="l">465: </span>
<span class="l">466: </span>
<span class="l">467: </span>
<span class="l">468: </span>
<span class="l">469: </span>
<span class="l">470: </span>
<span class="l">471: </span>
<span class="l">472: </span>
<span class="l">473: </span>
<span class="l">474: </span>
<span class="l">475: </span>
<span class="l">476: </span>
<span class="l">477: </span>
<span class="l">478: </span>
<span class="l">479: </span>
<span class="l">480: </span>
<span class="l">481: </span>
<span class="l">482: </span>
<span class="l">483: </span>
<span class="l">484: </span>
<span class="l">485: </span>
<span class="l">486: </span>
<span class="l">487: </span>
<span class="l">488: </span>
<span class="l">489: </span>
<span class="l">490: </span>
<span class="l">491: </span>
<span class="l">492: </span>
<span class="l">493: </span>
<span class="l">494: </span>
<span class="l">495: </span>
<span class="l">496: </span>
<span class="l">497: </span>
<span class="l">498: </span>
<span class="l">499: </span>
<span class="l">500: </span>
<span class="l">501: </span>
<span class="l">502: </span>
<span class="l">503: </span>
<span class="l">504: </span>
<span class="l">505: </span>
<span class="l">506: </span>
<span class="l">507: </span>
<span class="l">508: </span>
<span class="l">509: </span>
<span class="l">510: </span>
<span class="l">511: </span>
<span class="l">512: </span>
<span class="l">513: </span>
<span class="l">514: </span>
<span class="l">515: </span>
<span class="l">516: </span>
<span class="l">517: </span>
<span class="l">518: </span>
<span class="l">519: </span>
<span class="l">520: </span>
<span class="l">521: </span>
<span class="l">522: </span>
<span class="l">523: </span>
<span class="l">524: </span>
<span class="l">525: </span>
<span class="l">526: </span>
<span class="l">527: </span>
<span class="l">528: </span>
<span class="l">529: </span>
<span class="l">530: </span>
<span class="l">531: </span>
<span class="l">532: </span>
<span class="l">533: </span>
<span class="l">534: </span>
<span class="l">535: </span>
<span class="l">536: </span>
<span class="l">537: </span>
<span class="l">538: </span>
<span class="l">539: </span>
<span class="l">540: </span>
<span class="l">541: </span>
<span class="l">542: </span>
<span class="l">543: </span>
<span class="l">544: </span>
<span class="l">545: </span>
<span class="l">546: </span>
<span class="l">547: </span>
<span class="l">548: </span>
<span class="l">549: </span>
<span class="l">550: </span>
<span class="l">551: </span>
<span class="l">552: </span>
<span class="l">553: </span>
<span class="l">554: </span>
<span class="l">555: </span>
<span class="l">556: </span>
<span class="l">557: </span>
<span class="l">558: </span>
<span class="l">559: </span>
<span class="l">560: </span>
<span class="l">561: </span>
<span class="l">562: </span>
<span class="l">563: </span>
<span class="l">564: </span>
<span class="l">565: </span>
<span class="l">566: </span>
<span class="l">567: </span>
<span class="l">568: </span>
<span class="l">569: </span>
<span class="l">570: </span>
<span class="l">571: </span>
<span class="l">572: </span>
<span class="l">573: </span>
<span class="l">574: </span>
<span class="l">575: </span>
<span class="l">576: </span>
<span class="l">577: </span>
<span class="l">578: </span>
<span class="l">579: </span>
<span class="l">580: </span>
<span class="l">581: </span>
<span class="l">582: </span>
<span class="l">583: </span>
<span class="l">584: </span>
<span class="l">585: </span>
<span class="l">586: </span>
<span class="l">587: </span>
<span class="l">588: </span>
<span class="l">589: </span>
<span class="l">590: </span>
<span class="l">591: </span>
<span class="l">592: </span>
<span class="l">593: </span>
<span class="l">594: </span>
<span class="l">595: </span>
<span class="l">596: </span>
<span class="l">597: </span>
<span class="l">598: </span>
<span class="l">599: </span>
<span class="l">600: </span>
<span class="l">601: </span>
<span class="l">602: </span>
<span class="l">603: </span>
<span class="l">604: </span>
<span class="l">605: </span>
<span class="l">606: </span>
<span class="l">607: </span>
<span class="l">608: </span>
<span class="l">609: </span>
<span class="l">610: </span>
<span class="l">611: </span>
<span class="l">612: </span>
<span class="l">613: </span>
<span class="l">614: </span>
<span class="l">615: </span>
<span class="l">616: </span>
<span class="l">617: </span>
<span class="l">618: </span>
<span class="l">619: </span>
<span class="l">620: </span>
<span class="l">621: </span>
<span class="l">622: </span>
<span class="l">623: </span>
<span class="l">624: </span>
<span class="l">625: </span>
<span class="l">626: </span>
<span class="l">627: </span>
<span class="l">628: </span>
<span class="l">629: </span>
<span class="l">630: </span>
<span class="l">631: </span>
<span class="l">632: </span>
<span class="l">633: </span>
<span class="l">634: </span>
<span class="l">635: </span>
<span class="l">636: </span>
<span class="l">637: </span>
<span class="l">638: </span>
<span class="l">639: </span>
<span class="l">640: </span>
<span class="l">641: </span>
<span class="l">642: </span>
<span class="l">643: </span>
<span class="l">644: </span>
<span class="l">645: </span>
<span class="l">646: </span>
<span class="l">647: </span>
<span class="l">648: </span>
<span class="l">649: </span>
<span class="l">650: </span>
<span class="l">651: </span>
<span class="l">652: </span>
<span class="l">653: </span>
<span class="l">654: </span>
<span class="l">655: </span>
<span class="l">656: </span>
<span class="l">657: </span>
<span class="l">658: </span>
<span class="l">659: </span>
<span class="l">660: </span>
<span class="l">661: </span>
<span class="l">662: </span>
<span class="l">663: </span>
<span class="l">664: </span>
<span class="l">665: </span>
<span class="l">666: </span>
<span class="l">667: </span>
<span class="l">668: </span>
<span class="l">669: </span>
<span class="l">670: </span>
<span class="l">671: </span>
<span class="l">672: </span>
<span class="l">673: </span>
<span class="l">674: </span>
<span class="l">675: </span>
<span class="l">676: </span>
<span class="l">677: </span>
<span class="l">678: </span>
<span class="l">679: </span>
<span class="l">680: </span>
<span class="l">681: </span>
<span class="l">682: </span>
<span class="l">683: </span>
<span class="l">684: </span>
<span class="l">685: </span>
<span class="l">686: </span>
<span class="l">687: </span>
<span class="l">688: </span>
<span class="l">689: </span>
<span class="l">690: </span>
<span class="l">691: </span>
<span class="l">692: </span>
<span class="l">693: </span>
<span class="l">694: </span>
<span class="l">695: </span>
<span class="l">696: </span>
<span class="l">697: </span>
<span class="l">698: </span>
<span class="l">699: </span>
<span class="l">700: </span>
<span class="l">701: </span>
<span class="l">702: </span>
<span class="l">703: </span>
<span class="l">704: </span>
<span class="l">705: </span>
<span class="l">706: </span>
<span class="l">707: </span>
<span class="l">708: </span>
<span class="l">709: </span>
<span class="l">710: </span>
<span class="l">711: </span>
<span class="l">712: </span>
<span class="l">713: </span>
<span class="l">714: </span>
<span class="l">715: </span>
<span class="l">716: </span>
<span class="l">717: </span>
<span class="l">718: </span>
<span class="l">719: </span>
<span class="l">720: </span>
<span class="l">721: </span>
<span class="l">722: </span>
<span class="l">723: </span>
<span class="l">724: </span>
<span class="l">725: </span>
<span class="l">726: </span>
<span class="l">727: </span>
<span class="l">728: </span>
<span class="l">729: </span>
<span class="l">730: </span>
<span class="l">731: </span>
<span class="l">732: </span>
<span class="l">733: </span>
<span class="l">734: </span>
<span class="l">735: </span>
<span class="l">736: </span>
<span class="l">737: </span>
<span class="l">738: </span>
<span class="l">739: </span>
<span class="l">740: </span>
<span class="l">741: </span>
<span class="l">742: </span>
<span class="l">743: </span>
<span class="l">744: </span>
<span class="l">745: </span>
<span class="l">746: </span>
<span class="l">747: </span>
<span class="l">748: </span>
<span class="l">749: </span>
<span class="l">750: </span>
<span class="l">751: </span>
<span class="l">752: </span>
<span class="l">753: </span>
<span class="l">754: </span>
<span class="l">755: </span>
<span class="l">756: </span>
<span class="l">757: </span>
<span class="l">758: </span>
<span class="l">759: </span>
<span class="l">760: </span>
<span class="l">761: </span>
<span class="l">762: </span>
<span class="l">763: </span>
<span class="l">764: </span>
<span class="l">765: </span>
<span class="l">766: </span>
<span class="l">767: </span>
<span class="l">768: </span>
<span class="l">769: </span>
<span class="l">770: </span>
<span class="l">771: </span>
<span class="l">772: </span>
<span class="l">773: </span>
<span class="l">774: </span>
<span class="l">775: </span>
<span class="l">776: </span>
<span class="l">777: </span>
<span class="l">778: </span>
<span class="l">779: </span>
<span class="l">780: </span>
<span class="l">781: </span>
<span class="l">782: </span>
<span class="l">783: </span>
<span class="l">784: </span>
<span class="l">785: </span>
<span class="l">786: </span>
<span class="l">787: </span>
<span class="l">788: </span>
<span class="l">789: </span>
<span class="l">790: </span>
<span class="l">791: </span>
<span class="l">792: </span>
<span class="l">793: </span>
<span class="l">794: </span>
<span class="l">795: </span>
<span class="l">796: </span>
<span class="l">797: </span>
<span class="l">798: </span>
<span class="l">799: </span>
<span class="l">800: </span>
<span class="l">801: </span>
<span class="l">802: </span>
<span class="l">803: </span>
<span class="l">804: </span>
<span class="l">805: </span>
<span class="l">806: </span>
<span class="l">807: </span>
<span class="l">808: </span>
<span class="l">809: </span>
<span class="l">810: </span>
<span class="l">811: </span>
<span class="l">812: </span>
<span class="l">813: </span>
<span class="l">814: </span>
<span class="l">815: </span>
<span class="l">816: </span>
<span class="l">817: </span>
<span class="l">818: </span>
<span class="l">819: </span>
<span class="l">820: </span>
<span class="l">821: </span>
<span class="l">822: </span>
<span class="l">823: </span>
<span class="l">824: </span>
<span class="l">825: </span>
<span class="l">826: </span>
<span class="l">827: </span>
<span class="l">828: </span>
<span class="l">829: </span>
<span class="l">830: </span>
<span class="l">831: </span>
<span class="l">832: </span>
<span class="l">833: </span>
<span class="l">834: </span>
<span class="l">835: </span>
<span class="l">836: </span>
<span class="l">837: </span>
<span class="l">838: </span>
<span class="l">839: </span>
<span class="l">840: </span>
<span class="l">841: </span>
<span class="l">842: </span>
<span class="l">843: </span>
<span class="l">844: </span>
<span class="l">845: </span>
<span class="l">846: </span>
<span class="l">847: </span>
<span class="l">848: </span>
<span class="l">849: </span>
<span class="l">850: </span>
<span class="l">851: </span>
<span class="l">852: </span>
<span class="l">853: </span>
<span class="l">854: </span>
<span class="l">855: </span>
<span class="l">856: </span>
<span class="l">857: </span>
<span class="l">858: </span>
<span class="l">859: </span>
<span class="l">860: </span>
<span class="l">861: </span>
<span class="l">862: </span>
<span class="l">863: </span>
<span class="l">864: </span>
<span class="l">865: </span>
<span class="l">866: </span>
<span class="l">867: </span>
<span class="l">868: </span>
<span class="l">869: </span>
<span class="l">870: </span>
<span class="l">871: </span>
<span class="l">872: </span>
<span class="l">873: </span>
<span class="l">874: </span>
<span class="l">875: </span>
<span class="l">876: </span>
<span class="l">877: </span>
<span class="l">878: </span>
<span class="l">879: </span>
<span class="l">880: </span>
<span class="l">881: </span>
<span class="l">882: </span>
<span class="l">883: </span>
<span class="l">884: </span>
<span class="l">885: </span>
<span class="l">886: </span>
<span class="l">887: </span>
<span class="l">888: </span>
<span class="l">889: </span>
<span class="l">890: </span>
<span class="l">891: </span>
<span class="l">892: </span>
<span class="l">893: </span>
<span class="l">894: </span>
<span class="l">895: </span>
<span class="l">896: </span>
<span class="l">897: </span>
<span class="l">898: </span>
<span class="l">899: </span>
<span class="l">900: </span>
<span class="l">901: </span>
<span class="l">902: </span>
<span class="l">903: </span>
<span class="l">904: </span>
<span class="l">905: </span>
<span class="l">906: </span>
<span class="l">907: </span>
<span class="l">908: </span>
<span class="l">909: </span>
<span class="l">910: </span>
<span class="l">911: </span>
<span class="l">912: </span>
<span class="l">913: </span>
<span class="l">914: </span>
<span class="l">915: </span>
<span class="l">916: </span>
<span class="l">917: </span>
<span class="l">918: </span>
<span class="l">919: </span>
<span class="l">920: </span>
<span class="l">921: </span>
<span class="l">922: </span>
<span class="l">923: </span>
<span class="l">924: </span>
<span class="l">925: </span>
<span class="l">926: </span>
<span class="l">927: </span>
<span class="l">928: </span>
<span class="l">929: </span>
<span class="l">930: </span>
<span class="l">931: </span>
<span class="l">932: </span>
<span class="l">933: </span>
<span class="l">934: </span>
<span class="l">935: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//---------------------------------------------------------------</span>
<span class="c">// Overview</span>
<span class="c">//</span>
<span class="c">// Below is a set of exercises designed to get you familiar </span>
<span class="c">// with F#. By the time you&#39;re done, you&#39;ll have a basic </span>
<span class="c">// understanding of the syntax of F# and learn a little more</span>
<span class="c">// about functional programming in general.</span>
<span class="c">//</span>
<span class="c">// Answering Problems</span>
<span class="c">// </span>
<span class="c">// This is where the fun begins! Each dashed section contains an </span>
<span class="c">// example designed to teach you a lesson about the F# language. </span>
<span class="c">// If you highlight the code in an example and execute it (use </span>
<span class="c">// Ctrl+Enter or the run button) it will initially fail. Your</span>
<span class="c">// job is to fill in the blanks to make it pass. With each</span>
<span class="c">// passing section, you&#39;ll learn more about F#, and add another</span>
<span class="c">// weapon to your F# programming arsenal.</span>
<span class="c">//</span>
<span class="c">// Start by highlighitng the section below and running it. Once</span>
<span class="c">// you see it fail, replace the __ with 2 to make it pass.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- about asserts -------------------------------------------</span>

<span class="k">let</span> <span class="i">expected_value</span> <span class="o">=</span> <span class="n">1</span> <span class="o">+</span> <span class="n">1</span>
<span class="k">let</span> <span class="i">actual_value</span> <span class="o">=</span> <span class="i">__</span>

<span class="i">AssertEquality</span> <span class="i">expected_value</span> <span class="i">actual_value</span>

<span class="c">//Easy, right? Try the next one.</span>

<span class="c">//---------------------------------------------------------------</span>
 
<span class="c">// ---- more about asserts --------------------------------------</span>

<span class="i">AssertEquality</span> <span class="s">&quot;foo&quot;</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Let</span>
<span class="c">//</span>
<span class="c">// The let keyword is one of the most fundamental parts of F#.</span>
<span class="c">// You&#39;ll use it in almost every line of F# code you write, so</span>
<span class="c">// let&#39;s get to know it well! (no pun intended)</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- let binds a name to a value -----------------------------</span>

<span class="k">let</span> <span class="i">x</span> <span class="o">=</span> <span class="n">50</span>
        
<span class="i">AssertEquality</span> <span class="i">x</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- let infers the type of values when it can ---------------</span>

<span class="c">(* In F#, values created with let are inferred to have a type like</span>
<span class="c">   &quot;int&quot; for integer values, &quot;string&quot; for text values, and &quot;bool&quot; </span>
<span class="c">   for true or false values. *)</span>

<span class="k">let</span> <span class="i">x</span> <span class="o">=</span> <span class="n">50</span>
<span class="k">let</span> <span class="i">typeOfX</span> <span class="o">=</span> <span class="i">x</span><span class="o">.</span><span class="i">GetType</span>()
<span class="i">AssertEquality</span> <span class="i">typeOfX</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">int</span><span class="o">&gt;</span>

<span class="k">let</span> <span class="i">y</span> <span class="o">=</span> <span class="s">&quot;a string&quot;</span>
<span class="k">let</span> <span class="i">expectedType</span> <span class="o">=</span> <span class="i">y</span><span class="o">.</span><span class="i">GetType</span>()
<span class="i">AssertEquality</span> <span class="i">expectedType</span> <span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can make the types explicit -------------------------</span>

<span class="k">let</span> (<span class="i">x</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs2', 4)" onmouseover="showTip(event, 'fs2', 4)" class="i">int</span>) <span class="o">=</span> <span class="n">42</span>
<span class="k">let</span> <span class="i">typeOfX</span> <span class="o">=</span> <span class="i">x</span><span class="o">.</span><span class="i">GetType</span>()

<span class="k">let</span> <span class="i">y</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="i">string</span> <span class="o">=</span> <span class="s">&quot;forty two&quot;</span>
<span class="k">let</span> <span class="i">typeOfY</span> <span class="o">=</span> <span class="i">y</span><span class="o">.</span><span class="i">GetType</span>()

<span class="i">AssertEquality</span> <span class="i">typeOfX</span> <span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>
<span class="i">AssertEquality</span> <span class="i">typeOfY</span> <span onmouseout="hideTip(event, 'fs1', 7)" onmouseover="showTip(event, 'fs1', 7)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>

<span class="c">(* You don&#39;t usually need to provide explicit type annotations </span>
<span class="c">   types for local varaibles, but type annotations can come in </span>
<span class="c">   handy in other contexts as you&#39;ll see later. *)</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- modifying the value of variables ------------------------</span>

<span class="k">let</span> <span class="k">mutable</span> <span class="i">x</span> <span class="o">=</span> <span class="n">100</span>
<span class="i">x</span> <span class="o">&lt;-</span> <span class="n">200</span>

<span class="i">AssertEquality</span> <span class="i">x</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can&#39;t modify a value if it isn&#39;t mutable ------------</span>

<span class="k">let</span> <span class="i">x</span> <span class="o">=</span> <span class="n">50</span>

<span class="c">//What happens if you try to uncomment and run the following line of code?</span>
<span class="c">//(look at the output in the output window)</span>
<span class="c">//x &lt;- 100</span>

<span class="c">//NOTE: Although you can&#39;t modify immutable values, it is </span>
<span class="c">//      possible to reuse the name of a value in some cases </span>
<span class="c">//      using &quot;shadowing&quot;.</span>
<span class="k">let</span> <span class="i">x</span> <span class="o">=</span> <span class="n">100</span>
 
<span class="i">AssertEquality</span> <span class="i">x</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Functions</span>
<span class="c">//</span>
<span class="c">// Now that you&#39;ve seen how to bind a name to a value with let,</span>
<span class="c">// you&#39;ll learn to use the let keyword to create functions.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating functions with let -----------------------------</span>

<span class="c">(* By default, F# is whitespace sensitive. For functions, this </span>
<span class="c">   means that the last line of a function is its return value,</span>
<span class="c">   and the body of a function is denoted by indentation. *)</span>

<span class="k">let</span> <span class="i">add</span> <span class="i">x</span> <span class="i">y</span> <span class="o">=</span>
    <span class="i">x</span> <span class="o">+</span> <span class="i">y</span>

<span class="k">let</span> <span class="i">result1</span> <span class="o">=</span> <span class="i">add</span> <span class="n">2</span> <span class="n">2</span>
<span class="k">let</span> <span class="i">result2</span> <span class="o">=</span> <span class="i">add</span> <span class="n">5</span> <span class="n">2</span>

<span class="i">AssertEquality</span> <span class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">result2</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- nesting functions ---------------------------------------</span>

<span class="k">let</span> <span class="i">quadruple</span> <span class="i">x</span> <span class="o">=</span>    
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="i">double</span> <span class="i">x</span> <span class="o">=</span>
        <span class="i">x</span> <span class="o">*</span> <span class="n">2</span>

    <span onmouseout="hideTip(event, 'fs4', 9)" onmouseover="showTip(event, 'fs4', 9)" class="i">double</span>(<span onmouseout="hideTip(event, 'fs4', 10)" onmouseover="showTip(event, 'fs4', 10)" class="i">double</span>(<span class="i">x</span>))

<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span class="i">quadruple</span> <span class="n">4</span>
<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- adding type annotations ---------------------------------</span>

<span class="c">(* Sometimes you need to help F#&#39;s type inference system out with</span>
<span class="c">   an explicit type annotation *)</span>

<span class="k">let</span> <span class="i">sayItLikeAnAuctioneer</span> (<span class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs3', 11)" onmouseover="showTip(event, 'fs3', 11)" class="i">string</span>) <span class="o">=</span>
    <span class="i">text</span><span class="o">.</span><span class="i">Replace</span>(<span class="s">&quot; &quot;</span>, <span class="s">&quot;&quot;</span>)

<span class="k">let</span> <span class="i">auctioneered</span> <span class="o">=</span> <span class="i">sayItLikeAnAuctioneer</span> <span class="s">&quot;going once going twice sold to the lady in red&quot;</span>
<span class="i">AssertEquality</span> <span class="i">auctioneered</span> <span class="i">__</span>

<span class="c">//TRY IT: What happens if you remove the type annotation on text?</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- using parenthesis to control the order of operation -----</span>

<span class="k">let</span> <span class="i">add</span> <span class="i">x</span> <span class="i">y</span> <span class="o">=</span>
    <span class="i">x</span> <span class="o">+</span> <span class="i">y</span>

<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span class="i">add</span> (<span class="i">add</span> <span class="n">5</span> <span class="n">8</span>) (<span class="i">add</span> <span class="n">1</span> <span class="n">1</span>)

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">(* TRY IT: What happens if you remove the parensthesis?*)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Tuples</span>
<span class="c">//</span>
<span class="c">// Tuples are used to easily group together values in F#. They&#39;re </span>
<span class="c">// another fundamental construct of the language.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating tuples -----</span>

<span class="k">let</span> <span class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>)

<span class="i">AssertEquality</span> <span class="i">items</span> (<span class="s">&quot;apple&quot;</span>, <span class="i">__</span>)

<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- accessing tuple elements --------------------------------</span>

<span class="k">let</span> <span class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>, <span class="s">&quot;Mustang&quot;</span>)

<span class="k">let</span> <span class="i">fruit</span>, <span class="i">animal</span>, <span class="i">car</span> <span class="o">=</span> <span class="i">items</span>

<span class="i">AssertEquality</span> <span class="i">fruit</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">animal</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">car</span> <span class="i">__</span>

<span class="c">(* Breaking apart tuples in this way uses a F# feature called </span>
<span class="c">   pattern matching. Pattern matching is another key concept in </span>
<span class="c">   F#, and you&#39;ll see more examples of it later on. *)</span>

<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- ignoring values when pattern matching -------------------</span>
       
<span class="k">let</span> <span class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>, <span class="s">&quot;Mustang&quot;</span>)

<span class="k">let</span> _, <span class="i">animal</span>, _ <span class="o">=</span> <span class="i">items</span>

<span class="i">AssertEquality</span> <span class="i">animal</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- using tuples to return multiple values from a function --</span>

<span class="k">let</span> <span class="i">squareAndCube</span> <span class="i">x</span> <span class="o">=</span>
    (<span class="i">x</span> <span class="o">**</span> <span class="n">2.0</span>, <span class="i">x</span> <span class="o">**</span> <span class="n">3.0</span>)

<span class="k">let</span> <span class="i">squared</span>, <span class="i">cubed</span> <span class="o">=</span> <span class="i">squareAndCube</span> <span class="n">3.0</span>


<span class="i">AssertEquality</span> <span class="i">squared</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">cubed</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Branching</span>
<span class="c">//</span>
<span class="c">// Branching is used to tell a program to conditionally perform</span>
<span class="c">// an operation. It&#39;s another fundamental part of F#.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- basic if statements -------------------------------------</span>

<span class="k">let</span> <span class="i">isEven</span> <span class="i">x</span> <span class="o">=</span>
    <span class="k">if</span> <span class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span>
        <span class="s">&quot;it&#39;s even!&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;it&#39;s odd!&quot;</span>
        
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span class="i">isEven</span> <span class="n">2</span>                
<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- if statements return values -----------------------------</span>
    
<span class="c">(* If you&#39;ve worked with other programming languages, you might</span>
<span class="c">   be surprised to find out that if statements in F# return</span>
<span class="c">   values. *)</span>
   
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> 
    <span class="k">if</span> <span class="n">2</span> <span class="o">=</span> <span class="n">3</span> <span class="k">then</span>
        <span class="s">&quot;something is REALLY wrong&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;math is workng!&quot;</span>

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- branching with pattern matching -------------------------</span>
 
<span class="k">let</span> <span class="i">isApple</span> <span class="i">x</span> <span class="o">=</span>
    <span class="k">match</span> <span class="i">x</span> <span class="k">with</span>
    | <span class="s">&quot;apple&quot;</span> <span class="k">-&gt;</span> <span class="k">true</span>
    | _ <span class="k">-&gt;</span> <span class="k">false</span>

<span class="k">let</span> <span class="i">result1</span> <span class="o">=</span> <span class="i">isApple</span> <span class="s">&quot;apple&quot;</span>
<span class="k">let</span> <span class="i">result2</span> <span class="o">=</span> <span class="i">isApple</span> <span class="s">&quot;&quot;</span>

<span class="i">AssertEquality</span> <span class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">result2</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- branching with tuples and pattern matching --------------</span>
    
<span class="k">let</span> <span class="i">getDinner</span> <span class="i">x</span> <span class="o">=</span>
    <span class="k">match</span> <span class="i">x</span> <span class="k">with</span>
    | (<span class="i">name</span>, <span class="s">&quot;veggies&quot;</span>)
    | (<span class="i">name</span>, <span class="s">&quot;fish&quot;</span>)
    | (<span class="i">name</span>, <span class="s">&quot;chicken&quot;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs5', 12)" onmouseover="showTip(event, 'fs5', 12)" class="i">sprintf</span> <span class="s">&quot;%s doesn&#39;t want red meat&quot;</span> <span class="i">name</span>
    | (<span class="i">name</span>, <span class="i">foodChoice</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="i">sprintf</span> <span class="s">&quot;%s wants &#39;em some %s&quot;</span> <span class="i">name</span> <span class="i">foodChoice</span> 
    
<span class="k">let</span> <span class="i">person1</span> <span class="o">=</span> (<span class="s">&quot;Bob&quot;</span>, <span class="s">&quot;fish&quot;</span>)
<span class="k">let</span> <span class="i">person2</span> <span class="o">=</span> (<span class="s">&quot;Sally&quot;</span>, <span class="s">&quot;Burger&quot;</span>)

<span class="i">AssertEquality</span> (<span class="i">getDinner</span> <span class="i">person1</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span class="i">getDinner</span> <span class="i">person2</span>) <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Containers</span>
<span class="c">//</span>
<span class="c">// Containers are very important building blocks that you&#39;ll use </span>
<span class="c">// in F# programming. They are used to group arbitrarily large </span>
<span class="c">// sequences of values. It&#39;s very common to store values in a </span>
<span class="c">// container and perform operations across each value in the </span>
<span class="c">// sequence.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Lists</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists ------------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 14)" onmouseover="showTip(event, 'fs6', 14)" class="i">list</span> <span class="o">=</span> [<span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs6', 15)" onmouseover="showTip(event, 'fs6', 15)" class="i">list</span><span class="o">.</span><span class="i">Head</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs6', 16)" onmouseover="showTip(event, 'fs6', 16)" class="i">list</span><span class="o">.</span><span class="i">Tail</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs6', 17)" onmouseover="showTip(event, 'fs6', 17)" class="i">list</span><span class="o">.</span><span class="i">Length</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- building new lists---------------------------------------</span>

<span class="k">let</span> <span class="i">first</span> <span class="o">=</span> [<span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>]
<span class="k">let</span> <span class="i">second</span> <span class="o">=</span> <span class="s">&quot;pear&quot;</span> <span class="o">::</span> <span class="i">first</span>
<span class="k">let</span> <span class="i">third</span> <span class="o">=</span> <span class="s">&quot;apple&quot;</span> <span class="o">::</span> <span class="i">second</span>

<span class="c">//Note: &quot;::&quot; is known as &quot;cons&quot;</span>

<span class="i">AssertEquality</span> [<span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>] <span class="i">third</span>
<span class="i">AssertEquality</span> <span class="i">second</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">first</span> <span class="i">__</span>

<span class="c">//What happens if you uncomment the following?</span>

<span class="c">//first.Head &lt;- &quot;apple&quot;</span>
<span class="c">//first.Tail &lt;- [&quot;peach&quot;; &quot;pear&quot;]</span>

<span class="c">//THINK ABOUT IT: Can you change the contents of a list once it </span>
<span class="c">//                has been created?</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists with a range------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 18)" onmouseover="showTip(event, 'fs6', 18)" class="i">list</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">4</span>]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs6', 19)" onmouseover="showTip(event, 'fs6', 19)" class="i">list</span><span class="o">.</span><span class="i">Head</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs6', 20)" onmouseover="showTip(event, 'fs6', 20)" class="i">list</span><span class="o">.</span><span class="i">Tail</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists with comprehensions-----------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 21)" onmouseover="showTip(event, 'fs6', 21)" class="i">list</span> <span class="o">=</span> [<span class="k">for</span> <span class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">4</span> <span class="k">do</span> <span class="k">yield</span> <span class="i">i</span> ]
                            
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs6', 22)" onmouseover="showTip(event, 'fs6', 22)" class="i">list</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- comprehensions with conditions --------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 23)" onmouseover="showTip(event, 'fs6', 23)" class="i">list</span> <span class="o">=</span> [<span class="k">for</span> <span class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">10</span> <span class="k">do</span> 
                <span class="k">if</span> <span class="i">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="k">yield</span> <span class="i">i</span> ]
                    
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs6', 24)" onmouseover="showTip(event, 'fs6', 24)" class="i">list</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Arrays</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating arrays -----------------------------------------</span>

<span class="k">let</span> <span class="i">fruits</span> <span class="o">=</span> [| <span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;peach&quot;</span>|]

<span class="i">AssertEquality</span> <span class="i">fruits</span><span class="o">.</span>[<span class="n">0</span>] <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">fruits</span><span class="o">.</span>[<span class="n">1</span>] <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">fruits</span><span class="o">.</span>[<span class="n">2</span>] <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- arrays are mutable --------------------------------------</span>

<span class="k">let</span> <span class="i">fruits</span> <span class="o">=</span> [| <span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span> |]
<span class="i">fruits</span><span class="o">.</span>[<span class="n">1</span>] <span class="o">&lt;-</span> <span class="s">&quot;peach&quot;</span>

<span class="i">AssertEquality</span> <span class="i">fruits</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can create arrays with comprehensions ---------------</span>

<span class="k">let</span> <span class="i">numbers</span> <span class="o">=</span> 
    [| <span class="k">for</span> <span class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">10</span> <span class="k">do</span> 
           <span class="k">if</span> <span class="i">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="k">yield</span> <span class="i">i</span> |]

<span class="i">AssertEquality</span> <span class="i">numbers</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Operations on Sequences</span>
<span class="c">//</span>
<span class="c">// The following sections describe the Seq module which contains</span>
<span class="c">// a bunch of functions for working with data inside of a</span>
<span class="c">// collection. Note that any operations in the Seq module work</span>
<span class="c">// on both arrays and lists.</span>
<span class="c">//---------------------------------------------------------------</span>
   
<span class="c">// ---- transforming collections with map -----------------------</span>

<span class="k">let</span> <span class="i">square</span> <span class="i">x</span> <span class="o">=</span>
    <span class="i">x</span> <span class="o">*</span> <span class="i">x</span>

<span class="k">let</span> <span class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 25)" onmouseover="showTip(event, 'fs7', 25)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 26)" onmouseover="showTip(event, 'fs8', 26)" class="i">map</span> <span class="i">square</span> <span class="i">original</span>

<span class="i">AssertEquality</span> <span class="i">original</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- filtering collections -----------------------------------</span>
 
<span class="k">let</span> <span class="i">isEven</span> <span class="i">x</span> <span class="o">=</span>
    <span class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>

<span class="k">let</span> <span class="i">original</span> <span class="o">=</span> [|<span class="n">0..</span><span class="n">5</span>|]
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 27)" onmouseover="showTip(event, 'fs7', 27)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 28)" onmouseover="showTip(event, 'fs9', 28)" class="i">filter</span> <span class="i">isEven</span> <span class="i">original</span>

<span class="i">AssertEquality</span> <span class="i">original</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- skipping elements ---------------------------------------</span>

<span class="k">let</span> <span class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 29)" onmouseover="showTip(event, 'fs7', 29)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 30)" onmouseover="showTip(event, 'fs10', 30)" class="i">skip</span> <span class="n">2</span> <span class="i">original</span>

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- finding the max -----------------------------------------</span>

<span class="k">let</span> <span class="i">values</span> <span class="o">=</span> [<span class="n">11</span>; <span class="n">20</span>; <span class="n">4</span>; <span class="n">2</span>; <span class="n">3</span>]
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 31)" onmouseover="showTip(event, 'fs7', 31)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 32)" onmouseover="showTip(event, 'fs11', 32)" class="i">max</span> <span class="i">values</span>

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- finding the maximum using a condition -------------------</span>

<span class="k">let</span> <span class="i">getNameLength</span> (<span class="i">name</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs3', 33)" onmouseover="showTip(event, 'fs3', 33)" class="i">string</span>) <span class="o">=</span>
    <span class="i">name</span><span class="o">.</span><span class="i">Length</span>

<span class="k">let</span> <span class="i">names</span> <span class="o">=</span> [| <span class="s">&quot;Harry&quot;</span>; <span class="s">&quot;Lloyd&quot;</span>; <span class="s">&quot;Nicholas&quot;</span>; <span class="s">&quot;Mary&quot;</span>; <span class="s">&quot;Joe&quot;</span>; |]
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 34)" onmouseover="showTip(event, 'fs7', 34)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 35)" onmouseover="showTip(event, 'fs12', 35)" class="i">maxBy</span> <span class="i">getNameLength</span> <span class="i">names</span> 

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>


<span class="c">(* Note: There are many other useful methods in the Seq module. Check them</span>
<span class="c">   via intellisense in Visual Studio by typing &#39;.&#39; after Seq, or online at</span>
<span class="c">   http://msdn.microsoft.com/en-us/library/ee353738.aspx *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Pipelining</span>
<span class="c">//</span>
<span class="c">// Now that you&#39;ve seen a few operations for working with lists, </span>
<span class="c">// you can  combine them to do more interesting things</span>
<span class="c">//---------------------------------------------------------------</span>


<span class="c">// ---- squaring even numbers with separate statements ----------</span>

<span class="k">let</span> <span class="i">square</span> <span class="i">x</span> <span class="o">=</span>
    <span class="i">x</span> <span class="o">*</span> <span class="i">x</span>

<span class="k">let</span> <span class="i">isEven</span> <span class="i">x</span> <span class="o">=</span>
    <span class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>

<span class="c">(* One way to combine the operations is by using separate statements.</span>
<span class="c">   However, this is can be clumsy since you have to name each result. *)</span>

<span class="k">let</span> <span class="i">numbers</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]

<span class="k">let</span> <span class="i">evens</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 36)" onmouseover="showTip(event, 'fs13', 36)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 37)" onmouseover="showTip(event, 'fs14', 37)" class="i">filter</span> <span class="i">isEven</span> <span class="i">numbers</span>
<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 38)" onmouseover="showTip(event, 'fs13', 38)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 39)" onmouseover="showTip(event, 'fs15', 39)" class="i">map</span> <span class="i">square</span> <span class="i">evens</span>

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- squaring even numbers with parens -----------------------</span>

<span class="c">(* You can avoid this problem by using parens to pass the result of one</span>
<span class="c">   funciton to another. This can be difficult to read since you have to </span>
<span class="c">   start from the innermost function and work your way out. *)</span>

<span class="k">let</span> <span class="i">numbers</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]

<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 40)" onmouseover="showTip(event, 'fs13', 40)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 41)" onmouseover="showTip(event, 'fs15', 41)" class="i">map</span> <span class="i">square</span> (<span onmouseout="hideTip(event, 'fs13', 42)" onmouseover="showTip(event, 'fs13', 42)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 43)" onmouseover="showTip(event, 'fs14', 43)" class="i">filter</span> <span class="i">isEven</span> <span class="i">numbers</span>)

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- squaring even numbers with the pipeline operator --------</span>

<span class="c">(* In F#, you can use the pipeline operator to get the benefit of the </span>
<span class="c">   parens style with the readablity of the statement style. *)</span>

<span class="k">let</span> <span class="i">result</span> <span class="o">=</span>
    [<span class="n">0..</span><span class="n">5</span>]
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs13', 44)" onmouseover="showTip(event, 'fs13', 44)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 45)" onmouseover="showTip(event, 'fs14', 45)" class="i">filter</span> <span class="i">isEven</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs13', 46)" onmouseover="showTip(event, 'fs13', 46)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 47)" onmouseover="showTip(event, 'fs15', 47)" class="i">map</span> <span class="i">square</span>

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- using lambdas -------------------------------------------</span>

<span class="k">let</span> <span class="i">colors</span> <span class="o">=</span> [<span class="s">&quot;maize&quot;</span>; <span class="s">&quot;blue&quot;</span>]

<span class="k">let</span> <span class="i">echo</span> <span class="o">=</span> 
    <span class="i">colors</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs13', 48)" onmouseover="showTip(event, 'fs13', 48)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 49)" onmouseover="showTip(event, 'fs15', 49)" class="i">map</span> (<span class="k">fun</span> <span class="i">x</span> <span class="k">-&gt;</span> <span class="i">x</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="i">x</span>)

<span class="i">AssertEquality</span> <span class="i">echo</span> <span class="i">__</span>

<span class="c">(* The fun keyword allows you to create a function inline without giving</span>
<span class="c">   it a name. These functions are known as anonymous functions, lambdas,</span>
<span class="c">   or lambda functions. *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Apply Your Knowledge!</span>
<span class="c">//</span>
<span class="c">// Below is a list containing comma separated data about </span>
<span class="c">// Microsoft&#39;s stock prices during March of 2012. Without</span>
<span class="c">// modifying the list, programatically find the day with the</span>
<span class="c">// greatest variance between the opening and closing price.</span>
<span class="c">//</span>
<span class="c">// The following functions may be of use:</span>
<span class="c">// </span>
<span class="c">// abs - takes the absolute value of an arguement</span>
<span class="c">// </span>
<span class="c">// System.Double.Parse - converts a string argument into a </span>
<span class="c">//                       numerical value.</span>
<span class="c">//</span>
<span class="c">// The following function will convert a comma separated string</span>
<span class="c">// into an array of the column values.</span>
<span class="c">//                       </span>
<span class="c">// let splitCommas (x:string) =</span>
<span class="c">//     x.Split([|&#39;,&#39;|])</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="k">let</span> <span class="i">stockData</span> <span class="o">=</span>
    [ <span class="s">&quot;Date,Open,High,Low,Close,Volume,Adj Close&quot;</span>;
      <span class="s">&quot;2012-03-30,32.40,32.41,32.04,32.26,31749400,32.26&quot;</span>;
      <span class="s">&quot;2012-03-29,32.06,32.19,31.81,32.12,37038500,32.12&quot;</span>;
      <span class="s">&quot;2012-03-28,32.52,32.70,32.04,32.19,41344800,32.19&quot;</span>;
      <span class="s">&quot;2012-03-27,32.65,32.70,32.40,32.52,36274900,32.52&quot;</span>;
      <span class="s">&quot;2012-03-26,32.19,32.61,32.15,32.59,36758300,32.59&quot;</span>;
      <span class="s">&quot;2012-03-23,32.10,32.11,31.72,32.01,35912200,32.01&quot;</span>;
      <span class="s">&quot;2012-03-22,31.81,32.09,31.79,32.00,31749500,32.00&quot;</span>;
      <span class="s">&quot;2012-03-21,31.96,32.15,31.82,31.91,37928600,31.91&quot;</span>;
      <span class="s">&quot;2012-03-20,32.10,32.15,31.74,31.99,41566800,31.99&quot;</span>;
      <span class="s">&quot;2012-03-19,32.54,32.61,32.15,32.20,44789200,32.20&quot;</span>;
      <span class="s">&quot;2012-03-16,32.91,32.95,32.50,32.60,65626400,32.60&quot;</span>;
      <span class="s">&quot;2012-03-15,32.79,32.94,32.58,32.85,49068300,32.85&quot;</span>;
      <span class="s">&quot;2012-03-14,32.53,32.88,32.49,32.77,41986900,32.77&quot;</span>;
      <span class="s">&quot;2012-03-13,32.24,32.69,32.15,32.67,48951700,32.67&quot;</span>;
      <span class="s">&quot;2012-03-12,31.97,32.20,31.82,32.04,34073600,32.04&quot;</span>;
      <span class="s">&quot;2012-03-09,32.10,32.16,31.92,31.99,34628400,31.99&quot;</span>;
      <span class="s">&quot;2012-03-08,32.04,32.21,31.90,32.01,36747400,32.01&quot;</span>;
      <span class="s">&quot;2012-03-07,31.67,31.92,31.53,31.84,34340400,31.84&quot;</span>;
      <span class="s">&quot;2012-03-06,31.54,31.98,31.49,31.56,51932900,31.56&quot;</span>;
      <span class="s">&quot;2012-03-05,32.01,32.05,31.62,31.80,45240000,31.80&quot;</span>;
      <span class="s">&quot;2012-03-02,32.31,32.44,32.00,32.08,47314200,32.08&quot;</span>;
      <span class="s">&quot;2012-03-01,31.93,32.39,31.85,32.29,77344100,32.29&quot;</span>;
      <span class="s">&quot;2012-02-29,31.89,32.00,31.61,31.74,59323600,31.74&quot;</span>; ]

<span class="k">let</span> <span class="i">result</span> <span class="o">=</span>  <span class="i">__</span>

<span class="i">AssertEquality</span> <span class="s">&quot;2012-3-13&quot;</span> <span class="i">result</span>


<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// Continued Learning</span>
<span class="c">//</span>
<span class="c">// There is MUCH more to learn about F#. You can keep going with</span>
<span class="c">// the sample sections below if you finish early to continue your</span>
<span class="c">// learning, but eventually, you should move on the full F# Koans</span>
<span class="c">// project inside of Visual Studio. See </span>
<span class="c">// https://github.com/ChrisMarinos/FSharpKoans for more details.</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// About Looping</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- looping over a list --------------------------------------</span>

<span class="k">let</span> <span class="i">values</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">10</span>]

<span class="k">let</span> <span class="k">mutable</span> <span class="i">sum</span> <span class="o">=</span> <span class="n">0</span>
<span class="k">for</span> <span class="i">value</span> <span class="k">in</span> <span class="i">values</span> <span class="k">do</span>
    <span class="i">sum</span> <span class="o">&lt;-</span> <span class="i">sum</span> <span class="o">+</span> <span class="i">value</span>

<span class="i">AssertEquality</span> <span class="i">sum</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>
       
<span class="c">// ---- looping with expressions ---------------------------------</span>

<span class="k">let</span> <span class="k">mutable</span> <span class="i">sum</span> <span class="o">=</span> <span class="n">0</span>

<span class="k">for</span> <span class="i">i</span> <span class="o">=</span> <span class="n">1</span> <span class="k">to</span> <span class="n">5</span> <span class="k">do</span>
    <span class="i">sum</span> <span class="o">&lt;-</span> <span class="i">sum</span> <span class="o">+</span> <span class="i">i</span>

<span class="i">AssertEquality</span> <span class="i">sum</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>
       
<span class="c">// ---- looping with while ---------------------------------------</span>

<span class="k">let</span> <span class="k">mutable</span> <span class="i">sum</span> <span class="o">=</span> <span class="n">1</span>

<span class="k">while</span> <span class="i">sum</span> <span class="o">&lt;</span> <span class="n">10</span> <span class="k">do</span>
    <span class="i">sum</span> <span class="o">&lt;-</span> <span class="i">sum</span> <span class="o">+</span> <span class="i">sum</span>

<span class="i">AssertEquality</span> <span class="i">sum</span> <span class="i">__</span>

<span class="c">(* NOTE: While these looping constructs can come in handy from </span>
<span class="c">         time to time, it&#39;s often better to use a more </span>
<span class="c">         functional approach for looping such as the functions </span>
<span class="c">         you learned about in the Seq module. *)</span>

<span class="c">// ---------------------------------------------------------------</span>
       
<span class="c">// ---- looping with while ---------------------------------------</span>

<span class="k">type</span> <span class="i">``more about functions``</span>() <span class="o">=</span>
    
    [&lt;<span class="i">Koan</span>&gt;]
    <span class="k">member</span> <span class="i">this</span><span class="o">.</span><span class="i">DefiningLambdas</span>() <span class="o">=</span>
        
        <span class="k">let</span> <span class="i">colors</span> <span class="o">=</span> [<span class="s">&quot;maize&quot;</span>; <span class="s">&quot;blue&quot;</span>]

        <span class="k">let</span> <span class="i">echo</span> <span class="o">=</span> 
            <span class="i">colors</span>
            <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs13', 50)" onmouseover="showTip(event, 'fs13', 50)" class="i">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 51)" onmouseover="showTip(event, 'fs15', 51)" class="i">map</span> (<span class="k">fun</span> <span class="i">x</span> <span class="k">-&gt;</span> <span class="i">x</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="i">x</span>)

        <span class="i">AssertEquality</span> <span class="i">echo</span> <span class="i">__</span>

        <span class="c">(* The fun keyword allows you to create a function inline without giving</span>
<span class="c">           it a name. These functions are known as anonymous functions, lambdas,</span>
<span class="c">           or lambda functions. *)</span>

<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// More About Functions</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- functions that return functions --------------------------</span>

<span class="c">(* A neat functional programming trick is to create functions that </span>
<span class="c">   return other functions. This leads to some interesting behaviors. *)</span>
<span class="k">let</span> <span class="i">add</span> <span class="i">x</span> <span class="o">=</span>
    (<span class="k">fun</span> <span class="i">y</span> <span class="k">-&gt;</span> <span class="i">x</span> <span class="o">+</span> <span class="i">y</span>)

<span class="c">(* F#&#39;s lightweight syntax allows you to call both functions as if there</span>
<span class="c">   was only one *)</span>
<span class="k">let</span> <span class="i">simpleResult</span> <span class="o">=</span> <span class="i">add</span> <span class="n">2</span> <span class="n">4</span>
<span class="i">AssertEquality</span> <span class="i">simpleResult</span> <span class="i">__</span>

<span class="c">(* ...but you can also pass only one argument at a time to create</span>
<span class="c">   residual functions. This technique is known as partial appliction. *)</span>
<span class="k">let</span> <span class="i">addTen</span> <span class="o">=</span> <span class="i">add</span> <span class="n">10</span>
<span class="k">let</span> <span class="i">fancyResult</span> <span class="o">=</span> <span class="i">addTen</span> <span class="n">14</span>

<span class="i">AssertEquality</span> <span class="i">fancyResult</span> <span class="i">__</span>

<span class="c">//NOTE: Functions written in this style are said to be curried.</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- automatic currying ---------------------------------------</span>

<span class="c">(* The above technique is common enough that F# actually supports this</span>
<span class="c">   by default. In other words, functions are automatically curried. *)</span>
<span class="k">let</span> <span class="i">add</span> <span class="i">x</span> <span class="i">y</span> <span class="o">=</span> 
    <span class="i">x</span> <span class="o">+</span> <span class="i">y</span>

<span class="k">let</span> <span class="i">addSeven</span> <span class="o">=</span> <span class="i">add</span> <span class="n">7</span>
<span class="k">let</span> <span class="i">unluckyNumber</span> <span class="o">=</span> <span class="i">addSeven</span> <span class="n">6</span>
<span class="k">let</span> <span class="i">luckyNumber</span> <span class="o">=</span> <span class="i">addSeven</span> <span class="n">0</span>

<span class="i">AssertEquality</span> <span class="i">unluckyNumber</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">luckyNumber</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- non curried functions ------------------------------------</span>

<span class="c">(* You should stick to the auto-curried function syntax most of the </span>
<span class="c">   time. However, you can also write functions in an uncurried form to</span>
<span class="c">   make them easier to use from languages like C# where currying is not </span>
<span class="c">   as commonly used. *)</span>

<span class="k">let</span> <span class="i">add</span>(<span class="i">x</span>, <span class="i">y</span>) <span class="o">=</span>
    <span class="i">x</span> <span class="o">+</span> <span class="i">y</span>

<span class="c">(* NOTE: &quot;add 5&quot; will not compile now. You have to pass both arguments </span>
<span class="c">         at once *)</span>

<span class="k">let</span> <span class="i">result</span> <span class="o">=</span> <span class="i">add</span>(<span class="n">5</span>, <span class="n">40</span>)

<span class="i">AssertEquality</span> <span class="i">result</span> <span class="i">__</span>

<span class="c">(* THINK ABOUT IT: You learned earlier that functions with multiple </span>
<span class="c">                   return values are really just functions that return</span>
<span class="c">                   tuples. Do functions defined in the uncurried form</span>
<span class="c">                   really accept more than one argument at a time? *)</span>

<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// Record Types</span>
<span class="c">// </span>
<span class="c">// In F#, Record Types are lightweight objects that are used to</span>
<span class="c">// bundle bits of data together as properties on an object and </span>
<span class="c">// give those properties meaningful names.</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- records have properties ----------------------------------</span>

<span class="k">type</span> <span class="i">Character</span> <span class="o">=</span> {
    <span class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 52)" onmouseover="showTip(event, 'fs3', 52)" class="i">string</span>
    <span class="i">Occupation</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 53)" onmouseover="showTip(event, 'fs3', 53)" class="i">string</span>
}

<span class="k">let</span> <span class="i">mario</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Mario&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }

<span class="i">AssertEquality</span> <span class="i">mario</span><span class="o">.</span><span class="i">Name</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">mario</span><span class="o">.</span><span class="i">Occupation</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- creating from an existing record -------------------------</span>

<span class="k">let</span> <span class="i">mario</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Mario&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }
<span class="k">let</span> <span class="i">luigi</span> <span class="o">=</span> { <span class="i">mario</span> <span class="k">with</span> <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Luigi&quot;</span>; }

<span class="i">AssertEquality</span> <span class="i">mario</span><span class="o">.</span><span class="i">Name</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">mario</span><span class="o">.</span><span class="i">Occupation</span> <span class="i">__</span>

<span class="i">AssertEquality</span> <span class="i">luigi</span><span class="o">.</span><span class="i">Name</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">luigi</span><span class="o">.</span><span class="i">Occupation</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- comparing records ----------------------------------------</span>

<span class="k">let</span> <span class="i">greenKoopa</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Koopa&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Soldier&quot;</span>; }
<span class="k">let</span> <span class="i">bowser</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Bowser&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Kidnapper&quot;</span>; }
<span class="k">let</span> <span class="i">redKoopa</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Koopa&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Soldier&quot;</span>; }

<span class="k">let</span> <span class="i">koopaComparison</span> <span class="o">=</span>
     <span class="k">if</span> <span class="i">greenKoopa</span> <span class="o">=</span> <span class="i">redKoopa</span> <span class="k">then</span>
         <span class="s">&quot;all the koopas are pretty much the same&quot;</span>
     <span class="k">else</span>
         <span class="s">&quot;maybe one can fly&quot;</span>

<span class="k">let</span> <span class="i">bowserComparison</span> <span class="o">=</span> 
    <span class="k">if</span> <span class="i">bowser</span> <span class="o">=</span> <span class="i">greenKoopa</span> <span class="k">then</span>
        <span class="s">&quot;the king is a pawn&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;he is still kind of a koopa&quot;</span>

<span class="i">AssertEquality</span> <span class="i">koopaComparison</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">bowserComparison</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- you can pattern match against records --------------------</span>

<span class="k">let</span> <span class="i">mario</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Mario&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }
<span class="k">let</span> <span class="i">luigi</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Luigi&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }
<span class="k">let</span> <span class="i">bowser</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Bowser&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Kidnapper&quot;</span>; }

<span class="k">let</span> <span class="i">determineSide</span> <span class="i">character</span> <span class="o">=</span>
    <span class="k">match</span> <span class="i">character</span> <span class="k">with</span>
    | { <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span> } <span class="k">-&gt;</span> <span class="s">&quot;good guy&quot;</span>
    | _ <span class="k">-&gt;</span> <span class="s">&quot;bad guy&quot;</span>

<span class="i">AssertEquality</span> (<span class="i">determineSide</span> <span class="i">mario</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span class="i">determineSide</span> <span class="i">luigi</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span class="i">determineSide</span> <span class="i">bowser</span>) <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// Option Types</span>
<span class="c">//</span>
<span class="c">// In F#, option types are used to represent calculations that </span>
<span class="c">// may or may not return a result.</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- option types might contain a value... --------------------</span>

<span class="k">let</span> <span class="i">someValue</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 54)" onmouseover="showTip(event, 'fs16', 54)" class="i">Some</span> <span class="n">10</span>

<span class="i">AssertEquality</span> <span class="i">someValue</span><span class="o">.</span><span class="i">IsSome</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">someValue</span><span class="o">.</span><span class="i">IsNone</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">someValue</span><span class="o">.</span><span class="i">Value</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- ...but they might not ------------------------------------</span>
<span class="k">let</span> <span class="i">noValue</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 55)" onmouseover="showTip(event, 'fs17', 55)" class="i">None</span>

<span class="i">AssertEquality</span> <span class="i">noValue</span><span class="o">.</span><span class="i">IsSome</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">noValue</span><span class="o">.</span><span class="i">IsNone</span> <span class="i">__</span>
<span class="i">AssertThrows</span><span class="o">&lt;</span><span class="i">FILL_IN_THE_EXCEPTION</span><span class="o">&gt;</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span class="i">noValue</span><span class="o">.</span><span class="i">Value</span>)

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- using option types with pattern matching -----------------</span>

<span class="k">type</span> <span class="i">Game</span> <span class="o">=</span> {
    <span class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 56)" onmouseover="showTip(event, 'fs3', 56)" class="i">string</span>
    <span class="i">Platform</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 57)" onmouseover="showTip(event, 'fs3', 57)" class="i">string</span>
    <span class="i">Score</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 58)" onmouseover="showTip(event, 'fs2', 58)" class="i">int</span> <span onmouseout="hideTip(event, 'fs18', 59)" onmouseover="showTip(event, 'fs18', 59)" class="i">option</span>
}

<span class="k">let</span> <span class="i">chronoTrigger</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Chrono Trigger&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;SNES&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 60)" onmouseover="showTip(event, 'fs16', 60)" class="i">Some</span> <span class="n">5</span> }
<span class="k">let</span> <span class="i">halo</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Halo&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;Xbox&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 61)" onmouseover="showTip(event, 'fs17', 61)" class="i">None</span> }

<span class="k">let</span> <span class="i">translate</span> <span class="i">score</span> <span class="o">=</span>
    <span class="k">match</span> <span class="i">score</span> <span class="k">with</span>
    | <span class="n">5</span> <span class="k">-&gt;</span> <span class="s">&quot;Great&quot;</span>
    | <span class="n">4</span> <span class="k">-&gt;</span> <span class="s">&quot;Good&quot;</span>
    | <span class="n">3</span> <span class="k">-&gt;</span> <span class="s">&quot;Decent&quot;</span>
    | <span class="n">2</span> <span class="k">-&gt;</span> <span class="s">&quot;Bad&quot;</span>
    | <span class="n">1</span> <span class="k">-&gt;</span> <span class="s">&quot;Awful&quot;</span>
    | _ <span class="k">-&gt;</span> <span class="s">&quot;Unknown&quot;</span>

<span class="k">let</span> <span class="i">getScore</span> <span class="i">game</span> <span class="o">=</span>
    <span class="k">match</span> <span class="i">game</span><span class="o">.</span><span class="i">Score</span> <span class="k">with</span>
    | <span onmouseout="hideTip(event, 'fs16', 62)" onmouseover="showTip(event, 'fs16', 62)" class="i">Some</span> <span class="i">score</span> <span class="k">-&gt;</span> <span class="i">translate</span> <span class="i">score</span>
    | <span onmouseout="hideTip(event, 'fs17', 63)" onmouseover="showTip(event, 'fs17', 63)" class="i">None</span> <span class="k">-&gt;</span> <span class="s">&quot;Unknown&quot;</span>

<span class="i">AssertEquality</span> (<span class="i">getScore</span> <span class="i">chronoTrigger</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span class="i">getScore</span> <span class="i">halo</span>) <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- projecting values from option types ----------------------</span>

<span class="k">let</span> <span class="i">chronoTrigger</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Chrono Trigger&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;SNES&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 64)" onmouseover="showTip(event, 'fs16', 64)" class="i">Some</span> <span class="n">5</span> }
<span class="k">let</span> <span class="i">gta</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Halo&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;Xbox&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 65)" onmouseover="showTip(event, 'fs17', 65)" class="i">None</span> }

<span class="k">let</span> <span class="i">decideOn</span> <span class="i">game</span> <span class="o">=</span>
    <span class="i">game</span><span class="o">.</span><span class="i">Score</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs19', 66)" onmouseover="showTip(event, 'fs19', 66)" class="i">Option</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 67)" onmouseover="showTip(event, 'fs20', 67)" class="i">map</span> (<span class="k">fun</span> <span class="i">score</span> <span class="k">-&gt;</span> <span class="k">if</span> <span class="i">score</span> <span class="o">&gt;</span> <span class="n">3</span> <span class="k">then</span> <span class="s">&quot;play it&quot;</span> <span class="k">else</span> <span class="s">&quot;don&#39;t play&quot;</span>)

<span class="c">//HINT: look at the return type of the decide on function</span>
<span class="i">AssertEquality</span> (<span class="i">decideOn</span> <span class="i">chronoTrigger</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span class="i">decideOn</span> <span class="i">gta</span>) <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// Discriminated Unions</span>
<span class="c">//</span>
<span class="c">// Discriminated Unions are used to represent data types that have</span>
<span class="c">// a discrete set of possible states.</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- descriminated unions capture a set of options ------------</span>

<span class="k">type</span> <span class="i">Condiment</span> <span class="o">=</span>
    | <span class="i">Mustard</span>
    | <span class="i">Ketchup</span>
    | <span class="i">Relish</span>
    | <span class="i">Vinegar</span>

    <span class="k">let</span> <span class="i">toColor</span> <span class="i">condiment</span> <span class="o">=</span> 
        <span class="k">match</span> <span class="i">condiment</span> <span class="k">with</span>
        | <span class="i">Mustard</span> <span class="k">-&gt;</span> <span class="s">&quot;yellow&quot;</span>
        | <span class="i">Ketchup</span> <span class="k">-&gt;</span> <span class="s">&quot;red&quot;</span>
        | <span class="i">Relish</span> <span class="k">-&gt;</span> <span class="s">&quot;green&quot;</span>
        | <span class="i">Vinegar</span> <span class="k">-&gt;</span> <span class="s">&quot;brownish?&quot;</span>

    <span class="k">let</span> <span class="i">choice</span> <span class="o">=</span> <span class="i">Mustard</span>

    <span class="i">AssertEquality</span> (<span class="i">toColor</span> <span class="i">choice</span>) <span class="i">__</span>

    <span class="c">(* TRY IT: What happens if you remove a case from the above pattern </span>
<span class="c">               match? *)</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- descriminated union cases can have types -----------------</span>

<span class="k">type</span> <span class="i">Favorite</span> <span class="o">=</span>
    | <span class="i">Bourbon</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs3', 68)" onmouseover="showTip(event, 'fs3', 68)" class="i">string</span>
    | <span class="i">Number</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs2', 69)" onmouseover="showTip(event, 'fs2', 69)" class="i">int</span>

<span class="k">let</span> <span class="i">saySomethingAboutYourFavorite</span> <span class="i">favorite</span> <span class="o">=</span>
    <span class="k">match</span> <span class="i">favorite</span> <span class="k">with</span>
    | <span class="i">Number</span> <span class="n">7</span> <span class="k">-&gt;</span> <span class="s">&quot;me too!&quot;</span>
    | <span class="i">Bourbon</span> <span class="s">&quot;Bookers&quot;</span> <span class="k">-&gt;</span> <span class="s">&quot;me too!&quot;</span>
    | <span class="i">Bourbon</span> <span class="i">b</span> <span class="k">-&gt;</span> <span class="s">&quot;I prefer Bookers to &quot;</span> <span class="o">+</span> <span class="i">b</span>
    | <span class="i">Number</span> _ <span class="k">-&gt;</span> <span class="s">&quot;I&#39;m partial to 7&quot;</span>

<span class="k">let</span> <span class="i">bourbonResult</span> <span class="o">=</span> <span class="i">saySomethingAboutYourFavorite</span> <span class="o">&lt;|</span> <span class="i">Bourbon</span> <span class="s">&quot;Maker&#39;s Mark&quot;</span>
<span class="k">let</span> <span class="i">numberResult</span> <span class="o">=</span> <span class="i">saySomethingAboutYourFavorite</span> <span class="o">&lt;|</span> <span class="i">Number</span> <span class="n">7</span>

<span class="i">AssertEquality</span> <span class="i">bourbonResult</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span class="i">numberResult</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val typeof&lt;&#39;T&gt; : System.Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs2">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs3">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs4">Multiple items<br />val double : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.double<br /><br />--------------------<br />type double = System.Double<br /><br />Full name: Microsoft.FSharp.Core.double</div>
<div class="tip" id="fs5">val sprintf : format:Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>
<div class="tip" id="fs6">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs7">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs8">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs9">val filter : predicate:(&#39;T -&gt; bool) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.filter</div>
<div class="tip" id="fs10">val skip : count:int -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.skip</div>
<div class="tip" id="fs11">val max : source:seq&lt;&#39;T&gt; -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.max</div>
<div class="tip" id="fs12">val maxBy : projection:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.maxBy</div>
<div class="tip" id="fs13">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs14">val filter : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.filter</div>
<div class="tip" id="fs15">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.map</div>
<div class="tip" id="fs16">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs17">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs18">type &#39;T option = Option&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.option&lt;_&gt;</div>
<div class="tip" id="fs19">module Option<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs20">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; option:&#39;T option -&gt; &#39;U option<br /><br />Full name: Microsoft.FSharp.Core.Option.map</div>

