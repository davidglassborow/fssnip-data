<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">   1: </span>
<span class="l">   2: </span>
<span class="l">   3: </span>
<span class="l">   4: </span>
<span class="l">   5: </span>
<span class="l">   6: </span>
<span class="l">   7: </span>
<span class="l">   8: </span>
<span class="l">   9: </span>
<span class="l">  10: </span>
<span class="l">  11: </span>
<span class="l">  12: </span>
<span class="l">  13: </span>
<span class="l">  14: </span>
<span class="l">  15: </span>
<span class="l">  16: </span>
<span class="l">  17: </span>
<span class="l">  18: </span>
<span class="l">  19: </span>
<span class="l">  20: </span>
<span class="l">  21: </span>
<span class="l">  22: </span>
<span class="l">  23: </span>
<span class="l">  24: </span>
<span class="l">  25: </span>
<span class="l">  26: </span>
<span class="l">  27: </span>
<span class="l">  28: </span>
<span class="l">  29: </span>
<span class="l">  30: </span>
<span class="l">  31: </span>
<span class="l">  32: </span>
<span class="l">  33: </span>
<span class="l">  34: </span>
<span class="l">  35: </span>
<span class="l">  36: </span>
<span class="l">  37: </span>
<span class="l">  38: </span>
<span class="l">  39: </span>
<span class="l">  40: </span>
<span class="l">  41: </span>
<span class="l">  42: </span>
<span class="l">  43: </span>
<span class="l">  44: </span>
<span class="l">  45: </span>
<span class="l">  46: </span>
<span class="l">  47: </span>
<span class="l">  48: </span>
<span class="l">  49: </span>
<span class="l">  50: </span>
<span class="l">  51: </span>
<span class="l">  52: </span>
<span class="l">  53: </span>
<span class="l">  54: </span>
<span class="l">  55: </span>
<span class="l">  56: </span>
<span class="l">  57: </span>
<span class="l">  58: </span>
<span class="l">  59: </span>
<span class="l">  60: </span>
<span class="l">  61: </span>
<span class="l">  62: </span>
<span class="l">  63: </span>
<span class="l">  64: </span>
<span class="l">  65: </span>
<span class="l">  66: </span>
<span class="l">  67: </span>
<span class="l">  68: </span>
<span class="l">  69: </span>
<span class="l">  70: </span>
<span class="l">  71: </span>
<span class="l">  72: </span>
<span class="l">  73: </span>
<span class="l">  74: </span>
<span class="l">  75: </span>
<span class="l">  76: </span>
<span class="l">  77: </span>
<span class="l">  78: </span>
<span class="l">  79: </span>
<span class="l">  80: </span>
<span class="l">  81: </span>
<span class="l">  82: </span>
<span class="l">  83: </span>
<span class="l">  84: </span>
<span class="l">  85: </span>
<span class="l">  86: </span>
<span class="l">  87: </span>
<span class="l">  88: </span>
<span class="l">  89: </span>
<span class="l">  90: </span>
<span class="l">  91: </span>
<span class="l">  92: </span>
<span class="l">  93: </span>
<span class="l">  94: </span>
<span class="l">  95: </span>
<span class="l">  96: </span>
<span class="l">  97: </span>
<span class="l">  98: </span>
<span class="l">  99: </span>
<span class="l"> 100: </span>
<span class="l"> 101: </span>
<span class="l"> 102: </span>
<span class="l"> 103: </span>
<span class="l"> 104: </span>
<span class="l"> 105: </span>
<span class="l"> 106: </span>
<span class="l"> 107: </span>
<span class="l"> 108: </span>
<span class="l"> 109: </span>
<span class="l"> 110: </span>
<span class="l"> 111: </span>
<span class="l"> 112: </span>
<span class="l"> 113: </span>
<span class="l"> 114: </span>
<span class="l"> 115: </span>
<span class="l"> 116: </span>
<span class="l"> 117: </span>
<span class="l"> 118: </span>
<span class="l"> 119: </span>
<span class="l"> 120: </span>
<span class="l"> 121: </span>
<span class="l"> 122: </span>
<span class="l"> 123: </span>
<span class="l"> 124: </span>
<span class="l"> 125: </span>
<span class="l"> 126: </span>
<span class="l"> 127: </span>
<span class="l"> 128: </span>
<span class="l"> 129: </span>
<span class="l"> 130: </span>
<span class="l"> 131: </span>
<span class="l"> 132: </span>
<span class="l"> 133: </span>
<span class="l"> 134: </span>
<span class="l"> 135: </span>
<span class="l"> 136: </span>
<span class="l"> 137: </span>
<span class="l"> 138: </span>
<span class="l"> 139: </span>
<span class="l"> 140: </span>
<span class="l"> 141: </span>
<span class="l"> 142: </span>
<span class="l"> 143: </span>
<span class="l"> 144: </span>
<span class="l"> 145: </span>
<span class="l"> 146: </span>
<span class="l"> 147: </span>
<span class="l"> 148: </span>
<span class="l"> 149: </span>
<span class="l"> 150: </span>
<span class="l"> 151: </span>
<span class="l"> 152: </span>
<span class="l"> 153: </span>
<span class="l"> 154: </span>
<span class="l"> 155: </span>
<span class="l"> 156: </span>
<span class="l"> 157: </span>
<span class="l"> 158: </span>
<span class="l"> 159: </span>
<span class="l"> 160: </span>
<span class="l"> 161: </span>
<span class="l"> 162: </span>
<span class="l"> 163: </span>
<span class="l"> 164: </span>
<span class="l"> 165: </span>
<span class="l"> 166: </span>
<span class="l"> 167: </span>
<span class="l"> 168: </span>
<span class="l"> 169: </span>
<span class="l"> 170: </span>
<span class="l"> 171: </span>
<span class="l"> 172: </span>
<span class="l"> 173: </span>
<span class="l"> 174: </span>
<span class="l"> 175: </span>
<span class="l"> 176: </span>
<span class="l"> 177: </span>
<span class="l"> 178: </span>
<span class="l"> 179: </span>
<span class="l"> 180: </span>
<span class="l"> 181: </span>
<span class="l"> 182: </span>
<span class="l"> 183: </span>
<span class="l"> 184: </span>
<span class="l"> 185: </span>
<span class="l"> 186: </span>
<span class="l"> 187: </span>
<span class="l"> 188: </span>
<span class="l"> 189: </span>
<span class="l"> 190: </span>
<span class="l"> 191: </span>
<span class="l"> 192: </span>
<span class="l"> 193: </span>
<span class="l"> 194: </span>
<span class="l"> 195: </span>
<span class="l"> 196: </span>
<span class="l"> 197: </span>
<span class="l"> 198: </span>
<span class="l"> 199: </span>
<span class="l"> 200: </span>
<span class="l"> 201: </span>
<span class="l"> 202: </span>
<span class="l"> 203: </span>
<span class="l"> 204: </span>
<span class="l"> 205: </span>
<span class="l"> 206: </span>
<span class="l"> 207: </span>
<span class="l"> 208: </span>
<span class="l"> 209: </span>
<span class="l"> 210: </span>
<span class="l"> 211: </span>
<span class="l"> 212: </span>
<span class="l"> 213: </span>
<span class="l"> 214: </span>
<span class="l"> 215: </span>
<span class="l"> 216: </span>
<span class="l"> 217: </span>
<span class="l"> 218: </span>
<span class="l"> 219: </span>
<span class="l"> 220: </span>
<span class="l"> 221: </span>
<span class="l"> 222: </span>
<span class="l"> 223: </span>
<span class="l"> 224: </span>
<span class="l"> 225: </span>
<span class="l"> 226: </span>
<span class="l"> 227: </span>
<span class="l"> 228: </span>
<span class="l"> 229: </span>
<span class="l"> 230: </span>
<span class="l"> 231: </span>
<span class="l"> 232: </span>
<span class="l"> 233: </span>
<span class="l"> 234: </span>
<span class="l"> 235: </span>
<span class="l"> 236: </span>
<span class="l"> 237: </span>
<span class="l"> 238: </span>
<span class="l"> 239: </span>
<span class="l"> 240: </span>
<span class="l"> 241: </span>
<span class="l"> 242: </span>
<span class="l"> 243: </span>
<span class="l"> 244: </span>
<span class="l"> 245: </span>
<span class="l"> 246: </span>
<span class="l"> 247: </span>
<span class="l"> 248: </span>
<span class="l"> 249: </span>
<span class="l"> 250: </span>
<span class="l"> 251: </span>
<span class="l"> 252: </span>
<span class="l"> 253: </span>
<span class="l"> 254: </span>
<span class="l"> 255: </span>
<span class="l"> 256: </span>
<span class="l"> 257: </span>
<span class="l"> 258: </span>
<span class="l"> 259: </span>
<span class="l"> 260: </span>
<span class="l"> 261: </span>
<span class="l"> 262: </span>
<span class="l"> 263: </span>
<span class="l"> 264: </span>
<span class="l"> 265: </span>
<span class="l"> 266: </span>
<span class="l"> 267: </span>
<span class="l"> 268: </span>
<span class="l"> 269: </span>
<span class="l"> 270: </span>
<span class="l"> 271: </span>
<span class="l"> 272: </span>
<span class="l"> 273: </span>
<span class="l"> 274: </span>
<span class="l"> 275: </span>
<span class="l"> 276: </span>
<span class="l"> 277: </span>
<span class="l"> 278: </span>
<span class="l"> 279: </span>
<span class="l"> 280: </span>
<span class="l"> 281: </span>
<span class="l"> 282: </span>
<span class="l"> 283: </span>
<span class="l"> 284: </span>
<span class="l"> 285: </span>
<span class="l"> 286: </span>
<span class="l"> 287: </span>
<span class="l"> 288: </span>
<span class="l"> 289: </span>
<span class="l"> 290: </span>
<span class="l"> 291: </span>
<span class="l"> 292: </span>
<span class="l"> 293: </span>
<span class="l"> 294: </span>
<span class="l"> 295: </span>
<span class="l"> 296: </span>
<span class="l"> 297: </span>
<span class="l"> 298: </span>
<span class="l"> 299: </span>
<span class="l"> 300: </span>
<span class="l"> 301: </span>
<span class="l"> 302: </span>
<span class="l"> 303: </span>
<span class="l"> 304: </span>
<span class="l"> 305: </span>
<span class="l"> 306: </span>
<span class="l"> 307: </span>
<span class="l"> 308: </span>
<span class="l"> 309: </span>
<span class="l"> 310: </span>
<span class="l"> 311: </span>
<span class="l"> 312: </span>
<span class="l"> 313: </span>
<span class="l"> 314: </span>
<span class="l"> 315: </span>
<span class="l"> 316: </span>
<span class="l"> 317: </span>
<span class="l"> 318: </span>
<span class="l"> 319: </span>
<span class="l"> 320: </span>
<span class="l"> 321: </span>
<span class="l"> 322: </span>
<span class="l"> 323: </span>
<span class="l"> 324: </span>
<span class="l"> 325: </span>
<span class="l"> 326: </span>
<span class="l"> 327: </span>
<span class="l"> 328: </span>
<span class="l"> 329: </span>
<span class="l"> 330: </span>
<span class="l"> 331: </span>
<span class="l"> 332: </span>
<span class="l"> 333: </span>
<span class="l"> 334: </span>
<span class="l"> 335: </span>
<span class="l"> 336: </span>
<span class="l"> 337: </span>
<span class="l"> 338: </span>
<span class="l"> 339: </span>
<span class="l"> 340: </span>
<span class="l"> 341: </span>
<span class="l"> 342: </span>
<span class="l"> 343: </span>
<span class="l"> 344: </span>
<span class="l"> 345: </span>
<span class="l"> 346: </span>
<span class="l"> 347: </span>
<span class="l"> 348: </span>
<span class="l"> 349: </span>
<span class="l"> 350: </span>
<span class="l"> 351: </span>
<span class="l"> 352: </span>
<span class="l"> 353: </span>
<span class="l"> 354: </span>
<span class="l"> 355: </span>
<span class="l"> 356: </span>
<span class="l"> 357: </span>
<span class="l"> 358: </span>
<span class="l"> 359: </span>
<span class="l"> 360: </span>
<span class="l"> 361: </span>
<span class="l"> 362: </span>
<span class="l"> 363: </span>
<span class="l"> 364: </span>
<span class="l"> 365: </span>
<span class="l"> 366: </span>
<span class="l"> 367: </span>
<span class="l"> 368: </span>
<span class="l"> 369: </span>
<span class="l"> 370: </span>
<span class="l"> 371: </span>
<span class="l"> 372: </span>
<span class="l"> 373: </span>
<span class="l"> 374: </span>
<span class="l"> 375: </span>
<span class="l"> 376: </span>
<span class="l"> 377: </span>
<span class="l"> 378: </span>
<span class="l"> 379: </span>
<span class="l"> 380: </span>
<span class="l"> 381: </span>
<span class="l"> 382: </span>
<span class="l"> 383: </span>
<span class="l"> 384: </span>
<span class="l"> 385: </span>
<span class="l"> 386: </span>
<span class="l"> 387: </span>
<span class="l"> 388: </span>
<span class="l"> 389: </span>
<span class="l"> 390: </span>
<span class="l"> 391: </span>
<span class="l"> 392: </span>
<span class="l"> 393: </span>
<span class="l"> 394: </span>
<span class="l"> 395: </span>
<span class="l"> 396: </span>
<span class="l"> 397: </span>
<span class="l"> 398: </span>
<span class="l"> 399: </span>
<span class="l"> 400: </span>
<span class="l"> 401: </span>
<span class="l"> 402: </span>
<span class="l"> 403: </span>
<span class="l"> 404: </span>
<span class="l"> 405: </span>
<span class="l"> 406: </span>
<span class="l"> 407: </span>
<span class="l"> 408: </span>
<span class="l"> 409: </span>
<span class="l"> 410: </span>
<span class="l"> 411: </span>
<span class="l"> 412: </span>
<span class="l"> 413: </span>
<span class="l"> 414: </span>
<span class="l"> 415: </span>
<span class="l"> 416: </span>
<span class="l"> 417: </span>
<span class="l"> 418: </span>
<span class="l"> 419: </span>
<span class="l"> 420: </span>
<span class="l"> 421: </span>
<span class="l"> 422: </span>
<span class="l"> 423: </span>
<span class="l"> 424: </span>
<span class="l"> 425: </span>
<span class="l"> 426: </span>
<span class="l"> 427: </span>
<span class="l"> 428: </span>
<span class="l"> 429: </span>
<span class="l"> 430: </span>
<span class="l"> 431: </span>
<span class="l"> 432: </span>
<span class="l"> 433: </span>
<span class="l"> 434: </span>
<span class="l"> 435: </span>
<span class="l"> 436: </span>
<span class="l"> 437: </span>
<span class="l"> 438: </span>
<span class="l"> 439: </span>
<span class="l"> 440: </span>
<span class="l"> 441: </span>
<span class="l"> 442: </span>
<span class="l"> 443: </span>
<span class="l"> 444: </span>
<span class="l"> 445: </span>
<span class="l"> 446: </span>
<span class="l"> 447: </span>
<span class="l"> 448: </span>
<span class="l"> 449: </span>
<span class="l"> 450: </span>
<span class="l"> 451: </span>
<span class="l"> 452: </span>
<span class="l"> 453: </span>
<span class="l"> 454: </span>
<span class="l"> 455: </span>
<span class="l"> 456: </span>
<span class="l"> 457: </span>
<span class="l"> 458: </span>
<span class="l"> 459: </span>
<span class="l"> 460: </span>
<span class="l"> 461: </span>
<span class="l"> 462: </span>
<span class="l"> 463: </span>
<span class="l"> 464: </span>
<span class="l"> 465: </span>
<span class="l"> 466: </span>
<span class="l"> 467: </span>
<span class="l"> 468: </span>
<span class="l"> 469: </span>
<span class="l"> 470: </span>
<span class="l"> 471: </span>
<span class="l"> 472: </span>
<span class="l"> 473: </span>
<span class="l"> 474: </span>
<span class="l"> 475: </span>
<span class="l"> 476: </span>
<span class="l"> 477: </span>
<span class="l"> 478: </span>
<span class="l"> 479: </span>
<span class="l"> 480: </span>
<span class="l"> 481: </span>
<span class="l"> 482: </span>
<span class="l"> 483: </span>
<span class="l"> 484: </span>
<span class="l"> 485: </span>
<span class="l"> 486: </span>
<span class="l"> 487: </span>
<span class="l"> 488: </span>
<span class="l"> 489: </span>
<span class="l"> 490: </span>
<span class="l"> 491: </span>
<span class="l"> 492: </span>
<span class="l"> 493: </span>
<span class="l"> 494: </span>
<span class="l"> 495: </span>
<span class="l"> 496: </span>
<span class="l"> 497: </span>
<span class="l"> 498: </span>
<span class="l"> 499: </span>
<span class="l"> 500: </span>
<span class="l"> 501: </span>
<span class="l"> 502: </span>
<span class="l"> 503: </span>
<span class="l"> 504: </span>
<span class="l"> 505: </span>
<span class="l"> 506: </span>
<span class="l"> 507: </span>
<span class="l"> 508: </span>
<span class="l"> 509: </span>
<span class="l"> 510: </span>
<span class="l"> 511: </span>
<span class="l"> 512: </span>
<span class="l"> 513: </span>
<span class="l"> 514: </span>
<span class="l"> 515: </span>
<span class="l"> 516: </span>
<span class="l"> 517: </span>
<span class="l"> 518: </span>
<span class="l"> 519: </span>
<span class="l"> 520: </span>
<span class="l"> 521: </span>
<span class="l"> 522: </span>
<span class="l"> 523: </span>
<span class="l"> 524: </span>
<span class="l"> 525: </span>
<span class="l"> 526: </span>
<span class="l"> 527: </span>
<span class="l"> 528: </span>
<span class="l"> 529: </span>
<span class="l"> 530: </span>
<span class="l"> 531: </span>
<span class="l"> 532: </span>
<span class="l"> 533: </span>
<span class="l"> 534: </span>
<span class="l"> 535: </span>
<span class="l"> 536: </span>
<span class="l"> 537: </span>
<span class="l"> 538: </span>
<span class="l"> 539: </span>
<span class="l"> 540: </span>
<span class="l"> 541: </span>
<span class="l"> 542: </span>
<span class="l"> 543: </span>
<span class="l"> 544: </span>
<span class="l"> 545: </span>
<span class="l"> 546: </span>
<span class="l"> 547: </span>
<span class="l"> 548: </span>
<span class="l"> 549: </span>
<span class="l"> 550: </span>
<span class="l"> 551: </span>
<span class="l"> 552: </span>
<span class="l"> 553: </span>
<span class="l"> 554: </span>
<span class="l"> 555: </span>
<span class="l"> 556: </span>
<span class="l"> 557: </span>
<span class="l"> 558: </span>
<span class="l"> 559: </span>
<span class="l"> 560: </span>
<span class="l"> 561: </span>
<span class="l"> 562: </span>
<span class="l"> 563: </span>
<span class="l"> 564: </span>
<span class="l"> 565: </span>
<span class="l"> 566: </span>
<span class="l"> 567: </span>
<span class="l"> 568: </span>
<span class="l"> 569: </span>
<span class="l"> 570: </span>
<span class="l"> 571: </span>
<span class="l"> 572: </span>
<span class="l"> 573: </span>
<span class="l"> 574: </span>
<span class="l"> 575: </span>
<span class="l"> 576: </span>
<span class="l"> 577: </span>
<span class="l"> 578: </span>
<span class="l"> 579: </span>
<span class="l"> 580: </span>
<span class="l"> 581: </span>
<span class="l"> 582: </span>
<span class="l"> 583: </span>
<span class="l"> 584: </span>
<span class="l"> 585: </span>
<span class="l"> 586: </span>
<span class="l"> 587: </span>
<span class="l"> 588: </span>
<span class="l"> 589: </span>
<span class="l"> 590: </span>
<span class="l"> 591: </span>
<span class="l"> 592: </span>
<span class="l"> 593: </span>
<span class="l"> 594: </span>
<span class="l"> 595: </span>
<span class="l"> 596: </span>
<span class="l"> 597: </span>
<span class="l"> 598: </span>
<span class="l"> 599: </span>
<span class="l"> 600: </span>
<span class="l"> 601: </span>
<span class="l"> 602: </span>
<span class="l"> 603: </span>
<span class="l"> 604: </span>
<span class="l"> 605: </span>
<span class="l"> 606: </span>
<span class="l"> 607: </span>
<span class="l"> 608: </span>
<span class="l"> 609: </span>
<span class="l"> 610: </span>
<span class="l"> 611: </span>
<span class="l"> 612: </span>
<span class="l"> 613: </span>
<span class="l"> 614: </span>
<span class="l"> 615: </span>
<span class="l"> 616: </span>
<span class="l"> 617: </span>
<span class="l"> 618: </span>
<span class="l"> 619: </span>
<span class="l"> 620: </span>
<span class="l"> 621: </span>
<span class="l"> 622: </span>
<span class="l"> 623: </span>
<span class="l"> 624: </span>
<span class="l"> 625: </span>
<span class="l"> 626: </span>
<span class="l"> 627: </span>
<span class="l"> 628: </span>
<span class="l"> 629: </span>
<span class="l"> 630: </span>
<span class="l"> 631: </span>
<span class="l"> 632: </span>
<span class="l"> 633: </span>
<span class="l"> 634: </span>
<span class="l"> 635: </span>
<span class="l"> 636: </span>
<span class="l"> 637: </span>
<span class="l"> 638: </span>
<span class="l"> 639: </span>
<span class="l"> 640: </span>
<span class="l"> 641: </span>
<span class="l"> 642: </span>
<span class="l"> 643: </span>
<span class="l"> 644: </span>
<span class="l"> 645: </span>
<span class="l"> 646: </span>
<span class="l"> 647: </span>
<span class="l"> 648: </span>
<span class="l"> 649: </span>
<span class="l"> 650: </span>
<span class="l"> 651: </span>
<span class="l"> 652: </span>
<span class="l"> 653: </span>
<span class="l"> 654: </span>
<span class="l"> 655: </span>
<span class="l"> 656: </span>
<span class="l"> 657: </span>
<span class="l"> 658: </span>
<span class="l"> 659: </span>
<span class="l"> 660: </span>
<span class="l"> 661: </span>
<span class="l"> 662: </span>
<span class="l"> 663: </span>
<span class="l"> 664: </span>
<span class="l"> 665: </span>
<span class="l"> 666: </span>
<span class="l"> 667: </span>
<span class="l"> 668: </span>
<span class="l"> 669: </span>
<span class="l"> 670: </span>
<span class="l"> 671: </span>
<span class="l"> 672: </span>
<span class="l"> 673: </span>
<span class="l"> 674: </span>
<span class="l"> 675: </span>
<span class="l"> 676: </span>
<span class="l"> 677: </span>
<span class="l"> 678: </span>
<span class="l"> 679: </span>
<span class="l"> 680: </span>
<span class="l"> 681: </span>
<span class="l"> 682: </span>
<span class="l"> 683: </span>
<span class="l"> 684: </span>
<span class="l"> 685: </span>
<span class="l"> 686: </span>
<span class="l"> 687: </span>
<span class="l"> 688: </span>
<span class="l"> 689: </span>
<span class="l"> 690: </span>
<span class="l"> 691: </span>
<span class="l"> 692: </span>
<span class="l"> 693: </span>
<span class="l"> 694: </span>
<span class="l"> 695: </span>
<span class="l"> 696: </span>
<span class="l"> 697: </span>
<span class="l"> 698: </span>
<span class="l"> 699: </span>
<span class="l"> 700: </span>
<span class="l"> 701: </span>
<span class="l"> 702: </span>
<span class="l"> 703: </span>
<span class="l"> 704: </span>
<span class="l"> 705: </span>
<span class="l"> 706: </span>
<span class="l"> 707: </span>
<span class="l"> 708: </span>
<span class="l"> 709: </span>
<span class="l"> 710: </span>
<span class="l"> 711: </span>
<span class="l"> 712: </span>
<span class="l"> 713: </span>
<span class="l"> 714: </span>
<span class="l"> 715: </span>
<span class="l"> 716: </span>
<span class="l"> 717: </span>
<span class="l"> 718: </span>
<span class="l"> 719: </span>
<span class="l"> 720: </span>
<span class="l"> 721: </span>
<span class="l"> 722: </span>
<span class="l"> 723: </span>
<span class="l"> 724: </span>
<span class="l"> 725: </span>
<span class="l"> 726: </span>
<span class="l"> 727: </span>
<span class="l"> 728: </span>
<span class="l"> 729: </span>
<span class="l"> 730: </span>
<span class="l"> 731: </span>
<span class="l"> 732: </span>
<span class="l"> 733: </span>
<span class="l"> 734: </span>
<span class="l"> 735: </span>
<span class="l"> 736: </span>
<span class="l"> 737: </span>
<span class="l"> 738: </span>
<span class="l"> 739: </span>
<span class="l"> 740: </span>
<span class="l"> 741: </span>
<span class="l"> 742: </span>
<span class="l"> 743: </span>
<span class="l"> 744: </span>
<span class="l"> 745: </span>
<span class="l"> 746: </span>
<span class="l"> 747: </span>
<span class="l"> 748: </span>
<span class="l"> 749: </span>
<span class="l"> 750: </span>
<span class="l"> 751: </span>
<span class="l"> 752: </span>
<span class="l"> 753: </span>
<span class="l"> 754: </span>
<span class="l"> 755: </span>
<span class="l"> 756: </span>
<span class="l"> 757: </span>
<span class="l"> 758: </span>
<span class="l"> 759: </span>
<span class="l"> 760: </span>
<span class="l"> 761: </span>
<span class="l"> 762: </span>
<span class="l"> 763: </span>
<span class="l"> 764: </span>
<span class="l"> 765: </span>
<span class="l"> 766: </span>
<span class="l"> 767: </span>
<span class="l"> 768: </span>
<span class="l"> 769: </span>
<span class="l"> 770: </span>
<span class="l"> 771: </span>
<span class="l"> 772: </span>
<span class="l"> 773: </span>
<span class="l"> 774: </span>
<span class="l"> 775: </span>
<span class="l"> 776: </span>
<span class="l"> 777: </span>
<span class="l"> 778: </span>
<span class="l"> 779: </span>
<span class="l"> 780: </span>
<span class="l"> 781: </span>
<span class="l"> 782: </span>
<span class="l"> 783: </span>
<span class="l"> 784: </span>
<span class="l"> 785: </span>
<span class="l"> 786: </span>
<span class="l"> 787: </span>
<span class="l"> 788: </span>
<span class="l"> 789: </span>
<span class="l"> 790: </span>
<span class="l"> 791: </span>
<span class="l"> 792: </span>
<span class="l"> 793: </span>
<span class="l"> 794: </span>
<span class="l"> 795: </span>
<span class="l"> 796: </span>
<span class="l"> 797: </span>
<span class="l"> 798: </span>
<span class="l"> 799: </span>
<span class="l"> 800: </span>
<span class="l"> 801: </span>
<span class="l"> 802: </span>
<span class="l"> 803: </span>
<span class="l"> 804: </span>
<span class="l"> 805: </span>
<span class="l"> 806: </span>
<span class="l"> 807: </span>
<span class="l"> 808: </span>
<span class="l"> 809: </span>
<span class="l"> 810: </span>
<span class="l"> 811: </span>
<span class="l"> 812: </span>
<span class="l"> 813: </span>
<span class="l"> 814: </span>
<span class="l"> 815: </span>
<span class="l"> 816: </span>
<span class="l"> 817: </span>
<span class="l"> 818: </span>
<span class="l"> 819: </span>
<span class="l"> 820: </span>
<span class="l"> 821: </span>
<span class="l"> 822: </span>
<span class="l"> 823: </span>
<span class="l"> 824: </span>
<span class="l"> 825: </span>
<span class="l"> 826: </span>
<span class="l"> 827: </span>
<span class="l"> 828: </span>
<span class="l"> 829: </span>
<span class="l"> 830: </span>
<span class="l"> 831: </span>
<span class="l"> 832: </span>
<span class="l"> 833: </span>
<span class="l"> 834: </span>
<span class="l"> 835: </span>
<span class="l"> 836: </span>
<span class="l"> 837: </span>
<span class="l"> 838: </span>
<span class="l"> 839: </span>
<span class="l"> 840: </span>
<span class="l"> 841: </span>
<span class="l"> 842: </span>
<span class="l"> 843: </span>
<span class="l"> 844: </span>
<span class="l"> 845: </span>
<span class="l"> 846: </span>
<span class="l"> 847: </span>
<span class="l"> 848: </span>
<span class="l"> 849: </span>
<span class="l"> 850: </span>
<span class="l"> 851: </span>
<span class="l"> 852: </span>
<span class="l"> 853: </span>
<span class="l"> 854: </span>
<span class="l"> 855: </span>
<span class="l"> 856: </span>
<span class="l"> 857: </span>
<span class="l"> 858: </span>
<span class="l"> 859: </span>
<span class="l"> 860: </span>
<span class="l"> 861: </span>
<span class="l"> 862: </span>
<span class="l"> 863: </span>
<span class="l"> 864: </span>
<span class="l"> 865: </span>
<span class="l"> 866: </span>
<span class="l"> 867: </span>
<span class="l"> 868: </span>
<span class="l"> 869: </span>
<span class="l"> 870: </span>
<span class="l"> 871: </span>
<span class="l"> 872: </span>
<span class="l"> 873: </span>
<span class="l"> 874: </span>
<span class="l"> 875: </span>
<span class="l"> 876: </span>
<span class="l"> 877: </span>
<span class="l"> 878: </span>
<span class="l"> 879: </span>
<span class="l"> 880: </span>
<span class="l"> 881: </span>
<span class="l"> 882: </span>
<span class="l"> 883: </span>
<span class="l"> 884: </span>
<span class="l"> 885: </span>
<span class="l"> 886: </span>
<span class="l"> 887: </span>
<span class="l"> 888: </span>
<span class="l"> 889: </span>
<span class="l"> 890: </span>
<span class="l"> 891: </span>
<span class="l"> 892: </span>
<span class="l"> 893: </span>
<span class="l"> 894: </span>
<span class="l"> 895: </span>
<span class="l"> 896: </span>
<span class="l"> 897: </span>
<span class="l"> 898: </span>
<span class="l"> 899: </span>
<span class="l"> 900: </span>
<span class="l"> 901: </span>
<span class="l"> 902: </span>
<span class="l"> 903: </span>
<span class="l"> 904: </span>
<span class="l"> 905: </span>
<span class="l"> 906: </span>
<span class="l"> 907: </span>
<span class="l"> 908: </span>
<span class="l"> 909: </span>
<span class="l"> 910: </span>
<span class="l"> 911: </span>
<span class="l"> 912: </span>
<span class="l"> 913: </span>
<span class="l"> 914: </span>
<span class="l"> 915: </span>
<span class="l"> 916: </span>
<span class="l"> 917: </span>
<span class="l"> 918: </span>
<span class="l"> 919: </span>
<span class="l"> 920: </span>
<span class="l"> 921: </span>
<span class="l"> 922: </span>
<span class="l"> 923: </span>
<span class="l"> 924: </span>
<span class="l"> 925: </span>
<span class="l"> 926: </span>
<span class="l"> 927: </span>
<span class="l"> 928: </span>
<span class="l"> 929: </span>
<span class="l"> 930: </span>
<span class="l"> 931: </span>
<span class="l"> 932: </span>
<span class="l"> 933: </span>
<span class="l"> 934: </span>
<span class="l"> 935: </span>
<span class="l"> 936: </span>
<span class="l"> 937: </span>
<span class="l"> 938: </span>
<span class="l"> 939: </span>
<span class="l"> 940: </span>
<span class="l"> 941: </span>
<span class="l"> 942: </span>
<span class="l"> 943: </span>
<span class="l"> 944: </span>
<span class="l"> 945: </span>
<span class="l"> 946: </span>
<span class="l"> 947: </span>
<span class="l"> 948: </span>
<span class="l"> 949: </span>
<span class="l"> 950: </span>
<span class="l"> 951: </span>
<span class="l"> 952: </span>
<span class="l"> 953: </span>
<span class="l"> 954: </span>
<span class="l"> 955: </span>
<span class="l"> 956: </span>
<span class="l"> 957: </span>
<span class="l"> 958: </span>
<span class="l"> 959: </span>
<span class="l"> 960: </span>
<span class="l"> 961: </span>
<span class="l"> 962: </span>
<span class="l"> 963: </span>
<span class="l"> 964: </span>
<span class="l"> 965: </span>
<span class="l"> 966: </span>
<span class="l"> 967: </span>
<span class="l"> 968: </span>
<span class="l"> 969: </span>
<span class="l"> 970: </span>
<span class="l"> 971: </span>
<span class="l"> 972: </span>
<span class="l"> 973: </span>
<span class="l"> 974: </span>
<span class="l"> 975: </span>
<span class="l"> 976: </span>
<span class="l"> 977: </span>
<span class="l"> 978: </span>
<span class="l"> 979: </span>
<span class="l"> 980: </span>
<span class="l"> 981: </span>
<span class="l"> 982: </span>
<span class="l"> 983: </span>
<span class="l"> 984: </span>
<span class="l"> 985: </span>
<span class="l"> 986: </span>
<span class="l"> 987: </span>
<span class="l"> 988: </span>
<span class="l"> 989: </span>
<span class="l"> 990: </span>
<span class="l"> 991: </span>
<span class="l"> 992: </span>
<span class="l"> 993: </span>
<span class="l"> 994: </span>
<span class="l"> 995: </span>
<span class="l"> 996: </span>
<span class="l"> 997: </span>
<span class="l"> 998: </span>
<span class="l"> 999: </span>
<span class="l">1000: </span>
<span class="l">1001: </span>
<span class="l">1002: </span>
<span class="l">1003: </span>
<span class="l">1004: </span>
<span class="l">1005: </span>
<span class="l">1006: </span>
<span class="l">1007: </span>
<span class="l">1008: </span>
<span class="l">1009: </span>
<span class="l">1010: </span>
<span class="l">1011: </span>
<span class="l">1012: </span>
<span class="l">1013: </span>
<span class="l">1014: </span>
<span class="l">1015: </span>
<span class="l">1016: </span>
<span class="l">1017: </span>
<span class="l">1018: </span>
<span class="l">1019: </span>
<span class="l">1020: </span>
<span class="l">1021: </span>
<span class="l">1022: </span>
<span class="l">1023: </span>
<span class="l">1024: </span>
<span class="l">1025: </span>
<span class="l">1026: </span>
<span class="l">1027: </span>
<span class="l">1028: </span>
<span class="l">1029: </span>
<span class="l">1030: </span>
<span class="l">1031: </span>
<span class="l">1032: </span>
<span class="l">1033: </span>
<span class="l">1034: </span>
<span class="l">1035: </span>
<span class="l">1036: </span>
<span class="l">1037: </span>
<span class="l">1038: </span>
<span class="l">1039: </span>
<span class="l">1040: </span>
<span class="l">1041: </span>
<span class="l">1042: </span>
<span class="l">1043: </span>
<span class="l">1044: </span>
<span class="l">1045: </span>
<span class="l">1046: </span>
<span class="l">1047: </span>
<span class="l">1048: </span>
<span class="l">1049: </span>
<span class="l">1050: </span>
<span class="l">1051: </span>
<span class="l">1052: </span>
<span class="l">1053: </span>
<span class="l">1054: </span>
<span class="l">1055: </span>
<span class="l">1056: </span>
<span class="l">1057: </span>
<span class="l">1058: </span>
<span class="l">1059: </span>
<span class="l">1060: </span>
<span class="l">1061: </span>
<span class="l">1062: </span>
<span class="l">1063: </span>
<span class="l">1064: </span>
<span class="l">1065: </span>
<span class="l">1066: </span>
<span class="l">1067: </span>
<span class="l">1068: </span>
<span class="l">1069: </span>
<span class="l">1070: </span>
<span class="l">1071: </span>
<span class="l">1072: </span>
<span class="l">1073: </span>
<span class="l">1074: </span>
<span class="l">1075: </span>
<span class="l">1076: </span>
<span class="l">1077: </span>
<span class="l">1078: </span>
<span class="l">1079: </span>
<span class="l">1080: </span>
<span class="l">1081: </span>
<span class="l">1082: </span>
<span class="l">1083: </span>
<span class="l">1084: </span>
<span class="l">1085: </span>
<span class="l">1086: </span>
<span class="l">1087: </span>
<span class="l">1088: </span>
<span class="l">1089: </span>
<span class="l">1090: </span>
<span class="l">1091: </span>
<span class="l">1092: </span>
<span class="l">1093: </span>
<span class="l">1094: </span>
<span class="l">1095: </span>
<span class="l">1096: </span>
<span class="l">1097: </span>
<span class="l">1098: </span>
<span class="l">1099: </span>
<span class="l">1100: </span>
<span class="l">1101: </span>
<span class="l">1102: </span>
<span class="l">1103: </span>
<span class="l">1104: </span>
<span class="l">1105: </span>
<span class="l">1106: </span>
<span class="l">1107: </span>
<span class="l">1108: </span>
<span class="l">1109: </span>
<span class="l">1110: </span>
<span class="l">1111: </span>
<span class="l">1112: </span>
<span class="l">1113: </span>
<span class="l">1114: </span>
<span class="l">1115: </span>
<span class="l">1116: </span>
<span class="l">1117: </span>
<span class="l">1118: </span>
<span class="l">1119: </span>
<span class="l">1120: </span>
<span class="l">1121: </span>
<span class="l">1122: </span>
<span class="l">1123: </span>
<span class="l">1124: </span>
<span class="l">1125: </span>
<span class="l">1126: </span>
<span class="l">1127: </span>
<span class="l">1128: </span>
<span class="l">1129: </span>
<span class="l">1130: </span>
<span class="l">1131: </span>
<span class="l">1132: </span>
<span class="l">1133: </span>
<span class="l">1134: </span>
<span class="l">1135: </span>
<span class="l">1136: </span>
<span class="l">1137: </span>
<span class="l">1138: </span>
<span class="l">1139: </span>
<span class="l">1140: </span>
<span class="l">1141: </span>
<span class="l">1142: </span>
<span class="l">1143: </span>
<span class="l">1144: </span>
<span class="l">1145: </span>
<span class="l">1146: </span>
<span class="l">1147: </span>
<span class="l">1148: </span>
<span class="l">1149: </span>
<span class="l">1150: </span>
<span class="l">1151: </span>
<span class="l">1152: </span>
<span class="l">1153: </span>
<span class="l">1154: </span>
<span class="l">1155: </span>
<span class="l">1156: </span>
<span class="l">1157: </span>
<span class="l">1158: </span>
<span class="l">1159: </span>
<span class="l">1160: </span>
<span class="l">1161: </span>
<span class="l">1162: </span>
<span class="l">1163: </span>
<span class="l">1164: </span>
<span class="l">1165: </span>
<span class="l">1166: </span>
<span class="l">1167: </span>
<span class="l">1168: </span>
<span class="l">1169: </span>
<span class="l">1170: </span>
<span class="l">1171: </span>
<span class="l">1172: </span>
<span class="l">1173: </span>
<span class="l">1174: </span>
<span class="l">1175: </span>
<span class="l">1176: </span>
<span class="l">1177: </span>
<span class="l">1178: </span>
<span class="l">1179: </span>
<span class="l">1180: </span>
<span class="l">1181: </span>
<span class="l">1182: </span>
<span class="l">1183: </span>
<span class="l">1184: </span>
<span class="l">1185: </span>
<span class="l">1186: </span>
<span class="l">1187: </span>
<span class="l">1188: </span>
<span class="l">1189: </span>
<span class="l">1190: </span>
<span class="l">1191: </span>
<span class="l">1192: </span>
<span class="l">1193: </span>
<span class="l">1194: </span>
<span class="l">1195: </span>
<span class="l">1196: </span>
<span class="l">1197: </span>
<span class="l">1198: </span>
<span class="l">1199: </span>
<span class="l">1200: </span>
<span class="l">1201: </span>
<span class="l">1202: </span>
<span class="l">1203: </span>
<span class="l">1204: </span>
<span class="l">1205: </span>
<span class="l">1206: </span>
<span class="l">1207: </span>
<span class="l">1208: </span>
<span class="l">1209: </span>
<span class="l">1210: </span>
<span class="l">1211: </span>
<span class="l">1212: </span>
<span class="l">1213: </span>
<span class="l">1214: </span>
<span class="l">1215: </span>
<span class="l">1216: </span>
<span class="l">1217: </span>
<span class="l">1218: </span>
<span class="l">1219: </span>
<span class="l">1220: </span>
<span class="l">1221: </span>
<span class="l">1222: </span>
<span class="l">1223: </span>
<span class="l">1224: </span>
<span class="l">1225: </span>
<span class="l">1226: </span>
<span class="l">1227: </span>
<span class="l">1228: </span>
<span class="l">1229: </span>
<span class="l">1230: </span>
<span class="l">1231: </span>
<span class="l">1232: </span>
<span class="l">1233: </span>
<span class="l">1234: </span>
<span class="l">1235: </span>
<span class="l">1236: </span>
<span class="l">1237: </span>
<span class="l">1238: </span>
<span class="l">1239: </span>
<span class="l">1240: </span>
<span class="l">1241: </span>
<span class="l">1242: </span>
<span class="l">1243: </span>
<span class="l">1244: </span>
<span class="l">1245: </span>
<span class="l">1246: </span>
<span class="l">1247: </span>
<span class="l">1248: </span>
<span class="l">1249: </span>
<span class="l">1250: </span>
<span class="l">1251: </span>
<span class="l">1252: </span>
<span class="l">1253: </span>
<span class="l">1254: </span>
<span class="l">1255: </span>
<span class="l">1256: </span>
<span class="l">1257: </span>
<span class="l">1258: </span>
<span class="l">1259: </span>
<span class="l">1260: </span>
<span class="l">1261: </span>
<span class="l">1262: </span>
<span class="l">1263: </span>
<span class="l">1264: </span>
<span class="l">1265: </span>
<span class="l">1266: </span>
<span class="l">1267: </span>
<span class="l">1268: </span>
<span class="l">1269: </span>
<span class="l">1270: </span>
<span class="l">1271: </span>
<span class="l">1272: </span>
<span class="l">1273: </span>
<span class="l">1274: </span>
<span class="l">1275: </span>
<span class="l">1276: </span>
<span class="l">1277: </span>
<span class="l">1278: </span>
<span class="l">1279: </span>
<span class="l">1280: </span>
<span class="l">1281: </span>
<span class="l">1282: </span>
<span class="l">1283: </span>
<span class="l">1284: </span>
<span class="l">1285: </span>
<span class="l">1286: </span>
<span class="l">1287: </span>
<span class="l">1288: </span>
<span class="l">1289: </span>
<span class="l">1290: </span>
<span class="l">1291: </span>
<span class="l">1292: </span>
<span class="l">1293: </span>
<span class="l">1294: </span>
<span class="l">1295: </span>
<span class="l">1296: </span>
<span class="l">1297: </span>
<span class="l">1298: </span>
<span class="l">1299: </span>
<span class="l">1300: </span>
<span class="l">1301: </span>
<span class="l">1302: </span>
<span class="l">1303: </span>
<span class="l">1304: </span>
<span class="l">1305: </span>
<span class="l">1306: </span>
<span class="l">1307: </span>
<span class="l">1308: </span>
<span class="l">1309: </span>
<span class="l">1310: </span>
<span class="l">1311: </span>
<span class="l">1312: </span>
<span class="l">1313: </span>
<span class="l">1314: </span>
<span class="l">1315: </span>
<span class="l">1316: </span>
<span class="l">1317: </span>
<span class="l">1318: </span>
<span class="l">1319: </span>
<span class="l">1320: </span>
<span class="l">1321: </span>
<span class="l">1322: </span>
<span class="l">1323: </span>
<span class="l">1324: </span>
<span class="l">1325: </span>
<span class="l">1326: </span>
<span class="l">1327: </span>
<span class="l">1328: </span>
<span class="l">1329: </span>
<span class="l">1330: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//---------------------------------------------------------------</span>
<span class="c">// Overview</span>
<span class="c">//</span>
<span class="c">// Below is a set of exercises designed to get you familiar </span>
<span class="c">// with F#. By the time you&#39;re done, you&#39;ll have a basic </span>
<span class="c">// understanding of the syntax of F# and learn a little more</span>
<span class="c">// about functional programming in general.</span>
<span class="c">//</span>
<span class="c">// Answering Problems</span>
<span class="c">// </span>
<span class="c">// This is where the fun begins! Each dashed section contains an </span>
<span class="c">// example designed to teach you a lesson about the F# language. </span>
<span class="c">// If you highlight the code in an example and execute it (use </span>
<span class="c">// Ctrl+Enter or the run button) it will initially fail. Your</span>
<span class="c">// job is to fill in the blanks to make it pass. With each</span>
<span class="c">// passing section, you&#39;ll learn more about F#, and add another</span>
<span class="c">// weapon to your F# programming arsenal.</span>
<span class="c">//</span>
<span class="c">// Start by highlighitng the section below and running it. Once</span>
<span class="c">// you see it fail, replace the __ with 2 to make it pass.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- about asserts -------------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">expected_value</span> <span class="o">=</span> <span class="n">1</span> <span class="o">+</span> <span class="n">1</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">actual_value</span> <span class="o">=</span> <span class="i">__</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="i">expected_value</span> <span onmouseout="hideTip(event, 'fs2', 4)" onmouseover="showTip(event, 'fs2', 4)" class="i">actual_value</span>

<span class="c">//Easy, right? Try the next one.</span>

<span class="c">//---------------------------------------------------------------</span>
 
<span class="c">// ---- more about asserts --------------------------------------</span>

<span class="i">AssertEquality</span> <span class="s">&quot;foo&quot;</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Let</span>
<span class="c">//</span>
<span class="c">// The let keyword is one of the most fundamental parts of F#.</span>
<span class="c">// You&#39;ll use it in almost every line of F# code you write, so</span>
<span class="c">// let&#39;s get to know it well! (no pun intended)</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- let binds a name to a value -----------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="i">x</span> <span class="o">=</span> <span class="n">50</span>
        
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">x</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- let infers the type of values when it can ---------------</span>

<span class="c">(* In F#, values created with let are inferred to have a type like</span>
<span class="c">   &quot;int&quot; for integer values, &quot;string&quot; for text values, and &quot;bool&quot; </span>
<span class="c">   for true or false values. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 7)" onmouseover="showTip(event, 'fs3', 7)" class="i">x</span> <span class="o">=</span> <span class="n">50</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="i">typeOfX</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 9)" onmouseover="showTip(event, 'fs3', 9)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="f">GetType</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs4', 11)" onmouseover="showTip(event, 'fs4', 11)" class="i">typeOfX</span> <span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">int</span><span class="o">&gt;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 14)" onmouseover="showTip(event, 'fs8', 14)" class="i">y</span> <span class="o">=</span> <span class="s">&quot;a string&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="i">expectedType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="i">y</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 17)" onmouseover="showTip(event, 'fs5', 17)" class="f">GetType</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs9', 18)" onmouseover="showTip(event, 'fs9', 18)" class="i">expectedType</span> <span onmouseout="hideTip(event, 'fs6', 19)" onmouseover="showTip(event, 'fs6', 19)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can make the types explicit -------------------------</span>

<span class="k">let</span> (<span onmouseout="hideTip(event, 'fs3', 20)" onmouseover="showTip(event, 'fs3', 20)" class="i">x</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs7', 21)" onmouseover="showTip(event, 'fs7', 21)" class="t">int</span>) <span class="o">=</span> <span class="n">42</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 22)" onmouseover="showTip(event, 'fs4', 22)" class="i">typeOfX</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 23)" onmouseover="showTip(event, 'fs3', 23)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 24)" onmouseover="showTip(event, 'fs5', 24)" class="f">GetType</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 25)" onmouseover="showTip(event, 'fs8', 25)" class="i">y</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26)" class="t">string</span> <span class="o">=</span> <span class="s">&quot;forty two&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 27)" onmouseover="showTip(event, 'fs11', 27)" class="i">typeOfY</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 28)" onmouseover="showTip(event, 'fs8', 28)" class="i">y</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 29)" onmouseover="showTip(event, 'fs5', 29)" class="f">GetType</span>()

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs4', 30)" onmouseover="showTip(event, 'fs4', 30)" class="i">typeOfX</span> <span onmouseout="hideTip(event, 'fs6', 31)" onmouseover="showTip(event, 'fs6', 31)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs11', 32)" onmouseover="showTip(event, 'fs11', 32)" class="i">typeOfY</span> <span onmouseout="hideTip(event, 'fs6', 33)" onmouseover="showTip(event, 'fs6', 33)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>

<span class="c">(* You don&#39;t usually need to provide explicit type annotations </span>
<span class="c">   types for local varaibles, but type annotations can come in </span>
<span class="c">   handy in other contexts as you&#39;ll see later. *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- floats and ints -----------------------------------------</span>

<span class="c">(* Depending on your background, you may be surprised to learn that</span>
<span class="c">    in F#, integers and floating point numbers are different types. </span>
<span class="c">    In other words, the following is true. *)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 34)" onmouseover="showTip(event, 'fs3', 34)" class="i">x</span> <span class="o">=</span> <span class="n">20</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 35)" onmouseover="showTip(event, 'fs4', 35)" class="i">typeOfX</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 36)" onmouseover="showTip(event, 'fs3', 36)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 37)" onmouseover="showTip(event, 'fs5', 37)" class="f">GetType</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 38)" onmouseover="showTip(event, 'fs12', 38)" class="i">y</span> <span class="o">=</span> <span class="n">20.0</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 39)" onmouseover="showTip(event, 'fs11', 39)" class="i">typeOfY</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 40)" onmouseover="showTip(event, 'fs12', 40)" class="i">y</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 41)" onmouseover="showTip(event, 'fs5', 41)" class="f">GetType</span>()

<span class="c">//you don&#39;t need to modify these</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs4', 42)" onmouseover="showTip(event, 'fs4', 42)" class="i">typeOfX</span> <span onmouseout="hideTip(event, 'fs6', 43)" onmouseover="showTip(event, 'fs6', 43)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs7', 44)" onmouseover="showTip(event, 'fs7', 44)" class="i">int</span><span class="o">&gt;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs11', 45)" onmouseover="showTip(event, 'fs11', 45)" class="i">typeOfY</span> <span onmouseout="hideTip(event, 'fs6', 46)" onmouseover="showTip(event, 'fs6', 46)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 47)" onmouseover="showTip(event, 'fs13', 47)" class="i">float</span><span class="o">&gt;</span>

<span class="c">//If you&#39;re coming from another .NET language, float is F# slang for</span>
<span class="c">//the double type.</span>
   
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- modifying the value of variables ------------------------</span>

<span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs14', 48)" onmouseover="showTip(event, 'fs14', 48)" class="v">x</span> <span class="o">=</span> <span class="n">100</span>
<span onmouseout="hideTip(event, 'fs14', 49)" onmouseover="showTip(event, 'fs14', 49)" class="v">x</span> <span class="o">&lt;-</span> <span class="n">200</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs14', 50)" onmouseover="showTip(event, 'fs14', 50)" class="i">x</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can&#39;t modify a value if it isn&#39;t mutable ------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 51)" onmouseover="showTip(event, 'fs3', 51)" class="i">x</span> <span class="o">=</span> <span class="n">50</span>

<span class="c">//What happens if you try to uncomment and run the following line of code?</span>
<span class="c">//(look at the output in the output window)</span>
<span class="c">//x &lt;- 100</span>

<span class="c">//NOTE: Although you can&#39;t modify immutable values, it is </span>
<span class="c">//      possible to reuse the name of a value in some cases </span>
<span class="c">//      using &quot;shadowing&quot;.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 52)" onmouseover="showTip(event, 'fs3', 52)" class="i">x</span> <span class="o">=</span> <span class="n">100</span>
 
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs3', 53)" onmouseover="showTip(event, 'fs3', 53)" class="i">x</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Functions</span>
<span class="c">//</span>
<span class="c">// Now that you&#39;ve seen how to bind a name to a value with let,</span>
<span class="c">// you&#39;ll learn to use the let keyword to create functions.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating functions with let -----------------------------</span>

<span class="c">(* By default, F# is whitespace sensitive. For functions, this </span>
<span class="c">   means that the last line of a function is its return value,</span>
<span class="c">   and the body of a function is denoted by indentation. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 54)" onmouseover="showTip(event, 'fs15', 54)" class="f">add</span> <span onmouseout="hideTip(event, 'fs16', 55)" onmouseover="showTip(event, 'fs16', 55)" class="i">x</span> <span onmouseout="hideTip(event, 'fs17', 56)" onmouseover="showTip(event, 'fs17', 56)" class="i">y</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 57)" onmouseover="showTip(event, 'fs16', 57)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs17', 58)" onmouseover="showTip(event, 'fs17', 58)" class="i">y</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 59)" onmouseover="showTip(event, 'fs18', 59)" class="i">result1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 60)" onmouseover="showTip(event, 'fs15', 60)" class="f">add</span> <span class="n">2</span> <span class="n">2</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 61)" onmouseover="showTip(event, 'fs19', 61)" class="i">result2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 62)" onmouseover="showTip(event, 'fs15', 62)" class="f">add</span> <span class="n">5</span> <span class="n">2</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs18', 63)" onmouseover="showTip(event, 'fs18', 63)" class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs19', 64)" onmouseover="showTip(event, 'fs19', 64)" class="i">result2</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- nesting functions ---------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 65)" onmouseover="showTip(event, 'fs20', 65)" class="f">quadruple</span> <span onmouseout="hideTip(event, 'fs16', 66)" onmouseover="showTip(event, 'fs16', 66)" class="i">x</span> <span class="o">=</span>    
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 67)" onmouseover="showTip(event, 'fs21', 67)" class="f">double</span> <span onmouseout="hideTip(event, 'fs16', 68)" onmouseover="showTip(event, 'fs16', 68)" class="i">x</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs16', 69)" onmouseover="showTip(event, 'fs16', 69)" class="i">x</span> <span class="o">*</span> <span class="n">2</span>

    <span onmouseout="hideTip(event, 'fs21', 70)" onmouseover="showTip(event, 'fs21', 70)" class="f">double</span>(<span onmouseout="hideTip(event, 'fs21', 71)" onmouseover="showTip(event, 'fs21', 71)" class="f">double</span>(<span onmouseout="hideTip(event, 'fs16', 72)" onmouseover="showTip(event, 'fs16', 72)" class="i">x</span>))

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 73)" onmouseover="showTip(event, 'fs22', 73)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 74)" onmouseover="showTip(event, 'fs20', 74)" class="f">quadruple</span> <span class="n">4</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs22', 75)" onmouseover="showTip(event, 'fs22', 75)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- adding type annotations ---------------------------------</span>

<span class="c">(* Sometimes you need to help F#&#39;s type inference system out with</span>
<span class="c">   an explicit type annotation *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 76)" onmouseover="showTip(event, 'fs23', 76)" class="f">sayItLikeAnAuctioneer</span> (<span onmouseout="hideTip(event, 'fs24', 77)" onmouseover="showTip(event, 'fs24', 77)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 78)" onmouseover="showTip(event, 'fs10', 78)" class="t">string</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs24', 79)" onmouseover="showTip(event, 'fs24', 79)" class="i">text</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs25', 80)" onmouseover="showTip(event, 'fs25', 80)" class="f">Replace</span>(<span class="s">&quot; &quot;</span>, <span class="s">&quot;&quot;</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 81)" onmouseover="showTip(event, 'fs26', 81)" class="i">auctioneered</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 82)" onmouseover="showTip(event, 'fs23', 82)" class="f">sayItLikeAnAuctioneer</span> <span class="s">&quot;going once going twice sold to the lady in red&quot;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs26', 83)" onmouseover="showTip(event, 'fs26', 83)" class="i">auctioneered</span> <span class="i">__</span>

<span class="c">//TRY IT: What happens if you remove the type annotation on text?</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- variables in the parent scope can be accessed -----------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 84)" onmouseover="showTip(event, 'fs27', 84)" class="i">suffix</span> <span class="o">=</span> <span class="s">&quot;!!!&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs28', 85)" onmouseover="showTip(event, 'fs28', 85)" class="f">caffinate</span> (<span onmouseout="hideTip(event, 'fs24', 86)" onmouseover="showTip(event, 'fs24', 86)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 87)" onmouseover="showTip(event, 'fs10', 87)" class="t">string</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 88)" onmouseover="showTip(event, 'fs29', 88)" class="i">exclaimed</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 89)" onmouseover="showTip(event, 'fs24', 89)" class="i">text</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs27', 90)" onmouseover="showTip(event, 'fs27', 90)" class="i">suffix</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 91)" onmouseover="showTip(event, 'fs30', 91)" class="i">yelled</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs29', 92)" onmouseover="showTip(event, 'fs29', 92)" class="i">exclaimed</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 93)" onmouseover="showTip(event, 'fs31', 93)" class="f">ToUpper</span>()
    <span onmouseout="hideTip(event, 'fs30', 94)" onmouseover="showTip(event, 'fs30', 94)" class="i">yelled</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 95)" onmouseover="showTip(event, 'fs32', 95)" class="f">Trim</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 96)" onmouseover="showTip(event, 'fs33', 96)" class="i">caffinatedReply</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 97)" onmouseover="showTip(event, 'fs28', 97)" class="f">caffinate</span> <span class="s">&quot;hello there&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs33', 98)" onmouseover="showTip(event, 'fs33', 98)" class="i">caffinatedReply</span> <span class="i">__</span>

<span class="c">(* NOTE: Accessing the suffix variable in the nested caffinate function </span>
<span class="c">         is known as a closure. </span>
<span class="c">         </span>
<span class="c">         See http://en.wikipedia.org/wiki/Closure_(computer_science) </span>
<span class="c">         for more about about closure. *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About the Order of Evaluation</span>
<span class="c">//</span>
<span class="c">// Sometimes you&#39;ll need to be explicit about the order in which</span>
<span class="c">// functions are evaluated. F# offers a couple mechanisms for</span>
<span class="c">// doing this.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- using parenthesis to control the order of operation -----</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 99)" onmouseover="showTip(event, 'fs15', 99)" class="f">add</span> <span onmouseout="hideTip(event, 'fs16', 100)" onmouseover="showTip(event, 'fs16', 100)" class="i">x</span> <span onmouseout="hideTip(event, 'fs17', 101)" onmouseover="showTip(event, 'fs17', 101)" class="i">y</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 102)" onmouseover="showTip(event, 'fs16', 102)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs17', 103)" onmouseover="showTip(event, 'fs17', 103)" class="i">y</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 104)" onmouseover="showTip(event, 'fs22', 104)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 105)" onmouseover="showTip(event, 'fs15', 105)" class="f">add</span> (<span onmouseout="hideTip(event, 'fs15', 106)" onmouseover="showTip(event, 'fs15', 106)" class="f">add</span> <span class="n">5</span> <span class="n">8</span>) (<span onmouseout="hideTip(event, 'fs15', 107)" onmouseover="showTip(event, 'fs15', 107)" class="f">add</span> <span class="n">1</span> <span class="n">1</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs22', 108)" onmouseover="showTip(event, 'fs22', 108)" class="i">result</span> <span class="i">__</span>

<span class="c">(* TRY IT: What happens if you remove the parensthesis?*)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- the backward pipe operator can also help with grouping --</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 109)" onmouseover="showTip(event, 'fs15', 109)" class="f">add</span> <span onmouseout="hideTip(event, 'fs16', 110)" onmouseover="showTip(event, 'fs16', 110)" class="i">x</span> <span onmouseout="hideTip(event, 'fs17', 111)" onmouseover="showTip(event, 'fs17', 111)" class="i">y</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 112)" onmouseover="showTip(event, 'fs16', 112)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs17', 113)" onmouseover="showTip(event, 'fs17', 113)" class="i">y</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 114)" onmouseover="showTip(event, 'fs34', 114)" class="f">double</span> <span onmouseout="hideTip(event, 'fs16', 115)" onmouseover="showTip(event, 'fs16', 115)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 116)" onmouseover="showTip(event, 'fs16', 116)" class="i">x</span> <span class="o">*</span> <span class="n">2</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 117)" onmouseover="showTip(event, 'fs22', 117)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs34', 118)" onmouseover="showTip(event, 'fs34', 118)" class="f">double</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs15', 119)" onmouseover="showTip(event, 'fs15', 119)" class="f">add</span> <span class="n">5</span> <span class="n">8</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs22', 120)" onmouseover="showTip(event, 'fs22', 120)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Unit</span>
<span class="c">//</span>
<span class="c">// The unit type is a special type that represents the lack of</span>
<span class="c">// a value. It&#39;s similar to void in other languages, but unit</span>
<span class="c">// is actually considered to be a type in F#.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- unit is used when there is no return value --------------</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 121)" onmouseover="showTip(event, 'fs35', 121)" class="f">sendData</span> <span onmouseout="hideTip(event, 'fs36', 122)" onmouseover="showTip(event, 'fs36', 122)" class="i">data</span> <span class="o">=</span>
    <span class="c">//...pretend we are sending the data to the server...</span>
    ()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 123)" onmouseover="showTip(event, 'fs37', 123)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs35', 124)" onmouseover="showTip(event, 'fs35', 124)" class="f">sendData</span> <span class="s">&quot;data&quot;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs37', 125)" onmouseover="showTip(event, 'fs37', 125)" class="i">x</span> <span class="i">__</span> <span class="c">//Don&#39;t overthink this</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- parameterless fucntions take unit as their argument -----</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 126)" onmouseover="showTip(event, 'fs38', 126)" class="f">sayHello</span>() <span class="o">=</span>
    <span class="s">&quot;hello&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 127)" onmouseover="showTip(event, 'fs39', 127)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 128)" onmouseover="showTip(event, 'fs38', 128)" class="f">sayHello</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 129)" onmouseover="showTip(event, 'fs39', 129)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Tuples</span>
<span class="c">//</span>
<span class="c">// Tuples are used to easily group together values in F#. They&#39;re </span>
<span class="c">// another fundamental construct of the language.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating tuples -----</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 130)" onmouseover="showTip(event, 'fs40', 130)" class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs40', 131)" onmouseover="showTip(event, 'fs40', 131)" class="i">items</span> (<span class="s">&quot;apple&quot;</span>, <span class="i">__</span>)

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- accessing tuple elements --------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 132)" onmouseover="showTip(event, 'fs40', 132)" class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>)
 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 133)" onmouseover="showTip(event, 'fs41', 133)" class="i">fruit</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs42', 134)" onmouseover="showTip(event, 'fs42', 134)" class="f">fst</span> <span onmouseout="hideTip(event, 'fs40', 135)" onmouseover="showTip(event, 'fs40', 135)" class="i">items</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 136)" onmouseover="showTip(event, 'fs43', 136)" class="i">animal</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs44', 137)" onmouseover="showTip(event, 'fs44', 137)" class="f">snd</span> <span onmouseout="hideTip(event, 'fs40', 138)" onmouseover="showTip(event, 'fs40', 138)" class="i">items</span>
 
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs41', 139)" onmouseover="showTip(event, 'fs41', 139)" class="i">fruit</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs43', 140)" onmouseover="showTip(event, 'fs43', 140)" class="i">animal</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
       
<span class="c">// ---- accessing tuple elements with pattern matching ----------</span>

<span class="c">(* fst and snd are useful in some situations, but they only work with</span>
<span class="c">   tuples containing two elements. It&#39;s usually better to use a </span>
<span class="c">   technique called pattern matching to access the values of a tuple. </span>
<span class="c">    </span>
<span class="c">   Pattern matching works with tuples of any arity, and it allows you to </span>
<span class="c">   simultaneously break apart the tuple while assigning a name to each </span>
<span class="c">   value. Here&#39;s an example. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 141)" onmouseover="showTip(event, 'fs45', 141)" class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>, <span class="s">&quot;Mustang&quot;</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 142)" onmouseover="showTip(event, 'fs41', 142)" class="i">fruit</span>, <span onmouseout="hideTip(event, 'fs43', 143)" onmouseover="showTip(event, 'fs43', 143)" class="i">animal</span>, <span onmouseout="hideTip(event, 'fs46', 144)" onmouseover="showTip(event, 'fs46', 144)" class="i">car</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs45', 145)" onmouseover="showTip(event, 'fs45', 145)" class="i">items</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs41', 146)" onmouseover="showTip(event, 'fs41', 146)" class="i">fruit</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs43', 147)" onmouseover="showTip(event, 'fs43', 147)" class="i">animal</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs46', 148)" onmouseover="showTip(event, 'fs46', 148)" class="i">car</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- ignoring values when pattern matching -------------------</span>
       
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 149)" onmouseover="showTip(event, 'fs45', 149)" class="i">items</span> <span class="o">=</span> (<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;dog&quot;</span>, <span class="s">&quot;Mustang&quot;</span>)

<span class="k">let</span> _, <span onmouseout="hideTip(event, 'fs43', 150)" onmouseover="showTip(event, 'fs43', 150)" class="i">animal</span>, _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs45', 151)" onmouseover="showTip(event, 'fs45', 151)" class="i">items</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs43', 152)" onmouseover="showTip(event, 'fs43', 152)" class="i">animal</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>
        
<span class="c">// ---- using tuples to return multiple values from a function --</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs47', 153)" onmouseover="showTip(event, 'fs47', 153)" class="f">squareAndCube</span> <span onmouseout="hideTip(event, 'fs48', 154)" onmouseover="showTip(event, 'fs48', 154)" class="i">x</span> <span class="o">=</span>
    (<span onmouseout="hideTip(event, 'fs48', 155)" onmouseover="showTip(event, 'fs48', 155)" class="i">x</span> <span class="o">**</span> <span class="n">2.0</span>, <span onmouseout="hideTip(event, 'fs48', 156)" onmouseover="showTip(event, 'fs48', 156)" class="i">x</span> <span class="o">**</span> <span class="n">3.0</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs49', 157)" onmouseover="showTip(event, 'fs49', 157)" class="i">squared</span>, <span onmouseout="hideTip(event, 'fs50', 158)" onmouseover="showTip(event, 'fs50', 158)" class="i">cubed</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 159)" onmouseover="showTip(event, 'fs47', 159)" class="f">squareAndCube</span> <span class="n">3.0</span>


<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs49', 160)" onmouseover="showTip(event, 'fs49', 160)" class="i">squared</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs50', 161)" onmouseover="showTip(event, 'fs50', 161)" class="i">cubed</span> <span class="i">__</span>

<span class="c">(* THINK ABOUT IT: Is there really more than one return value?</span>
<span class="c">                   What type does the squareAndCube function</span>
<span class="c">                   return? *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- the truth behind multiple return values ------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs47', 162)" onmouseover="showTip(event, 'fs47', 162)" class="f">squareAndCube</span> <span onmouseout="hideTip(event, 'fs48', 163)" onmouseover="showTip(event, 'fs48', 163)" class="i">x</span> <span class="o">=</span>
    (<span onmouseout="hideTip(event, 'fs48', 164)" onmouseover="showTip(event, 'fs48', 164)" class="i">x</span> <span class="o">**</span> <span class="n">2.0</span>, <span onmouseout="hideTip(event, 'fs48', 165)" onmouseover="showTip(event, 'fs48', 165)" class="i">x</span> <span class="o">**</span> <span class="n">3.0</span>)
            
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs51', 166)" onmouseover="showTip(event, 'fs51', 166)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 167)" onmouseover="showTip(event, 'fs47', 167)" class="f">squareAndCube</span> <span class="n">3.0</span>
       
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs51', 168)" onmouseover="showTip(event, 'fs51', 168)" class="i">result</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Branching</span>
<span class="c">//</span>
<span class="c">// Branching is used to tell a program to conditionally perform</span>
<span class="c">// an operation. It&#39;s another fundamental part of F#.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- basic if statements -------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs52', 169)" onmouseover="showTip(event, 'fs52', 169)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs16', 170)" onmouseover="showTip(event, 'fs16', 170)" class="i">x</span> <span class="o">=</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs16', 171)" onmouseover="showTip(event, 'fs16', 171)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span>
        <span class="s">&quot;it&#39;s even!&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;it&#39;s odd!&quot;</span>
        
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 172)" onmouseover="showTip(event, 'fs39', 172)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs52', 173)" onmouseover="showTip(event, 'fs52', 173)" class="f">isEven</span> <span class="n">2</span>                
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 174)" onmouseover="showTip(event, 'fs39', 174)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- if statements return values -----------------------------</span>
    
<span class="c">(* In languages like C++, Java, and C# if statements do not yield </span>
<span class="c">  results; they can only cause side effects. If statements in F# </span>
<span class="c">  return values due to F#&#39;s functional programming roots. *)</span>
   
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 175)" onmouseover="showTip(event, 'fs39', 175)" class="i">result</span> <span class="o">=</span> 
    <span class="k">if</span> <span class="n">2</span> <span class="o">=</span> <span class="n">3</span> <span class="k">then</span>
        <span class="s">&quot;something is REALLY wrong&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;math is workng!&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 176)" onmouseover="showTip(event, 'fs39', 176)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- branching with pattern matching -------------------------</span>
 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs53', 177)" onmouseover="showTip(event, 'fs53', 177)" class="f">isApple</span> <span onmouseout="hideTip(event, 'fs54', 178)" onmouseover="showTip(event, 'fs54', 178)" class="i">x</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs54', 179)" onmouseover="showTip(event, 'fs54', 179)" class="i">x</span> <span class="k">with</span>
    | <span class="s">&quot;apple&quot;</span> <span class="k">-&gt;</span> <span class="k">true</span>
    | _ <span class="k">-&gt;</span> <span class="k">false</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 180)" onmouseover="showTip(event, 'fs55', 180)" class="i">result1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs53', 181)" onmouseover="showTip(event, 'fs53', 181)" class="f">isApple</span> <span class="s">&quot;apple&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs56', 182)" onmouseover="showTip(event, 'fs56', 182)" class="i">result2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs53', 183)" onmouseover="showTip(event, 'fs53', 183)" class="f">isApple</span> <span class="s">&quot;&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs55', 184)" onmouseover="showTip(event, 'fs55', 184)" class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs56', 185)" onmouseover="showTip(event, 'fs56', 185)" class="i">result2</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- using tuples with if statements quickly becomes clumsy --</span>
        
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 186)" onmouseover="showTip(event, 'fs57', 186)" class="f">getDinner</span> <span onmouseout="hideTip(event, 'fs58', 187)" onmouseover="showTip(event, 'fs58', 187)" class="i">x</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs59', 188)" onmouseover="showTip(event, 'fs59', 188)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs60', 189)" onmouseover="showTip(event, 'fs60', 189)" class="i">foodChoice</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs58', 190)" onmouseover="showTip(event, 'fs58', 190)" class="i">x</span>
    
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs60', 191)" onmouseover="showTip(event, 'fs60', 191)" class="i">foodChoice</span> <span class="o">=</span> <span class="s">&quot;veggies&quot;</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs60', 192)" onmouseover="showTip(event, 'fs60', 192)" class="i">foodChoice</span> <span class="o">=</span><span class="s">&quot;fish&quot;</span> <span class="o">||</span> 
       <span onmouseout="hideTip(event, 'fs60', 193)" onmouseover="showTip(event, 'fs60', 193)" class="i">foodChoice</span> <span class="o">=</span> <span class="s">&quot;chicken&quot;</span> <span class="k">then</span>
        <span onmouseout="hideTip(event, 'fs61', 194)" onmouseover="showTip(event, 'fs61', 194)" class="f">sprintf</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> doesn&#39;t want red meat&quot;</span> <span onmouseout="hideTip(event, 'fs59', 195)" onmouseover="showTip(event, 'fs59', 195)" class="i">name</span>
    <span class="k">else</span>
        <span onmouseout="hideTip(event, 'fs61', 196)" onmouseover="showTip(event, 'fs61', 196)" class="f">sprintf</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> wants &#39;em some </span><span class="pf">%s</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs59', 197)" onmouseover="showTip(event, 'fs59', 197)" class="i">name</span> <span onmouseout="hideTip(event, 'fs60', 198)" onmouseover="showTip(event, 'fs60', 198)" class="i">foodChoice</span>
 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 199)" onmouseover="showTip(event, 'fs62', 199)" class="i">person1</span> <span class="o">=</span> (<span class="s">&quot;Chris&quot;</span>, <span class="s">&quot;steak&quot;</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 200)" onmouseover="showTip(event, 'fs63', 200)" class="i">person2</span> <span class="o">=</span> (<span class="s">&quot;Dave&quot;</span>, <span class="s">&quot;veggies&quot;</span>)

<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs57', 201)" onmouseover="showTip(event, 'fs57', 201)" class="i">getDinner</span> <span onmouseout="hideTip(event, 'fs62', 202)" onmouseover="showTip(event, 'fs62', 202)" class="i">person1</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs57', 203)" onmouseover="showTip(event, 'fs57', 203)" class="i">getDinner</span> <span onmouseout="hideTip(event, 'fs63', 204)" onmouseover="showTip(event, 'fs63', 204)" class="i">person2</span>) <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- pattern matching with tuples is much nicer --------------</span>
    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 205)" onmouseover="showTip(event, 'fs57', 205)" class="f">getDinner</span> <span onmouseout="hideTip(event, 'fs58', 206)" onmouseover="showTip(event, 'fs58', 206)" class="i">x</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs58', 207)" onmouseover="showTip(event, 'fs58', 207)" class="i">x</span> <span class="k">with</span>
    | (<span onmouseout="hideTip(event, 'fs59', 208)" onmouseover="showTip(event, 'fs59', 208)" class="i">name</span>, <span class="s">&quot;veggies&quot;</span>)
    | (<span onmouseout="hideTip(event, 'fs59', 209)" onmouseover="showTip(event, 'fs59', 209)" class="i">name</span>, <span class="s">&quot;fish&quot;</span>)
    | (<span onmouseout="hideTip(event, 'fs59', 210)" onmouseover="showTip(event, 'fs59', 210)" class="i">name</span>, <span class="s">&quot;chicken&quot;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs61', 211)" onmouseover="showTip(event, 'fs61', 211)" class="f">sprintf</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> doesn&#39;t want red meat&quot;</span> <span onmouseout="hideTip(event, 'fs59', 212)" onmouseover="showTip(event, 'fs59', 212)" class="i">name</span>
    | (<span onmouseout="hideTip(event, 'fs59', 213)" onmouseover="showTip(event, 'fs59', 213)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs60', 214)" onmouseover="showTip(event, 'fs60', 214)" class="i">foodChoice</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs61', 215)" onmouseover="showTip(event, 'fs61', 215)" class="f">sprintf</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> wants &#39;em some </span><span class="pf">%s</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs59', 216)" onmouseover="showTip(event, 'fs59', 216)" class="i">name</span> <span onmouseout="hideTip(event, 'fs60', 217)" onmouseover="showTip(event, 'fs60', 217)" class="i">foodChoice</span> 
    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 218)" onmouseover="showTip(event, 'fs62', 218)" class="i">person1</span> <span class="o">=</span> (<span class="s">&quot;Bob&quot;</span>, <span class="s">&quot;fish&quot;</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 219)" onmouseover="showTip(event, 'fs63', 219)" class="i">person2</span> <span class="o">=</span> (<span class="s">&quot;Sally&quot;</span>, <span class="s">&quot;Burger&quot;</span>)

<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs57', 220)" onmouseover="showTip(event, 'fs57', 220)" class="i">getDinner</span> <span onmouseout="hideTip(event, 'fs62', 221)" onmouseover="showTip(event, 'fs62', 221)" class="i">person1</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs57', 222)" onmouseover="showTip(event, 'fs57', 222)" class="i">getDinner</span> <span onmouseout="hideTip(event, 'fs63', 223)" onmouseover="showTip(event, 'fs63', 223)" class="i">person2</span>) <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// About Lists</span>
<span class="c">//</span>
<span class="c">// Lists are important building blocks that you&#39;ll use frequently</span>
<span class="c">// in F# programming. They are used to group arbitrarily large </span>
<span class="c">// sequences of values. It&#39;s very common to store values in a </span>
<span class="c">// list and perform operations across each value in the </span>
<span class="c">// list.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists ------------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 224)" onmouseover="showTip(event, 'fs64', 224)" class="i">list</span> <span class="o">=</span> [<span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>]

<span class="c">//Note: The list data type in F# is a singly linked list, </span>
<span class="c">//      so indexing elements is O(n). </span>
 
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs64', 225)" onmouseover="showTip(event, 'fs64', 225)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 226)" onmouseover="showTip(event, 'fs65', 226)" class="i">Head</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs64', 227)" onmouseover="showTip(event, 'fs64', 227)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs66', 228)" onmouseover="showTip(event, 'fs66', 228)" class="i">Tail</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs64', 229)" onmouseover="showTip(event, 'fs64', 229)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs67', 230)" onmouseover="showTip(event, 'fs67', 230)" class="i">Length</span> <span class="i">__</span>

       
<span class="c">(* .NET developers coming from other languages may be surprised</span>
<span class="c">   that F#&#39;s list type is not the same as the base class library&#39;s</span>
<span class="c">   List&lt;T&gt;. In other words, the following assertion is true *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs68', 231)" onmouseover="showTip(event, 'fs68', 231)" class="i">dotNetList</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs69', 232)" onmouseover="showTip(event, 'fs69', 232)" class="t">List</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 233)" onmouseover="showTip(event, 'fs10', 233)" class="t">string</span><span class="o">&gt;</span>()

<span class="c">//you don&#39;t need to modify the following line</span>
<span class="i">AssertInequality</span> (<span onmouseout="hideTip(event, 'fs64', 234)" onmouseover="showTip(event, 'fs64', 234)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 235)" onmouseover="showTip(event, 'fs5', 235)" class="i">GetType</span>()) (<span onmouseout="hideTip(event, 'fs68', 236)" onmouseover="showTip(event, 'fs68', 236)" class="i">dotNetList</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 237)" onmouseover="showTip(event, 'fs5', 237)" class="i">GetType</span>())

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- building new lists---------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs70', 238)" onmouseover="showTip(event, 'fs70', 238)" class="i">first</span> <span class="o">=</span> [<span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 239)" onmouseover="showTip(event, 'fs71', 239)" class="i">second</span> <span class="o">=</span> <span class="s">&quot;pear&quot;</span> <span class="o">::</span> <span onmouseout="hideTip(event, 'fs70', 240)" onmouseover="showTip(event, 'fs70', 240)" class="i">first</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs72', 241)" onmouseover="showTip(event, 'fs72', 241)" class="i">third</span> <span class="o">=</span> <span class="s">&quot;apple&quot;</span> <span class="o">::</span> <span onmouseout="hideTip(event, 'fs71', 242)" onmouseover="showTip(event, 'fs71', 242)" class="i">second</span>

<span class="c">//Note: &quot;::&quot; is known as &quot;cons&quot;</span>

<span class="i">AssertEquality</span> [<span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;grape&quot;</span>; <span class="s">&quot;peach&quot;</span>] <span onmouseout="hideTip(event, 'fs72', 243)" onmouseover="showTip(event, 'fs72', 243)" class="i">third</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs71', 244)" onmouseover="showTip(event, 'fs71', 244)" class="i">second</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs70', 245)" onmouseover="showTip(event, 'fs70', 245)" class="i">first</span> <span class="i">__</span>

<span class="c">//What happens if you uncomment the following?</span>

<span class="c">//first.Head &lt;- &quot;apple&quot;</span>
<span class="c">//first.Tail &lt;- [&quot;peach&quot;; &quot;pear&quot;]</span>

<span class="c">//THINK ABOUT IT: Can you change the contents of a list once it </span>
<span class="c">//                has been created?</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- concatenating lists -------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs70', 246)" onmouseover="showTip(event, 'fs70', 246)" class="i">first</span> <span class="o">=</span> [<span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;grape&quot;</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 247)" onmouseover="showTip(event, 'fs71', 247)" class="i">second</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs70', 248)" onmouseover="showTip(event, 'fs70', 248)" class="i">first</span> <span class="o">@</span> [<span class="s">&quot;peach&quot;</span>]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs70', 249)" onmouseover="showTip(event, 'fs70', 249)" class="i">first</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs71', 250)" onmouseover="showTip(event, 'fs71', 250)" class="i">second</span> <span class="i">__</span>

<span class="c">(* THINK ABOUT IT: In general, what performs better for building lists, </span>
<span class="c">   :: or @? Why?</span>
<span class="c">   </span>
<span class="c">   Hint: There is no way to modify &quot;first&quot; in the above example. It&#39;s</span>
<span class="c">   immutable. With that in mind, what does the @ function have to do in</span>
<span class="c">   order to append [&quot;peach&quot;] to &quot;first&quot; to create &quot;second&quot;? *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists with a range------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs73', 251)" onmouseover="showTip(event, 'fs73', 251)" class="i">list</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">4</span>]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs73', 252)" onmouseover="showTip(event, 'fs73', 252)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs74', 253)" onmouseover="showTip(event, 'fs74', 253)" class="i">Head</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs73', 254)" onmouseover="showTip(event, 'fs73', 254)" class="i">list</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs75', 255)" onmouseover="showTip(event, 'fs75', 255)" class="i">Tail</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating lists with comprehensions-----------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs73', 256)" onmouseover="showTip(event, 'fs73', 256)" class="i">list</span> <span class="o">=</span> [<span class="k">for</span> <span onmouseout="hideTip(event, 'fs76', 257)" onmouseover="showTip(event, 'fs76', 257)" class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">4</span> <span class="k">do</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs76', 258)" onmouseover="showTip(event, 'fs76', 258)" class="i">i</span> ]
                            
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs73', 259)" onmouseover="showTip(event, 'fs73', 259)" class="i">list</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
    
<span class="c">// ---- comprehensions with conditions --------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs73', 260)" onmouseover="showTip(event, 'fs73', 260)" class="i">list</span> <span class="o">=</span> [<span class="k">for</span> <span onmouseout="hideTip(event, 'fs76', 261)" onmouseover="showTip(event, 'fs76', 261)" class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">10</span> <span class="k">do</span> 
                <span class="k">if</span> <span onmouseout="hideTip(event, 'fs76', 262)" onmouseover="showTip(event, 'fs76', 262)" class="i">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs76', 263)" onmouseover="showTip(event, 'fs76', 263)" class="i">i</span> ]
                    
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs73', 264)" onmouseover="showTip(event, 'fs73', 264)" class="i">list</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- transforming lists with map -----------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs77', 265)" onmouseover="showTip(event, 'fs77', 265)" class="f">square</span> <span onmouseout="hideTip(event, 'fs16', 266)" onmouseover="showTip(event, 'fs16', 266)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 267)" onmouseover="showTip(event, 'fs16', 267)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs16', 268)" onmouseover="showTip(event, 'fs16', 268)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 269)" onmouseover="showTip(event, 'fs78', 269)" class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs79', 270)" onmouseover="showTip(event, 'fs79', 270)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 271)" onmouseover="showTip(event, 'fs69', 271)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs80', 272)" onmouseover="showTip(event, 'fs80', 272)" class="f">map</span> <span onmouseout="hideTip(event, 'fs77', 273)" onmouseover="showTip(event, 'fs77', 273)" class="f">square</span> <span onmouseout="hideTip(event, 'fs78', 274)" onmouseover="showTip(event, 'fs78', 274)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs78', 275)" onmouseover="showTip(event, 'fs78', 275)" class="i">original</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs79', 276)" onmouseover="showTip(event, 'fs79', 276)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- filtering lists with where ------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs81', 277)" onmouseover="showTip(event, 'fs81', 277)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs16', 278)" onmouseover="showTip(event, 'fs16', 278)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 279)" onmouseover="showTip(event, 'fs16', 279)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 280)" onmouseover="showTip(event, 'fs78', 280)" class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs79', 281)" onmouseover="showTip(event, 'fs79', 281)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 282)" onmouseover="showTip(event, 'fs69', 282)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 283)" onmouseover="showTip(event, 'fs82', 283)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs81', 284)" onmouseover="showTip(event, 'fs81', 284)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs78', 285)" onmouseover="showTip(event, 'fs78', 285)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs78', 286)" onmouseover="showTip(event, 'fs78', 286)" class="i">original</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs79', 287)" onmouseover="showTip(event, 'fs79', 287)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- dividing lists with partition ---------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs83', 288)" onmouseover="showTip(event, 'fs83', 288)" class="f">isOdd</span> <span onmouseout="hideTip(event, 'fs16', 289)" onmouseover="showTip(event, 'fs16', 289)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs84', 290)" onmouseover="showTip(event, 'fs84', 290)" class="f">not</span>(<span onmouseout="hideTip(event, 'fs16', 291)" onmouseover="showTip(event, 'fs16', 291)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 292)" onmouseover="showTip(event, 'fs78', 292)" class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs85', 293)" onmouseover="showTip(event, 'fs85', 293)" class="i">result1</span>, <span onmouseout="hideTip(event, 'fs86', 294)" onmouseover="showTip(event, 'fs86', 294)" class="i">result2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 295)" onmouseover="showTip(event, 'fs69', 295)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs87', 296)" onmouseover="showTip(event, 'fs87', 296)" class="f">partition</span> <span onmouseout="hideTip(event, 'fs83', 297)" onmouseover="showTip(event, 'fs83', 297)" class="f">isOdd</span> <span onmouseout="hideTip(event, 'fs78', 298)" onmouseover="showTip(event, 'fs78', 298)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs85', 299)" onmouseover="showTip(event, 'fs85', 299)" class="i">result1</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs86', 300)" onmouseover="showTip(event, 'fs86', 300)" class="i">result2</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">(* Note: There are many other useful methods in the List module. Check them</span>
<span class="c">   via intellisense in Visual Studio by typing &#39;.&#39; after List, or online at</span>
<span class="c">   http://msdn.microsoft.com/en-us/library/ee353738.aspx *)</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Pipelining</span>
<span class="c">//</span>
<span class="c">// The forward pipe operator is one of the most commonly used</span>
<span class="c">// symbols in F# programming. You can use it combine operations</span>
<span class="c">// on lists and other data structures in a readable way.</span>
<span class="c">//---------------------------------------------------------------</span>


<span class="c">// ---- square even numbers with separate statementes -----------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs77', 301)" onmouseover="showTip(event, 'fs77', 301)" class="f">square</span> <span onmouseout="hideTip(event, 'fs16', 302)" onmouseover="showTip(event, 'fs16', 302)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 303)" onmouseover="showTip(event, 'fs16', 303)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs16', 304)" onmouseover="showTip(event, 'fs16', 304)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs81', 305)" onmouseover="showTip(event, 'fs81', 305)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs16', 306)" onmouseover="showTip(event, 'fs16', 306)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 307)" onmouseover="showTip(event, 'fs16', 307)" class="i">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span>

<span class="c">(* One way to combine operations is by using separate statements.</span>
<span class="c">   However, this is can be clumsy since you have to name each result. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs88', 308)" onmouseover="showTip(event, 'fs88', 308)" class="i">numbers</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs89', 309)" onmouseover="showTip(event, 'fs89', 309)" class="i">evens</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 310)" onmouseover="showTip(event, 'fs69', 310)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 311)" onmouseover="showTip(event, 'fs82', 311)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs81', 312)" onmouseover="showTip(event, 'fs81', 312)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs88', 313)" onmouseover="showTip(event, 'fs88', 313)" class="i">numbers</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs79', 314)" onmouseover="showTip(event, 'fs79', 314)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 315)" onmouseover="showTip(event, 'fs69', 315)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs80', 316)" onmouseover="showTip(event, 'fs80', 316)" class="f">map</span> <span onmouseout="hideTip(event, 'fs77', 317)" onmouseover="showTip(event, 'fs77', 317)" class="f">square</span> <span onmouseout="hideTip(event, 'fs89', 318)" onmouseover="showTip(event, 'fs89', 318)" class="i">evens</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs79', 319)" onmouseover="showTip(event, 'fs79', 319)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- square even numbers with parens -------------------------</span>

<span class="c">(* You can avoid this problem by using parens to pass the result of one</span>
<span class="c">   funciton to another. This can be difficult to read since you have to </span>
<span class="c">   start from the innermost function and work your way out. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs88', 320)" onmouseover="showTip(event, 'fs88', 320)" class="i">numbers</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs79', 321)" onmouseover="showTip(event, 'fs79', 321)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 322)" onmouseover="showTip(event, 'fs69', 322)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs80', 323)" onmouseover="showTip(event, 'fs80', 323)" class="f">map</span> <span onmouseout="hideTip(event, 'fs77', 324)" onmouseover="showTip(event, 'fs77', 324)" class="f">square</span> (<span onmouseout="hideTip(event, 'fs69', 325)" onmouseover="showTip(event, 'fs69', 325)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 326)" onmouseover="showTip(event, 'fs82', 326)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs81', 327)" onmouseover="showTip(event, 'fs81', 327)" class="f">isEven</span> <span onmouseout="hideTip(event, 'fs88', 328)" onmouseover="showTip(event, 'fs88', 328)" class="i">numbers</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs79', 329)" onmouseover="showTip(event, 'fs79', 329)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- square even numbers with  the pipeline operator ---------</span>

<span class="c">(* In F#, you can use the pipeline operator to get the benefit of the </span>
<span class="c">   parens style with the readablity of the statement style. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs79', 330)" onmouseover="showTip(event, 'fs79', 330)" class="i">result</span> <span class="o">=</span>
    [<span class="n">0..</span><span class="n">5</span>]
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs69', 331)" onmouseover="showTip(event, 'fs69', 331)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 332)" onmouseover="showTip(event, 'fs82', 332)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs81', 333)" onmouseover="showTip(event, 'fs81', 333)" class="f">isEven</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs69', 334)" onmouseover="showTip(event, 'fs69', 334)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs80', 335)" onmouseover="showTip(event, 'fs80', 335)" class="f">map</span> <span onmouseout="hideTip(event, 'fs77', 336)" onmouseover="showTip(event, 'fs77', 336)" class="f">square</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs79', 337)" onmouseover="showTip(event, 'fs79', 337)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- how the pipe operator is defined ------------------------</span>

<span class="k">let</span> (<span class="o">|&gt;</span>) <span onmouseout="hideTip(event, 'fs90', 338)" onmouseover="showTip(event, 'fs90', 338)" class="i">x</span> <span onmouseout="hideTip(event, 'fs91', 339)" onmouseover="showTip(event, 'fs91', 339)" class="f">y</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs91', 340)" onmouseover="showTip(event, 'fs91', 340)" class="f">y</span> <span onmouseout="hideTip(event, 'fs90', 341)" onmouseover="showTip(event, 'fs90', 341)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs79', 342)" onmouseover="showTip(event, 'fs79', 342)" class="i">result</span> <span class="o">=</span>
    [<span class="n">0..</span><span class="n">5</span>]
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs69', 343)" onmouseover="showTip(event, 'fs69', 343)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 344)" onmouseover="showTip(event, 'fs82', 344)" class="f">filter</span> <span onmouseout="hideTip(event, 'fs81', 345)" onmouseover="showTip(event, 'fs81', 345)" class="f">isEven</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs69', 346)" onmouseover="showTip(event, 'fs69', 346)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs80', 347)" onmouseover="showTip(event, 'fs80', 347)" class="f">map</span> <span onmouseout="hideTip(event, 'fs77', 348)" onmouseover="showTip(event, 'fs77', 348)" class="f">square</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs79', 349)" onmouseover="showTip(event, 'fs79', 349)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Arrays</span>
<span class="c">//</span>
<span class="c">// Like lists, arrays are another basic container type in F#.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating arrays -----------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs92', 350)" onmouseover="showTip(event, 'fs92', 350)" class="i">fruits</span> <span class="o">=</span> [| <span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span>; <span class="s">&quot;peach&quot;</span>|]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs92', 351)" onmouseover="showTip(event, 'fs92', 351)" class="i">fruits</span><span class="o">.</span>[<span class="n">0</span>] <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs92', 352)" onmouseover="showTip(event, 'fs92', 352)" class="i">fruits</span><span class="o">.</span>[<span class="n">1</span>] <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs92', 353)" onmouseover="showTip(event, 'fs92', 353)" class="i">fruits</span><span class="o">.</span>[<span class="n">2</span>] <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- arrays are mutable --------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs92', 354)" onmouseover="showTip(event, 'fs92', 354)" class="i">fruits</span> <span class="o">=</span> [| <span class="s">&quot;apple&quot;</span>; <span class="s">&quot;pear&quot;</span> |]
<span onmouseout="hideTip(event, 'fs92', 355)" onmouseover="showTip(event, 'fs92', 355)" class="i">fruits</span><span class="o">.</span>[<span class="n">1</span>] <span class="o">&lt;-</span> <span class="s">&quot;peach&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs92', 356)" onmouseover="showTip(event, 'fs92', 356)" class="i">fruits</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can create arrays with comprehensions ---------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs93', 357)" onmouseover="showTip(event, 'fs93', 357)" class="i">numbers</span> <span class="o">=</span> 
    [| <span class="k">for</span> <span onmouseout="hideTip(event, 'fs76', 358)" onmouseover="showTip(event, 'fs76', 358)" class="i">i</span> <span class="k">in</span> <span class="n">0..</span><span class="n">10</span> <span class="k">do</span> 
           <span class="k">if</span> <span onmouseout="hideTip(event, 'fs76', 359)" onmouseover="showTip(event, 'fs76', 359)" class="i">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs76', 360)" onmouseover="showTip(event, 'fs76', 360)" class="i">i</span> |]

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs93', 361)" onmouseover="showTip(event, 'fs93', 361)" class="i">numbers</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can also perform operations on arrays ---------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs94', 362)" onmouseover="showTip(event, 'fs94', 362)" class="f">cube</span> <span onmouseout="hideTip(event, 'fs16', 363)" onmouseover="showTip(event, 'fs16', 363)" class="i">x</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 364)" onmouseover="showTip(event, 'fs16', 364)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs16', 365)" onmouseover="showTip(event, 'fs16', 365)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs16', 366)" onmouseover="showTip(event, 'fs16', 366)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs95', 367)" onmouseover="showTip(event, 'fs95', 367)" class="i">original</span> <span class="o">=</span> [| <span class="n">0..</span><span class="n">5</span> |]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs96', 368)" onmouseover="showTip(event, 'fs96', 368)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs97', 369)" onmouseover="showTip(event, 'fs97', 369)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs98', 370)" onmouseover="showTip(event, 'fs98', 370)" class="f">map</span> <span onmouseout="hideTip(event, 'fs94', 371)" onmouseover="showTip(event, 'fs94', 371)" class="f">cube</span> <span onmouseout="hideTip(event, 'fs95', 372)" onmouseover="showTip(event, 'fs95', 372)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs95', 373)" onmouseover="showTip(event, 'fs95', 373)" class="i">original</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs96', 374)" onmouseover="showTip(event, 'fs96', 374)" class="i">result</span> <span class="i">__</span>

<span class="c">(* See more Array methods at</span>
<span class="c">   http://msdn.microsoft.com/en-us/library/ee370273.aspx *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// .NET Collections</span>
<span class="c">//</span>
<span class="c">// Since F# is bulit for seamless interop with other CLR </span>
<span class="c">// languages, you can use all of the basic .NET collections types</span>
<span class="c">// you&#39;re already familiar with if you&#39;re a C# or VB programmer.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating .NET lists -------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs99', 375)" onmouseover="showTip(event, 'fs99', 375)" class="i">fruits</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs69', 376)" onmouseover="showTip(event, 'fs69', 376)" class="t">List</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 377)" onmouseover="showTip(event, 'fs10', 377)" class="t">string</span><span class="o">&gt;</span>()

<span onmouseout="hideTip(event, 'fs99', 378)" onmouseover="showTip(event, 'fs99', 378)" class="i">fruits</span><span class="o">.</span><span class="i">Add</span>(<span class="s">&quot;apple&quot;</span>)
<span onmouseout="hideTip(event, 'fs99', 379)" onmouseover="showTip(event, 'fs99', 379)" class="i">fruits</span><span class="o">.</span><span class="i">Add</span>(<span class="s">&quot;pear&quot;</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs99', 380)" onmouseover="showTip(event, 'fs99', 380)" class="i">fruits</span><span class="o">.</span>[<span class="n">0</span>] <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs99', 381)" onmouseover="showTip(event, 'fs99', 381)" class="i">fruits</span><span class="o">.</span>[<span class="n">1</span>] <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- creating .NET dictionaries ------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs100', 382)" onmouseover="showTip(event, 'fs100', 382)" class="i">addressBook</span> <span class="o">=</span> <span class="k">new</span> <span class="i">Dictionary</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 383)" onmouseover="showTip(event, 'fs10', 383)" class="i">string</span>, <span onmouseout="hideTip(event, 'fs10', 384)" onmouseover="showTip(event, 'fs10', 384)" class="i">string</span><span class="o">&gt;</span>()

<span onmouseout="hideTip(event, 'fs100', 385)" onmouseover="showTip(event, 'fs100', 385)" class="i">addressBook</span><span class="o">.</span>[<span class="s">&quot;Chris&quot;</span>] <span class="o">&lt;-</span> <span class="s">&quot;Ann Arbor&quot;</span>
<span onmouseout="hideTip(event, 'fs100', 386)" onmouseover="showTip(event, 'fs100', 386)" class="i">addressBook</span><span class="o">.</span>[<span class="s">&quot;SkillsMatter&quot;</span>] <span class="o">&lt;-</span> <span class="s">&quot;London&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs100', 387)" onmouseover="showTip(event, 'fs100', 387)" class="i">addressBook</span><span class="o">.</span>[<span class="s">&quot;Chris&quot;</span>] <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs100', 388)" onmouseover="showTip(event, 'fs100', 388)" class="i">addressBook</span><span class="o">.</span>[<span class="s">&quot;SkillsMatter&quot;</span>] <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- you can use combinators with .NET types  ----------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs101', 389)" onmouseover="showTip(event, 'fs101', 389)" class="i">addressBook</span> <span class="o">=</span> <span class="k">new</span> <span class="i">Dictionary</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 390)" onmouseover="showTip(event, 'fs10', 390)" class="i">string</span>, <span onmouseout="hideTip(event, 'fs10', 391)" onmouseover="showTip(event, 'fs10', 391)" class="i">string</span><span class="o">&gt;</span>()

<span onmouseout="hideTip(event, 'fs101', 392)" onmouseover="showTip(event, 'fs101', 392)" class="i">addressBook</span><span class="o">.</span>[<span class="s">&quot;Chris&quot;</span>] <span class="o">&lt;-</span> <span class="s">&quot;Ann Arbor&quot;</span>
<span onmouseout="hideTip(event, 'fs101', 393)" onmouseover="showTip(event, 'fs101', 393)" class="i">addressBook</span><span class="o">.</span>[<span class="s">&quot;SkillsMatter&quot;</span>] <span class="o">&lt;-</span> <span class="s">&quot;London&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs102', 394)" onmouseover="showTip(event, 'fs102', 394)" class="i">verboseBook</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs101', 395)" onmouseover="showTip(event, 'fs101', 395)" class="i">addressBook</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs103', 396)" onmouseover="showTip(event, 'fs103', 396)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs104', 397)" onmouseover="showTip(event, 'fs104', 397)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs105', 398)" onmouseover="showTip(event, 'fs105', 398)" class="i">kvp</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs61', 399)" onmouseover="showTip(event, 'fs61', 399)" class="f">sprintf</span> <span class="s">&quot;Name: </span><span class="pf">%s</span><span class="s"> - City: </span><span class="pf">%s</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs105', 400)" onmouseover="showTip(event, 'fs105', 400)" class="i">kvp</span><span class="o">.</span><span class="i">Key</span> <span onmouseout="hideTip(event, 'fs105', 401)" onmouseover="showTip(event, 'fs105', 401)" class="i">kvp</span><span class="o">.</span><span class="i">Value</span>)
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs103', 402)" onmouseover="showTip(event, 'fs103', 402)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs106', 403)" onmouseover="showTip(event, 'fs106', 403)" class="f">toArray</span>

<span class="c">//NOTE: The seq type in F# is an alias for .NET&#39;s IEnumerable interface</span>
<span class="c">//      Like the List and Array module, the Seq module contains functions </span>
<span class="c">//      that you can combine to perform operations on types implementing </span>
<span class="c">//      seq/IEnumerable. The methods found in these modules are known as</span>
<span class="c">//      combinators</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs102', 404)" onmouseover="showTip(event, 'fs102', 404)" class="i">verboseBook</span><span class="o">.</span>[<span class="n">0</span>] <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs102', 405)" onmouseover="showTip(event, 'fs102', 405)" class="i">verboseBook</span><span class="o">.</span>[<span class="n">1</span>] <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- skipping elements ---------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 406)" onmouseover="showTip(event, 'fs78', 406)" class="i">original</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">5</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs107', 407)" onmouseover="showTip(event, 'fs107', 407)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs103', 408)" onmouseover="showTip(event, 'fs103', 408)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs108', 409)" onmouseover="showTip(event, 'fs108', 409)" class="f">skip</span> <span class="n">2</span> <span onmouseout="hideTip(event, 'fs78', 410)" onmouseover="showTip(event, 'fs78', 410)" class="i">original</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs107', 411)" onmouseover="showTip(event, 'fs107', 411)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- finding the max -----------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs109', 412)" onmouseover="showTip(event, 'fs109', 412)" class="i">values</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs69', 413)" onmouseover="showTip(event, 'fs69', 413)" class="t">List</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs7', 414)" onmouseover="showTip(event, 'fs7', 414)" class="t">int</span><span class="o">&gt;</span>()

<span onmouseout="hideTip(event, 'fs109', 415)" onmouseover="showTip(event, 'fs109', 415)" class="i">values</span><span class="o">.</span><span class="i">Add</span>(<span class="n">11</span>)
<span onmouseout="hideTip(event, 'fs109', 416)" onmouseover="showTip(event, 'fs109', 416)" class="i">values</span><span class="o">.</span><span class="i">Add</span>(<span class="n">20</span>)
<span onmouseout="hideTip(event, 'fs109', 417)" onmouseover="showTip(event, 'fs109', 417)" class="i">values</span><span class="o">.</span><span class="i">Add</span>(<span class="n">4</span>)
<span onmouseout="hideTip(event, 'fs109', 418)" onmouseover="showTip(event, 'fs109', 418)" class="i">values</span><span class="o">.</span><span class="i">Add</span>(<span class="n">2</span>)
<span onmouseout="hideTip(event, 'fs109', 419)" onmouseover="showTip(event, 'fs109', 419)" class="i">values</span><span class="o">.</span><span class="i">Add</span>(<span class="n">3</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 420)" onmouseover="showTip(event, 'fs22', 420)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs103', 421)" onmouseover="showTip(event, 'fs103', 421)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs110', 422)" onmouseover="showTip(event, 'fs110', 422)" class="f">max</span> <span onmouseout="hideTip(event, 'fs109', 423)" onmouseover="showTip(event, 'fs109', 423)" class="i">values</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs22', 424)" onmouseover="showTip(event, 'fs22', 424)" class="i">result</span> <span class="i">__</span>
    
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- finding the max using a condition -----------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs111', 425)" onmouseover="showTip(event, 'fs111', 425)" class="f">getNameLength</span> (<span onmouseout="hideTip(event, 'fs59', 426)" onmouseover="showTip(event, 'fs59', 426)" class="i">name</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 427)" onmouseover="showTip(event, 'fs10', 427)" class="t">string</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs59', 428)" onmouseover="showTip(event, 'fs59', 428)" class="i">name</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs112', 429)" onmouseover="showTip(event, 'fs112', 429)" class="i">Length</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs113', 430)" onmouseover="showTip(event, 'fs113', 430)" class="i">names</span> <span class="o">=</span> [| <span class="s">&quot;Harry&quot;</span>; <span class="s">&quot;Lloyd&quot;</span>; <span class="s">&quot;Nicholas&quot;</span>; <span class="s">&quot;Mary&quot;</span>; <span class="s">&quot;Joe&quot;</span>; |]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 431)" onmouseover="showTip(event, 'fs39', 431)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs103', 432)" onmouseover="showTip(event, 'fs103', 432)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs114', 433)" onmouseover="showTip(event, 'fs114', 433)" class="f">maxBy</span> <span onmouseout="hideTip(event, 'fs111', 434)" onmouseover="showTip(event, 'fs111', 434)" class="f">getNameLength</span> <span onmouseout="hideTip(event, 'fs113', 435)" onmouseover="showTip(event, 'fs113', 435)" class="i">names</span> 

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 436)" onmouseover="showTip(event, 'fs39', 436)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Looping</span>
<span class="c">//</span>
<span class="c">// While it&#39;s more common in F# to use the Seq, List, or Array</span>
<span class="c">// modules to perform looping operations, you can still fall </span>
<span class="c">// back on traditional imperative looping techniques that you may </span>
<span class="c">// be more familiar with.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- looping over a list -------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs115', 437)" onmouseover="showTip(event, 'fs115', 437)" class="i">values</span> <span class="o">=</span> [<span class="n">0..</span><span class="n">10</span>]

<span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs116', 438)" onmouseover="showTip(event, 'fs116', 438)" class="v">sum</span> <span class="o">=</span> <span class="n">0</span>
<span class="k">for</span> <span onmouseout="hideTip(event, 'fs117', 439)" onmouseover="showTip(event, 'fs117', 439)" class="i">value</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs115', 440)" onmouseover="showTip(event, 'fs115', 440)" class="i">values</span> <span class="k">do</span>
    <span onmouseout="hideTip(event, 'fs116', 441)" onmouseover="showTip(event, 'fs116', 441)" class="v">sum</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs116', 442)" onmouseover="showTip(event, 'fs116', 442)" class="v">sum</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs117', 443)" onmouseover="showTip(event, 'fs117', 443)" class="i">value</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs116', 444)" onmouseover="showTip(event, 'fs116', 444)" class="i">sum</span> <span class="i">__</span>
       
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- looping with expressions --------------------------------</span>

<span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs116', 445)" onmouseover="showTip(event, 'fs116', 445)" class="v">sum</span> <span class="o">=</span> <span class="n">0</span>

<span class="k">for</span> <span onmouseout="hideTip(event, 'fs76', 446)" onmouseover="showTip(event, 'fs76', 446)" class="i">i</span> <span class="o">=</span> <span class="n">1</span> <span class="k">to</span> <span class="n">5</span> <span class="k">do</span>
    <span onmouseout="hideTip(event, 'fs116', 447)" onmouseover="showTip(event, 'fs116', 447)" class="v">sum</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs116', 448)" onmouseover="showTip(event, 'fs116', 448)" class="v">sum</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs76', 449)" onmouseover="showTip(event, 'fs76', 449)" class="i">i</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs116', 450)" onmouseover="showTip(event, 'fs116', 450)" class="i">sum</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- looping with while --------------------------------------</span>

<span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs116', 451)" onmouseover="showTip(event, 'fs116', 451)" class="v">sum</span> <span class="o">=</span> <span class="n">1</span>

<span class="k">while</span> <span onmouseout="hideTip(event, 'fs116', 452)" onmouseover="showTip(event, 'fs116', 452)" class="v">sum</span> <span class="o">&lt;</span> <span class="n">10</span> <span class="k">do</span>
    <span onmouseout="hideTip(event, 'fs116', 453)" onmouseover="showTip(event, 'fs116', 453)" class="v">sum</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs116', 454)" onmouseover="showTip(event, 'fs116', 454)" class="v">sum</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs116', 455)" onmouseover="showTip(event, 'fs116', 455)" class="v">sum</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs116', 456)" onmouseover="showTip(event, 'fs116', 456)" class="i">sum</span> <span class="i">__</span>

<span class="c">(* NOTE: While these looping constructs can come in handy from time to time,</span>
<span class="c">         it&#39;s often better to use a more functional approach for looping</span>
<span class="c">         such as the functions you learned about in the List module. *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// More About Funtions</span>
<span class="c">//</span>
<span class="c">// You&#39;ve already learned a little about funcitons in F#, but</span>
<span class="c">// since F# is a functional language, there are more tricks</span>
<span class="c">// to learn!</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- defining lambdas ----------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs118', 457)" onmouseover="showTip(event, 'fs118', 457)" class="i">colors</span> <span class="o">=</span> [<span class="s">&quot;maize&quot;</span>; <span class="s">&quot;blue&quot;</span>]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs119', 458)" onmouseover="showTip(event, 'fs119', 458)" class="i">echo</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs118', 459)" onmouseover="showTip(event, 'fs118', 459)" class="i">colors</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs69', 460)" onmouseover="showTip(event, 'fs69', 460)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs80', 461)" onmouseover="showTip(event, 'fs80', 461)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs54', 462)" onmouseover="showTip(event, 'fs54', 462)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs54', 463)" onmouseover="showTip(event, 'fs54', 463)" class="i">x</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs54', 464)" onmouseover="showTip(event, 'fs54', 464)" class="i">x</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs119', 465)" onmouseover="showTip(event, 'fs119', 465)" class="i">echo</span> <span class="i">__</span>

<span class="c">(* The fun keyword allows you to create a function inline without giving</span>
<span class="c">   it a name. These functions are known as anonymous functions, lambdas,</span>
<span class="c">   or lambda functions. *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- functions that return functions  ------------------------</span>

<span class="c">(* A neat functional programming trick is to create functions that </span>
<span class="c">   return other functions. This leads to some interesting behaviors. *)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 466)" onmouseover="showTip(event, 'fs15', 466)" class="f">add</span> <span onmouseout="hideTip(event, 'fs16', 467)" onmouseover="showTip(event, 'fs16', 467)" class="i">x</span> <span class="o">=</span>
    (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs17', 468)" onmouseover="showTip(event, 'fs17', 468)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs16', 469)" onmouseover="showTip(event, 'fs16', 469)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs17', 470)" onmouseover="showTip(event, 'fs17', 470)" class="i">y</span>)

<span class="c">(* F#&#39;s lightweight syntax allows you to call both functions as if there</span>
<span class="c">   was only one *)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs120', 471)" onmouseover="showTip(event, 'fs120', 471)" class="i">simpleResult</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 472)" onmouseover="showTip(event, 'fs15', 472)" class="f">add</span> <span class="n">2</span> <span class="n">4</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs120', 473)" onmouseover="showTip(event, 'fs120', 473)" class="i">simpleResult</span> <span class="i">__</span>

<span class="c">(* ...but you can also pass only one argument at a time to create</span>
<span class="c">   residual functions. This technique is known as partial appliction. *)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs121', 474)" onmouseover="showTip(event, 'fs121', 474)" class="f">addTen</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 475)" onmouseover="showTip(event, 'fs15', 475)" class="f">add</span> <span class="n">10</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs122', 476)" onmouseover="showTip(event, 'fs122', 476)" class="i">fancyResult</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs121', 477)" onmouseover="showTip(event, 'fs121', 477)" class="f">addTen</span> <span class="n">14</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs122', 478)" onmouseover="showTip(event, 'fs122', 478)" class="i">fancyResult</span> <span class="i">__</span>

<span class="c">//NOTE: Functions written in this style are said to be curried.</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- automatic currying --------------------------------------</span>

<span class="c">(* The above technique is common enough that F# actually supports this</span>
<span class="c">   by default. In other words, functions are automatically curried. *)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 479)" onmouseover="showTip(event, 'fs15', 479)" class="f">add</span> <span onmouseout="hideTip(event, 'fs16', 480)" onmouseover="showTip(event, 'fs16', 480)" class="i">x</span> <span onmouseout="hideTip(event, 'fs17', 481)" onmouseover="showTip(event, 'fs17', 481)" class="i">y</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs16', 482)" onmouseover="showTip(event, 'fs16', 482)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs17', 483)" onmouseover="showTip(event, 'fs17', 483)" class="i">y</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs123', 484)" onmouseover="showTip(event, 'fs123', 484)" class="f">addSeven</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 485)" onmouseover="showTip(event, 'fs15', 485)" class="f">add</span> <span class="n">7</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs124', 486)" onmouseover="showTip(event, 'fs124', 486)" class="i">unluckyNumber</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs123', 487)" onmouseover="showTip(event, 'fs123', 487)" class="f">addSeven</span> <span class="n">6</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs125', 488)" onmouseover="showTip(event, 'fs125', 488)" class="i">luckyNumber</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs123', 489)" onmouseover="showTip(event, 'fs123', 489)" class="f">addSeven</span> <span class="n">0</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs124', 490)" onmouseover="showTip(event, 'fs124', 490)" class="i">unluckyNumber</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs125', 491)" onmouseover="showTip(event, 'fs125', 491)" class="i">luckyNumber</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- non curried functions -----------------------------------</span>

<span class="c">(* You should stick to the auto-curried function syntax most of the </span>
<span class="c">   time. However, you can also write functions in an uncurried form to</span>
<span class="c">   make them easier to use from languages like C# where currying is not </span>
<span class="c">   as commonly used. *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs126', 492)" onmouseover="showTip(event, 'fs126', 492)" class="f">add</span>(<span onmouseout="hideTip(event, 'fs16', 493)" onmouseover="showTip(event, 'fs16', 493)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs17', 494)" onmouseover="showTip(event, 'fs17', 494)" class="i">y</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs16', 495)" onmouseover="showTip(event, 'fs16', 495)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs17', 496)" onmouseover="showTip(event, 'fs17', 496)" class="i">y</span>

<span class="c">(* NOTE: &quot;add 5&quot; will not compile now. You have to pass both arguments </span>
<span class="c">         at once *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 497)" onmouseover="showTip(event, 'fs22', 497)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs126', 498)" onmouseover="showTip(event, 'fs126', 498)" class="f">add</span>(<span class="n">5</span>, <span class="n">40</span>)

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs22', 499)" onmouseover="showTip(event, 'fs22', 499)" class="i">result</span> <span class="i">__</span>

<span class="c">(* THINK ABOUT IT: You learned earlier that functions with multiple </span>
<span class="c">                   return values are really just functions that return</span>
<span class="c">                   tuples. Do functions defined in the uncurried form</span>
<span class="c">                   really accept more than one argument at a time? *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Apply Your Knowledge!</span>
<span class="c">//</span>
<span class="c">// Below is a list containing comma separated data about </span>
<span class="c">// Microsoft&#39;s stock prices during March of 2012. Without</span>
<span class="c">// modifying the list, programatically find the day with the</span>
<span class="c">// greatest variance between the opening and closing price.</span>
<span class="c">//</span>
<span class="c">// The following functions may be of use:</span>
<span class="c">// </span>
<span class="c">// abs - takes the absolute value of an arguement</span>
<span class="c">// </span>
<span class="c">// System.Double.Parse - converts a string argument into a </span>
<span class="c">//                       numerical value.</span>
<span class="c">//</span>
<span class="c">// The following function will convert a comma separated string</span>
<span class="c">// into an array of the column values.</span>
<span class="c">//                       </span>
<span class="c">// let splitCommas (x:string) =</span>
<span class="c">//     x.Split([|&#39;,&#39;|])</span>
<span class="c">//---------------------------------------------------------------</span>
    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs127', 500)" onmouseover="showTip(event, 'fs127', 500)" class="i">stockData</span> <span class="o">=</span>
    [ <span class="s">&quot;Date,Open,High,Low,Close,Volume,Adj Close&quot;</span>;
      <span class="s">&quot;2012-03-30,32.40,32.41,32.04,32.26,31749400,32.26&quot;</span>;
      <span class="s">&quot;2012-03-29,32.06,32.19,31.81,32.12,37038500,32.12&quot;</span>;
      <span class="s">&quot;2012-03-28,32.52,32.70,32.04,32.19,41344800,32.19&quot;</span>;
      <span class="s">&quot;2012-03-27,32.65,32.70,32.40,32.52,36274900,32.52&quot;</span>;
      <span class="s">&quot;2012-03-26,32.19,32.61,32.15,32.59,36758300,32.59&quot;</span>;
      <span class="s">&quot;2012-03-23,32.10,32.11,31.72,32.01,35912200,32.01&quot;</span>;
      <span class="s">&quot;2012-03-22,31.81,32.09,31.79,32.00,31749500,32.00&quot;</span>;
      <span class="s">&quot;2012-03-21,31.96,32.15,31.82,31.91,37928600,31.91&quot;</span>;
      <span class="s">&quot;2012-03-20,32.10,32.15,31.74,31.99,41566800,31.99&quot;</span>;
      <span class="s">&quot;2012-03-19,32.54,32.61,32.15,32.20,44789200,32.20&quot;</span>;
      <span class="s">&quot;2012-03-16,32.91,32.95,32.50,32.60,65626400,32.60&quot;</span>;
      <span class="s">&quot;2012-03-15,32.79,32.94,32.58,32.85,49068300,32.85&quot;</span>;
      <span class="s">&quot;2012-03-14,32.53,32.88,32.49,32.77,41986900,32.77&quot;</span>;
      <span class="s">&quot;2012-03-13,32.24,32.69,32.15,32.67,48951700,32.67&quot;</span>;
      <span class="s">&quot;2012-03-12,31.97,32.20,31.82,32.04,34073600,32.04&quot;</span>;
      <span class="s">&quot;2012-03-09,32.10,32.16,31.92,31.99,34628400,31.99&quot;</span>;
      <span class="s">&quot;2012-03-08,32.04,32.21,31.90,32.01,36747400,32.01&quot;</span>;
      <span class="s">&quot;2012-03-07,31.67,31.92,31.53,31.84,34340400,31.84&quot;</span>;
      <span class="s">&quot;2012-03-06,31.54,31.98,31.49,31.56,51932900,31.56&quot;</span>;
      <span class="s">&quot;2012-03-05,32.01,32.05,31.62,31.80,45240000,31.80&quot;</span>;
      <span class="s">&quot;2012-03-02,32.31,32.44,32.00,32.08,47314200,32.08&quot;</span>;
      <span class="s">&quot;2012-03-01,31.93,32.39,31.85,32.29,77344100,32.29&quot;</span>;
      <span class="s">&quot;2012-02-29,31.89,32.00,31.61,31.74,59323600,31.74&quot;</span>; ]

<span class="c">//start your program here</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs128', 501)" onmouseover="showTip(event, 'fs128', 501)" class="i">result</span> <span class="o">=</span>  <span class="i">__</span> <span class="c">//and put your result here to check your work</span>

<span class="i">AssertEquality</span> <span class="s">&quot;2012-3-13&quot;</span> <span onmouseout="hideTip(event, 'fs128', 502)" onmouseover="showTip(event, 'fs128', 502)" class="i">result</span>


<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// Record Types</span>
<span class="c">// </span>
<span class="c">// In F#, Record Types are lightweight objects that are used to</span>
<span class="c">// bundle bits of data together as properties on an object and </span>
<span class="c">// give those properties meaningful names.</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- records have properties ----------------------------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs129', 503)" onmouseover="showTip(event, 'fs129', 503)" class="t">Character</span> <span class="o">=</span> {
    <span onmouseout="hideTip(event, 'fs130', 504)" onmouseover="showTip(event, 'fs130', 504)" class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 505)" onmouseover="showTip(event, 'fs10', 505)" class="t">string</span>
    <span onmouseout="hideTip(event, 'fs131', 506)" onmouseover="showTip(event, 'fs131', 506)" class="i">Occupation</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 507)" onmouseover="showTip(event, 'fs10', 507)" class="t">string</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs132', 508)" onmouseover="showTip(event, 'fs132', 508)" class="i">mario</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Mario&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs132', 509)" onmouseover="showTip(event, 'fs132', 509)" class="i">mario</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs130', 510)" onmouseover="showTip(event, 'fs130', 510)" class="i">Name</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs132', 511)" onmouseover="showTip(event, 'fs132', 511)" class="i">mario</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs131', 512)" onmouseover="showTip(event, 'fs131', 512)" class="i">Occupation</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- creating from an existing record -------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs132', 513)" onmouseover="showTip(event, 'fs132', 513)" class="i">mario</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Mario&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs133', 514)" onmouseover="showTip(event, 'fs133', 514)" class="i">luigi</span> <span class="o">=</span> { <span onmouseout="hideTip(event, 'fs132', 515)" onmouseover="showTip(event, 'fs132', 515)" class="i">mario</span> <span class="k">with</span> <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Luigi&quot;</span>; }

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs132', 516)" onmouseover="showTip(event, 'fs132', 516)" class="i">mario</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs130', 517)" onmouseover="showTip(event, 'fs130', 517)" class="i">Name</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs132', 518)" onmouseover="showTip(event, 'fs132', 518)" class="i">mario</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs131', 519)" onmouseover="showTip(event, 'fs131', 519)" class="i">Occupation</span> <span class="i">__</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs133', 520)" onmouseover="showTip(event, 'fs133', 520)" class="i">luigi</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs130', 521)" onmouseover="showTip(event, 'fs130', 521)" class="i">Name</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs133', 522)" onmouseover="showTip(event, 'fs133', 522)" class="i">luigi</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs131', 523)" onmouseover="showTip(event, 'fs131', 523)" class="i">Occupation</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- comparing records ----------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs134', 524)" onmouseover="showTip(event, 'fs134', 524)" class="i">greenKoopa</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Koopa&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Soldier&quot;</span>; }
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs135', 525)" onmouseover="showTip(event, 'fs135', 525)" class="i">bowser</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Bowser&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Kidnapper&quot;</span>; }
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs136', 526)" onmouseover="showTip(event, 'fs136', 526)" class="i">redKoopa</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Koopa&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Soldier&quot;</span>; }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs137', 527)" onmouseover="showTip(event, 'fs137', 527)" class="i">koopaComparison</span> <span class="o">=</span>
     <span class="k">if</span> <span onmouseout="hideTip(event, 'fs134', 528)" onmouseover="showTip(event, 'fs134', 528)" class="i">greenKoopa</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs136', 529)" onmouseover="showTip(event, 'fs136', 529)" class="i">redKoopa</span> <span class="k">then</span>
         <span class="s">&quot;all the koopas are pretty much the same&quot;</span>
     <span class="k">else</span>
         <span class="s">&quot;maybe one can fly&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs138', 530)" onmouseover="showTip(event, 'fs138', 530)" class="i">bowserComparison</span> <span class="o">=</span> 
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs135', 531)" onmouseover="showTip(event, 'fs135', 531)" class="i">bowser</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs134', 532)" onmouseover="showTip(event, 'fs134', 532)" class="i">greenKoopa</span> <span class="k">then</span>
        <span class="s">&quot;the king is a pawn&quot;</span>
    <span class="k">else</span>
        <span class="s">&quot;he is still kind of a koopa&quot;</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs137', 533)" onmouseover="showTip(event, 'fs137', 533)" class="i">koopaComparison</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs138', 534)" onmouseover="showTip(event, 'fs138', 534)" class="i">bowserComparison</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- you can pattern match against records --------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs132', 535)" onmouseover="showTip(event, 'fs132', 535)" class="i">mario</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Mario&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs133', 536)" onmouseover="showTip(event, 'fs133', 536)" class="i">luigi</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Luigi&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; }
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs135', 537)" onmouseover="showTip(event, 'fs135', 537)" class="i">bowser</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Bowser&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Kidnapper&quot;</span>; }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs139', 538)" onmouseover="showTip(event, 'fs139', 538)" class="f">determineSide</span> <span onmouseout="hideTip(event, 'fs140', 539)" onmouseover="showTip(event, 'fs140', 539)" class="i">character</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs140', 540)" onmouseover="showTip(event, 'fs140', 540)" class="i">character</span> <span class="k">with</span>
    | { <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span> } <span class="k">-&gt;</span> <span class="s">&quot;good guy&quot;</span>
    | _ <span class="k">-&gt;</span> <span class="s">&quot;bad guy&quot;</span>

<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs139', 541)" onmouseover="showTip(event, 'fs139', 541)" class="i">determineSide</span> <span onmouseout="hideTip(event, 'fs132', 542)" onmouseover="showTip(event, 'fs132', 542)" class="i">mario</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs139', 543)" onmouseover="showTip(event, 'fs139', 543)" class="i">determineSide</span> <span onmouseout="hideTip(event, 'fs133', 544)" onmouseover="showTip(event, 'fs133', 544)" class="i">luigi</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs139', 545)" onmouseover="showTip(event, 'fs139', 545)" class="i">determineSide</span> <span onmouseout="hideTip(event, 'fs135', 546)" onmouseover="showTip(event, 'fs135', 546)" class="i">bowser</span>) <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// Option Types</span>
<span class="c">//</span>
<span class="c">// Option Types are used to represent calculations that may or</span>
<span class="c">// may not return a value. You may be used to using null for this</span>
<span class="c">// in other languages. However, using option types instead of nulls</span>
<span class="c">// has subtle but far reaching benefits.</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- option types might contain a value... --------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs141', 547)" onmouseover="showTip(event, 'fs141', 547)" class="i">someValue</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs142', 548)" onmouseover="showTip(event, 'fs142', 548)" class="p">Some</span> <span class="n">10</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs141', 549)" onmouseover="showTip(event, 'fs141', 549)" class="i">someValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs143', 550)" onmouseover="showTip(event, 'fs143', 550)" class="i">IsSome</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs141', 551)" onmouseover="showTip(event, 'fs141', 551)" class="i">someValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs144', 552)" onmouseover="showTip(event, 'fs144', 552)" class="i">IsNone</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs141', 553)" onmouseover="showTip(event, 'fs141', 553)" class="i">someValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs145', 554)" onmouseover="showTip(event, 'fs145', 554)" class="i">Value</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- ...but they might not ------------------------------------</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs146', 555)" onmouseover="showTip(event, 'fs146', 555)" class="i">noValue</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs147', 556)" onmouseover="showTip(event, 'fs147', 556)" class="p">None</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs146', 557)" onmouseover="showTip(event, 'fs146', 557)" class="i">noValue</span><span class="o">.</span><span class="i">IsSome</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs146', 558)" onmouseover="showTip(event, 'fs146', 558)" class="i">noValue</span><span class="o">.</span><span class="i">IsNone</span> <span class="i">__</span>
<span class="i">AssertThrows</span><span class="o">&lt;</span><span class="i">FILL_IN_THE_EXCEPTION</span><span class="o">&gt;</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs146', 559)" onmouseover="showTip(event, 'fs146', 559)" class="i">noValue</span><span class="o">.</span><span class="i">Value</span>)

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- using option types with pattern matching -----------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs148', 560)" onmouseover="showTip(event, 'fs148', 560)" class="t">Game</span> <span class="o">=</span> {
    <span onmouseout="hideTip(event, 'fs149', 561)" onmouseover="showTip(event, 'fs149', 561)" class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 562)" onmouseover="showTip(event, 'fs10', 562)" class="t">string</span>
    <span onmouseout="hideTip(event, 'fs150', 563)" onmouseover="showTip(event, 'fs150', 563)" class="i">Platform</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 564)" onmouseover="showTip(event, 'fs10', 564)" class="t">string</span>
    <span onmouseout="hideTip(event, 'fs151', 565)" onmouseover="showTip(event, 'fs151', 565)" class="i">Score</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs7', 566)" onmouseover="showTip(event, 'fs7', 566)" class="t">int</span> <span onmouseout="hideTip(event, 'fs152', 567)" onmouseover="showTip(event, 'fs152', 567)" class="t">option</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs153', 568)" onmouseover="showTip(event, 'fs153', 568)" class="i">chronoTrigger</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Chrono Trigger&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;SNES&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs142', 569)" onmouseover="showTip(event, 'fs142', 569)" class="p">Some</span> <span class="n">5</span> }
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs154', 570)" onmouseover="showTip(event, 'fs154', 570)" class="i">halo</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Halo&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;Xbox&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs147', 571)" onmouseover="showTip(event, 'fs147', 571)" class="p">None</span> }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs155', 572)" onmouseover="showTip(event, 'fs155', 572)" class="f">translate</span> <span onmouseout="hideTip(event, 'fs156', 573)" onmouseover="showTip(event, 'fs156', 573)" class="i">score</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs156', 574)" onmouseover="showTip(event, 'fs156', 574)" class="i">score</span> <span class="k">with</span>
    | <span class="n">5</span> <span class="k">-&gt;</span> <span class="s">&quot;Great&quot;</span>
    | <span class="n">4</span> <span class="k">-&gt;</span> <span class="s">&quot;Good&quot;</span>
    | <span class="n">3</span> <span class="k">-&gt;</span> <span class="s">&quot;Decent&quot;</span>
    | <span class="n">2</span> <span class="k">-&gt;</span> <span class="s">&quot;Bad&quot;</span>
    | <span class="n">1</span> <span class="k">-&gt;</span> <span class="s">&quot;Awful&quot;</span>
    | _ <span class="k">-&gt;</span> <span class="s">&quot;Unknown&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs157', 575)" onmouseover="showTip(event, 'fs157', 575)" class="f">getScore</span> <span onmouseout="hideTip(event, 'fs158', 576)" onmouseover="showTip(event, 'fs158', 576)" class="i">game</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs158', 577)" onmouseover="showTip(event, 'fs158', 577)" class="i">game</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs151', 578)" onmouseover="showTip(event, 'fs151', 578)" class="i">Score</span> <span class="k">with</span>
    | <span onmouseout="hideTip(event, 'fs142', 579)" onmouseover="showTip(event, 'fs142', 579)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs156', 580)" onmouseover="showTip(event, 'fs156', 580)" class="i">score</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs155', 581)" onmouseover="showTip(event, 'fs155', 581)" class="f">translate</span> <span onmouseout="hideTip(event, 'fs156', 582)" onmouseover="showTip(event, 'fs156', 582)" class="i">score</span>
    | <span onmouseout="hideTip(event, 'fs147', 583)" onmouseover="showTip(event, 'fs147', 583)" class="p">None</span> <span class="k">-&gt;</span> <span class="s">&quot;Unknown&quot;</span>

<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs157', 584)" onmouseover="showTip(event, 'fs157', 584)" class="i">getScore</span> <span onmouseout="hideTip(event, 'fs153', 585)" onmouseover="showTip(event, 'fs153', 585)" class="i">chronoTrigger</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs157', 586)" onmouseover="showTip(event, 'fs157', 586)" class="i">getScore</span> <span onmouseout="hideTip(event, 'fs154', 587)" onmouseover="showTip(event, 'fs154', 587)" class="i">halo</span>) <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- projecting values from option types ----------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs153', 588)" onmouseover="showTip(event, 'fs153', 588)" class="i">chronoTrigger</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Chrono Trigger&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;SNES&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs142', 589)" onmouseover="showTip(event, 'fs142', 589)" class="p">Some</span> <span class="n">5</span> }
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs159', 590)" onmouseover="showTip(event, 'fs159', 590)" class="i">gta</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Halo&quot;</span>; <span class="i">Platform</span> <span class="o">=</span> <span class="s">&quot;Xbox&quot;</span>; <span class="i">Score</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs147', 591)" onmouseover="showTip(event, 'fs147', 591)" class="p">None</span> }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs160', 592)" onmouseover="showTip(event, 'fs160', 592)" class="f">decideOn</span> <span onmouseout="hideTip(event, 'fs158', 593)" onmouseover="showTip(event, 'fs158', 593)" class="i">game</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs158', 594)" onmouseover="showTip(event, 'fs158', 594)" class="i">game</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs151', 595)" onmouseover="showTip(event, 'fs151', 595)" class="i">Score</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs161', 596)" onmouseover="showTip(event, 'fs161', 596)" class="t">Option</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs162', 597)" onmouseover="showTip(event, 'fs162', 597)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs156', 598)" onmouseover="showTip(event, 'fs156', 598)" class="i">score</span> <span class="k">-&gt;</span> <span class="k">if</span> <span onmouseout="hideTip(event, 'fs156', 599)" onmouseover="showTip(event, 'fs156', 599)" class="i">score</span> <span class="o">&gt;</span> <span class="n">3</span> <span class="k">then</span> <span class="s">&quot;play it&quot;</span> <span class="k">else</span> <span class="s">&quot;don&#39;t play&quot;</span>)

<span class="c">//HINT: look at the return type of the decide on function</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs160', 600)" onmouseover="showTip(event, 'fs160', 600)" class="i">decideOn</span> <span onmouseout="hideTip(event, 'fs153', 601)" onmouseover="showTip(event, 'fs153', 601)" class="i">chronoTrigger</span>) <span class="i">__</span>
<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs160', 602)" onmouseover="showTip(event, 'fs160', 602)" class="i">decideOn</span> <span onmouseout="hideTip(event, 'fs159', 603)" onmouseover="showTip(event, 'fs159', 603)" class="i">gta</span>) <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---------------------------------------------------------------</span>
<span class="c">// Discriminated Unions</span>
<span class="c">//</span>
<span class="c">// Discriminated Unions are used to represent data types that have</span>
<span class="c">// a discrete set of possible states.</span>
<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- descriminated unions capture a set of options ------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs163', 604)" onmouseover="showTip(event, 'fs163', 604)" class="t">Condiment</span> <span class="o">=</span>
    | <span onmouseout="hideTip(event, 'fs164', 605)" onmouseover="showTip(event, 'fs164', 605)" class="p">Mustard</span>
    | <span onmouseout="hideTip(event, 'fs165', 606)" onmouseover="showTip(event, 'fs165', 606)" class="p">Ketchup</span>
    | <span onmouseout="hideTip(event, 'fs166', 607)" onmouseover="showTip(event, 'fs166', 607)" class="p">Relish</span>
    | <span onmouseout="hideTip(event, 'fs167', 608)" onmouseover="showTip(event, 'fs167', 608)" class="p">Vinegar</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs168', 609)" onmouseover="showTip(event, 'fs168', 609)" class="f">toColor</span> <span onmouseout="hideTip(event, 'fs169', 610)" onmouseover="showTip(event, 'fs169', 610)" class="i">condiment</span> <span class="o">=</span> 
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs169', 611)" onmouseover="showTip(event, 'fs169', 611)" class="i">condiment</span> <span class="k">with</span>
    | <span onmouseout="hideTip(event, 'fs164', 612)" onmouseover="showTip(event, 'fs164', 612)" class="p">Mustard</span> <span class="k">-&gt;</span> <span class="s">&quot;yellow&quot;</span>
    | <span onmouseout="hideTip(event, 'fs165', 613)" onmouseover="showTip(event, 'fs165', 613)" class="p">Ketchup</span> <span class="k">-&gt;</span> <span class="s">&quot;red&quot;</span>
    | <span onmouseout="hideTip(event, 'fs166', 614)" onmouseover="showTip(event, 'fs166', 614)" class="p">Relish</span> <span class="k">-&gt;</span> <span class="s">&quot;green&quot;</span>
    | <span onmouseout="hideTip(event, 'fs167', 615)" onmouseover="showTip(event, 'fs167', 615)" class="p">Vinegar</span> <span class="k">-&gt;</span> <span class="s">&quot;brownish?&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs170', 616)" onmouseover="showTip(event, 'fs170', 616)" class="i">choice</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs164', 617)" onmouseover="showTip(event, 'fs164', 617)" class="p">Mustard</span>

<span class="i">AssertEquality</span> (<span onmouseout="hideTip(event, 'fs168', 618)" onmouseover="showTip(event, 'fs168', 618)" class="i">toColor</span> <span onmouseout="hideTip(event, 'fs170', 619)" onmouseover="showTip(event, 'fs170', 619)" class="i">choice</span>) <span class="i">__</span>

<span class="c">(* TRY IT: What happens if you remove a case from the above pattern </span>
<span class="c">           match? *)</span>

<span class="c">// ---------------------------------------------------------------</span>

<span class="c">// ---- descriminated union cases can have types -----------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs171', 620)" onmouseover="showTip(event, 'fs171', 620)" class="t">Favorite</span> <span class="o">=</span>
    | <span onmouseout="hideTip(event, 'fs172', 621)" onmouseover="showTip(event, 'fs172', 621)" class="p">Bourbon</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs10', 622)" onmouseover="showTip(event, 'fs10', 622)" class="t">string</span>
    | <span onmouseout="hideTip(event, 'fs173', 623)" onmouseover="showTip(event, 'fs173', 623)" class="p">Number</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs7', 624)" onmouseover="showTip(event, 'fs7', 624)" class="t">int</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs174', 625)" onmouseover="showTip(event, 'fs174', 625)" class="f">saySomethingAboutYourFavorite</span> <span onmouseout="hideTip(event, 'fs175', 626)" onmouseover="showTip(event, 'fs175', 626)" class="i">favorite</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs175', 627)" onmouseover="showTip(event, 'fs175', 627)" class="i">favorite</span> <span class="k">with</span>
    | <span onmouseout="hideTip(event, 'fs173', 628)" onmouseover="showTip(event, 'fs173', 628)" class="p">Number</span> <span class="n">7</span> <span class="k">-&gt;</span> <span class="s">&quot;me too!&quot;</span>
    | <span onmouseout="hideTip(event, 'fs172', 629)" onmouseover="showTip(event, 'fs172', 629)" class="p">Bourbon</span> <span class="s">&quot;Bookers&quot;</span> <span class="k">-&gt;</span> <span class="s">&quot;me too!&quot;</span>
    | <span onmouseout="hideTip(event, 'fs172', 630)" onmouseover="showTip(event, 'fs172', 630)" class="p">Bourbon</span> <span onmouseout="hideTip(event, 'fs176', 631)" onmouseover="showTip(event, 'fs176', 631)" class="i">b</span> <span class="k">-&gt;</span> <span class="s">&quot;I prefer Bookers to &quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs176', 632)" onmouseover="showTip(event, 'fs176', 632)" class="i">b</span>
    | <span onmouseout="hideTip(event, 'fs173', 633)" onmouseover="showTip(event, 'fs173', 633)" class="p">Number</span> _ <span class="k">-&gt;</span> <span class="s">&quot;I&#39;m partial to 7&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs177', 634)" onmouseover="showTip(event, 'fs177', 634)" class="i">bourbonResult</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs174', 635)" onmouseover="showTip(event, 'fs174', 635)" class="f">saySomethingAboutYourFavorite</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs172', 636)" onmouseover="showTip(event, 'fs172', 636)" class="p">Bourbon</span> <span class="s">&quot;Maker&#39;s Mark&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs178', 637)" onmouseover="showTip(event, 'fs178', 637)" class="i">numberResult</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs174', 638)" onmouseover="showTip(event, 'fs174', 638)" class="f">saySomethingAboutYourFavorite</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs173', 639)" onmouseover="showTip(event, 'fs173', 639)" class="p">Number</span> <span class="n">7</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs177', 640)" onmouseover="showTip(event, 'fs177', 640)" class="i">bourbonResult</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs178', 641)" onmouseover="showTip(event, 'fs178', 641)" class="i">numberResult</span> <span class="i">__</span>

<span class="c">// ---------------------------------------------------------------</span>


<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Modules</span>
<span class="c">//</span>
<span class="c">// Modules are used to group funcitons, values, and types. </span>
<span class="c">// They&#39;re similar to .NET namespaces, but they have slightly </span>
<span class="c">// different semantics as you&#39;ll see below.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- modules can contain values and types --------------------</span>

<span class="k">module</span> <span class="t">MushroomKingdom</span> <span class="o">=</span>
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs179', 642)" onmouseover="showTip(event, 'fs179', 642)" class="t">Power</span> <span class="o">=</span>
        | <span onmouseout="hideTip(event, 'fs180', 643)" onmouseover="showTip(event, 'fs180', 643)" class="p">Mushroom</span>
        | <span onmouseout="hideTip(event, 'fs181', 644)" onmouseover="showTip(event, 'fs181', 644)" class="p">Star</span>
        | <span onmouseout="hideTip(event, 'fs182', 645)" onmouseover="showTip(event, 'fs182', 645)" class="p">FireFlower</span>
        
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs183', 646)" onmouseover="showTip(event, 'fs183', 646)" class="t">Character</span> <span class="o">=</span> {
        <span onmouseout="hideTip(event, 'fs130', 647)" onmouseover="showTip(event, 'fs130', 647)" class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 648)" onmouseover="showTip(event, 'fs10', 648)" class="t">string</span>
        <span onmouseout="hideTip(event, 'fs131', 649)" onmouseover="showTip(event, 'fs131', 649)" class="i">Occupation</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 650)" onmouseover="showTip(event, 'fs10', 650)" class="t">string</span>
        <span onmouseout="hideTip(event, 'fs184', 651)" onmouseover="showTip(event, 'fs184', 651)" class="i">Power</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs184', 652)" onmouseover="showTip(event, 'fs184', 652)" class="t">Power</span> <span onmouseout="hideTip(event, 'fs152', 653)" onmouseover="showTip(event, 'fs152', 653)" class="t">option</span>
    }

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs185', 654)" onmouseover="showTip(event, 'fs185', 654)" class="i">Mario</span> <span class="o">=</span> { <span class="i">Name</span> <span class="o">=</span> <span class="s">&quot;Mario&quot;</span>; <span class="i">Occupation</span> <span class="o">=</span> <span class="s">&quot;Plumber&quot;</span>; <span onmouseout="hideTip(event, 'fs179', 655)" onmouseover="showTip(event, 'fs179', 655)" class="i">Power</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs147', 656)" onmouseover="showTip(event, 'fs147', 656)" class="p">None</span>}

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs186', 657)" onmouseover="showTip(event, 'fs186', 657)" class="f">powerUp</span> <span onmouseout="hideTip(event, 'fs140', 658)" onmouseover="showTip(event, 'fs140', 658)" class="i">character</span> <span class="o">=</span>
        { <span onmouseout="hideTip(event, 'fs140', 659)" onmouseover="showTip(event, 'fs140', 659)" class="i">character</span> <span class="k">with</span> <span onmouseout="hideTip(event, 'fs179', 660)" onmouseover="showTip(event, 'fs179', 660)" class="i">Power</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs142', 661)" onmouseover="showTip(event, 'fs142', 661)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs180', 662)" onmouseover="showTip(event, 'fs180', 662)" class="p">Mushroom</span> }


<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs187', 663)" onmouseover="showTip(event, 'fs187', 663)" class="i">MushroomKingdom</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs188', 664)" onmouseover="showTip(event, 'fs188', 664)" class="i">Mario</span><span class="o">.</span><span class="i">Name</span> <span class="i">__</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs187', 665)" onmouseover="showTip(event, 'fs187', 665)" class="i">MushroomKingdom</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs188', 666)" onmouseover="showTip(event, 'fs188', 666)" class="i">Mario</span><span class="o">.</span><span class="i">Occupation</span> <span class="i">__</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs189', 667)" onmouseover="showTip(event, 'fs189', 667)" class="i">moduleType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs187', 668)" onmouseover="showTip(event, 'fs187', 668)" class="t">MushroomKingdom</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs188', 669)" onmouseover="showTip(event, 'fs188', 669)" class="i">Mario</span><span class="o">.</span><span class="f">GetType</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs189', 670)" onmouseover="showTip(event, 'fs189', 670)" class="i">moduleType</span> <span onmouseout="hideTip(event, 'fs6', 671)" onmouseover="showTip(event, 'fs6', 671)" class="i">typeof</span><span class="o">&lt;</span><span class="i">FILL_ME_IN</span><span class="o">&gt;</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- modules can contain functions ---------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs190', 672)" onmouseover="showTip(event, 'fs190', 672)" class="i">superMario</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs187', 673)" onmouseover="showTip(event, 'fs187', 673)" class="t">MushroomKingdom</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs191', 674)" onmouseover="showTip(event, 'fs191', 674)" class="f">powerUp</span> <span onmouseout="hideTip(event, 'fs187', 675)" onmouseover="showTip(event, 'fs187', 675)" class="t">MushroomKingdom</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs188', 676)" onmouseover="showTip(event, 'fs188', 676)" class="i">Mario</span>

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs190', 677)" onmouseover="showTip(event, 'fs190', 677)" class="i">superMario</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs192', 678)" onmouseover="showTip(event, 'fs192', 678)" class="i">Power</span> <span class="i">__</span>

<span class="c">(* NOTE: In previous sections, you&#39;ve seen modules like List and Option that </span>
<span class="c">         contain useful functions for dealing with List types and Option types</span>
<span class="c">         respectively. *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- opened modules ------------------------------------------</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs187', 679)" onmouseover="showTip(event, 'fs187', 679)" class="i">MushroomKingdom</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs193', 680)" onmouseover="showTip(event, 'fs193', 680)" class="f">OpenedModulesBringTheirContentsInScope</span>() <span class="o">=</span> 
    <span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs185', 681)" onmouseover="showTip(event, 'fs185', 681)" class="i">Mario</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs130', 682)" onmouseover="showTip(event, 'fs130', 682)" class="i">Name</span> <span class="i">__</span>
    <span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs185', 683)" onmouseover="showTip(event, 'fs185', 683)" class="i">Mario</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs131', 684)" onmouseover="showTip(event, 'fs131', 684)" class="i">Occupation</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">//---------------------------------------------------------------</span>
<span class="c">// Classes</span>
<span class="c">//</span>
<span class="c">// As a full fledged Object Oriented language, F# allows you to</span>
<span class="c">// create traditional classes to contain data and methods.</span>
<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- classes can have properties -----------------------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs194', 685)" onmouseover="showTip(event, 'fs194', 685)" class="t">Zombie</span>() <span class="o">=</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs195', 686)" onmouseover="showTip(event, 'fs195', 686)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs196', 687)" onmouseover="showTip(event, 'fs196', 687)" class="i">FavoriteFood</span> <span class="o">=</span> <span class="s">&quot;brains&quot;</span>

    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs195', 688)" onmouseover="showTip(event, 'fs195', 688)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs197', 689)" onmouseover="showTip(event, 'fs197', 689)" class="f">Eat</span> <span onmouseout="hideTip(event, 'fs198', 690)" onmouseover="showTip(event, 'fs198', 690)" class="i">food</span> <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs198', 691)" onmouseover="showTip(event, 'fs198', 691)" class="i">food</span> <span class="k">with</span>
        | <span class="s">&quot;brains&quot;</span> <span class="k">-&gt;</span> <span class="s">&quot;mmmmmmmmmmmmmmm&quot;</span>
        | _ <span class="k">-&gt;</span> <span class="s">&quot;grrrrrrrr&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs199', 692)" onmouseover="showTip(event, 'fs199', 692)" class="i">zombie</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs194', 693)" onmouseover="showTip(event, 'fs194', 693)" class="t">Zombie</span>()

<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs199', 694)" onmouseover="showTip(event, 'fs199', 694)" class="i">zombie</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs200', 695)" onmouseover="showTip(event, 'fs200', 695)" class="i">FavoriteFood</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- classes can have methods --------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs199', 696)" onmouseover="showTip(event, 'fs199', 696)" class="i">zombie</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs194', 697)" onmouseover="showTip(event, 'fs194', 697)" class="t">Zombie</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 698)" onmouseover="showTip(event, 'fs39', 698)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs199', 699)" onmouseover="showTip(event, 'fs199', 699)" class="i">zombie</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs201', 700)" onmouseover="showTip(event, 'fs201', 700)" class="f">Eat</span> <span class="s">&quot;brains&quot;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 701)" onmouseover="showTip(event, 'fs39', 701)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
 
<span class="c">// ---- classes can have constructors ---------------------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs202', 702)" onmouseover="showTip(event, 'fs202', 702)" class="t">Person</span>(<span onmouseout="hideTip(event, 'fs59', 703)" onmouseover="showTip(event, 'fs59', 703)" class="i">name</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 704)" onmouseover="showTip(event, 'fs10', 704)" class="t">string</span>) <span class="o">=</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs203', 705)" onmouseover="showTip(event, 'fs203', 705)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs204', 706)" onmouseover="showTip(event, 'fs204', 706)" class="f">Speak</span>() <span class="o">=</span>
        <span class="s">&quot;Hi my name is &quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs59', 707)" onmouseover="showTip(event, 'fs59', 707)" class="i">name</span>

    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs205', 708)" onmouseover="showTip(event, 'fs205', 708)" class="i">person</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs202', 709)" onmouseover="showTip(event, 'fs202', 709)" class="t">Person</span>(<span class="s">&quot;Shaun&quot;</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 710)" onmouseover="showTip(event, 'fs39', 710)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs205', 711)" onmouseover="showTip(event, 'fs205', 711)" class="i">person</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs206', 712)" onmouseover="showTip(event, 'fs206', 712)" class="f">Speak</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 713)" onmouseover="showTip(event, 'fs39', 713)" class="i">result</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- classes can have let bindings in them -------------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs207', 714)" onmouseover="showTip(event, 'fs207', 714)" class="t">Zombie2</span>() <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs208', 715)" onmouseover="showTip(event, 'fs208', 715)" class="i">favoriteFood</span> <span class="o">=</span> <span class="s">&quot;brains&quot;</span>

    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs209', 716)" onmouseover="showTip(event, 'fs209', 716)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs210', 717)" onmouseover="showTip(event, 'fs210', 717)" class="f">Eat</span> <span onmouseout="hideTip(event, 'fs198', 718)" onmouseover="showTip(event, 'fs198', 718)" class="i">food</span> <span class="o">=</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs198', 719)" onmouseover="showTip(event, 'fs198', 719)" class="i">food</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs208', 720)" onmouseover="showTip(event, 'fs208', 720)" class="i">favoriteFood</span> <span class="k">then</span> <span class="s">&quot;mmmmmmmmmmmmmmm&quot;</span> <span class="k">else</span> <span class="s">&quot;grrrrrrrr&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs211', 721)" onmouseover="showTip(event, 'fs211', 721)" class="i">zombie</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs207', 722)" onmouseover="showTip(event, 'fs207', 722)" class="t">Zombie2</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 723)" onmouseover="showTip(event, 'fs39', 723)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs211', 724)" onmouseover="showTip(event, 'fs211', 724)" class="i">zombie</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs212', 725)" onmouseover="showTip(event, 'fs212', 725)" class="f">Eat</span> <span class="s">&quot;chicken&quot;</span>
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs39', 726)" onmouseover="showTip(event, 'fs39', 726)" class="i">result</span> <span class="i">__</span>

<span class="c">(* TRY IT: Can you access the let bound value Zombie2.favoriteFood</span>
<span class="c">           outside of the class definition? *)</span>

<span class="c">//---------------------------------------------------------------</span>

<span class="c">// ---- classes can have read write properties ------------------</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs213', 727)" onmouseover="showTip(event, 'fs213', 727)" class="t">Person2</span>(<span onmouseout="hideTip(event, 'fs59', 728)" onmouseover="showTip(event, 'fs59', 728)" class="i">name</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 729)" onmouseover="showTip(event, 'fs10', 729)" class="t">string</span>) <span class="o">=</span>
    <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs214', 730)" onmouseover="showTip(event, 'fs214', 730)" class="v">internalName</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs59', 731)" onmouseover="showTip(event, 'fs59', 731)" class="i">name</span>

    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs215', 732)" onmouseover="showTip(event, 'fs215', 732)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs216', 733)" onmouseover="showTip(event, 'fs216', 733)" class="i">Name</span>
        <span class="k">with</span> <span class="i">get</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs214', 734)" onmouseover="showTip(event, 'fs214', 734)" class="v">internalName</span>
        <span class="k">and</span> <span onmouseout="hideTip(event, 'fs217', 735)" onmouseover="showTip(event, 'fs217', 735)" class="i">set</span>(<span onmouseout="hideTip(event, 'fs218', 736)" onmouseover="showTip(event, 'fs218', 736)" class="i">value</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs214', 737)" onmouseover="showTip(event, 'fs214', 737)" class="v">internalName</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs218', 738)" onmouseover="showTip(event, 'fs218', 738)" class="i">value</span>

    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs215', 739)" onmouseover="showTip(event, 'fs215', 739)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs219', 740)" onmouseover="showTip(event, 'fs219', 740)" class="f">Speak</span>() <span class="o">=</span>
        <span class="s">&quot;Hi my name is &quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs215', 741)" onmouseover="showTip(event, 'fs215', 741)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs220', 742)" onmouseover="showTip(event, 'fs220', 742)" class="i">Name</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs221', 743)" onmouseover="showTip(event, 'fs221', 743)" class="i">person</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs213', 744)" onmouseover="showTip(event, 'fs213', 744)" class="t">Person2</span>(<span class="s">&quot;Shaun&quot;</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs222', 745)" onmouseover="showTip(event, 'fs222', 745)" class="i">firstPhrase</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs221', 746)" onmouseover="showTip(event, 'fs221', 746)" class="i">person</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs223', 747)" onmouseover="showTip(event, 'fs223', 747)" class="f">Speak</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs222', 748)" onmouseover="showTip(event, 'fs222', 748)" class="i">firstPhrase</span> <span class="i">__</span>

<span onmouseout="hideTip(event, 'fs221', 749)" onmouseover="showTip(event, 'fs221', 749)" class="i">person</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs220', 750)" onmouseover="showTip(event, 'fs220', 750)" class="i">Name</span> <span class="o">&lt;-</span> <span class="s">&quot;Shaun of the Dead&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs224', 751)" onmouseover="showTip(event, 'fs224', 751)" class="i">secondPhrase</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs221', 752)" onmouseover="showTip(event, 'fs221', 752)" class="i">person</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs223', 753)" onmouseover="showTip(event, 'fs223', 753)" class="f">Speak</span>()
<span class="i">AssertEquality</span> <span onmouseout="hideTip(event, 'fs224', 754)" onmouseover="showTip(event, 'fs224', 754)" class="i">secondPhrase</span> <span class="i">__</span>

<span class="c">//---------------------------------------------------------------</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val expected_value : int<br /><br />Full name: Script.expected_value</div>
<div class="tip" id="fs2">val actual_value : obj<br /><br />Full name: Script.actual_value</div>
<div class="tip" id="fs3">val x : int<br /><br />Full name: Script.x</div>
<div class="tip" id="fs4">val typeOfX : System.Type<br /><br />Full name: Script.typeOfX</div>
<div class="tip" id="fs5">System.Object.GetType() : System.Type</div>
<div class="tip" id="fs6">val typeof&lt;&#39;T&gt; : System.Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs7">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs8">val y : string<br /><br />Full name: Script.y</div>
<div class="tip" id="fs9">val expectedType : System.Type<br /><br />Full name: Script.expectedType</div>
<div class="tip" id="fs10">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs11">val typeOfY : System.Type<br /><br />Full name: Script.typeOfY</div>
<div class="tip" id="fs12">val y : float<br /><br />Full name: Script.y</div>
<div class="tip" id="fs13">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.float<br /><br />--------------------<br />type float = System.Double<br /><br />Full name: Microsoft.FSharp.Core.float<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float<br /><br />Full name: Microsoft.FSharp.Core.float&lt;_&gt;</div>
<div class="tip" id="fs14">val mutable x : int<br /><br />Full name: Script.x</div>
<div class="tip" id="fs15">val add : x:int -&gt; y:int -&gt; int<br /><br />Full name: Script.add</div>
<div class="tip" id="fs16">val x : int</div>
<div class="tip" id="fs17">val y : int</div>
<div class="tip" id="fs18">val result1 : int<br /><br />Full name: Script.result1</div>
<div class="tip" id="fs19">val result2 : int<br /><br />Full name: Script.result2</div>
<div class="tip" id="fs20">val quadruple : x:int -&gt; int<br /><br />Full name: Script.quadruple</div>
<div class="tip" id="fs21">Multiple items<br />val double : (int -&gt; int)<br /><br />--------------------<br />type double = System.Double<br /><br />Full name: Microsoft.FSharp.Core.double</div>
<div class="tip" id="fs22">val result : int<br /><br />Full name: Script.result</div>
<div class="tip" id="fs23">val sayItLikeAnAuctioneer : text:string -&gt; string<br /><br />Full name: Script.sayItLikeAnAuctioneer</div>
<div class="tip" id="fs24">val text : string</div>
<div class="tip" id="fs25">System.String.Replace(oldValue: string, newValue: string) : string<br />System.String.Replace(oldChar: char, newChar: char) : string</div>
<div class="tip" id="fs26">val auctioneered : string<br /><br />Full name: Script.auctioneered</div>
<div class="tip" id="fs27">val suffix : string<br /><br />Full name: Script.suffix</div>
<div class="tip" id="fs28">val caffinate : text:string -&gt; string<br /><br />Full name: Script.caffinate</div>
<div class="tip" id="fs29">val exclaimed : string</div>
<div class="tip" id="fs30">val yelled : string</div>
<div class="tip" id="fs31">System.String.ToUpper() : string<br />System.String.ToUpper(culture: System.Globalization.CultureInfo) : string</div>
<div class="tip" id="fs32">System.String.Trim() : string<br />System.String.Trim([&lt;System.ParamArray&gt;] trimChars: char []) : string</div>
<div class="tip" id="fs33">val caffinatedReply : string<br /><br />Full name: Script.caffinatedReply</div>
<div class="tip" id="fs34">Multiple items<br />val double : x:int -&gt; int<br /><br />Full name: Script.double<br /><br />--------------------<br />type double = System.Double<br /><br />Full name: Microsoft.FSharp.Core.double</div>
<div class="tip" id="fs35">val sendData : data:&#39;a -&gt; unit<br /><br />Full name: Script.sendData</div>
<div class="tip" id="fs36">val data : &#39;a</div>
<div class="tip" id="fs37">val x : unit<br /><br />Full name: Script.x</div>
<div class="tip" id="fs38">val sayHello : unit -&gt; string<br /><br />Full name: Script.sayHello</div>
<div class="tip" id="fs39">val result : string<br /><br />Full name: Script.result</div>
<div class="tip" id="fs40">val items : string * string<br /><br />Full name: Script.items</div>
<div class="tip" id="fs41">val fruit : string<br /><br />Full name: Script.fruit</div>
<div class="tip" id="fs42">val fst : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T1<br /><br />Full name: Microsoft.FSharp.Core.Operators.fst</div>
<div class="tip" id="fs43">val animal : string<br /><br />Full name: Script.animal</div>
<div class="tip" id="fs44">val snd : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T2<br /><br />Full name: Microsoft.FSharp.Core.Operators.snd</div>
<div class="tip" id="fs45">val items : string * string * string<br /><br />Full name: Script.items</div>
<div class="tip" id="fs46">val car : string<br /><br />Full name: Script.car</div>
<div class="tip" id="fs47">val squareAndCube : x:float -&gt; float * float<br /><br />Full name: Script.squareAndCube</div>
<div class="tip" id="fs48">val x : float</div>
<div class="tip" id="fs49">val squared : float<br /><br />Full name: Script.squared</div>
<div class="tip" id="fs50">val cubed : float<br /><br />Full name: Script.cubed</div>
<div class="tip" id="fs51">val result : float * float<br /><br />Full name: Script.result</div>
<div class="tip" id="fs52">val isEven : x:int -&gt; string<br /><br />Full name: Script.isEven</div>
<div class="tip" id="fs53">val isApple : x:string -&gt; bool<br /><br />Full name: Script.isApple</div>
<div class="tip" id="fs54">val x : string</div>
<div class="tip" id="fs55">val result1 : bool<br /><br />Full name: Script.result1</div>
<div class="tip" id="fs56">val result2 : bool<br /><br />Full name: Script.result2</div>
<div class="tip" id="fs57">val getDinner : string * string -&gt; string<br /><br />Full name: Script.getDinner</div>
<div class="tip" id="fs58">val x : string * string</div>
<div class="tip" id="fs59">val name : string</div>
<div class="tip" id="fs60">val foodChoice : string</div>
<div class="tip" id="fs61">val sprintf : format:Printf.StringFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf</div>
<div class="tip" id="fs62">val person1 : string * string<br /><br />Full name: Script.person1</div>
<div class="tip" id="fs63">val person2 : string * string<br /><br />Full name: Script.person2</div>
<div class="tip" id="fs64">Multiple items<br />val list : string list<br /><br />Full name: Script.list<br /><br />--------------------<br />type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs65">property List.Head: string</div>
<div class="tip" id="fs66">property List.Tail: string list</div>
<div class="tip" id="fs67">property List.Length: int</div>
<div class="tip" id="fs68">val dotNetList : List&lt;string&gt;<br /><br />Full name: Script.dotNetList</div>
<div class="tip" id="fs69">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs70">val first : string list<br /><br />Full name: Script.first</div>
<div class="tip" id="fs71">val second : string list<br /><br />Full name: Script.second</div>
<div class="tip" id="fs72">val third : string list<br /><br />Full name: Script.third</div>
<div class="tip" id="fs73">Multiple items<br />val list : int list<br /><br />Full name: Script.list<br /><br />--------------------<br />type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs74">property List.Head: int</div>
<div class="tip" id="fs75">property List.Tail: int list</div>
<div class="tip" id="fs76">val i : int</div>
<div class="tip" id="fs77">val square : x:int -&gt; int<br /><br />Full name: Script.square</div>
<div class="tip" id="fs78">val original : int list<br /><br />Full name: Script.original</div>
<div class="tip" id="fs79">val result : int list<br /><br />Full name: Script.result</div>
<div class="tip" id="fs80">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.map</div>
<div class="tip" id="fs81">val isEven : x:int -&gt; bool<br /><br />Full name: Script.isEven</div>
<div class="tip" id="fs82">val filter : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.filter</div>
<div class="tip" id="fs83">val isOdd : x:int -&gt; bool<br /><br />Full name: Script.isOdd</div>
<div class="tip" id="fs84">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs85">val result1 : int list<br /><br />Full name: Script.result1</div>
<div class="tip" id="fs86">val result2 : int list<br /><br />Full name: Script.result2</div>
<div class="tip" id="fs87">val partition : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; &#39;T list * &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.partition</div>
<div class="tip" id="fs88">val numbers : int list<br /><br />Full name: Script.numbers</div>
<div class="tip" id="fs89">val evens : int list<br /><br />Full name: Script.evens</div>
<div class="tip" id="fs90">val x : &#39;a</div>
<div class="tip" id="fs91">val y : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs92">val fruits : string []<br /><br />Full name: Script.fruits</div>
<div class="tip" id="fs93">val numbers : int []<br /><br />Full name: Script.numbers</div>
<div class="tip" id="fs94">val cube : x:int -&gt; int<br /><br />Full name: Script.cube</div>
<div class="tip" id="fs95">val original : int []<br /><br />Full name: Script.original</div>
<div class="tip" id="fs96">val result : int []<br /><br />Full name: Script.result</div>
<div class="tip" id="fs97">module Array<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs98">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; array:&#39;T [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.map</div>
<div class="tip" id="fs99">val fruits : List&lt;string&gt;<br /><br />Full name: Script.fruits</div>
<div class="tip" id="fs100">val addressBook : obj<br /><br />Full name: Script.addressBook</div>
<div class="tip" id="fs101">val addressBook : seq&lt;obj&gt;<br /><br />Full name: Script.addressBook</div>
<div class="tip" id="fs102">val verboseBook : string []<br /><br />Full name: Script.verboseBook</div>
<div class="tip" id="fs103">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs104">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs105">val kvp : obj</div>
<div class="tip" id="fs106">val toArray : source:seq&lt;&#39;T&gt; -&gt; &#39;T []<br /><br />Full name: Microsoft.FSharp.Collections.Seq.toArray</div>
<div class="tip" id="fs107">val result : seq&lt;int&gt;<br /><br />Full name: Script.result</div>
<div class="tip" id="fs108">val skip : count:int -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.skip</div>
<div class="tip" id="fs109">val values : List&lt;int&gt;<br /><br />Full name: Script.values</div>
<div class="tip" id="fs110">val max : source:seq&lt;&#39;T&gt; -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.max</div>
<div class="tip" id="fs111">val getNameLength : name:string -&gt; int<br /><br />Full name: Script.getNameLength</div>
<div class="tip" id="fs112">property System.String.Length: int</div>
<div class="tip" id="fs113">val names : string []<br /><br />Full name: Script.names</div>
<div class="tip" id="fs114">val maxBy : projection:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.maxBy</div>
<div class="tip" id="fs115">val values : int list<br /><br />Full name: Script.values</div>
<div class="tip" id="fs116">val mutable sum : int<br /><br />Full name: Script.sum</div>
<div class="tip" id="fs117">val value : int</div>
<div class="tip" id="fs118">val colors : string list<br /><br />Full name: Script.colors</div>
<div class="tip" id="fs119">val echo : string list<br /><br />Full name: Script.echo</div>
<div class="tip" id="fs120">val simpleResult : int<br /><br />Full name: Script.simpleResult</div>
<div class="tip" id="fs121">val addTen : (int -&gt; int)<br /><br />Full name: Script.addTen</div>
<div class="tip" id="fs122">val fancyResult : int<br /><br />Full name: Script.fancyResult</div>
<div class="tip" id="fs123">val addSeven : (int -&gt; int)<br /><br />Full name: Script.addSeven</div>
<div class="tip" id="fs124">val unluckyNumber : int<br /><br />Full name: Script.unluckyNumber</div>
<div class="tip" id="fs125">val luckyNumber : int<br /><br />Full name: Script.luckyNumber</div>
<div class="tip" id="fs126">val add : x:int * y:int -&gt; int<br /><br />Full name: Script.add</div>
<div class="tip" id="fs127">val stockData : string list<br /><br />Full name: Script.stockData</div>
<div class="tip" id="fs128">val result : obj<br /><br />Full name: Script.result</div>
<div class="tip" id="fs129">type Character =<br />&#160;&#160;{Name: string;<br />&#160;&#160;&#160;Occupation: string;}<br /><br />Full name: Script.Character</div>
<div class="tip" id="fs130">Character.Name: string</div>
<div class="tip" id="fs131">Character.Occupation: string</div>
<div class="tip" id="fs132">val mario : Character<br /><br />Full name: Script.mario</div>
<div class="tip" id="fs133">val luigi : Character<br /><br />Full name: Script.luigi</div>
<div class="tip" id="fs134">val greenKoopa : Character<br /><br />Full name: Script.greenKoopa</div>
<div class="tip" id="fs135">val bowser : Character<br /><br />Full name: Script.bowser</div>
<div class="tip" id="fs136">val redKoopa : Character<br /><br />Full name: Script.redKoopa</div>
<div class="tip" id="fs137">val koopaComparison : string<br /><br />Full name: Script.koopaComparison</div>
<div class="tip" id="fs138">val bowserComparison : string<br /><br />Full name: Script.bowserComparison</div>
<div class="tip" id="fs139">val determineSide : character:Character -&gt; string<br /><br />Full name: Script.determineSide</div>
<div class="tip" id="fs140">val character : Character</div>
<div class="tip" id="fs141">val someValue : int option<br /><br />Full name: Script.someValue</div>
<div class="tip" id="fs142">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs143">property Option.IsSome: bool</div>
<div class="tip" id="fs144">property Option.IsNone: bool</div>
<div class="tip" id="fs145">property Option.Value: int</div>
<div class="tip" id="fs146">val noValue : &#39;a option<br /><br />Full name: Script.noValue</div>
<div class="tip" id="fs147">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs148">type Game =<br />&#160;&#160;{Name: string;<br />&#160;&#160;&#160;Platform: string;<br />&#160;&#160;&#160;Score: int option;}<br /><br />Full name: Script.Game</div>
<div class="tip" id="fs149">Game.Name: string</div>
<div class="tip" id="fs150">Game.Platform: string</div>
<div class="tip" id="fs151">Game.Score: int option</div>
<div class="tip" id="fs152">type &#39;T option = Option&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.option&lt;_&gt;</div>
<div class="tip" id="fs153">val chronoTrigger : Game<br /><br />Full name: Script.chronoTrigger</div>
<div class="tip" id="fs154">val halo : Game<br /><br />Full name: Script.halo</div>
<div class="tip" id="fs155">val translate : score:int -&gt; string<br /><br />Full name: Script.translate</div>
<div class="tip" id="fs156">val score : int</div>
<div class="tip" id="fs157">val getScore : game:Game -&gt; string<br /><br />Full name: Script.getScore</div>
<div class="tip" id="fs158">val game : Game</div>
<div class="tip" id="fs159">val gta : Game<br /><br />Full name: Script.gta</div>
<div class="tip" id="fs160">val decideOn : game:Game -&gt; string option<br /><br />Full name: Script.decideOn</div>
<div class="tip" id="fs161">module Option<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs162">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; option:&#39;T option -&gt; &#39;U option<br /><br />Full name: Microsoft.FSharp.Core.Option.map</div>
<div class="tip" id="fs163">type Condiment =<br />&#160;&#160;| Mustard<br />&#160;&#160;| Ketchup<br />&#160;&#160;| Relish<br />&#160;&#160;| Vinegar<br /><br />Full name: Script.Condiment</div>
<div class="tip" id="fs164">union case Condiment.Mustard: Condiment</div>
<div class="tip" id="fs165">union case Condiment.Ketchup: Condiment</div>
<div class="tip" id="fs166">union case Condiment.Relish: Condiment</div>
<div class="tip" id="fs167">union case Condiment.Vinegar: Condiment</div>
<div class="tip" id="fs168">val toColor : condiment:Condiment -&gt; string<br /><br />Full name: Script.toColor</div>
<div class="tip" id="fs169">val condiment : Condiment</div>
<div class="tip" id="fs170">val choice : Condiment<br /><br />Full name: Script.choice</div>
<div class="tip" id="fs171">type Favorite =<br />&#160;&#160;| Bourbon of string<br />&#160;&#160;| Number of int<br /><br />Full name: Script.Favorite</div>
<div class="tip" id="fs172">union case Favorite.Bourbon: string -&gt; Favorite</div>
<div class="tip" id="fs173">union case Favorite.Number: int -&gt; Favorite</div>
<div class="tip" id="fs174">val saySomethingAboutYourFavorite : favorite:Favorite -&gt; string<br /><br />Full name: Script.saySomethingAboutYourFavorite</div>
<div class="tip" id="fs175">val favorite : Favorite</div>
<div class="tip" id="fs176">val b : string</div>
<div class="tip" id="fs177">val bourbonResult : string<br /><br />Full name: Script.bourbonResult</div>
<div class="tip" id="fs178">val numberResult : string<br /><br />Full name: Script.numberResult</div>
<div class="tip" id="fs179">type Power =<br />&#160;&#160;| Mushroom<br />&#160;&#160;| Star<br />&#160;&#160;| FireFlower<br /><br />Full name: Script.MushroomKingdom.Power</div>
<div class="tip" id="fs180">union case Power.Mushroom: Power</div>
<div class="tip" id="fs181">union case Power.Star: Power</div>
<div class="tip" id="fs182">union case Power.FireFlower: Power</div>
<div class="tip" id="fs183">type Character =<br />&#160;&#160;{Name: string;<br />&#160;&#160;&#160;Occupation: string;<br />&#160;&#160;&#160;Power: Power option;}<br /><br />Full name: Script.MushroomKingdom.Character</div>
<div class="tip" id="fs184">Multiple items<br />Character.Power: Power option<br /><br />--------------------<br />type Power =<br />&#160;&#160;| Mushroom<br />&#160;&#160;| Star<br />&#160;&#160;| FireFlower<br /><br />Full name: Script.MushroomKingdom.Power</div>
<div class="tip" id="fs185">val Mario : Character<br /><br />Full name: Script.MushroomKingdom.Mario</div>
<div class="tip" id="fs186">val powerUp : character:Character -&gt; Character<br /><br />Full name: Script.MushroomKingdom.powerUp</div>
<div class="tip" id="fs187">module MushroomKingdom<br /><br />from Script</div>
<div class="tip" id="fs188">val Mario : MushroomKingdom.Character<br /><br />Full name: Script.MushroomKingdom.Mario</div>
<div class="tip" id="fs189">val moduleType : System.Type<br /><br />Full name: Script.moduleType</div>
<div class="tip" id="fs190">val superMario : MushroomKingdom.Character<br /><br />Full name: Script.superMario</div>
<div class="tip" id="fs191">val powerUp : character:MushroomKingdom.Character -&gt; MushroomKingdom.Character<br /><br />Full name: Script.MushroomKingdom.powerUp</div>
<div class="tip" id="fs192">MushroomKingdom.Character.Power: MushroomKingdom.Power option</div>
<div class="tip" id="fs193">val OpenedModulesBringTheirContentsInScope : unit -&gt; &#39;a<br /><br />Full name: Script.OpenedModulesBringTheirContentsInScope</div>
<div class="tip" id="fs194">Multiple items<br />type Zombie =<br />&#160;&#160;new : unit -&gt; Zombie<br />&#160;&#160;member Eat : food:string -&gt; string<br />&#160;&#160;member FavoriteFood : string<br /><br />Full name: Script.Zombie<br /><br />--------------------<br />new : unit -&gt; Zombie</div>
<div class="tip" id="fs195">val this : Zombie</div>
<div class="tip" id="fs196">member Zombie.FavoriteFood : string<br /><br />Full name: Script.Zombie.FavoriteFood</div>
<div class="tip" id="fs197">member Zombie.Eat : food:string -&gt; string<br /><br />Full name: Script.Zombie.Eat</div>
<div class="tip" id="fs198">val food : string</div>
<div class="tip" id="fs199">val zombie : Zombie<br /><br />Full name: Script.zombie</div>
<div class="tip" id="fs200">property Zombie.FavoriteFood: string</div>
<div class="tip" id="fs201">member Zombie.Eat : food:string -&gt; string</div>
<div class="tip" id="fs202">Multiple items<br />type Person =<br />&#160;&#160;new : name:string -&gt; Person<br />&#160;&#160;member Speak : unit -&gt; string<br /><br />Full name: Script.Person<br /><br />--------------------<br />new : name:string -&gt; Person</div>
<div class="tip" id="fs203">val this : Person</div>
<div class="tip" id="fs204">member Person.Speak : unit -&gt; string<br /><br />Full name: Script.Person.Speak</div>
<div class="tip" id="fs205">val person : Person<br /><br />Full name: Script.person</div>
<div class="tip" id="fs206">member Person.Speak : unit -&gt; string</div>
<div class="tip" id="fs207">Multiple items<br />type Zombie2 =<br />&#160;&#160;new : unit -&gt; Zombie2<br />&#160;&#160;member Eat : food:string -&gt; string<br /><br />Full name: Script.Zombie2<br /><br />--------------------<br />new : unit -&gt; Zombie2</div>
<div class="tip" id="fs208">val favoriteFood : string</div>
<div class="tip" id="fs209">val this : Zombie2</div>
<div class="tip" id="fs210">member Zombie2.Eat : food:string -&gt; string<br /><br />Full name: Script.Zombie2.Eat</div>
<div class="tip" id="fs211">val zombie : Zombie2<br /><br />Full name: Script.zombie</div>
<div class="tip" id="fs212">member Zombie2.Eat : food:string -&gt; string</div>
<div class="tip" id="fs213">Multiple items<br />type Person2 =<br />&#160;&#160;new : name:string -&gt; Person2<br />&#160;&#160;member Speak : unit -&gt; string<br />&#160;&#160;member Name : string<br />&#160;&#160;member Name : string with set<br /><br />Full name: Script.Person2<br /><br />--------------------<br />new : name:string -&gt; Person2</div>
<div class="tip" id="fs214">val mutable internalName : string</div>
<div class="tip" id="fs215">val this : Person2</div>
<div class="tip" id="fs216">member Person2.Name : string with set<br /><br />Full name: Script.Person2.Name</div>
<div class="tip" id="fs217">val set : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set</div>
<div class="tip" id="fs218">val value : string</div>
<div class="tip" id="fs219">member Person2.Speak : unit -&gt; string<br /><br />Full name: Script.Person2.Speak</div>
<div class="tip" id="fs220">property Person2.Name: string</div>
<div class="tip" id="fs221">val person : Person2<br /><br />Full name: Script.person</div>
<div class="tip" id="fs222">val firstPhrase : string<br /><br />Full name: Script.firstPhrase</div>
<div class="tip" id="fs223">member Person2.Speak : unit -&gt; string</div>
<div class="tip" id="fs224">val secondPhrase : string<br /><br />Full name: Script.secondPhrase</div>

