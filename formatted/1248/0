<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">(* Having witnessed a painful attempt at the Strategy design pattern I was inspired</span>
<span class="c">to share some of the little knowledge I have.</span>

<span class="c">If you are unsure whether you got the pattern right you should always ask yourself</span>
<span class="c">the question: What problem is it trying to solve?</span>

<span class="c">If you are not solving the following problem, then it isn&#39;t called the Strategy pattern:</span>

<span class="c">    How can I modify the behavior of a class (even at run-time)</span>
<span class="c">    without having to change its implementation.</span>

<span class="c">The general idea is to parameterize the class with the implementation of another interface</span>
<span class="c">passed in via the constructor.</span>

<span class="c">Our class then delegates the behavior to the implementation it&#39;s being passed: *)</span>

<span class="k">type</span> <span class="t">IMakeNoise</span> <span class="o">=</span>
    <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">Talk</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">Animal</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">unit</span>

<span class="k">and</span> <span onmouseout="hideTip(event, 'fs2', 4)" onmouseover="showTip(event, 'fs2', 4)" class="t">Animal</span>(<span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="i">name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">makeNoise</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">IMakeNoise</span>) <span class="o">=</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="i">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 11)" onmouseover="showTip(event, 'fs4', 11)" class="i">name</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 13)" onmouseover="showTip(event, 'fs11', 13)" class="f">Talk</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 14)" onmouseover="showTip(event, 'fs6', 14)" class="i">makeNoise</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="f">Talk</span> <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="i">this</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="t">FrogNoise</span>() <span class="o">=</span>
    <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs7', 18)" onmouseover="showTip(event, 'fs7', 18)" class="t">IMakeNoise</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="f">Talk</span> <span onmouseout="hideTip(event, 'fs16', 21)" onmouseover="showTip(event, 'fs16', 21)" class="i">frog</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 22)" onmouseover="showTip(event, 'fs17', 22)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> croaks&quot;</span> <span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="i">frog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 24)" onmouseover="showTip(event, 'fs18', 24)" class="i">Name</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs19', 25)" onmouseover="showTip(event, 'fs19', 25)" class="t">MouseNoise</span>() <span class="o">=</span>
    <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs7', 26)" onmouseover="showTip(event, 'fs7', 26)" class="t">IMakeNoise</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs20', 27)" onmouseover="showTip(event, 'fs20', 27)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 28)" onmouseover="showTip(event, 'fs21', 28)" class="f">Talk</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="f">printfn</span> <span class="s">&quot;A mouse squeals&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 30)" onmouseover="showTip(event, 'fs22', 30)" class="i">frog</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 31)" onmouseover="showTip(event, 'fs2', 31)" class="t">Animal</span>(<span class="s">&quot;Billy&quot;</span>, <span onmouseout="hideTip(event, 'fs13', 32)" onmouseover="showTip(event, 'fs13', 32)" class="t">FrogNoise</span>())
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 33)" onmouseover="showTip(event, 'fs23', 33)" class="i">mouse</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 34)" onmouseover="showTip(event, 'fs2', 34)" class="t">Animal</span>(<span class="s">&quot;&quot;</span>, <span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="t">MouseNoise</span>())

<span onmouseout="hideTip(event, 'fs22', 36)" onmouseover="showTip(event, 'fs22', 36)" class="i">frog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 37)" onmouseover="showTip(event, 'fs24', 37)" class="f">Talk</span>()
<span onmouseout="hideTip(event, 'fs23', 38)" onmouseover="showTip(event, 'fs23', 38)" class="i">mouse</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 39)" onmouseover="showTip(event, 'fs24', 39)" class="f">Talk</span>()

<span class="c">(* Notice a few things:</span>

<span class="c">-   We have a single implementation of animals and adapting the behavior of the animal</span>
<span class="c">    talking will not require a change to its implementation.</span>
<span class="c">-   We have the choice of defining the interface IMakeNoise with or without accepting</span>
<span class="c">    the Animal instance it will act for:</span>
<span class="c">    -   Passing the instance to the talk function makes it more flexible,</span>
<span class="c">        notice how I couldn&#39;t have implemented the &quot;nameless&quot; mouse squeal</span>
<span class="c">        without changing our Animal implementation otherwise.</span>
<span class="c">    - On the other hand, this requires a cycle, for which I invite you</span>
<span class="c">      to read Scott Wlaschin&#39;s excellent serie on the subject:</span>
<span class="c">      http://fsharpforfunandprofit.com/series/dependency-cycles.html</span>

<span class="c">Making the interface generic breaks the cycle, is more flexible and preserves type safety: *)</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs25', 40)" onmouseover="showTip(event, 'fs25', 40)" class="t">IMakeNoise</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span>
    <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs26', 41)" onmouseover="showTip(event, 'fs26', 41)" class="f">Talk</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 42)" onmouseover="showTip(event, 'fs3', 42)" class="t">unit</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs27', 43)" onmouseover="showTip(event, 'fs27', 43)" class="t">Creature</span>(<span onmouseout="hideTip(event, 'fs4', 44)" onmouseover="showTip(event, 'fs4', 44)" class="i">name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs5', 45)" onmouseover="showTip(event, 'fs5', 45)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs28', 46)" onmouseover="showTip(event, 'fs28', 46)" class="i">makeNoise</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs25', 47)" onmouseover="showTip(event, 'fs25', 47)" class="t">IMakeNoise</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs27', 48)" onmouseover="showTip(event, 'fs27', 48)" class="t">Creature</span><span class="o">&gt;</span>) <span class="o">=</span>
    <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 49)" onmouseover="showTip(event, 'fs29', 49)" class="i">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 50)" onmouseover="showTip(event, 'fs4', 50)" class="i">name</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs30', 51)" onmouseover="showTip(event, 'fs30', 51)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 52)" onmouseover="showTip(event, 'fs31', 52)" class="f">Talk</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 53)" onmouseover="showTip(event, 'fs28', 53)" class="i">makeNoise</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 54)" onmouseover="showTip(event, 'fs32', 54)" class="f">Talk</span> <span onmouseout="hideTip(event, 'fs30', 55)" onmouseover="showTip(event, 'fs30', 55)" class="i">this</span>

<span class="c">(* A great feature of the F# type system is Object Expression which allow you to instantiate</span>
<span class="c">an object/interface without the need for an explicit class definition: *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 56)" onmouseover="showTip(event, 'fs33', 56)" class="i">horse</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs28', 57)" onmouseover="showTip(event, 'fs28', 57)" class="i">makeNoise</span> <span class="o">=</span>
        {
            <span class="k">new</span> <span onmouseout="hideTip(event, 'fs25', 58)" onmouseover="showTip(event, 'fs25', 58)" class="t">IMakeNoise</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs27', 59)" onmouseover="showTip(event, 'fs27', 59)" class="t">Creature</span><span class="o">&gt;</span> <span class="k">with</span>
                <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span class="f">Talk</span> <span onmouseout="hideTip(event, 'fs34', 60)" onmouseover="showTip(event, 'fs34', 60)" class="i">horse</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 61)" onmouseover="showTip(event, 'fs17', 61)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> snorts&quot;</span> <span onmouseout="hideTip(event, 'fs34', 62)" onmouseover="showTip(event, 'fs34', 62)" class="i">horse</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 63)" onmouseover="showTip(event, 'fs35', 63)" class="i">Name</span>
        }
    <span onmouseout="hideTip(event, 'fs27', 64)" onmouseover="showTip(event, 'fs27', 64)" class="t">Creature</span>(<span class="s">&quot;Fred&quot;</span>, <span onmouseout="hideTip(event, 'fs28', 65)" onmouseover="showTip(event, 'fs28', 65)" class="i">makeNoise</span>)

<span onmouseout="hideTip(event, 'fs33', 66)" onmouseover="showTip(event, 'fs33', 66)" class="i">horse</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 67)" onmouseover="showTip(event, 'fs36', 67)" class="f">Talk</span>()

<span class="c">(* We said that our class *delegates* the responsibility to an implementation of IMakeNoise.</span>
<span class="c">This is where the difference between the Delegation and Strategy pattern lies,</span>
<span class="c">wherea the Delegation pattern has our class instantiate the class to which it will delegate</span>
<span class="c">the work, the Strategy pattern has the implementation passed in at construction.</span>

<span class="c">Being more flexible it can also be done at run-time making our code</span>
<span class="c">less vulnerable to evolving requirements.</span>

<span class="c">Another concept we know from C# called a delegate which is a poor man&#39;s function type. Our</span>
<span class="c">IMakeNoise interface defines a single method with a fixed signature and can thus be expressed</span>
<span class="c">without having to rely on the interface at all: Creature -&gt; Unit *)</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs37', 68)" onmouseover="showTip(event, 'fs37', 68)" class="t">Monster</span>(<span onmouseout="hideTip(event, 'fs4', 69)" onmouseover="showTip(event, 'fs4', 69)" class="i">name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs5', 70)" onmouseover="showTip(event, 'fs5', 70)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs38', 71)" onmouseover="showTip(event, 'fs38', 71)" class="f">makeNoise</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs37', 72)" onmouseover="showTip(event, 'fs37', 72)" class="t">Monster</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 73)" onmouseover="showTip(event, 'fs3', 73)" class="t">unit</span>) <span class="o">=</span>
    <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 74)" onmouseover="showTip(event, 'fs39', 74)" class="i">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 75)" onmouseover="showTip(event, 'fs4', 75)" class="i">name</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs40', 76)" onmouseover="showTip(event, 'fs40', 76)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs41', 77)" onmouseover="showTip(event, 'fs41', 77)" class="f">Talk</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 78)" onmouseover="showTip(event, 'fs38', 78)" class="f">makeNoise</span> <span onmouseout="hideTip(event, 'fs40', 79)" onmouseover="showTip(event, 'fs40', 79)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 80)" onmouseover="showTip(event, 'fs42', 80)" class="i">troll</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 81)" onmouseover="showTip(event, 'fs37', 81)" class="t">Monster</span>(<span class="s">&quot;Grendel&quot;</span>, <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs43', 82)" onmouseover="showTip(event, 'fs43', 82)" class="i">troll</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 83)" onmouseover="showTip(event, 'fs17', 83)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> bellows&quot;</span> <span onmouseout="hideTip(event, 'fs43', 84)" onmouseover="showTip(event, 'fs43', 84)" class="i">troll</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs44', 85)" onmouseover="showTip(event, 'fs44', 85)" class="i">Name</span>)

<span onmouseout="hideTip(event, 'fs42', 86)" onmouseover="showTip(event, 'fs42', 86)" class="i">troll</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 87)" onmouseover="showTip(event, 'fs45', 87)" class="f">Talk</span>()

<span class="c">(* Object Expression can push the limit further switching the class to an interface.</span>

<span class="c">We can also untangle the constructor from the type and still avoid any code duplication.</span>
<span class="c">Notice how you could squeeze a Factory pattern for free right there. *)</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs46', 88)" onmouseover="showTip(event, 'fs46', 88)" class="t">IMonster</span> <span class="o">=</span>
    <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs47', 89)" onmouseover="showTip(event, 'fs47', 89)" class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs5', 90)" onmouseover="showTip(event, 'fs5', 90)" class="t">string</span>
    <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs48', 91)" onmouseover="showTip(event, 'fs48', 91)" class="f">Talk</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 92)" onmouseover="showTip(event, 'fs3', 92)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 93)" onmouseover="showTip(event, 'fs3', 93)" class="t">unit</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs49', 94)" onmouseover="showTip(event, 'fs49', 94)" class="f">monster</span> <span onmouseout="hideTip(event, 'fs4', 95)" onmouseover="showTip(event, 'fs4', 95)" class="i">name</span> <span onmouseout="hideTip(event, 'fs50', 96)" onmouseover="showTip(event, 'fs50', 96)" class="f">makeNoise</span> <span class="o">=</span>
    {
        <span class="k">new</span> <span onmouseout="hideTip(event, 'fs46', 97)" onmouseover="showTip(event, 'fs46', 97)" class="t">IMonster</span> <span class="k">with</span>
            <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span class="i">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 98)" onmouseover="showTip(event, 'fs4', 98)" class="i">name</span>
            <span class="k">member</span> <span onmouseout="hideTip(event, 'fs51', 99)" onmouseover="showTip(event, 'fs51', 99)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 100)" onmouseover="showTip(event, 'fs52', 100)" class="f">Talk</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs50', 101)" onmouseover="showTip(event, 'fs50', 101)" class="f">makeNoise</span> <span onmouseout="hideTip(event, 'fs51', 102)" onmouseover="showTip(event, 'fs51', 102)" class="i">x</span>
    }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs53', 103)" onmouseover="showTip(event, 'fs53', 103)" class="i">dragon</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs49', 104)" onmouseover="showTip(event, 'fs49', 104)" class="f">monster</span> <span class="s">&quot;Onyxia&quot;</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs54', 105)" onmouseover="showTip(event, 'fs54', 105)" class="i">d</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 106)" onmouseover="showTip(event, 'fs17', 106)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> roars&quot;</span> <span onmouseout="hideTip(event, 'fs54', 107)" onmouseover="showTip(event, 'fs54', 107)" class="i">d</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs55', 108)" onmouseover="showTip(event, 'fs55', 108)" class="i">Name</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs56', 109)" onmouseover="showTip(event, 'fs56', 109)" class="i">whelp</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs49', 110)" onmouseover="showTip(event, 'fs49', 110)" class="f">monster</span> <span class="s">&quot;&quot;</span> (<span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 111)" onmouseover="showTip(event, 'fs17', 111)" class="f">printfn</span> <span class="s">&quot;The whelp screeches&quot;</span>)

<span onmouseout="hideTip(event, 'fs53', 112)" onmouseover="showTip(event, 'fs53', 112)" class="i">dragon</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 113)" onmouseover="showTip(event, 'fs52', 113)" class="f">Talk</span>()
<span onmouseout="hideTip(event, 'fs56', 114)" onmouseover="showTip(event, 'fs56', 114)" class="i">whelp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 115)" onmouseover="showTip(event, 'fs52', 115)" class="f">Talk</span>()

<span class="c">(* You can see how this is at least as flexible and we have maintained type safety.</span>

<span class="c">Records also allows us to untangle the type and a fixed class *)</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs57', 116)" onmouseover="showTip(event, 'fs57', 116)" class="t">Beast</span> <span class="o">=</span>
    {
        <span onmouseout="hideTip(event, 'fs58', 117)" onmouseover="showTip(event, 'fs58', 117)" class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs5', 118)" onmouseover="showTip(event, 'fs5', 118)" class="t">string</span>
        <span onmouseout="hideTip(event, 'fs59', 119)" onmouseover="showTip(event, 'fs59', 119)" class="i">Talk</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 120)" onmouseover="showTip(event, 'fs3', 120)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 121)" onmouseover="showTip(event, 'fs3', 121)" class="t">unit</span>
    }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 122)" onmouseover="showTip(event, 'fs60', 122)" class="f">beast</span> <span onmouseout="hideTip(event, 'fs4', 123)" onmouseover="showTip(event, 'fs4', 123)" class="i">name</span> <span onmouseout="hideTip(event, 'fs61', 124)" onmouseover="showTip(event, 'fs61', 124)" class="f">makeNoise</span> <span class="o">=</span>
    {
        <span class="i">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 125)" onmouseover="showTip(event, 'fs4', 125)" class="i">name</span>
        <span class="i">Talk</span> <span class="o">=</span> <span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs61', 126)" onmouseover="showTip(event, 'fs61', 126)" class="f">makeNoise</span> <span onmouseout="hideTip(event, 'fs4', 127)" onmouseover="showTip(event, 'fs4', 127)" class="i">name</span>
    }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 128)" onmouseover="showTip(event, 'fs62', 128)" class="f">thunders</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 129)" onmouseover="showTip(event, 'fs17', 129)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> thunders&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 130)" onmouseover="showTip(event, 'fs63', 130)" class="i">hulk</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs60', 131)" onmouseover="showTip(event, 'fs60', 131)" class="f">beast</span> <span class="s">&quot;The Hulk&quot;</span> <span onmouseout="hideTip(event, 'fs62', 132)" onmouseover="showTip(event, 'fs62', 132)" class="f">thunders</span>

<span onmouseout="hideTip(event, 'fs63', 133)" onmouseover="showTip(event, 'fs63', 133)" class="i">hulk</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs59', 134)" onmouseover="showTip(event, 'fs59', 134)" class="i">Talk</span>()

<span class="c">(* At this point you really have to squint to see an OO design pattern as this is much</span>
<span class="c">closer to functional programming.</span>

<span class="c">In fact functional programmers tend not to label this at all since programming with</span>
<span class="c">higher order function is simply called &quot;Programming&quot;.</span>

<span class="c">Some might argue this is still object oriented as an F# Record is implemented as a</span>
<span class="c">class under the cover. There is also the fact that our beast instance closes over our</span>
<span class="c">thunders function.</span>

<span class="c">One should notice that inheritance isn&#39;t possible when using the Record, on the other</span>
<span class="c">hand many good OO programmers would argue that inheritance is misused more often than</span>
<span class="c">not. And being a type as opposed to a class, the record allows for multiple implementations.</span>

<span class="c">Mutation whose bad usage tend to outnumber the good ones 10 to 1 isn&#39;t OO per-se but</span>
<span class="c">is frequently seen as OO&#39;s natural companion. Without making it impossible, Records</span>
<span class="c">thwart you from using mutation which will generally lead you to better designs.</span>

<span class="c">A commonly seen case for mutation gone awry that also shows poor understanding of Design</span>
<span class="c">patterns is when you see a factory that generates instances of a class who&#39;s been endowed</span>
<span class="c">with a parameterless constructor and uses mutable properties to set the instance&#39;s state.</span>
<span class="c">This is an obvious misuse of the pattern as one of the roles of the constructor is to prevent</span>
<span class="c">the creation of instances in an invalid state. *)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">abstract member IMakeNoise.Talk : Animal -&gt; unit<br /><br />Full name: Script.IMakeNoise.Talk</div>
<div class="tip" id="fs2">Multiple items<br />type Animal =<br />&#160;&#160;new : name:string * makeNoise:IMakeNoise -&gt; Animal<br />&#160;&#160;member Talk : unit -&gt; unit<br />&#160;&#160;member Name : string<br /><br />Full name: Script.Animal<br /><br />--------------------<br />new : name:string * makeNoise:IMakeNoise -&gt; Animal</div>
<div class="tip" id="fs3">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs4">val name : string</div>
<div class="tip" id="fs5">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs6">val makeNoise : IMakeNoise</div>
<div class="tip" id="fs7">type IMakeNoise =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Talk : Animal -&gt; unit<br />&#160;&#160;end<br /><br />Full name: Script.IMakeNoise</div>
<div class="tip" id="fs8">val x : Animal</div>
<div class="tip" id="fs9">member Animal.Name : string<br /><br />Full name: Script.Animal.Name</div>
<div class="tip" id="fs10">val this : Animal</div>
<div class="tip" id="fs11">member Animal.Talk : unit -&gt; unit<br /><br />Full name: Script.Animal.Talk</div>
<div class="tip" id="fs12">abstract member IMakeNoise.Talk : Animal -&gt; unit</div>
<div class="tip" id="fs13">Multiple items<br />type FrogNoise =<br />&#160;&#160;interface IMakeNoise<br />&#160;&#160;new : unit -&gt; FrogNoise<br /><br />Full name: Script.FrogNoise<br /><br />--------------------<br />new : unit -&gt; FrogNoise</div>
<div class="tip" id="fs14">val x : FrogNoise</div>
<div class="tip" id="fs15">override FrogNoise.Talk : frog:Animal -&gt; unit<br /><br />Full name: Script.FrogNoise.Talk</div>
<div class="tip" id="fs16">val frog : Animal</div>
<div class="tip" id="fs17">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs18">property Animal.Name: string</div>
<div class="tip" id="fs19">Multiple items<br />type MouseNoise =<br />&#160;&#160;interface IMakeNoise<br />&#160;&#160;new : unit -&gt; MouseNoise<br /><br />Full name: Script.MouseNoise<br /><br />--------------------<br />new : unit -&gt; MouseNoise</div>
<div class="tip" id="fs20">val x : MouseNoise</div>
<div class="tip" id="fs21">override MouseNoise.Talk : Animal -&gt; unit<br /><br />Full name: Script.MouseNoise.Talk</div>
<div class="tip" id="fs22">val frog : Animal<br /><br />Full name: Script.frog</div>
<div class="tip" id="fs23">val mouse : Animal<br /><br />Full name: Script.mouse</div>
<div class="tip" id="fs24">member Animal.Talk : unit -&gt; unit</div>
<div class="tip" id="fs25">Multiple items<br />type IMakeNoise =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Talk : Animal -&gt; unit<br />&#160;&#160;end<br /><br />Full name: Script.IMakeNoise<br /><br />--------------------<br />type IMakeNoise&lt;&#39;T&gt; =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Talk : &#39;T -&gt; unit<br />&#160;&#160;end<br /><br />Full name: Script.IMakeNoise&lt;_&gt;</div>
<div class="tip" id="fs26">abstract member IMakeNoise.Talk : &#39;T -&gt; unit<br /><br />Full name: Script.IMakeNoise`1.Talk</div>
<div class="tip" id="fs27">Multiple items<br />type Creature =<br />&#160;&#160;new : name:string * makeNoise:IMakeNoise&lt;Creature&gt; -&gt; Creature<br />&#160;&#160;member Talk : unit -&gt; unit<br />&#160;&#160;member Name : string<br /><br />Full name: Script.Creature<br /><br />--------------------<br />new : name:string * makeNoise:IMakeNoise&lt;Creature&gt; -&gt; Creature</div>
<div class="tip" id="fs28">val makeNoise : IMakeNoise&lt;Creature&gt;</div>
<div class="tip" id="fs29">member Creature.Name : string<br /><br />Full name: Script.Creature.Name</div>
<div class="tip" id="fs30">val this : Creature</div>
<div class="tip" id="fs31">member Creature.Talk : unit -&gt; unit<br /><br />Full name: Script.Creature.Talk</div>
<div class="tip" id="fs32">abstract member IMakeNoise.Talk : &#39;T -&gt; unit</div>
<div class="tip" id="fs33">val horse : Creature<br /><br />Full name: Script.horse</div>
<div class="tip" id="fs34">val horse : Creature</div>
<div class="tip" id="fs35">property Creature.Name: string</div>
<div class="tip" id="fs36">member Creature.Talk : unit -&gt; unit</div>
<div class="tip" id="fs37">Multiple items<br />type Monster =<br />&#160;&#160;new : name:string * makeNoise:(Monster -&gt; unit) -&gt; Monster<br />&#160;&#160;member Talk : unit -&gt; unit<br />&#160;&#160;member Name : string<br /><br />Full name: Script.Monster<br /><br />--------------------<br />new : name:string * makeNoise:(Monster -&gt; unit) -&gt; Monster</div>
<div class="tip" id="fs38">val makeNoise : (Monster -&gt; unit)</div>
<div class="tip" id="fs39">member Monster.Name : string<br /><br />Full name: Script.Monster.Name</div>
<div class="tip" id="fs40">val x : Monster</div>
<div class="tip" id="fs41">member Monster.Talk : unit -&gt; unit<br /><br />Full name: Script.Monster.Talk</div>
<div class="tip" id="fs42">val troll : Monster<br /><br />Full name: Script.troll</div>
<div class="tip" id="fs43">val troll : Monster</div>
<div class="tip" id="fs44">property Monster.Name: string</div>
<div class="tip" id="fs45">member Monster.Talk : unit -&gt; unit</div>
<div class="tip" id="fs46">type IMonster =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Talk : unit -&gt; unit<br />&#160;&#160;&#160;&#160;abstract member Name : string<br />&#160;&#160;end<br /><br />Full name: Script.IMonster</div>
<div class="tip" id="fs47">abstract member IMonster.Name : string<br /><br />Full name: Script.IMonster.Name</div>
<div class="tip" id="fs48">abstract member IMonster.Talk : unit -&gt; unit<br /><br />Full name: Script.IMonster.Talk</div>
<div class="tip" id="fs49">val monster : name:string -&gt; makeNoise:(IMonster -&gt; unit) -&gt; IMonster<br /><br />Full name: Script.monster</div>
<div class="tip" id="fs50">val makeNoise : (IMonster -&gt; unit)</div>
<div class="tip" id="fs51">val x : IMonster</div>
<div class="tip" id="fs52">abstract member IMonster.Talk : unit -&gt; unit</div>
<div class="tip" id="fs53">val dragon : IMonster<br /><br />Full name: Script.dragon</div>
<div class="tip" id="fs54">val d : IMonster</div>
<div class="tip" id="fs55">property IMonster.Name: string</div>
<div class="tip" id="fs56">val whelp : IMonster<br /><br />Full name: Script.whelp</div>
<div class="tip" id="fs57">type Beast =<br />&#160;&#160;{Name: string;<br />&#160;&#160;&#160;Talk: unit -&gt; unit;}<br /><br />Full name: Script.Beast</div>
<div class="tip" id="fs58">Beast.Name: string</div>
<div class="tip" id="fs59">Beast.Talk: unit -&gt; unit</div>
<div class="tip" id="fs60">val beast : name:string -&gt; makeNoise:(string -&gt; unit) -&gt; Beast<br /><br />Full name: Script.beast</div>
<div class="tip" id="fs61">val makeNoise : (string -&gt; unit)</div>
<div class="tip" id="fs62">val thunders : (string -&gt; unit)<br /><br />Full name: Script.thunders</div>
<div class="tip" id="fs63">val hulk : Beast<br /><br />Full name: Script.hulk</div>

