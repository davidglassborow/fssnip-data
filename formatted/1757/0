<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">Threading</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="i">Threading</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">Tasks</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="t">Async</span> <span class="k">with</span>

    <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="f">RunSynchronously2</span>(<span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">workflow</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs4', 10)" onmouseover="showTip(event, 'fs4', 10)" class="t">Async</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="i">timeout</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 12)" onmouseover="showTip(event, 'fs8', 12)" class="t">int</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs9', 13)" onmouseover="showTip(event, 'fs9', 13)" class="i">cancellationToken</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="t">CancellationToken</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="i">tcs</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="t">TaskCompletionSource</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>()
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs7', 17)" onmouseover="showTip(event, 'fs7', 17)" class="i">timeout</span> <span class="k">with</span>
        | <span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="p">Some</span> <span class="n">0</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="f">raise</span> <span class="o">&lt;|</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="t">TimeoutException</span>()
        | <span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs16', 22)" onmouseover="showTip(event, 'fs16', 22)" class="i">t</span> <span class="k">when</span> <span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="i">t</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 24)" onmouseover="showTip(event, 'fs17', 24)" class="f">invalidArg</span> <span class="s">&quot;timeout&quot;</span> <span class="s">&quot;must be positive.&quot;</span>
        | <span onmouseout="hideTip(event, 'fs13', 25)" onmouseover="showTip(event, 'fs13', 25)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs16', 26)" onmouseover="showTip(event, 'fs16', 26)" class="i">t</span> <span class="k">-&gt;</span> <span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 27)" onmouseover="showTip(event, 'fs18', 27)" class="i">timer</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs19', 28)" onmouseover="showTip(event, 'fs19', 28)" class="t">Timer</span>((<span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 29)" onmouseover="showTip(event, 'fs20', 29)" class="f">ignore</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs11', 30)" onmouseover="showTip(event, 'fs11', 30)" class="i">tcs</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 31)" onmouseover="showTip(event, 'fs21', 31)" class="f">TrySetException</span>(<span class="k">new</span> <span onmouseout="hideTip(event, 'fs15', 32)" onmouseover="showTip(event, 'fs15', 32)" class="t">TimeoutException</span>())), <span class="k">null</span>, <span onmouseout="hideTip(event, 'fs16', 33)" onmouseover="showTip(event, 'fs16', 33)" class="i">t</span>, <span onmouseout="hideTip(event, 'fs22', 34)" onmouseover="showTip(event, 'fs22', 34)" class="t">Timeout</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 35)" onmouseover="showTip(event, 'fs23', 35)" class="i">Infinite</span>) <span class="k">in</span> ()
        | <span onmouseout="hideTip(event, 'fs24', 36)" onmouseover="showTip(event, 'fs24', 36)" class="p">None</span> <span class="k">-&gt;</span> ()

        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 37)" onmouseover="showTip(event, 'fs25', 37)" class="f">start</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 38)" onmouseover="showTip(event, 'fs4', 38)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 39)" onmouseover="showTip(event, 'fs26', 39)" class="f">StartWithContinuations</span>(<span onmouseout="hideTip(event, 'fs6', 40)" onmouseover="showTip(event, 'fs6', 40)" class="i">workflow</span>, 
                                                    <span onmouseout="hideTip(event, 'fs20', 41)" onmouseover="showTip(event, 'fs20', 41)" class="f">ignore</span> <span class="o">&lt;&lt;</span> <span onmouseout="hideTip(event, 'fs11', 42)" onmouseover="showTip(event, 'fs11', 42)" class="i">tcs</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 43)" onmouseover="showTip(event, 'fs27', 43)" class="f">TrySetResult</span>,
                                                    <span onmouseout="hideTip(event, 'fs20', 44)" onmouseover="showTip(event, 'fs20', 44)" class="f">ignore</span> <span class="o">&lt;&lt;</span> <span onmouseout="hideTip(event, 'fs11', 45)" onmouseover="showTip(event, 'fs11', 45)" class="i">tcs</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 46)" onmouseover="showTip(event, 'fs21', 46)" class="f">TrySetException</span>,
                                                    (<span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 47)" onmouseover="showTip(event, 'fs20', 47)" class="f">ignore</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs11', 48)" onmouseover="showTip(event, 'fs11', 48)" class="i">tcs</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 49)" onmouseover="showTip(event, 'fs28', 49)" class="f">TrySetCanceled</span> ()),
                                                    <span class="o">?</span><span onmouseout="hideTip(event, 'fs9', 50)" onmouseover="showTip(event, 'fs9', 50)" class="i">cancellationToken</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 51)" onmouseover="showTip(event, 'fs9', 51)" class="i">cancellationToken</span>)

        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs29', 52)" onmouseover="showTip(event, 'fs29', 52)" class="f">not</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs30', 53)" onmouseover="showTip(event, 'fs30', 53)" class="t">ThreadPool</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 54)" onmouseover="showTip(event, 'fs31', 54)" class="f">QueueUserWorkItem</span>(<span class="k">new</span> <span onmouseout="hideTip(event, 'fs32', 55)" onmouseover="showTip(event, 'fs32', 55)" class="t">WaitCallback</span>(<span onmouseout="hideTip(event, 'fs25', 56)" onmouseover="showTip(event, 'fs25', 56)" class="f">start</span>)) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs33', 57)" onmouseover="showTip(event, 'fs33', 57)" class="f">invalidOp</span> <span class="s">&quot;Could not queue to thread pool.&quot;</span> 
        <span class="k">try</span> <span onmouseout="hideTip(event, 'fs11', 58)" onmouseover="showTip(event, 'fs11', 58)" class="i">tcs</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 59)" onmouseover="showTip(event, 'fs34', 59)" class="i">Task</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 60)" onmouseover="showTip(event, 'fs35', 60)" class="i">Result</span> 
        <span class="k">with</span> <span class="o">:?</span> <span onmouseout="hideTip(event, 'fs36', 61)" onmouseover="showTip(event, 'fs36', 61)" class="t">AggregateException</span> <span class="k">as</span> <span onmouseout="hideTip(event, 'fs37', 62)" onmouseover="showTip(event, 'fs37', 62)" class="i">e</span> <span class="k">when</span> <span onmouseout="hideTip(event, 'fs37', 63)" onmouseover="showTip(event, 'fs37', 63)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 64)" onmouseover="showTip(event, 'fs38', 64)" class="i">InnerExceptions</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 65)" onmouseover="showTip(event, 'fs39', 65)" class="i">Count</span> <span class="o">=</span> <span class="n">1</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs14', 66)" onmouseover="showTip(event, 'fs14', 66)" class="f">raise</span> <span onmouseout="hideTip(event, 'fs37', 67)" onmouseover="showTip(event, 'fs37', 67)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 68)" onmouseover="showTip(event, 'fs38', 68)" class="i">InnerExceptions</span><span class="o">.</span>[<span class="n">0</span>]
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Threading</div>
<div class="tip" id="fs3">namespace System.Threading.Tasks</div>
<div class="tip" id="fs4">Multiple items<br />type Async<br />static member AsBeginEnd : computation:(&#39;Arg -&gt; Async&lt;&#39;T&gt;) -&gt; (&#39;Arg * AsyncCallback * obj -&gt; IAsyncResult) * (IAsyncResult -&gt; &#39;T) * (IAsyncResult -&gt; unit)<br />static member AwaitEvent : event:IEvent&lt;&#39;Del,&#39;T&gt; * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt; (requires delegate and &#39;Del :&gt; Delegate)<br />static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member AwaitTask : task:Task&lt;&#39;T&gt; -&gt; Async&lt;&#39;T&gt;<br />static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member CancelDefaultToken : unit -&gt; unit<br />static member Catch : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;Choice&lt;&#39;T,exn&gt;&gt;<br />static member FromBeginEnd : beginAction:(AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg:&#39;Arg1 * beginAction:(&#39;Arg1 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * beginAction:(&#39;Arg1 * &#39;Arg2 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * arg3:&#39;Arg3 * beginAction:(&#39;Arg1 * &#39;Arg2 * &#39;Arg3 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromContinuations : callback:((&#39;T -&gt; unit) * (exn -&gt; unit) * (OperationCanceledException -&gt; unit) -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member Ignore : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;<br />static member OnCancel : interruption:(unit -&gt; unit) -&gt; Async&lt;IDisposable&gt;<br />static member Parallel : computations:seq&lt;Async&lt;&#39;T&gt;&gt; -&gt; Async&lt;&#39;T []&gt;<br />static member RunSynchronously : computation:Async&lt;&#39;T&gt; * ?timeout:int * ?cancellationToken:CancellationToken -&gt; &#39;T<br />static member Sleep : millisecondsDueTime:int -&gt; Async&lt;unit&gt;<br />static member Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&gt; Task&lt;&#39;T&gt;<br />static member StartChild : computation:Async&lt;&#39;T&gt; * ?millisecondsTimeout:int -&gt; Async&lt;Async&lt;&#39;T&gt;&gt;<br />static member StartChildAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions -&gt; Async&lt;Task&lt;&#39;T&gt;&gt;<br />static member StartImmediate : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartWithContinuations : computation:Async&lt;&#39;T&gt; * continuation:(&#39;T -&gt; unit) * exceptionContinuation:(exn -&gt; unit) * cancellationContinuation:(OperationCanceledException -&gt; unit) * ?cancellationToken:CancellationToken -&gt; unit<br />static member SwitchToContext : syncContext:SynchronizationContext -&gt; Async&lt;unit&gt;<br />static member SwitchToNewThread : unit -&gt; Async&lt;unit&gt;<br />static member SwitchToThreadPool : unit -&gt; Async&lt;unit&gt;<br />static member TryCancelled : computation:Async&lt;&#39;T&gt; * compensation:(OperationCanceledException -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member CancellationToken : Async&lt;CancellationToken&gt;<br />static member DefaultCancellationToken : CancellationToken<br /><br />Full name: Microsoft.FSharp.Control.Async<br /><br />--------------------<br />type Async&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Async&lt;_&gt;</div>
<div class="tip" id="fs5">static member Async.RunSynchronously2 : workflow:Async&lt;&#39;T&gt; * ?timeout:int * ?cancellationToken:CancellationToken -&gt; &#39;T<br /><br />Full name: Script.RunSynchronously2</div>
<div class="tip" id="fs6">val workflow : Async&lt;&#39;T&gt;</div>
<div class="tip" id="fs7">val timeout : int option</div>
<div class="tip" id="fs8">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs9">val cancellationToken : CancellationToken option</div>
<div class="tip" id="fs10">Multiple items<br />type CancellationToken =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;new : canceled:bool -&gt; CancellationToken<br />&#160;&#160;&#160;&#160;member CanBeCanceled : bool<br />&#160;&#160;&#160;&#160;member Equals : other:CancellationToken -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member IsCancellationRequested : bool<br />&#160;&#160;&#160;&#160;member Register : callback:Action -&gt; CancellationTokenRegistration + 3 overloads<br />&#160;&#160;&#160;&#160;member ThrowIfCancellationRequested : unit -&gt; unit<br />&#160;&#160;&#160;&#160;member WaitHandle : WaitHandle<br />&#160;&#160;&#160;&#160;static member None : CancellationToken<br />&#160;&#160;end<br /><br />Full name: System.Threading.CancellationToken<br /><br />--------------------<br />CancellationToken()<br />CancellationToken(canceled: bool) : unit</div>
<div class="tip" id="fs11">val tcs : TaskCompletionSource&lt;&#39;T&gt;</div>
<div class="tip" id="fs12">Multiple items<br />type TaskCompletionSource&lt;&#39;TResult&gt; =<br />&#160;&#160;new : unit -&gt; TaskCompletionSource&lt;&#39;TResult&gt; + 3 overloads<br />&#160;&#160;member SetCanceled : unit -&gt; unit<br />&#160;&#160;member SetException : exception:Exception -&gt; unit + 1 overload<br />&#160;&#160;member SetResult : result:&#39;TResult -&gt; unit<br />&#160;&#160;member Task : Task&lt;&#39;TResult&gt;<br />&#160;&#160;member TrySetCanceled : unit -&gt; bool<br />&#160;&#160;member TrySetException : exception:Exception -&gt; bool + 1 overload<br />&#160;&#160;member TrySetResult : result:&#39;TResult -&gt; bool<br /><br />Full name: System.Threading.Tasks.TaskCompletionSource&lt;_&gt;<br /><br />--------------------<br />TaskCompletionSource() : unit<br />TaskCompletionSource(creationOptions: TaskCreationOptions) : unit<br />TaskCompletionSource(state: obj) : unit<br />TaskCompletionSource(state: obj, creationOptions: TaskCreationOptions) : unit</div>
<div class="tip" id="fs13">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs14">val raise : exn:Exception -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.raise</div>
<div class="tip" id="fs15">Multiple items<br />type TimeoutException =<br />&#160;&#160;inherit SystemException<br />&#160;&#160;new : unit -&gt; TimeoutException + 2 overloads<br /><br />Full name: System.TimeoutException<br /><br />--------------------<br />TimeoutException() : unit<br />TimeoutException(message: string) : unit<br />TimeoutException(message: string, innerException: exn) : unit</div>
<div class="tip" id="fs16">val t : int</div>
<div class="tip" id="fs17">val invalidArg : argumentName:string -&gt; message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.invalidArg</div>
<div class="tip" id="fs18">val timer : Timer</div>
<div class="tip" id="fs19">Multiple items<br />type Timer =<br />&#160;&#160;inherit MarshalByRefObject<br />&#160;&#160;new : callback:TimerCallback -&gt; Timer + 4 overloads<br />&#160;&#160;member Change : dueTime:int * period:int -&gt; bool + 3 overloads<br />&#160;&#160;member Dispose : unit -&gt; unit + 1 overload<br /><br />Full name: System.Threading.Timer<br /><br />--------------------<br />Timer(callback: TimerCallback) : unit<br />Timer(callback: TimerCallback, state: obj, dueTime: int, period: int) : unit<br />Timer(callback: TimerCallback, state: obj, dueTime: TimeSpan, period: TimeSpan) : unit<br />Timer(callback: TimerCallback, state: obj, dueTime: uint32, period: uint32) : unit<br />Timer(callback: TimerCallback, state: obj, dueTime: int64, period: int64) : unit</div>
<div class="tip" id="fs20">val ignore : value:&#39;T -&gt; unit<br /><br />Full name: Microsoft.FSharp.Core.Operators.ignore</div>
<div class="tip" id="fs21">TaskCompletionSource.TrySetException(exceptions: Collections.Generic.IEnumerable&lt;exn&gt;) : bool<br />TaskCompletionSource.TrySetException(exception: exn) : bool</div>
<div class="tip" id="fs22">type Timeout =<br />&#160;&#160;static val Infinite : int<br /><br />Full name: System.Threading.Timeout</div>
<div class="tip" id="fs23">field Timeout.Infinite = -1</div>
<div class="tip" id="fs24">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs25">val start : (&#39;a -&gt; unit)</div>
<div class="tip" id="fs26">static member Async.StartWithContinuations : computation:Async&lt;&#39;T&gt; * continuation:(&#39;T -&gt; unit) * exceptionContinuation:(exn -&gt; unit) * cancellationContinuation:(OperationCanceledException -&gt; unit) * ?cancellationToken:CancellationToken -&gt; unit</div>
<div class="tip" id="fs27">TaskCompletionSource.TrySetResult(result: &#39;T) : bool</div>
<div class="tip" id="fs28">TaskCompletionSource.TrySetCanceled() : bool</div>
<div class="tip" id="fs29">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs30">type ThreadPool =<br />&#160;&#160;static member BindHandle : osHandle:nativeint -&gt; bool + 1 overload<br />&#160;&#160;static member GetAvailableThreads : workerThreads:int * completionPortThreads:int -&gt; unit<br />&#160;&#160;static member GetMaxThreads : workerThreads:int * completionPortThreads:int -&gt; unit<br />&#160;&#160;static member GetMinThreads : workerThreads:int * completionPortThreads:int -&gt; unit<br />&#160;&#160;static member QueueUserWorkItem : callBack:WaitCallback -&gt; bool + 1 overload<br />&#160;&#160;static member RegisterWaitForSingleObject : waitObject:WaitHandle * callBack:WaitOrTimerCallback * state:obj * millisecondsTimeOutInterval:uint32 * executeOnlyOnce:bool -&gt; RegisteredWaitHandle + 3 overloads<br />&#160;&#160;static member SetMaxThreads : workerThreads:int * completionPortThreads:int -&gt; bool<br />&#160;&#160;static member SetMinThreads : workerThreads:int * completionPortThreads:int -&gt; bool<br />&#160;&#160;static member UnsafeQueueNativeOverlapped : overlapped:NativeOverlapped -&gt; bool<br />&#160;&#160;static member UnsafeQueueUserWorkItem : callBack:WaitCallback * state:obj -&gt; bool<br />&#160;&#160;...<br /><br />Full name: System.Threading.ThreadPool</div>
<div class="tip" id="fs31">ThreadPool.QueueUserWorkItem(callBack: WaitCallback) : bool<br />ThreadPool.QueueUserWorkItem(callBack: WaitCallback, state: obj) : bool</div>
<div class="tip" id="fs32">type WaitCallback =<br />&#160;&#160;delegate of obj -&gt; unit<br /><br />Full name: System.Threading.WaitCallback</div>
<div class="tip" id="fs33">val invalidOp : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.invalidOp</div>
<div class="tip" id="fs34">property TaskCompletionSource.Task: Task&lt;&#39;T&gt;</div>
<div class="tip" id="fs35">property Task.Result: &#39;T</div>
<div class="tip" id="fs36">Multiple items<br />type AggregateException =<br />&#160;&#160;inherit Exception<br />&#160;&#160;new : unit -&gt; AggregateException + 6 overloads<br />&#160;&#160;member Flatten : unit -&gt; AggregateException<br />&#160;&#160;member GetBaseException : unit -&gt; Exception<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;member Handle : predicate:Func&lt;Exception, bool&gt; -&gt; unit<br />&#160;&#160;member InnerExceptions : ReadOnlyCollection&lt;Exception&gt;<br />&#160;&#160;member ToString : unit -&gt; string<br /><br />Full name: System.AggregateException<br /><br />--------------------<br />AggregateException() : unit<br />AggregateException(message: string) : unit<br />AggregateException(innerExceptions: Collections.Generic.IEnumerable&lt;exn&gt;) : unit<br />AggregateException([&lt;ParamArray&gt;] innerExceptions: exn []) : unit<br />AggregateException(message: string, innerException: exn) : unit<br />AggregateException(message: string, innerExceptions: Collections.Generic.IEnumerable&lt;exn&gt;) : unit<br />AggregateException(message: string, [&lt;ParamArray&gt;] innerExceptions: exn []) : unit</div>
<div class="tip" id="fs37">val e : AggregateException</div>
<div class="tip" id="fs38">property AggregateException.InnerExceptions: Collections.ObjectModel.ReadOnlyCollection&lt;exn&gt;</div>
<div class="tip" id="fs39">property Collections.ObjectModel.ReadOnlyCollection.Count: int</div>

