<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// A reader monad is a computation that takes a state &#39;S and produces a value &#39;T  </span>
<span class="c">///</span>
<span class="c">/// In the usual reader monad, we would have `unit : T -&gt; Reader&lt;S, T&gt;` and</span>
<span class="c">/// `bind : (T1 -&gt; Reader&lt;S, T2&gt;) -&gt; Reader&lt;S, T1&gt; -&gt; Reader&lt;S, T2&gt;` but</span>
<span class="c">/// we&#39;re going to do things a bit differently here and the state we read</span>
<span class="c">/// is going to be composed as a tuple of things that are read by the individual</span>
<span class="c">/// computations composed by bind.</span>
<span class="k">type</span> <span class="t">Reader</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">S</span>, <span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="p">Reader</span> <span class="k">of</span> (<span class="o">&#39;</span><span class="i">S</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">T</span>)

<span class="c">/// The unit operation does not read any state and so it produces `Reader&lt;unit, T&gt;`</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">unit</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="p">Reader</span>(<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="i">v</span>)

<span class="c">/// The bind operation takes `Reader&lt;S1, T1&gt;` and a function that reads another</span>
<span class="c">/// part of the state `T1 -&gt; Reader&lt;S2, T2&gt;` and produces a reader that reads </span>
<span class="c">/// both state values (in a tuple) so that&#39;s `Reader&lt;S1*S2, T2&gt;`</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="f">bind</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="p">Reader</span>(<span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="f">g</span>)) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 10)" onmouseover="showTip(event, 'fs1', 10)" class="p">Reader</span>(<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="i">a</span>, <span onmouseout="hideTip(event, 'fs8', 12)" onmouseover="showTip(event, 'fs8', 12)" class="i">b</span>) <span class="k">-&gt;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 13)" onmouseover="showTip(event, 'fs3', 13)" class="i">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 14)" onmouseover="showTip(event, 'fs6', 14)" class="f">g</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="i">a</span>
  <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs1', 16)" onmouseover="showTip(event, 'fs1', 16)" class="p">Reader</span> <span onmouseout="hideTip(event, 'fs9', 17)" onmouseover="showTip(event, 'fs9', 17)" class="f">h</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 18)" onmouseover="showTip(event, 'fs5', 18)" class="f">f</span> <span onmouseout="hideTip(event, 'fs3', 19)" onmouseover="showTip(event, 'fs3', 19)" class="i">v</span>
  <span onmouseout="hideTip(event, 'fs9', 20)" onmouseover="showTip(event, 'fs9', 20)" class="f">h</span> <span onmouseout="hideTip(event, 'fs8', 21)" onmouseover="showTip(event, 'fs8', 21)" class="i">b</span>)

<span class="c">/// Defines the computation builder - add `Delay` so that we can delay things!</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs10', 22)" onmouseover="showTip(event, 'fs10', 22)" class="t">ReaderBuilder</span>() <span class="o">=</span> 
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs11', 23)" onmouseover="showTip(event, 'fs11', 23)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="f">Return</span>(<span onmouseout="hideTip(event, 'fs13', 25)" onmouseover="showTip(event, 'fs13', 25)" class="i">v</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 26)" onmouseover="showTip(event, 'fs2', 26)" class="f">unit</span> <span onmouseout="hideTip(event, 'fs13', 27)" onmouseover="showTip(event, 'fs13', 27)" class="i">v</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs11', 28)" onmouseover="showTip(event, 'fs11', 28)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 29)" onmouseover="showTip(event, 'fs14', 29)" class="f">Bind</span>(<span onmouseout="hideTip(event, 'fs15', 30)" onmouseover="showTip(event, 'fs15', 30)" class="i">v</span>, <span onmouseout="hideTip(event, 'fs16', 31)" onmouseover="showTip(event, 'fs16', 31)" class="f">f</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 32)" onmouseover="showTip(event, 'fs4', 32)" class="f">bind</span> <span onmouseout="hideTip(event, 'fs16', 33)" onmouseover="showTip(event, 'fs16', 33)" class="f">f</span> <span onmouseout="hideTip(event, 'fs15', 34)" onmouseover="showTip(event, 'fs15', 34)" class="i">v</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs11', 35)" onmouseover="showTip(event, 'fs11', 35)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 36)" onmouseover="showTip(event, 'fs17', 36)" class="f">Delay</span>(<span onmouseout="hideTip(event, 'fs18', 37)" onmouseover="showTip(event, 'fs18', 37)" class="f">f</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 38)" onmouseover="showTip(event, 'fs1', 38)" class="p">Reader</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs19', 39)" onmouseover="showTip(event, 'fs19', 39)" class="i">s</span> <span class="k">-&gt;</span> 
    <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs1', 40)" onmouseover="showTip(event, 'fs1', 40)" class="p">Reader</span> <span onmouseout="hideTip(event, 'fs20', 41)" onmouseover="showTip(event, 'fs20', 41)" class="f">h</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 42)" onmouseover="showTip(event, 'fs18', 42)" class="f">f</span> ()
    <span onmouseout="hideTip(event, 'fs20', 43)" onmouseover="showTip(event, 'fs20', 43)" class="f">h</span> <span onmouseout="hideTip(event, 'fs19', 44)" onmouseover="showTip(event, 'fs19', 44)" class="i">s</span> )

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 45)" onmouseover="showTip(event, 'fs21', 45)" class="i">reader</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 46)" onmouseover="showTip(event, 'fs10', 46)" class="t">ReaderBuilder</span>()

<span class="c">/// A function that takes a computation written as `Reader&lt;S, T&gt;`. It builds a new</span>
<span class="c">/// computation of type `Reader&lt;option&lt;T&gt;*S, T&gt;` that attempts to read a cached result</span>
<span class="c">/// of type T from the state - if it is there, we just return it, otherwise we run</span>
<span class="c">/// the computation provided as an argument to actually compute the value.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 47)" onmouseover="showTip(event, 'fs22', 47)" class="f">cache</span> (<span onmouseout="hideTip(event, 'fs1', 48)" onmouseover="showTip(event, 'fs1', 48)" class="p">Reader</span>(<span onmouseout="hideTip(event, 'fs23', 49)" onmouseover="showTip(event, 'fs23', 49)" class="f">f</span>)) <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs1', 50)" onmouseover="showTip(event, 'fs1', 50)" class="p">Reader</span>(<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs24', 51)" onmouseover="showTip(event, 'fs24', 51)" class="i">v1</span>, <span onmouseout="hideTip(event, 'fs25', 52)" onmouseover="showTip(event, 'fs25', 52)" class="i">v2</span>) <span class="k">-&gt;</span>
  <span class="k">match</span> <span onmouseout="hideTip(event, 'fs24', 53)" onmouseover="showTip(event, 'fs24', 53)" class="i">v1</span> <span class="k">with</span>
  | <span onmouseout="hideTip(event, 'fs26', 54)" onmouseover="showTip(event, 'fs26', 54)" class="p">None</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs23', 55)" onmouseover="showTip(event, 'fs23', 55)" class="f">f</span> <span onmouseout="hideTip(event, 'fs25', 56)" onmouseover="showTip(event, 'fs25', 56)" class="i">v2</span>
  | <span onmouseout="hideTip(event, 'fs27', 57)" onmouseover="showTip(event, 'fs27', 57)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs28', 58)" onmouseover="showTip(event, 'fs28', 58)" class="i">v</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs28', 59)" onmouseover="showTip(event, 'fs28', 59)" class="i">v</span>))

<span class="c">/// Returns `n` and prints string to log what&#39;s happening</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 60)" onmouseover="showTip(event, 'fs29', 60)" class="f">read</span> <span onmouseout="hideTip(event, 'fs30', 61)" onmouseover="showTip(event, 'fs30', 61)" class="i">s</span> <span onmouseout="hideTip(event, 'fs31', 62)" onmouseover="showTip(event, 'fs31', 62)" class="i">n</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs21', 63)" onmouseover="showTip(event, 'fs21', 63)" class="i">reader</span> {
  <span onmouseout="hideTip(event, 'fs32', 64)" onmouseover="showTip(event, 'fs32', 64)" class="f">printfn</span> <span class="s">&quot;Reading: </span><span class="pf">%s</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs30', 65)" onmouseover="showTip(event, 'fs30', 65)" class="i">s</span> 
  <span class="k">return</span> <span onmouseout="hideTip(event, 'fs31', 66)" onmouseover="showTip(event, 'fs31', 66)" class="i">n</span> }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 67)" onmouseover="showTip(event, 'fs33', 67)" class="i">m</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs21', 68)" onmouseover="showTip(event, 'fs21', 68)" class="i">reader</span> { 
  <span class="c">// The following two are only run if the value is not already available</span>
  <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs34', 69)" onmouseover="showTip(event, 'fs34', 69)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 70)" onmouseover="showTip(event, 'fs22', 70)" class="f">cache</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs29', 71)" onmouseover="showTip(event, 'fs29', 71)" class="f">read</span> <span class="s">&quot;A&quot;</span> <span class="n">1</span>
  <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs35', 72)" onmouseover="showTip(event, 'fs35', 72)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 73)" onmouseover="showTip(event, 'fs22', 73)" class="f">cache</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs29', 74)" onmouseover="showTip(event, 'fs29', 74)" class="f">read</span> <span class="s">&quot;B&quot;</span> <span class="n">2</span>
  <span class="c">// The following read is done always (not accesses the state)</span>
  <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs36', 75)" onmouseover="showTip(event, 'fs36', 75)" class="i">c</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs29', 76)" onmouseover="showTip(event, 'fs29', 76)" class="f">read</span> <span class="s">&quot;C&quot;</span> <span class="n">3</span>
  <span class="k">return</span> <span onmouseout="hideTip(event, 'fs34', 77)" onmouseover="showTip(event, 'fs34', 77)" class="i">a</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs35', 78)" onmouseover="showTip(event, 'fs35', 78)" class="i">b</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs36', 79)" onmouseover="showTip(event, 'fs36', 79)" class="i">c</span>
}

<span class="k">let</span> (<span onmouseout="hideTip(event, 'fs1', 80)" onmouseover="showTip(event, 'fs1', 80)" class="p">Reader</span> <span onmouseout="hideTip(event, 'fs37', 81)" onmouseover="showTip(event, 'fs37', 81)" class="f">f</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs33', 82)" onmouseover="showTip(event, 'fs33', 82)" class="i">m</span> 
<span onmouseout="hideTip(event, 'fs37', 83)" onmouseover="showTip(event, 'fs37', 83)" class="f">f</span> ((<span onmouseout="hideTip(event, 'fs26', 84)" onmouseover="showTip(event, 'fs26', 84)" class="p">None</span>, ()), ((<span onmouseout="hideTip(event, 'fs26', 85)" onmouseover="showTip(event, 'fs26', 85)" class="p">None</span>, ()), ((), ())))
<span onmouseout="hideTip(event, 'fs37', 86)" onmouseover="showTip(event, 'fs37', 86)" class="f">f</span> ((<span onmouseout="hideTip(event, 'fs27', 87)" onmouseover="showTip(event, 'fs27', 87)" class="p">Some</span> <span class="n">1</span>, ()), ((<span onmouseout="hideTip(event, 'fs26', 88)" onmouseover="showTip(event, 'fs26', 88)" class="p">None</span>, ()), ((), ())))
<span onmouseout="hideTip(event, 'fs37', 89)" onmouseover="showTip(event, 'fs37', 89)" class="f">f</span> ((<span onmouseout="hideTip(event, 'fs26', 90)" onmouseover="showTip(event, 'fs26', 90)" class="p">None</span>, ()), ((<span onmouseout="hideTip(event, 'fs27', 91)" onmouseover="showTip(event, 'fs27', 91)" class="p">Some</span> <span class="n">2</span>, ()), ((), ())))
<span onmouseout="hideTip(event, 'fs37', 92)" onmouseover="showTip(event, 'fs37', 92)" class="f">f</span> ((<span onmouseout="hideTip(event, 'fs27', 93)" onmouseover="showTip(event, 'fs27', 93)" class="p">Some</span> <span class="n">1</span>, ()), ((<span onmouseout="hideTip(event, 'fs27', 94)" onmouseover="showTip(event, 'fs27', 94)" class="p">Some</span> <span class="n">2</span>, ()), ((), ())))
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />union case Reader.Reader: (&#39;S -&gt; &#39;T) -&gt; Reader&lt;&#39;S,&#39;T&gt;<br /><br />--------------------<br />type Reader&lt;&#39;S,&#39;T&gt; = | Reader of (&#39;S -&gt; &#39;T)<br /><br />Full name: Script.Reader&lt;_,_&gt;<br /><em><br /><br />&#160;A reader monad is a computation that takes a state &#39;S and produces a value &#39;T  <br /><br />&#160;In the usual reader monad, we would have `unit : T -&gt; Reader&lt;S, T&gt;` and<br />&#160;`bind : (T1 -&gt; Reader&lt;S, T2&gt;) -&gt; Reader&lt;S, T1&gt; -&gt; Reader&lt;S, T2&gt;` but<br />&#160;we&#39;re going to do things a bit differently here and the state we read<br />&#160;is going to be composed as a tuple of things that are read by the individual<br />&#160;computations composed by bind.</em></div>
<div class="tip" id="fs2">Multiple items<br />val unit : v:&#39;a -&gt; Reader&lt;unit,&#39;a&gt;<br /><br />Full name: Script.unit<br /><em><br /><br />&#160;The unit operation does not read any state and so it produces `Reader&lt;unit, T&gt;`</em><br /><br />--------------------<br />type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs3">val v : &#39;a</div>
<div class="tip" id="fs4">val bind : f:(&#39;a -&gt; Reader&lt;&#39;b,&#39;c&gt;) -&gt; Reader&lt;&#39;d,&#39;a&gt; -&gt; Reader&lt;(&#39;d * &#39;b),&#39;c&gt;<br /><br />Full name: Script.bind<br /><em><br /><br />&#160;The bind operation takes `Reader&lt;S1, T1&gt;` and a function that reads another<br />&#160;part of the state `T1 -&gt; Reader&lt;S2, T2&gt;` and produces a reader that reads <br />&#160;both state values (in a tuple) so that&#39;s `Reader&lt;S1*S2, T2&gt;`</em></div>
<div class="tip" id="fs5">val f : (&#39;a -&gt; Reader&lt;&#39;b,&#39;c&gt;)</div>
<div class="tip" id="fs6">val g : (&#39;d -&gt; &#39;a)</div>
<div class="tip" id="fs7">val a : &#39;d</div>
<div class="tip" id="fs8">val b : &#39;b</div>
<div class="tip" id="fs9">val h : (&#39;b -&gt; &#39;c)</div>
<div class="tip" id="fs10">Multiple items<br />type ReaderBuilder =<br />&#160;&#160;new : unit -&gt; ReaderBuilder<br />&#160;&#160;member Bind : v:Reader&lt;&#39;c,&#39;d&gt; * f:(&#39;d -&gt; Reader&lt;&#39;e,&#39;f&gt;) -&gt; Reader&lt;(&#39;c * &#39;e),&#39;f&gt;<br />&#160;&#160;member Delay : f:(unit -&gt; Reader&lt;&#39;a,&#39;b&gt;) -&gt; Reader&lt;&#39;a,&#39;b&gt;<br />&#160;&#160;member Return : v:&#39;g -&gt; Reader&lt;unit,&#39;g&gt;<br /><br />Full name: Script.ReaderBuilder<br /><em><br /><br />&#160;Defines the computation builder - add `Delay` so that we can delay things!</em><br /><br />--------------------<br />new : unit -&gt; ReaderBuilder</div>
<div class="tip" id="fs11">val x : ReaderBuilder</div>
<div class="tip" id="fs12">member ReaderBuilder.Return : v:&#39;g -&gt; Reader&lt;unit,&#39;g&gt;<br /><br />Full name: Script.ReaderBuilder.Return</div>
<div class="tip" id="fs13">val v : &#39;g</div>
<div class="tip" id="fs14">member ReaderBuilder.Bind : v:Reader&lt;&#39;c,&#39;d&gt; * f:(&#39;d -&gt; Reader&lt;&#39;e,&#39;f&gt;) -&gt; Reader&lt;(&#39;c * &#39;e),&#39;f&gt;<br /><br />Full name: Script.ReaderBuilder.Bind</div>
<div class="tip" id="fs15">val v : Reader&lt;&#39;c,&#39;d&gt;</div>
<div class="tip" id="fs16">val f : (&#39;d -&gt; Reader&lt;&#39;e,&#39;f&gt;)</div>
<div class="tip" id="fs17">member ReaderBuilder.Delay : f:(unit -&gt; Reader&lt;&#39;a,&#39;b&gt;) -&gt; Reader&lt;&#39;a,&#39;b&gt;<br /><br />Full name: Script.ReaderBuilder.Delay</div>
<div class="tip" id="fs18">val f : (unit -&gt; Reader&lt;&#39;a,&#39;b&gt;)</div>
<div class="tip" id="fs19">val s : &#39;a</div>
<div class="tip" id="fs20">val h : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs21">val reader : ReaderBuilder<br /><br />Full name: Script.reader</div>
<div class="tip" id="fs22">val cache : Reader&lt;&#39;a,&#39;b&gt; -&gt; Reader&lt;(&#39;b option * &#39;a),&#39;b&gt;<br /><br />Full name: Script.cache<br /><em><br /><br />&#160;A function that takes a computation written as `Reader&lt;S, T&gt;`. It builds a new<br />&#160;computation of type `Reader&lt;option&lt;T&gt;*S, T&gt;` that attempts to read a cached result<br />&#160;of type T from the state - if it is there, we just return it, otherwise we run<br />&#160;the computation provided as an argument to actually compute the value.</em></div>
<div class="tip" id="fs23">val f : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs24">val v1 : &#39;b option</div>
<div class="tip" id="fs25">val v2 : &#39;a</div>
<div class="tip" id="fs26">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs27">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs28">val v : &#39;b</div>
<div class="tip" id="fs29">val read : s:string -&gt; n:&#39;a -&gt; Reader&lt;unit,&#39;a&gt;<br /><br />Full name: Script.read<br /><em><br /><br />&#160;Returns `n` and prints string to log what&#39;s happening</em></div>
<div class="tip" id="fs30">val s : string</div>
<div class="tip" id="fs31">val n : &#39;a</div>
<div class="tip" id="fs32">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs33">val m : Reader&lt;((int option * unit) * ((int option * unit) * (unit * unit))),int&gt;<br /><br />Full name: Script.m</div>
<div class="tip" id="fs34">val a : int</div>
<div class="tip" id="fs35">val b : int</div>
<div class="tip" id="fs36">val c : int</div>
<div class="tip" id="fs37">val f : ((int option * unit) * ((int option * unit) * (unit * unit)) -&gt; int)<br /><br />Full name: Script.f</div>

