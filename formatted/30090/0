<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// So called van Laarhoven lenses, named after their discoverer, have a number</span>
<span class="c">// of nice properties as explained by Russell O&#39;Connor:</span>
<span class="c">//</span>
<span class="c">//   http://r6.ca/blog/20120623T104901Z.html</span>
<span class="c">//</span>
<span class="c">// Unfortunately their typing (in Haskell)</span>
<span class="c">//</span>
<span class="c">//   type Lens s t a b = forall f. Functor f =&gt; (a -&gt; f b) -&gt; (s -&gt; f t)</span>
<span class="c">//</span>
<span class="c">// seems to be well outside of what can be achieved in F#.</span>
<span class="c">//</span>
<span class="c">// Is it possible to encode van Laarhoven lenses in F#?</span>
<span class="c">//</span>
<span class="c">// The first thing to notice about van Laarhoven lenses is that, while the above</span>
<span class="c">// type definition is polymorphic in the functor f, only two concrete functor</span>
<span class="c">// instances are actually used, namely</span>
<span class="c">//</span>
<span class="c">// - Identity, by the over operation, and</span>
<span class="c">// - Const, by the view operation.</span>
<span class="c">//</span>
<span class="c">// We can define a unified functor that simultaneously implements both Identity</span>
<span class="c">// and Const:</span>

<span class="k">type</span> <span class="t">LensPolyFunctor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">k</span>, <span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> <span class="o">=</span>
  | <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="p">Identity</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">a</span>
  | <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="p">Const</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">k</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="f">map</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="f">a2b</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">t</span> <span class="k">with</span>
     | <span onmouseout="hideTip(event, 'fs1', 7)" onmouseover="showTip(event, 'fs1', 7)" class="p">Identity</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs1', 9)" onmouseover="showTip(event, 'fs1', 9)" class="p">Identity</span> (<span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="f">a2b</span> <span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="i">a</span>)
     | <span onmouseout="hideTip(event, 'fs2', 12)" onmouseover="showTip(event, 'fs2', 12)" class="p">Const</span> <span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">k</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs2', 14)" onmouseover="showTip(event, 'fs2', 14)" class="p">Const</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="i">k</span>

<span class="c">// The astute reader recognizes that the above is isomorphic to the binary</span>
<span class="c">// Choice type.</span>
<span class="c">//</span>
<span class="c">// This avoids the need to use higher-kinded types.  We are left with</span>
<span class="c">// higher-rank polymorphism (again in Haskell notation):</span>
<span class="c">//</span>
<span class="c">//   type LensPoly s t a b =</span>
<span class="c">//     forall k. (a -&gt; LensPolyFunctor k b) -&gt; (s -&gt; LensPolyFunctor k t)</span>
<span class="c">//</span>
<span class="c">// This can be encoded in F# using an interface or class type with a polymorphic</span>
<span class="c">// method:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="t">LensPoly</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">s</span>, <span class="o">&#39;</span><span class="i">t</span>, <span class="o">&#39;</span><span class="i">a</span>, <span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> <span class="o">=</span>
  <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs9', 17)" onmouseover="showTip(event, 'fs9', 17)" class="f">Apply</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">k</span><span class="o">&gt;</span> <span class="o">:</span> (<span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="t">LensPolyFunctor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">k</span>, <span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>)
                    <span class="k">-&gt;</span> (<span class="o">&#39;</span><span class="i">s</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 19)" onmouseover="showTip(event, 'fs10', 19)" class="t">LensPolyFunctor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">k</span>, <span class="o">&#39;</span><span class="i">t</span><span class="o">&gt;</span>)

<span class="c">// And we can implement the desired operations:</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs8', 20)" onmouseover="showTip(event, 'fs8', 20)" class="t">LensPoly</span> <span class="o">=</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="f">view</span> (<span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="i">l</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 23)" onmouseover="showTip(event, 'fs8', 23)" class="t">LensPoly</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">s</span>,<span class="o">&#39;</span><span class="i">t</span>,<span class="o">&#39;</span><span class="i">a</span>,<span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="i">l</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 25)" onmouseover="showTip(event, 'fs13', 25)" class="f">Apply</span> <span onmouseout="hideTip(event, 'fs2', 26)" onmouseover="showTip(event, 'fs2', 26)" class="p">Const</span>
    <span class="o">&gt;</span><span class="o">&gt;</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs2', 27)" onmouseover="showTip(event, 'fs2', 27)" class="p">Const</span> <span onmouseout="hideTip(event, 'fs14', 28)" onmouseover="showTip(event, 'fs14', 28)" class="i">k</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs14', 29)" onmouseover="showTip(event, 'fs14', 29)" class="i">k</span> | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 30)" onmouseover="showTip(event, 'fs15', 30)" class="f">failwith</span> <span class="s">&quot;Impossible&quot;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs16', 31)" onmouseover="showTip(event, 'fs16', 31)" class="f">over</span> (<span onmouseout="hideTip(event, 'fs12', 32)" onmouseover="showTip(event, 'fs12', 32)" class="i">l</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 33)" onmouseover="showTip(event, 'fs8', 33)" class="t">LensPoly</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">s</span>,<span class="o">&#39;</span><span class="i">t</span>,<span class="o">&#39;</span><span class="i">a</span>,<span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span onmouseout="hideTip(event, 'fs17', 34)" onmouseover="showTip(event, 'fs17', 34)" class="f">a2b</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs12', 35)" onmouseover="showTip(event, 'fs12', 35)" class="i">l</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 36)" onmouseover="showTip(event, 'fs13', 36)" class="f">Apply</span> (<span onmouseout="hideTip(event, 'fs17', 37)" onmouseover="showTip(event, 'fs17', 37)" class="f">a2b</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs1', 38)" onmouseover="showTip(event, 'fs1', 38)" class="p">Identity</span>)
    <span class="o">&gt;</span><span class="o">&gt;</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs1', 39)" onmouseover="showTip(event, 'fs1', 39)" class="p">Identity</span> <span onmouseout="hideTip(event, 'fs18', 40)" onmouseover="showTip(event, 'fs18', 40)" class="i">b</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs18', 41)" onmouseover="showTip(event, 'fs18', 41)" class="i">b</span> | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 42)" onmouseover="showTip(event, 'fs15', 42)" class="f">failwith</span> <span class="s">&quot;Impossible&quot;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 43)" onmouseover="showTip(event, 'fs19', 43)" class="f">set</span> <span onmouseout="hideTip(event, 'fs20', 44)" onmouseover="showTip(event, 'fs20', 44)" class="i">l</span> <span onmouseout="hideTip(event, 'fs21', 45)" onmouseover="showTip(event, 'fs21', 45)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 46)" onmouseover="showTip(event, 'fs16', 46)" class="f">over</span> <span onmouseout="hideTip(event, 'fs20', 47)" onmouseover="showTip(event, 'fs20', 47)" class="i">l</span> <span class="o">&lt;|</span> <span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs21', 48)" onmouseover="showTip(event, 'fs21', 48)" class="i">b</span>

<span class="c">// The astute reader is worried about the partial functions above.  If a safe</span>
<span class="c">// implementation is desired, the `LensPolyFunctor` type can be made abstract</span>
<span class="c">// or private.</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 49)" onmouseover="showTip(event, 'fs22', 49)" class="f">lens</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">s</span>,<span class="o">&#39;</span><span class="i">t</span>,<span class="o">&#39;</span><span class="i">a</span>,<span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> (<span onmouseout="hideTip(event, 'fs23', 50)" onmouseover="showTip(event, 'fs23', 50)" class="f">get</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">s</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">a</span>) (<span onmouseout="hideTip(event, 'fs24', 51)" onmouseover="showTip(event, 'fs24', 51)" class="f">set</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">b</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">s</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">t</span>) <span class="o">=</span>
    {<span class="k">new</span> <span onmouseout="hideTip(event, 'fs8', 52)" onmouseover="showTip(event, 'fs8', 52)" class="t">LensPoly</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">s</span>,<span class="o">&#39;</span><span class="i">t</span>,<span class="o">&#39;</span><span class="i">a</span>,<span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> <span class="k">with</span>
      <span class="k">override</span> <span onmouseout="hideTip(event, 'fs25', 53)" onmouseover="showTip(event, 'fs25', 53)" class="i">r</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 54)" onmouseover="showTip(event, 'fs13', 54)" class="f">Apply</span> <span onmouseout="hideTip(event, 'fs26', 55)" onmouseover="showTip(event, 'fs26', 55)" class="f">f</span> <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs27', 56)" onmouseover="showTip(event, 'fs27', 56)" class="i">s</span> <span class="k">-&gt;</span> (<span onmouseout="hideTip(event, 'fs23', 57)" onmouseover="showTip(event, 'fs23', 57)" class="f">get</span> <span onmouseout="hideTip(event, 'fs27', 58)" onmouseover="showTip(event, 'fs27', 58)" class="i">s</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 59)" onmouseover="showTip(event, 'fs26', 59)" class="f">f</span>)<span class="o">.</span><span class="f">map</span>(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs28', 60)" onmouseover="showTip(event, 'fs28', 60)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs24', 61)" onmouseover="showTip(event, 'fs24', 61)" class="f">set</span> <span onmouseout="hideTip(event, 'fs28', 62)" onmouseover="showTip(event, 'fs28', 62)" class="i">x</span> <span onmouseout="hideTip(event, 'fs27', 63)" onmouseover="showTip(event, 'fs27', 63)" class="i">s</span>)}
  <span class="k">let</span> (<span class="o">&gt;</span><span class="k">-&gt;</span>) (<span onmouseout="hideTip(event, 'fs29', 64)" onmouseover="showTip(event, 'fs29', 64)" class="i">l1</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 65)" onmouseover="showTip(event, 'fs8', 65)" class="t">LensPoly</span><span class="o">&lt;</span>_,_,_,_<span class="o">&gt;</span>) (<span onmouseout="hideTip(event, 'fs30', 66)" onmouseover="showTip(event, 'fs30', 66)" class="i">l2</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 67)" onmouseover="showTip(event, 'fs8', 67)" class="t">LensPoly</span><span class="o">&lt;</span>_,_,_,_<span class="o">&gt;</span>) <span class="o">=</span>
    {<span class="k">new</span> <span onmouseout="hideTip(event, 'fs8', 68)" onmouseover="showTip(event, 'fs8', 68)" class="t">LensPoly</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">s</span>,<span class="o">&#39;</span><span class="i">t</span>,<span class="o">&#39;</span><span class="i">a</span>,<span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> <span class="k">with</span>
      <span class="k">override</span> <span onmouseout="hideTip(event, 'fs31', 69)" onmouseover="showTip(event, 'fs31', 69)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 70)" onmouseover="showTip(event, 'fs13', 70)" class="f">Apply</span> <span onmouseout="hideTip(event, 'fs26', 71)" onmouseover="showTip(event, 'fs26', 71)" class="f">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs29', 72)" onmouseover="showTip(event, 'fs29', 72)" class="i">l1</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 73)" onmouseover="showTip(event, 'fs13', 73)" class="f">Apply</span> (<span onmouseout="hideTip(event, 'fs30', 74)" onmouseover="showTip(event, 'fs30', 74)" class="i">l2</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 75)" onmouseover="showTip(event, 'fs13', 75)" class="f">Apply</span> <span onmouseout="hideTip(event, 'fs26', 76)" onmouseover="showTip(event, 'fs26', 76)" class="f">f</span>)}

<span class="c">// Everything works up and until this point, but now we run into a difficulty</span>
<span class="c">// with the value restriction.  If we just try to define lenses for pairs as</span>

<span class="c">//  let fstL&#39; = lens fst &lt;| fun x (_, y) -&gt; (x, y)</span>
<span class="c">//  let sndL&#39; = lens snd &lt;| fun y (x, _) -&gt; (x, y)</span>
   
<span class="c">// their types will not be generalized.  In F#, a workaround is to use explicit</span>
<span class="c">// type parameters:</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 77)" onmouseover="showTip(event, 'fs32', 77)" class="i">fstL</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span>, <span class="o">&#39;</span><span class="i">b</span>, <span class="o">&#39;</span><span class="i">c</span><span class="o">&gt;</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 78)" onmouseover="showTip(event, 'fs8', 78)" class="t">LensPoly</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">b</span>, <span class="o">&#39;</span><span class="i">c</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">b</span>, <span class="o">&#39;</span><span class="i">a</span>, <span class="o">&#39;</span><span class="i">c</span><span class="o">&gt;</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs22', 79)" onmouseover="showTip(event, 'fs22', 79)" class="f">lens</span> <span onmouseout="hideTip(event, 'fs33', 80)" onmouseover="showTip(event, 'fs33', 80)" class="f">fst</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs34', 81)" onmouseover="showTip(event, 'fs34', 81)" class="i">x</span> (_, <span onmouseout="hideTip(event, 'fs35', 82)" onmouseover="showTip(event, 'fs35', 82)" class="i">y</span>) <span class="k">-&gt;</span> (<span onmouseout="hideTip(event, 'fs34', 83)" onmouseover="showTip(event, 'fs34', 83)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs35', 84)" onmouseover="showTip(event, 'fs35', 84)" class="i">y</span>)
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 85)" onmouseover="showTip(event, 'fs36', 85)" class="i">sndL</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span>, <span class="o">&#39;</span><span class="i">b</span>, <span class="o">&#39;</span><span class="i">c</span><span class="o">&gt;</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 86)" onmouseover="showTip(event, 'fs8', 86)" class="t">LensPoly</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">b</span>, <span class="o">&#39;</span><span class="i">a</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">c</span>, <span class="o">&#39;</span><span class="i">b</span>, <span class="o">&#39;</span><span class="i">c</span><span class="o">&gt;</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs22', 87)" onmouseover="showTip(event, 'fs22', 87)" class="f">lens</span> <span onmouseout="hideTip(event, 'fs37', 88)" onmouseover="showTip(event, 'fs37', 88)" class="f">snd</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs38', 89)" onmouseover="showTip(event, 'fs38', 89)" class="i">y</span> (<span onmouseout="hideTip(event, 'fs39', 90)" onmouseover="showTip(event, 'fs39', 90)" class="i">x</span>, _) <span class="k">-&gt;</span> (<span onmouseout="hideTip(event, 'fs39', 91)" onmouseover="showTip(event, 'fs39', 91)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs38', 92)" onmouseover="showTip(event, 'fs38', 92)" class="i">y</span>)

<span class="c">// to get the desired polymorphic types.  (Another workaround would be to add a</span>
<span class="c">// dummy unit parameter.)  We can now compose lenses to perform polymorphic</span>
<span class="c">// updates:</span>

  <span class="k">do</span> ((<span class="n">1</span>, (<span class="n">2.0</span>, <span class="s">&#39;3&#39;</span>)), <span class="k">true</span>)
     <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs16', 93)" onmouseover="showTip(event, 'fs16', 93)" class="f">over</span> (<span onmouseout="hideTip(event, 'fs32', 94)" onmouseover="showTip(event, 'fs32', 94)" class="i">fstL</span> <span class="o">&gt;</span><span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs36', 95)" onmouseover="showTip(event, 'fs36', 95)" class="i">sndL</span> <span class="o">&gt;</span><span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs32', 96)" onmouseover="showTip(event, 'fs32', 96)" class="i">fstL</span>) (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs40', 97)" onmouseover="showTip(event, 'fs40', 97)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs40', 98)" onmouseover="showTip(event, 'fs40', 98)" class="i">x</span> <span class="o">+</span> <span class="n">3.0</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs41', 99)" onmouseover="showTip(event, 'fs41', 99)" class="f">string</span>)
     <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs42', 100)" onmouseover="showTip(event, 'fs42', 100)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span>

<span class="c">// The above encoding works, but it is rather heavy.  Is there a simpler</span>
<span class="c">// encoding?</span>
<span class="c">//</span>
<span class="c">// One of the things that F# allows us to do is to use effects and those can</span>
<span class="c">// often be used to work around lack of higher-rank types.  The need to have a</span>
<span class="c">// higher-rank type in the above encoding arose from the parameter to the Const</span>
<span class="c">// functor and the only use of the Const functor is in the view function.  We</span>
<span class="c">// can eliminate that parameter by using effects.  Here are the simplified</span>
<span class="c">// functor and lens types:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs43', 101)" onmouseover="showTip(event, 'fs43', 101)" class="t">LensFunctor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> <span class="o">=</span>
  | <span onmouseout="hideTip(event, 'fs44', 102)" onmouseover="showTip(event, 'fs44', 102)" class="p">Over</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">a</span>
  | <span onmouseout="hideTip(event, 'fs45', 103)" onmouseover="showTip(event, 'fs45', 103)" class="p">View</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs46', 104)" onmouseover="showTip(event, 'fs46', 104)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 105)" onmouseover="showTip(event, 'fs47', 105)" class="f">map</span> <span onmouseout="hideTip(event, 'fs5', 106)" onmouseover="showTip(event, 'fs5', 106)" class="f">a2b</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs46', 107)" onmouseover="showTip(event, 'fs46', 107)" class="i">t</span> <span class="k">with</span>
     | <span onmouseout="hideTip(event, 'fs44', 108)" onmouseover="showTip(event, 'fs44', 108)" class="p">Over</span> <span onmouseout="hideTip(event, 'fs6', 109)" onmouseover="showTip(event, 'fs6', 109)" class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs44', 110)" onmouseover="showTip(event, 'fs44', 110)" class="p">Over</span> (<span onmouseout="hideTip(event, 'fs5', 111)" onmouseover="showTip(event, 'fs5', 111)" class="f">a2b</span> <span onmouseout="hideTip(event, 'fs6', 112)" onmouseover="showTip(event, 'fs6', 112)" class="i">a</span>)
     | <span onmouseout="hideTip(event, 'fs45', 113)" onmouseover="showTip(event, 'fs45', 113)" class="p">View</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs45', 114)" onmouseover="showTip(event, 'fs45', 114)" class="p">View</span>

<span class="c">// The astute reader recognizes the above as isomorphic to the Option type.</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs48', 115)" onmouseover="showTip(event, 'fs48', 115)" class="t">Lens</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">s</span>,<span class="o">&#39;</span><span class="i">t</span>,<span class="o">&#39;</span><span class="i">a</span>,<span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> <span class="o">=</span> (<span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs43', 116)" onmouseover="showTip(event, 'fs43', 116)" class="t">LensFunctor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">s</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs43', 117)" onmouseover="showTip(event, 'fs43', 117)" class="t">LensFunctor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">t</span><span class="o">&gt;</span>

<span class="c">// Now polymorphic lenses are just functions.</span>
<span class="c">//</span>
<span class="c">// Let&#39;s then see the rest of the implementation.</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs49', 118)" onmouseover="showTip(event, 'fs49', 118)" class="t">Lens</span> <span class="o">=</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs50', 119)" onmouseover="showTip(event, 'fs50', 119)" class="f">view</span> <span onmouseout="hideTip(event, 'fs51', 120)" onmouseover="showTip(event, 'fs51', 120)" class="f">l</span> <span onmouseout="hideTip(event, 'fs52', 121)" onmouseover="showTip(event, 'fs52', 121)" class="i">s</span> <span class="o">=</span>
    <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs53', 122)" onmouseover="showTip(event, 'fs53', 122)" class="v">r</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs54', 123)" onmouseover="showTip(event, 'fs54', 123)" class="t">Unchecked</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs55', 124)" onmouseover="showTip(event, 'fs55', 124)" class="i">defaultof</span><span class="o">&lt;</span>_<span class="o">&gt;</span>
    <span onmouseout="hideTip(event, 'fs52', 125)" onmouseover="showTip(event, 'fs52', 125)" class="i">s</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs51', 126)" onmouseover="showTip(event, 'fs51', 126)" class="f">l</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs6', 127)" onmouseover="showTip(event, 'fs6', 127)" class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs53', 128)" onmouseover="showTip(event, 'fs53', 128)" class="v">r</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs6', 129)" onmouseover="showTip(event, 'fs6', 129)" class="i">a</span>; <span onmouseout="hideTip(event, 'fs45', 130)" onmouseover="showTip(event, 'fs45', 130)" class="p">View</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs56', 131)" onmouseover="showTip(event, 'fs56', 131)" class="f">ignore</span>
    <span onmouseout="hideTip(event, 'fs53', 132)" onmouseover="showTip(event, 'fs53', 132)" class="v">r</span>

<span class="c">// As mentioned, the view function now uses an effect internally.</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 133)" onmouseover="showTip(event, 'fs57', 133)" class="f">over</span> <span onmouseout="hideTip(event, 'fs58', 134)" onmouseover="showTip(event, 'fs58', 134)" class="f">l</span> <span onmouseout="hideTip(event, 'fs59', 135)" onmouseover="showTip(event, 'fs59', 135)" class="f">f</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs58', 136)" onmouseover="showTip(event, 'fs58', 136)" class="f">l</span> (<span onmouseout="hideTip(event, 'fs59', 137)" onmouseover="showTip(event, 'fs59', 137)" class="f">f</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs44', 138)" onmouseover="showTip(event, 'fs44', 138)" class="p">Over</span>) <span class="o">&gt;</span><span class="o">&gt;</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs44', 139)" onmouseover="showTip(event, 'fs44', 139)" class="p">Over</span> <span onmouseout="hideTip(event, 'fs60', 140)" onmouseover="showTip(event, 'fs60', 140)" class="i">t</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs60', 141)" onmouseover="showTip(event, 'fs60', 141)" class="i">t</span> | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 142)" onmouseover="showTip(event, 'fs15', 142)" class="f">failwith</span> <span class="s">&quot;Impossible&quot;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs61', 143)" onmouseover="showTip(event, 'fs61', 143)" class="f">set</span> <span onmouseout="hideTip(event, 'fs58', 144)" onmouseover="showTip(event, 'fs58', 144)" class="f">l</span> <span onmouseout="hideTip(event, 'fs62', 145)" onmouseover="showTip(event, 'fs62', 145)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs57', 146)" onmouseover="showTip(event, 'fs57', 146)" class="f">over</span> <span onmouseout="hideTip(event, 'fs58', 147)" onmouseover="showTip(event, 'fs58', 147)" class="f">l</span> <span class="o">&lt;|</span> <span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs62', 148)" onmouseover="showTip(event, 'fs62', 148)" class="i">b</span>
  <span class="k">let</span> (<span class="o">&gt;</span><span class="k">-&gt;</span>) <span onmouseout="hideTip(event, 'fs63', 149)" onmouseover="showTip(event, 'fs63', 149)" class="f">a</span> <span onmouseout="hideTip(event, 'fs64', 150)" onmouseover="showTip(event, 'fs64', 150)" class="f">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs63', 151)" onmouseover="showTip(event, 'fs63', 151)" class="f">a</span> <span class="o">&lt;&lt;</span> <span onmouseout="hideTip(event, 'fs64', 152)" onmouseover="showTip(event, 'fs64', 152)" class="f">b</span>

<span class="c">// As seen above, we can now use ordinary function composition to compose</span>
<span class="c">// polymorphic lenses.  In fact, we could leave `&gt;-&gt;` as undefined and just use</span>
<span class="c">// `&lt;&lt;`.</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs65', 153)" onmouseover="showTip(event, 'fs65', 153)" class="f">lens</span> <span onmouseout="hideTip(event, 'fs66', 154)" onmouseover="showTip(event, 'fs66', 154)" class="f">get</span> <span onmouseout="hideTip(event, 'fs67', 155)" onmouseover="showTip(event, 'fs67', 155)" class="f">set</span> <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs68', 156)" onmouseover="showTip(event, 'fs68', 156)" class="f">f</span> <span onmouseout="hideTip(event, 'fs69', 157)" onmouseover="showTip(event, 'fs69', 157)" class="i">s</span> <span class="k">-&gt;</span>
    (<span onmouseout="hideTip(event, 'fs66', 158)" onmouseover="showTip(event, 'fs66', 158)" class="f">get</span> <span onmouseout="hideTip(event, 'fs69', 159)" onmouseover="showTip(event, 'fs69', 159)" class="i">s</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs68', 160)" onmouseover="showTip(event, 'fs68', 160)" class="f">f</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs43', 161)" onmouseover="showTip(event, 'fs43', 161)" class="t">LensFunctor</span><span class="o">&lt;</span>_<span class="o">&gt;</span>)<span class="o">.</span><span class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs70', 162)" onmouseover="showTip(event, 'fs70', 162)" class="i">f</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs67', 163)" onmouseover="showTip(event, 'fs67', 163)" class="f">set</span> <span onmouseout="hideTip(event, 'fs70', 164)" onmouseover="showTip(event, 'fs70', 164)" class="i">f</span> <span onmouseout="hideTip(event, 'fs69', 165)" onmouseover="showTip(event, 'fs69', 165)" class="i">s</span>)

<span class="c">// Now that lenses are just functions, we can use eta-expansion to define</span>
<span class="c">// polymorphic lenses:</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 166)" onmouseover="showTip(event, 'fs71', 166)" class="f">fstL</span> <span onmouseout="hideTip(event, 'fs72', 167)" onmouseover="showTip(event, 'fs72', 167)" class="f">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs65', 168)" onmouseover="showTip(event, 'fs65', 168)" class="f">lens</span> <span onmouseout="hideTip(event, 'fs33', 169)" onmouseover="showTip(event, 'fs33', 169)" class="f">fst</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs28', 170)" onmouseover="showTip(event, 'fs28', 170)" class="i">x</span> (_, <span onmouseout="hideTip(event, 'fs38', 171)" onmouseover="showTip(event, 'fs38', 171)" class="i">y</span>) <span class="k">-&gt;</span> (<span onmouseout="hideTip(event, 'fs28', 172)" onmouseover="showTip(event, 'fs28', 172)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs38', 173)" onmouseover="showTip(event, 'fs38', 173)" class="i">y</span>)) <span onmouseout="hideTip(event, 'fs72', 174)" onmouseover="showTip(event, 'fs72', 174)" class="f">f</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs73', 175)" onmouseover="showTip(event, 'fs73', 175)" class="f">sndL</span> <span onmouseout="hideTip(event, 'fs72', 176)" onmouseover="showTip(event, 'fs72', 176)" class="f">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs65', 177)" onmouseover="showTip(event, 'fs65', 177)" class="f">lens</span> <span onmouseout="hideTip(event, 'fs37', 178)" onmouseover="showTip(event, 'fs37', 178)" class="f">snd</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs35', 179)" onmouseover="showTip(event, 'fs35', 179)" class="i">y</span> (<span onmouseout="hideTip(event, 'fs34', 180)" onmouseover="showTip(event, 'fs34', 180)" class="i">x</span>, _) <span class="k">-&gt;</span> (<span onmouseout="hideTip(event, 'fs34', 181)" onmouseover="showTip(event, 'fs34', 181)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs35', 182)" onmouseover="showTip(event, 'fs35', 182)" class="i">y</span>)) <span onmouseout="hideTip(event, 'fs72', 183)" onmouseover="showTip(event, 'fs72', 183)" class="f">f</span>

  <span class="k">do</span> ((<span class="n">1</span>, (<span class="n">2.0</span>, <span class="s">&#39;3&#39;</span>)), <span class="k">true</span>)
     <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs57', 184)" onmouseover="showTip(event, 'fs57', 184)" class="f">over</span> (<span onmouseout="hideTip(event, 'fs71', 185)" onmouseover="showTip(event, 'fs71', 185)" class="f">fstL</span> <span class="o">&gt;</span><span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs73', 186)" onmouseover="showTip(event, 'fs73', 186)" class="f">sndL</span> <span class="o">&gt;</span><span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs71', 187)" onmouseover="showTip(event, 'fs71', 187)" class="f">fstL</span>) (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs40', 188)" onmouseover="showTip(event, 'fs40', 188)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs40', 189)" onmouseover="showTip(event, 'fs40', 189)" class="i">x</span> <span class="o">+</span> <span class="n">3.0</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs41', 190)" onmouseover="showTip(event, 'fs41', 190)" class="f">string</span>)
     <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs42', 191)" onmouseover="showTip(event, 'fs42', 191)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span>

<span class="c">// One potential problem with this approach is that the manipulation of values</span>
<span class="c">// of the lens functor type, which is like the Option type, may be expensive,</span>
<span class="c">// because F# tends to generate memory allocations when dealing with such types.</span>
<span class="c">// The lens functor type can be encoded as a struct type and it might help the</span>
<span class="c">// F# compiler to eliminate allocations.  But let&#39;s leave that for further work.</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">union case LensPolyFunctor.Identity: &#39;a -&gt; LensPolyFunctor&lt;&#39;k,&#39;a&gt;</div>
<div class="tip" id="fs2">union case LensPolyFunctor.Const: &#39;k -&gt; LensPolyFunctor&lt;&#39;k,&#39;a&gt;</div>
<div class="tip" id="fs3">val t : LensPolyFunctor&lt;&#39;k,&#39;a&gt;</div>
<div class="tip" id="fs4">member LensPolyFunctor.map : a2b:(&#39;a -&gt; &#39;a0) -&gt; LensPolyFunctor&lt;&#39;k,&#39;a0&gt;<br /><br />Full name: Script.LensPolyFunctor`2.map</div>
<div class="tip" id="fs5">val a2b : (&#39;a -&gt; &#39;a0)</div>
<div class="tip" id="fs6">val a : &#39;a</div>
<div class="tip" id="fs7">val k : &#39;k</div>
<div class="tip" id="fs8">type LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt; =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Apply : (&#39;a -&gt; LensPolyFunctor&lt;&#39;k,&#39;b&gt;) -&gt; (&#39;s -&gt; LensPolyFunctor&lt;&#39;k,&#39;t&gt;)<br />&#160;&#160;end<br /><br />Full name: Script.LensPoly&lt;_,_,_,_&gt;</div>
<div class="tip" id="fs9">abstract member LensPoly.Apply : (&#39;a -&gt; LensPolyFunctor&lt;&#39;k,&#39;b&gt;) -&gt; (&#39;s -&gt; LensPolyFunctor&lt;&#39;k,&#39;t&gt;)<br /><br />Full name: Script.LensPoly`4.Apply</div>
<div class="tip" id="fs10">type LensPolyFunctor&lt;&#39;k,&#39;a&gt; =<br />&#160;&#160;| Identity of &#39;a<br />&#160;&#160;| Const of &#39;k<br />&#160;&#160;member map : a2b:(&#39;a -&gt; &#39;a0) -&gt; LensPolyFunctor&lt;&#39;k,&#39;a0&gt;<br /><br />Full name: Script.LensPolyFunctor&lt;_,_&gt;</div>
<div class="tip" id="fs11">val view : l:LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt; -&gt; (&#39;s -&gt; &#39;a)<br /><br />Full name: Script.LensPoly.view</div>
<div class="tip" id="fs12">val l : LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt;</div>
<div class="tip" id="fs13">abstract member LensPoly.Apply : (&#39;a -&gt; LensPolyFunctor&lt;&#39;k,&#39;b&gt;) -&gt; (&#39;s -&gt; LensPolyFunctor&lt;&#39;k,&#39;t&gt;)</div>
<div class="tip" id="fs14">val k : &#39;a</div>
<div class="tip" id="fs15">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs16">val over : l:LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt; -&gt; a2b:(&#39;a -&gt; &#39;b) -&gt; (&#39;s -&gt; &#39;t)<br /><br />Full name: Script.LensPoly.over</div>
<div class="tip" id="fs17">val a2b : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs18">val b : &#39;t</div>
<div class="tip" id="fs19">val set : l:LensPoly&lt;&#39;a,&#39;b,&#39;c,&#39;d&gt; -&gt; b:&#39;d -&gt; (&#39;a -&gt; &#39;b)<br /><br />Full name: Script.LensPoly.set</div>
<div class="tip" id="fs20">val l : LensPoly&lt;&#39;a,&#39;b,&#39;c,&#39;d&gt;</div>
<div class="tip" id="fs21">val b : &#39;d</div>
<div class="tip" id="fs22">val lens : get:(&#39;s -&gt; &#39;a) -&gt; set:(&#39;b -&gt; &#39;s -&gt; &#39;t) -&gt; LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt;<br /><br />Full name: Script.LensPoly.lens</div>
<div class="tip" id="fs23">val get : (&#39;s -&gt; &#39;a)</div>
<div class="tip" id="fs24">val set : (&#39;b -&gt; &#39;s -&gt; &#39;t)</div>
<div class="tip" id="fs25">val r : LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt;</div>
<div class="tip" id="fs26">val f : (&#39;a -&gt; LensPolyFunctor&lt;&#39;c,&#39;b&gt;)</div>
<div class="tip" id="fs27">val s : &#39;s</div>
<div class="tip" id="fs28">val x : &#39;b</div>
<div class="tip" id="fs29">val l1 : LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt;</div>
<div class="tip" id="fs30">val l2 : LensPoly&lt;&#39;a,&#39;b,&#39;a0,&#39;b1&gt;</div>
<div class="tip" id="fs31">val t : LensPoly&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt;</div>
<div class="tip" id="fs32">val fstL&lt;&#39;a,&#39;b,&#39;c&gt; : LensPoly&lt;(&#39;a * &#39;b),(&#39;c * &#39;b),&#39;a,&#39;c&gt;<br /><br />Full name: Script.LensPoly.fstL</div>
<div class="tip" id="fs33">val fst : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T1<br /><br />Full name: Microsoft.FSharp.Core.Operators.fst</div>
<div class="tip" id="fs34">val x : &#39;c</div>
<div class="tip" id="fs35">val y : &#39;b</div>
<div class="tip" id="fs36">val sndL&lt;&#39;a,&#39;b,&#39;c&gt; : LensPoly&lt;(&#39;a * &#39;b),(&#39;a * &#39;c),&#39;b,&#39;c&gt;<br /><br />Full name: Script.LensPoly.sndL</div>
<div class="tip" id="fs37">val snd : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T2<br /><br />Full name: Microsoft.FSharp.Core.Operators.snd</div>
<div class="tip" id="fs38">val y : &#39;c</div>
<div class="tip" id="fs39">val x : &#39;a</div>
<div class="tip" id="fs40">val x : float</div>
<div class="tip" id="fs41">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs42">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs43">type LensFunctor&lt;&#39;a&gt; =<br />&#160;&#160;| Over of &#39;a<br />&#160;&#160;| View<br />&#160;&#160;member map : a2b:(&#39;a -&gt; &#39;a0) -&gt; LensFunctor&lt;&#39;a0&gt;<br /><br />Full name: Script.LensFunctor&lt;_&gt;</div>
<div class="tip" id="fs44">union case LensFunctor.Over: &#39;a -&gt; LensFunctor&lt;&#39;a&gt;</div>
<div class="tip" id="fs45">union case LensFunctor.View: LensFunctor&lt;&#39;a&gt;</div>
<div class="tip" id="fs46">val t : LensFunctor&lt;&#39;a&gt;</div>
<div class="tip" id="fs47">member LensFunctor.map : a2b:(&#39;a -&gt; &#39;a0) -&gt; LensFunctor&lt;&#39;a0&gt;<br /><br />Full name: Script.LensFunctor`1.map</div>
<div class="tip" id="fs48">type Lens&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt; = (&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; &#39;s -&gt; LensFunctor&lt;&#39;t&gt;<br /><br />Full name: Script.Lens&lt;_,_,_,_&gt;</div>
<div class="tip" id="fs49">Multiple items<br />module Lens<br /><br />from Script<br /><br />--------------------<br />type Lens&lt;&#39;s,&#39;t,&#39;a,&#39;b&gt; = (&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; &#39;s -&gt; LensFunctor&lt;&#39;t&gt;<br /><br />Full name: Script.Lens&lt;_,_,_,_&gt;</div>
<div class="tip" id="fs50">val view : l:((&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; &#39;c -&gt; &#39;d) -&gt; s:&#39;c -&gt; &#39;a<br /><br />Full name: Script.Lens.view</div>
<div class="tip" id="fs51">val l : ((&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; &#39;c -&gt; &#39;d)</div>
<div class="tip" id="fs52">val s : &#39;c</div>
<div class="tip" id="fs53">val mutable r : &#39;a</div>
<div class="tip" id="fs54">module Unchecked<br /><br />from Microsoft.FSharp.Core.Operators</div>
<div class="tip" id="fs55">val defaultof&lt;&#39;T&gt; : &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.Unchecked.defaultof</div>
<div class="tip" id="fs56">val ignore : value:&#39;T -&gt; unit<br /><br />Full name: Microsoft.FSharp.Core.Operators.ignore</div>
<div class="tip" id="fs57">val over : l:((&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; &#39;c -&gt; LensFunctor&lt;&#39;d&gt;) -&gt; f:(&#39;a -&gt; &#39;b) -&gt; (&#39;c -&gt; &#39;d)<br /><br />Full name: Script.Lens.over</div>
<div class="tip" id="fs58">val l : ((&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; &#39;c -&gt; LensFunctor&lt;&#39;d&gt;)</div>
<div class="tip" id="fs59">val f : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs60">val t : &#39;d</div>
<div class="tip" id="fs61">val set : l:((&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; &#39;c -&gt; LensFunctor&lt;&#39;d&gt;) -&gt; b:&#39;b -&gt; (&#39;c -&gt; &#39;d)<br /><br />Full name: Script.Lens.set</div>
<div class="tip" id="fs62">val b : &#39;b</div>
<div class="tip" id="fs63">val a : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs64">val b : (&#39;c -&gt; &#39;a)</div>
<div class="tip" id="fs65">val lens : get:(&#39;a -&gt; &#39;b) -&gt; set:(&#39;c -&gt; &#39;a -&gt; &#39;d) -&gt; f:(&#39;b -&gt; LensFunctor&lt;&#39;c&gt;) -&gt; s:&#39;a -&gt; LensFunctor&lt;&#39;d&gt;<br /><br />Full name: Script.Lens.lens</div>
<div class="tip" id="fs66">val get : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs67">val set : (&#39;c -&gt; &#39;a -&gt; &#39;d)</div>
<div class="tip" id="fs68">val f : (&#39;b -&gt; LensFunctor&lt;&#39;c&gt;)</div>
<div class="tip" id="fs69">val s : &#39;a</div>
<div class="tip" id="fs70">val f : &#39;c</div>
<div class="tip" id="fs71">val fstL : f:(&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; (&#39;a * &#39;c -&gt; LensFunctor&lt;&#39;b * &#39;c&gt;)<br /><br />Full name: Script.Lens.fstL</div>
<div class="tip" id="fs72">val f : (&#39;a -&gt; LensFunctor&lt;&#39;b&gt;)</div>
<div class="tip" id="fs73">val sndL : f:(&#39;a -&gt; LensFunctor&lt;&#39;b&gt;) -&gt; (&#39;c * &#39;a -&gt; LensFunctor&lt;&#39;c * &#39;b&gt;)<br /><br />Full name: Script.Lens.sndL</div>

