<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Attempts to initialize a 2D array using the specified base offsets and lengths.</span>
<span class="c">/// The provided function can return &#39;None&#39; to indicate a failure - if the initializer</span>
<span class="c">/// fails for any of the location inside the array, the construction is stopped and</span>
<span class="c">/// the function returns &#39;None&#39;.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">tryInitBased</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">base1</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">base2</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">length1</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">length2</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">f</span> <span class="o">=</span> 
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="i">arr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="t">Array2D</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="f">createBased</span> <span onmouseout="hideTip(event, 'fs2', 10)" onmouseover="showTip(event, 'fs2', 10)" class="i">base1</span> <span onmouseout="hideTip(event, 'fs3', 11)" onmouseover="showTip(event, 'fs3', 11)" class="i">base2</span> <span onmouseout="hideTip(event, 'fs4', 12)" onmouseover="showTip(event, 'fs4', 12)" class="i">length1</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="i">length2</span> (<span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="t">Unchecked</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="i">defaultof</span><span class="o">&lt;</span>_<span class="o">&gt;</span>)
  <span class="c">/// Recursive function that fills a specified &#39;x&#39; line</span>
  <span class="c">/// (returns false as soon as any call to &#39;f&#39; fails, or true)</span>
  <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="f">fillY</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="i">x</span> <span onmouseout="hideTip(event, 'fs14', 18)" onmouseover="showTip(event, 'fs14', 18)" class="i">y</span> <span class="o">=</span> 
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="i">y</span> <span class="o">&lt;</span> (<span onmouseout="hideTip(event, 'fs3', 20)" onmouseover="showTip(event, 'fs3', 20)" class="i">base2</span><span class="o">+</span><span onmouseout="hideTip(event, 'fs5', 21)" onmouseover="showTip(event, 'fs5', 21)" class="i">length2</span>) <span class="k">then</span>
      <span class="k">match</span> <span onmouseout="hideTip(event, 'fs6', 22)" onmouseover="showTip(event, 'fs6', 22)" class="f">f</span> <span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="i">x</span> <span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="i">y</span> <span class="k">with</span>
      | <span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs16', 26)" onmouseover="showTip(event, 'fs16', 26)" class="i">v</span> <span class="k">-&gt;</span> 
          <span onmouseout="hideTip(event, 'fs7', 27)" onmouseover="showTip(event, 'fs7', 27)" class="i">arr</span><span class="o">.</span>[<span onmouseout="hideTip(event, 'fs13', 28)" onmouseover="showTip(event, 'fs13', 28)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs14', 29)" onmouseover="showTip(event, 'fs14', 29)" class="i">y</span>] <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs16', 30)" onmouseover="showTip(event, 'fs16', 30)" class="i">v</span>
          <span onmouseout="hideTip(event, 'fs12', 31)" onmouseover="showTip(event, 'fs12', 31)" class="f">fillY</span> <span onmouseout="hideTip(event, 'fs13', 32)" onmouseover="showTip(event, 'fs13', 32)" class="i">x</span> (<span onmouseout="hideTip(event, 'fs14', 33)" onmouseover="showTip(event, 'fs14', 33)" class="i">y</span> <span class="o">+</span> <span class="n">1</span>)
      | _ <span class="k">-&gt;</span> <span class="k">false</span>
    <span class="k">else</span> <span class="k">true</span>
  <span class="c">/// Recursive function that iterates over all &#39;x&#39; positions</span>
  <span class="c">/// and calls &#39;fillY&#39; to fill individual lines</span>
  <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs17', 34)" onmouseover="showTip(event, 'fs17', 34)" class="f">fillX</span> <span onmouseout="hideTip(event, 'fs13', 35)" onmouseover="showTip(event, 'fs13', 35)" class="i">x</span> <span class="o">=</span> 
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs13', 36)" onmouseover="showTip(event, 'fs13', 36)" class="i">x</span> <span class="o">&lt;</span> (<span onmouseout="hideTip(event, 'fs2', 37)" onmouseover="showTip(event, 'fs2', 37)" class="i">base1</span><span class="o">+</span><span onmouseout="hideTip(event, 'fs4', 38)" onmouseover="showTip(event, 'fs4', 38)" class="i">length1</span>) <span class="k">then</span> 
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs12', 39)" onmouseover="showTip(event, 'fs12', 39)" class="f">fillY</span> <span onmouseout="hideTip(event, 'fs13', 40)" onmouseover="showTip(event, 'fs13', 40)" class="i">x</span> <span onmouseout="hideTip(event, 'fs3', 41)" onmouseover="showTip(event, 'fs3', 41)" class="i">base2</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs17', 42)" onmouseover="showTip(event, 'fs17', 42)" class="f">fillX</span> (<span onmouseout="hideTip(event, 'fs13', 43)" onmouseover="showTip(event, 'fs13', 43)" class="i">x</span> <span class="o">+</span> <span class="n">1</span>)
      <span class="k">else</span> <span class="k">false</span>
    <span class="k">else</span> <span class="k">true</span>
  <span class="k">if</span> <span onmouseout="hideTip(event, 'fs17', 44)" onmouseover="showTip(event, 'fs17', 44)" class="f">fillX</span> <span onmouseout="hideTip(event, 'fs2', 45)" onmouseover="showTip(event, 'fs2', 45)" class="i">base1</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs15', 46)" onmouseover="showTip(event, 'fs15', 46)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs7', 47)" onmouseover="showTip(event, 'fs7', 47)" class="i">arr</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs18', 48)" onmouseover="showTip(event, 'fs18', 48)" class="p">None</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val tryInitBased : base1:int -&gt; base2:int -&gt; length1:int -&gt; length2:int -&gt; f:(int -&gt; int -&gt; &#39;a option) -&gt; &#39;a [,] option<br /><br />Full name: Script.tryInitBased<br /><em><br /><br />&#160;Attempts to initialize a 2D array using the specified base offsets and lengths.<br />&#160;The provided function can return &#39;None&#39; to indicate a failure - if the initializer<br />&#160;fails for any of the location inside the array, the construction is stopped and<br />&#160;the function returns &#39;None&#39;.</em></div>
<div class="tip" id="fs2">val base1 : int</div>
<div class="tip" id="fs3">val base2 : int</div>
<div class="tip" id="fs4">val length1 : int</div>
<div class="tip" id="fs5">val length2 : int</div>
<div class="tip" id="fs6">val f : (int -&gt; int -&gt; &#39;a option)</div>
<div class="tip" id="fs7">val arr : &#39;a [,]</div>
<div class="tip" id="fs8">module Array2D<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs9">val createBased : base1:int -&gt; base2:int -&gt; length1:int -&gt; length2:int -&gt; initial:&#39;T -&gt; &#39;T [,]<br /><br />Full name: Microsoft.FSharp.Collections.Array2D.createBased</div>
<div class="tip" id="fs10">module Unchecked<br /><br />from Microsoft.FSharp.Core.Operators</div>
<div class="tip" id="fs11">val defaultof&lt;&#39;T&gt; : &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.Unchecked.defaultof</div>
<div class="tip" id="fs12">val fillY : (int -&gt; int -&gt; bool)<br /><em><br /><br />&#160;Recursive function that fills a specified &#39;x&#39; line<br />&#160;(returns false as soon as any call to &#39;f&#39; fails, or true)</em></div>
<div class="tip" id="fs13">val x : int</div>
<div class="tip" id="fs14">val y : int</div>
<div class="tip" id="fs15">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs16">val v : &#39;a</div>
<div class="tip" id="fs17">val fillX : (int -&gt; bool)<br /><em><br /><br />&#160;Recursive function that iterates over all &#39;x&#39; positions<br />&#160;and calls &#39;fillY&#39; to fill individual lines</em></div>
<div class="tip" id="fs18">union case Option.None: Option&lt;&#39;T&gt;</div>

