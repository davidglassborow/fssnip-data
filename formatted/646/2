<h2><a name="Ninety-Nine-F-Problems-Problems-31-41-Arithmetic" class="anchor" href="#Ninety-Nine-F-Problems-Problems-31-41-Arithmetic">Ninety-Nine F# Problems - Problems 31 - 41 - Arithmetic</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Ninety-Nine F# Problems - Problems 31 - 41 </span>
<span class="c">///</span>
<span class="c">/// These are F# solutions of Ninety-Nine Haskell Problems </span>
<span class="c">/// (http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems), </span>
<span class="c">/// which are themselves translations of Ninety-Nine Lisp Problems</span>
<span class="c">/// (http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html)</span>
<span class="c">/// and Ninety-Nine Prolog Problems</span>
<span class="c">/// (https://sites.google.com/site/prologsite/prolog-problems).</span>
<span class="c">///</span>
<span class="c">/// If you would like to contribute a solution or fix any bugs, send </span>
<span class="c">/// an email to paks at kitiara dot org with the subject &quot;99 F# problems&quot;. </span>
<span class="c">/// I&#39;ll try to update the problem as soon as possible.</span>
<span class="c">///</span>
<span class="c">/// The problems have different levels of difficulty. Those marked with a single asterisk (*) </span>
<span class="c">/// are easy. If you have successfully solved the preceeding problems you should be able to </span>
<span class="c">/// solve them within a few (say 15) minutes. Problems marked with two asterisks (**) are of </span>
<span class="c">/// intermediate difficulty. If you are a skilled F# programmer it shouldn&#39;t take you more than </span>
<span class="c">/// 30-90 minutes to solve them. Problems marked with three asterisks (***) are more difficult. </span>
<span class="c">/// You may need more time (i.e. a few hours or more) to find a good solution</span>
<span class="c">///</span>
<span class="c">/// Though the problems number from 1 to 99, there are some gaps and some additions marked with </span>
<span class="c">/// letters. There are actually only 88 problems.</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-31-Determine-whether-a-given-integer-number-is-prime" class="anchor" href="#Problem-31-Determine-whether-a-given-integer-number-is-prime">(<em></em>) Problem 31 : Determine whether a given integer number is prime.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Example: </span>
<span class="c">/// * (is-prime 7)</span>
<span class="c">/// T</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; isPrime 7;;</span>
<span class="c">/// val it : bool = true</span>

<span id="fst1" onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1, document.getElementById('fst1'))" class="omitted">(Solution 1)</span>

<span id="fst2" onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2, document.getElementById('fst2'))" class="omitted">(Solution 2)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-32-Determine-the-greatest-common-divisor-of-two-positive-integer-numbers-Use-Euclid-s-algorithm" class="anchor" href="#Problem-32-Determine-the-greatest-common-divisor-of-two-positive-integer-numbers-Use-Euclid-s-algorithm">(<em></em>) Problem 32 : Determine the greatest common divisor of two positive integer numbers. Use Euclid's algorithm.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Example: </span>
<span class="c">/// * (gcd 36 63)</span>
<span class="c">/// 9</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; [gcd 36 63; gcd (-3) (-6); gcd (-3) 6];;</span>
<span class="c">/// val it : int list = [9; 3; 3]</span>

<span id="fst3" onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3, document.getElementById('fst3'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-33-Determine-whether-two-positive-integer-numbers-are-coprime" class="anchor" href="#Problem-33-Determine-whether-two-positive-integer-numbers-are-coprime">(*) Problem 33 : Determine whether two positive integer numbers are coprime.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Two numbers are coprime if their greatest common divisor equals 1.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (coprime 35 64)</span>
<span class="c">/// T</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; coprime 35 64;;</span>
<span class="c">/// val it : bool = true</span>

<span id="fst4" onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4, document.getElementById('fst4'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-34-Calculate-Euler-s-totient-function-phi-m" class="anchor" href="#Problem-34-Calculate-Euler-s-totient-function-phi-m">(<em></em>) Problem 34 : Calculate Euler's totient function phi(m).</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Euler&#39;s so-called totient function phi(m) is defined as the number of </span>
<span class="c">/// positive integers r (1 &lt;= r &lt; m) that are coprime to m.</span>
<span class="c">///  </span>
<span class="c">/// Example: m = 10: r = 1,3,7,9; thus phi(m) = 4. Note the special case: phi(1) = 1.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (totient-phi 10)</span>
<span class="c">/// 4</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; totient 10;;</span>
<span class="c">/// val it : int = 4</span>

<span id="fst5" onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5, document.getElementById('fst5'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-35-Determine-the-prime-factors-of-a-given-positive-integer" class="anchor" href="#Problem-35-Determine-the-prime-factors-of-a-given-positive-integer">(<em></em>) Problem 35 : Determine the prime factors of a given positive integer.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Construct a flat list containing the prime factors in ascending order.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (prime-factors 315)</span>
<span class="c">/// (3 3 5 7)</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; primeFactors 315;;</span>
<span class="c">/// val it : int list = [3; 3; 5; 7]</span>

<span id="fst6" onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6, document.getElementById('fst6'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-36-Determine-the-prime-factors-of-a-given-positive-integer" class="anchor" href="#Problem-36-Determine-the-prime-factors-of-a-given-positive-integer">(<em></em>) Problem 36 : Determine the prime factors of a given positive integer.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// </span>
<span class="c">/// Construct a list containing the prime factors and their multiplicity. </span>
<span class="c">/// </span>
<span class="c">/// Example: </span>
<span class="c">/// * (prime-factors-mult 315)</span>
<span class="c">/// ((3 2) (5 1) (7 1))</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; primeFactorsMult 315;;</span>
<span class="c">/// [(3,2);(5,1);(7,1)]</span>

<span id="fst7" onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7, document.getElementById('fst7'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-37-Calculate-Euler-s-totient-function-phi-m-improved" class="anchor" href="#Problem-37-Calculate-Euler-s-totient-function-phi-m-improved">(<em></em>) Problem 37 : Calculate Euler's totient function phi(m) (improved).</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// See problem 34 for the definition of Euler&#39;s totient function. If the list of the prime </span>
<span class="c">/// factors of a number m is known in the form of problem 36 then the function phi(m) </span>
<span class="c">/// can be efficiently calculated as follows: Let ((p1 m1) (p2 m2) (p3 m3) ...) be the list of </span>
<span class="c">/// prime factors (and their multiplicities) of a given number m. Then phi(m) can be </span>
<span class="c">/// calculated with the following formula:</span>
<span class="c">///  phi(m) = (p1 - 1) * p1 ** (m1 - 1) + </span>
<span class="c">///          (p2 - 1) * p2 ** (m2 - 1) + </span>
<span class="c">///          (p3 - 1) * p3 ** (m3 - 1) + ...</span>
<span class="c">///  </span>
<span class="c">/// Note that a ** b stands for the b&#39;th power of a. </span>
<span class="c">/// </span>
<span class="c">/// Note: Actually, the official problems show this as a sum, but it should be a product.</span>
<span class="c">/// &gt; phi 10;;</span>
<span class="c">/// val it : int = 4</span>

<span id="fst8" onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8, document.getElementById('fst8'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-38-Compare-the-two-methods-of-calculating-Euler-s-totient-function" class="anchor" href="#Problem-38-Compare-the-two-methods-of-calculating-Euler-s-totient-function">(*) Problem 38 : Compare the two methods of calculating Euler's totient function.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Use the solutions of problems 34 and 37 to compare the algorithms. Take the </span>
<span class="c">/// number of reductions as a measure for efficiency. Try to calculate phi(10090) as an </span>
<span class="c">/// example.</span>
<span class="c">///  </span>
<span class="c">/// (no solution required) </span>
<span class="c">/// </span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-39-A-list-of-prime-numbers" class="anchor" href="#Problem-39-A-list-of-prime-numbers">(*) Problem 39 : A list of prime numbers.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
<span class="l">8: </span>
<span class="l">9: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Given a range of integers by its lower and upper limit, construct a list of all prime numbers</span>
<span class="c">/// in that range.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; primesR 10 20;;</span>
<span class="c">/// val it : int list = [11; 13; 17; 19]</span>

<span id="fst9" onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9, document.getElementById('fst9'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-40-Goldbach-s-conjecture" class="anchor" href="#Problem-40-Goldbach-s-conjecture">(<em></em>) Problem 40 : Goldbach's conjecture.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Goldbach&#39;s conjecture says that every positive even number greater than 2 is the </span>
<span class="c">/// sum of two prime numbers. Example: 28 = 5 + 23. It is one of the most famous facts </span>
<span class="c">/// in number theory that has not been proved to be correct in the general case. It has </span>
<span class="c">/// been numerically confirmed up to very large numbers (much larger than we can go </span>
<span class="c">/// with our Prolog system). Write a predicate to find the two prime numbers that sum up </span>
<span class="c">/// to a given even integer.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (goldbach 28)</span>
<span class="c">/// (5 23)</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// *goldbach 28</span>
<span class="c">/// val it : int * int = (5, 23)</span>

<span id="fst10" onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10, document.getElementById('fst10'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-41-Given-a-range-of-integers-by-its-lower-and-upper-limit-print-a-list-of-all-even-numbers-and-their-Goldbach-composition" class="anchor" href="#Problem-41-Given-a-range-of-integers-by-its-lower-and-upper-limit-print-a-list-of-all-even-numbers-and-their-Goldbach-composition">(<em></em>) Problem 41 : Given a range of integers by its lower and upper limit, print a list of all even numbers and their Goldbach composition.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// In most cases, if an even number is written as the sum of two prime numbers, one of </span>
<span class="c">/// them is very small. Very rarely, the primes are both bigger than say 50. Try to find </span>
<span class="c">/// out how many such cases there are in the range 2..3000.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (goldbach-list 9 20)</span>
<span class="c">/// 10 = 3 + 7</span>
<span class="c">/// 12 = 5 + 7</span>
<span class="c">/// 14 = 3 + 11</span>
<span class="c">/// 16 = 3 + 13</span>
<span class="c">/// 18 = 5 + 13</span>
<span class="c">/// 20 = 3 + 17</span>
<span class="c">/// * (goldbach-list 1 2000 50)</span>
<span class="c">/// 992 = 73 + 919</span>
<span class="c">/// 1382 = 61 + 1321</span>
<span class="c">/// 1856 = 67 + 1789</span>
<span class="c">/// 1928 = 61 + 1867</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; goldbachList 9 20;;</span>
<span class="c">/// val it : (int * int) list =</span>
<span class="c">///   [(3, 7); (5, 7); (3, 11); (3, 13); (5, 13); (3, 17)]</span>
<span class="c">/// &gt; goldbachList&#39; 4 2000 50</span>
<span class="c">/// val it : (int * int) list = [(73, 919); (61, 1321); (67, 1789); (61, 1867)]</span>

<span id="fst11" onmouseout="hideTip(event, 'fs11', 11)" onmouseover="showTip(event, 'fs11', 11, document.getElementById('fst11'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">//naive solution<br />let isPrime n = <br />&#160;&#160;&#160;&#160;let sqrtn n = int &lt;| sqrt (float n)<br />&#160;&#160;&#160;&#160;seq { 2 .. sqrtn n } |&gt; Seq.exists(fun i -&gt; n % i = 0) |&gt; not</div>
<div class="tip" id="fs2">// Miller-Rabin primality test<br />open System.Numerics<br /><br />let pow&#39; mul sq x&#39; n&#39; = <br />&#160;&#160;&#160;&#160;let rec f x n y = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if n = 1I then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mul x y<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (q,r) = BigInteger.DivRem(n, 2I)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x2 = sq x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if r = 0I then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f x2 q y<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f x2 q (mul x y)<br />&#160;&#160;&#160;&#160;f x&#39; n&#39; 1I<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<br />let mulMod (a :bigint) b c = (b * c) % a<br />let squareMod (a :bigint) b = (b * b) % a<br />let powMod m = pow&#39; (mulMod m) (squareMod m)<br />let iterate f = Seq.unfold(fun x -&gt; let fx = f x in Some(x,fx))<br /><br />///See: http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test<br />let millerRabinPrimality n a =<br />&#160;&#160;&#160;&#160;let find2km n = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rec f k m = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (q,r) = BigInteger.DivRem(m, 2I)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if r = 1I then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(k,m)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f (k+1I) q<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f 0I n<br />&#160;&#160;&#160;&#160;let n&#39; = n - 1I<br />&#160;&#160;&#160;&#160;let iter = Seq.tryPick(fun x -&gt; if x = 1I then Some(false) elif x = n&#39; then Some(true) else None)<br />&#160;&#160;&#160;&#160;let (k,m) = find2km n&#39;<br />&#160;&#160;&#160;&#160;let b0 = powMod n a m<br /><br />&#160;&#160;&#160;&#160;match (a,n) with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _ when a &lt;= 1I &amp;&amp; a &gt;= n&#39; -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;failwith (sprintf &quot;millerRabinPrimality: a out of range (%A for %A)&quot; a n)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _ when b0 = 1I || b0 = n&#39; -&gt; true<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _  -&gt; b0 <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; iterate (squareMod n) <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; Seq.take(int k)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; Seq.skip 1 <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; iter <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; Option.exists id <br /><br />///For Miller-Rabin the witnesses need to be selected at random from the interval [2, n - 2]. <br />///More witnesses =&gt; better accuracy of the test.<br />///Also, remember that if Miller-Rabin returns true, then the number is _probable_ prime. <br />///If it returns false the number is composite.<br />let isPrimeW witnesses = function<br />&#160;&#160;&#160;&#160;| n when n &lt; 2I -&gt; false<br />&#160;&#160;&#160;&#160;| n when n = 2I -&gt; true<br />&#160;&#160;&#160;&#160;| n when n = 3I -&gt; true<br />&#160;&#160;&#160;&#160;| n when n % 2I = 0I -&gt; false<br />&#160;&#160;&#160;&#160;| n             -&gt; witnesses |&gt; Seq.forall(millerRabinPrimality n)<br /><br />// let isPrime&#39; = isPrimeW [2I;3I] // Two witnesses<br />// let p = pown 2I 4423 - 1I // 20th Mersenne prime. 1,332 digits<br />// isPrime&#39; p |&gt; printfn &quot;%b&quot;;;<br />// Real: 00:00:03.184, CPU: 00:00:03.104, GC gen0: 12, gen1: 0, gen2: 0<br />// val it : bool = true</div>
<div class="tip" id="fs3">let rec gcd a b =<br />&#160;&#160;&#160;&#160;if b = 0 then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;abs a<br />&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gcd b (a % b)</div>
<div class="tip" id="fs4">// using problem 32<br />let coprime a b = gcd a b = 1</div>
<div class="tip" id="fs5">// naive implementation. For a better solution see problem 37<br />let totient n = seq { 1 .. n - 1} |&gt; Seq.filter (gcd n &gt;&gt; (=) 1) |&gt; Seq.length</div>
<div class="tip" id="fs6">let primeFactors n =<br />&#160;&#160;&#160;&#160;let sqrtn n = int &lt;| sqrt (float n)<br />&#160;&#160;&#160;&#160;let get n =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sq = sqrtn n<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// this can be made faster by using a prime generator like this one : <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://github.com/paks/ProjectEuler/tree/master/Euler/Primegen<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;seq { yield 2; yield! seq {3 .. 2 .. sq} } |&gt; Seq.tryFind (fun x -&gt; n % x = 0) <br />&#160;&#160;&#160;&#160;let divSeq = n |&gt; Seq.unfold(fun x -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if x = 1 then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match get x with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| None -&gt; Some(x, 1) // x it&#39;s prime<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(divisor) -&gt; Some(divisor, x/divisor))<br />&#160;&#160;&#160;&#160;divSeq |&gt; List.ofSeq</div>
<div class="tip" id="fs7">// using problem 35<br />let primeFactorsMult n =<br />&#160;&#160;&#160;&#160;let sqrtn n = int &lt;| sqrt (float n)<br />&#160;&#160;&#160;&#160;let get n =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sq = sqrtn n<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// this can be made faster by using a prime generator like this one : <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://github.com/paks/ProjectEuler/tree/master/Euler/Primegen<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;seq { yield 2; yield! seq {3 .. 2 .. sq} } |&gt; Seq.tryFind (fun x -&gt; n % x = 0) <br />&#160;&#160;&#160;&#160;let divSeq = n |&gt; Seq.unfold(fun x -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if x = 1 then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match get x with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| None -&gt; Some(x, 1) // x it&#39;s prime<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(divisor) -&gt; Some(divisor, x/divisor))<br />&#160;&#160;&#160;&#160;divSeq |&gt; Seq.countBy id |&gt; List.ofSeq</div>
<div class="tip" id="fs8">// using problem 36<br />let phi = primeFactorsMult &gt;&gt; Seq.fold(fun acc (p,m) -&gt; (p - 1) * pown p (m - 1) * acc) 1</div>
<div class="tip" id="fs9">// using problem 31<br />let primeR a b = seq { a .. b } |&gt; Seq.filter isPrime |&gt; List.ofSeq</div>
<div class="tip" id="fs10">// using problem 31. Very slow on big numbers due to the implementation of primeR. To speed this up use a prime generator.<br />let goldbach n =<br />&#160;&#160;&#160;&#160;let primes = primeR 2 n |&gt; Array.ofList<br />&#160;&#160;&#160;&#160;let rec findPairSum (arr: int array) front back =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sum = arr.[front] + arr.[back]<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match compare sum n with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| -1 -&gt; findPairSum arr (front + 1) back<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|  0 -&gt; Some(arr.[front] , arr.[back])<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|  1 -&gt; findPairSum arr front (back - 1)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|  _ -&gt; failwith &quot;not possible&quot;<br />&#160;&#160;&#160;&#160;Option.get &lt;| findPairSum primes 0 (primes.Length - 1)</div>
<div class="tip" id="fs11">let goldbachList a b =<br />&#160;&#160;&#160;&#160;let start = if a % 2 &lt;&gt; 0 then a + 1 else a<br />&#160;&#160;&#160;&#160;seq { start .. 2 .. b } |&gt; Seq.map goldbach |&gt; List.ofSeq<br /><br />let goldbachList&#39; a b limit = goldbachList a b |&gt; List.filter(fst &gt;&gt; (&lt;) limit)</div>

