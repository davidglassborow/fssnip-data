<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">    <span class="c">/// &lt;summary&gt;</span>
    <span class="c">/// Represents stdin as an infinite sequence of ints.</span>
    <span class="c">/// &lt;/summary&gt;</span>
    <span class="c">/// &lt;remarks&gt;</span>
    <span class="c">/// This function represents a sequence of ints that are read from &#39;stdin&#39;. The sequence terminates whenever a value is read that is equal</span>
    <span class="c">/// to any of the values in the &#39;chars&#39; argument. If stdin is mapped to the console then you can passs 13 as the &#39;enter&#39; key code so that the</span>
    <span class="c">/// sequence terminates when the user presses &#39;enter&#39;. If stdin is mapped to a file then you can use -1 as the code that corresponds</span>
    <span class="c">/// to the end of file code.</span>
    <span class="c">/// &lt;/remarks&gt; </span>
    <span class="c">/// &lt;param name=&quot;chars&quot;&gt;A list (which may be empty) of termination codes, any one of which will cause the sequence to end and excludes the termination code.&lt;/param&gt;</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">inseq</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">terminators</span> <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">get_char</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">chars</span> <span class="o">=</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">code</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">Operators</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="i">stdin</span><span class="o">.</span><span class="f">Read</span>()
            <span class="k">match</span> <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="i">chars</span> <span class="k">with</span>
            | _    <span class="k">when</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="f">exists</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="i">code</span>) <span onmouseout="hideTip(event, 'fs4', 14)" onmouseover="showTip(event, 'fs4', 14)" class="i">chars</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="p">None</span>
            | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="f">char</span> <span onmouseout="hideTip(event, 'fs5', 18)" onmouseover="showTip(event, 'fs5', 18)" class="i">code</span>, <span class="n">0</span>)

        (<span onmouseout="hideTip(event, 'fs8', 19)" onmouseover="showTip(event, 'fs8', 19)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="f">unfold</span> (<span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 21)" onmouseover="showTip(event, 'fs3', 21)" class="f">get_char</span> <span onmouseout="hideTip(event, 'fs2', 22)" onmouseover="showTip(event, 'fs2', 22)" class="i">terminators</span>) <span class="n">0</span>) 
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val inseq : terminators:seq&lt;int&gt; -&gt; seq&lt;char&gt;<br /><br />Full name: Script.inseq<br /><em><br /><br />&#160;&lt;summary&gt;<br />&#160;Represents stdin as an infinite sequence of ints.<br />&#160;&lt;/summary&gt;<br />&#160;&lt;remarks&gt;<br />&#160;This function represents a sequence of ints that are read from &#39;stdin&#39;. The sequence terminates whenever a value is read that is equal<br />&#160;to any of the values in the &#39;chars&#39; argument. If stdin is mapped to the console then you can passs 13 as the &#39;enter&#39; key code so that the<br />&#160;sequence terminates when the user presses &#39;enter&#39;. If stdin is mapped to a file then you can use -1 as the code that corresponds<br />&#160;to the end of file code.<br />&#160;&lt;/remarks&gt; <br />&#160;&lt;param name=&quot;chars&quot;&gt;A list (which may be empty) of termination codes, any one of which will cause the sequence to end and excludes the termination code.&lt;/param&gt;</em></div>
<div class="tip" id="fs2">val terminators : seq&lt;int&gt;</div>
<div class="tip" id="fs3">val get_char : (seq&lt;int&gt; -&gt; (char * int) option)</div>
<div class="tip" id="fs4">val chars : seq&lt;int&gt;</div>
<div class="tip" id="fs5">val code : int</div>
<div class="tip" id="fs6">module Operators<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs7">val stdin&lt;&#39;T&gt; : System.IO.TextReader<br /><br />Full name: Microsoft.FSharp.Core.Operators.stdin</div>
<div class="tip" id="fs8">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs9">val exists : predicate:(&#39;T -&gt; bool) -&gt; source:seq&lt;&#39;T&gt; -&gt; bool<br /><br />Full name: Microsoft.FSharp.Collections.Seq.exists</div>
<div class="tip" id="fs10">val x : int</div>
<div class="tip" id="fs11">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs12">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs13">Multiple items<br />val char : value:&#39;T -&gt; char (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.char<br /><br />--------------------<br />type char = System.Char<br /><br />Full name: Microsoft.FSharp.Core.char</div>
<div class="tip" id="fs14">val unfold : generator:(&#39;State -&gt; (&#39;T * &#39;State) option) -&gt; state:&#39;State -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.unfold</div>

