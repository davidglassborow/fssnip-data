<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">minimumCovering</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">col1</span> (<span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">col2</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">int</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">list</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs2', 6)" onmouseover="showTip(event, 'fs2', 6)" class="i">col1</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">mapi</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">i</span> <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="t">Math</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="f">Max</span>(<span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs3', 15)" onmouseover="showTip(event, 'fs3', 15)" class="i">col2</span><span class="o">.</span>[<span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="i">i</span>]))    
    
<span onmouseout="hideTip(event, 'fs1', 17)" onmouseover="showTip(event, 'fs1', 17)" class="f">minimumCovering</span> [<span class="n">1</span>;<span class="n">2</span>;<span class="n">5</span>;<span class="n">7</span>;<span class="n">9</span>;<span class="n">11</span>] [<span class="n">0</span>;<span class="n">3</span>;<span class="n">4</span>;<span class="n">6</span>;<span class="n">8</span>;<span class="n">10</span>]
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val minimumCovering : col1:int list -&gt; col2:int list -&gt; int list<br /><br />Full name: Script.minimumCovering</div>
<div class="tip" id="fs2">val col1 : int list</div>
<div class="tip" id="fs3">val col2 : int list</div>
<div class="tip" id="fs4">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs5">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs6">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs7">val mapi : mapping:(int -&gt; &#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.mapi</div>
<div class="tip" id="fs8">val i : int</div>
<div class="tip" id="fs9">val x : int</div>
<div class="tip" id="fs10">namespace System</div>
<div class="tip" id="fs11">type Math =<br />&#160;&#160;static val PI : float<br />&#160;&#160;static val E : float<br />&#160;&#160;static member Abs : value:sbyte -&gt; sbyte + 6 overloads<br />&#160;&#160;static member Acos : d:float -&gt; float<br />&#160;&#160;static member Asin : d:float -&gt; float<br />&#160;&#160;static member Atan : d:float -&gt; float<br />&#160;&#160;static member Atan2 : y:float * x:float -&gt; float<br />&#160;&#160;static member BigMul : a:int * b:int -&gt; int64<br />&#160;&#160;static member Ceiling : d:decimal -&gt; decimal + 1 overload<br />&#160;&#160;static member Cos : d:float -&gt; float<br />&#160;&#160;...<br /><br />Full name: System.Math</div>
<div class="tip" id="fs12">System.Math.Max(val1: decimal, val2: decimal) : decimal<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: float, val2: float) : float<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: float32, val2: float32) : float32<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: uint64, val2: uint64) : uint64<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: int64, val2: int64) : int64<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: uint32, val2: uint32) : uint32<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: int, val2: int) : int<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: uint16, val2: uint16) : uint16<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: int16, val2: int16) : int16<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />System.Math.Max(val1: byte, val2: byte) : byte<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>

