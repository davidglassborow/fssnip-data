<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Duck typed dereferencing operator. Duck typing enables us to use it with</span>
<span class="c">/// other types besides reference cells, for example, lazy values and options,</span>
<span class="c">/// as well as any of your own types that implement the Value property.</span>
<span class="k">let</span> <span class="k">inline</span> ( <span class="o">!</span> ) <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">x</span> <span class="o">=</span> (<span class="o">^</span><span class="i">X</span> <span class="o">:</span> (<span class="k">member</span> <span class="i">get_Value</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">unit</span> <span class="k">-&gt;</span> _) (<span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="i">x</span>))
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val x : &#39;X (requires member get_Value)</div>
<div class="tip" id="fs2">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>

