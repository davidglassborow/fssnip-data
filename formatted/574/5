<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
<span class="l">184: </span>
<span class="l">185: </span>
<span class="l">186: </span>
<span class="l">187: </span>
<span class="l">188: </span>
<span class="l">189: </span>
<span class="l">190: </span>
<span class="l">191: </span>
<span class="l">192: </span>
<span class="l">193: </span>
<span class="l">194: </span>
<span class="l">195: </span>
<span class="l">196: </span>
<span class="l">197: </span>
<span class="l">198: </span>
<span class="l">199: </span>
<span class="l">200: </span>
<span class="l">201: </span>
<span class="l">202: </span>
<span class="l">203: </span>
<span class="l">204: </span>
<span class="l">205: </span>
<span class="l">206: </span>
<span class="l">207: </span>
<span class="l">208: </span>
<span class="l">209: </span>
<span class="l">210: </span>
<span class="l">211: </span>
<span class="l">212: </span>
<span class="l">213: </span>
<span class="l">214: </span>
<span class="l">215: </span>
<span class="l">216: </span>
<span class="l">217: </span>
<span class="l">218: </span>
<span class="l">219: </span>
<span class="l">220: </span>
<span class="l">221: </span>
<span class="l">222: </span>
<span class="l">223: </span>
<span class="l">224: </span>
<span class="l">225: </span>
<span class="l">226: </span>
<span class="l">227: </span>
<span class="l">228: </span>
<span class="l">229: </span>
<span class="l">230: </span>
<span class="l">231: </span>
<span class="l">232: </span>
<span class="l">233: </span>
<span class="l">234: </span>
<span class="l">235: </span>
<span class="l">236: </span>
<span class="l">237: </span>
<span class="l">238: </span>
<span class="l">239: </span>
<span class="l">240: </span>
<span class="l">241: </span>
<span class="l">242: </span>
<span class="l">243: </span>
<span class="l">244: </span>
<span class="l">245: </span>
<span class="l">246: </span>
<span class="l">247: </span>
<span class="l">248: </span>
<span class="l">249: </span>
<span class="l">250: </span>
<span class="l">251: </span>
<span class="l">252: </span>
<span class="l">253: </span>
<span class="l">254: </span>
<span class="l">255: </span>
<span class="l">256: </span>
<span class="l">257: </span>
<span class="l">258: </span>
<span class="l">259: </span>
<span class="l">260: </span>
<span class="l">261: </span>
<span class="l">262: </span>
<span class="l">263: </span>
<span class="l">264: </span>
<span class="l">265: </span>
<span class="l">266: </span>
<span class="l">267: </span>
<span class="l">268: </span>
<span class="l">269: </span>
<span class="l">270: </span>
<span class="l">271: </span>
<span class="l">272: </span>
<span class="l">273: </span>
<span class="l">274: </span>
<span class="l">275: </span>
<span class="l">276: </span>
<span class="l">277: </span>
<span class="l">278: </span>
<span class="l">279: </span>
<span class="l">280: </span>
<span class="l">281: </span>
<span class="l">282: </span>
<span class="l">283: </span>
<span class="l">284: </span>
<span class="l">285: </span>
<span class="l">286: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="i">Generic</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 5)" onmouseover="showTip(event, 'fs1', 5)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="i">Reflection</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="i">Reflection</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="t">Message</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="t">string</span>
<span class="k">exception</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="t">TypeResolutionException</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="t">Message</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="t">Type</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="t">Lifetime</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="p">Singleton</span> | <span onmouseout="hideTip(event, 'fs14', 17)" onmouseover="showTip(event, 'fs14', 17)" class="p">Transient</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs15', 18)" onmouseover="showTip(event, 'fs15', 18)" class="t">AbstractType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="t">Type</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs16', 20)" onmouseover="showTip(event, 'fs16', 20)" class="t">ConcreteType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="t">Type</span>
<span class="k">type</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs17', 22)" onmouseover="showTip(event, 'fs17', 22)" class="t">Constructor</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 23)" onmouseover="showTip(event, 'fs18', 23)" class="p">Reflected</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="t">ConcreteType</span> | <span onmouseout="hideTip(event, 'fs19', 25)" onmouseover="showTip(event, 'fs19', 25)" class="p">Factory</span> <span class="k">of</span> (<span onmouseout="hideTip(event, 'fs20', 26)" onmouseover="showTip(event, 'fs20', 26)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs21', 27)" onmouseover="showTip(event, 'fs21', 27)" class="t">obj</span>)
<span class="k">let</span> <span class="k">private</span> (|<span class="p">FunType</span>|_|) <span onmouseout="hideTip(event, 'fs22', 28)" onmouseover="showTip(event, 'fs22', 28)" class="i">t</span> <span class="o">=</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs23', 29)" onmouseover="showTip(event, 'fs23', 29)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 30)" onmouseover="showTip(event, 'fs24', 30)" class="f">IsFunction</span> <span onmouseout="hideTip(event, 'fs22', 31)" onmouseover="showTip(event, 'fs22', 31)" class="i">t</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs23', 32)" onmouseover="showTip(event, 'fs23', 32)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs25', 33)" onmouseover="showTip(event, 'fs25', 33)" class="f">GetFunctionElements</span> <span onmouseout="hideTip(event, 'fs22', 34)" onmouseover="showTip(event, 'fs22', 34)" class="i">t</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 35)" onmouseover="showTip(event, 'fs26', 35)" class="p">Some</span>
    <span class="k">else</span> <span onmouseout="hideTip(event, 'fs27', 36)" onmouseover="showTip(event, 'fs27', 36)" class="p">None</span>
<span class="k">let</span> <span class="k">private</span> (|<span class="p">SeqType</span>|_|) (<span onmouseout="hideTip(event, 'fs22', 37)" onmouseover="showTip(event, 'fs22', 37)" class="i">t</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs11', 38)" onmouseover="showTip(event, 'fs11', 38)" class="t">Type</span>) <span class="o">=</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs22', 39)" onmouseover="showTip(event, 'fs22', 39)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 40)" onmouseover="showTip(event, 'fs28', 40)" class="i">IsGenericType</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs22', 41)" onmouseover="showTip(event, 'fs22', 41)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 42)" onmouseover="showTip(event, 'fs29', 42)" class="f">GetGenericTypeDefinition</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 43)" onmouseover="showTip(event, 'fs30', 43)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs31', 44)" onmouseover="showTip(event, 'fs31', 44)" class="t">IEnumerable</span><span class="o">&lt;</span>_<span class="o">&gt;</span><span class="o">&gt;</span>
    <span class="k">then</span> <span onmouseout="hideTip(event, 'fs22', 45)" onmouseover="showTip(event, 'fs22', 45)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 46)" onmouseover="showTip(event, 'fs32', 46)" class="f">GetGenericArguments</span>()<span class="o">.</span>[<span class="n">0</span>] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 47)" onmouseover="showTip(event, 'fs26', 47)" class="p">Some</span>
    <span class="k">else</span> <span onmouseout="hideTip(event, 'fs27', 48)" onmouseover="showTip(event, 'fs27', 48)" class="p">None</span>
<span class="k">let</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs33', 49)" onmouseover="showTip(event, 'fs33', 49)" class="f">toOption</span> <span class="o">=</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs34', 50)" onmouseover="showTip(event, 'fs34', 50)" class="p">Choice1Of2</span> <span onmouseout="hideTip(event, 'fs35', 51)" onmouseover="showTip(event, 'fs35', 51)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs26', 52)" onmouseover="showTip(event, 'fs26', 52)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs35', 53)" onmouseover="showTip(event, 'fs35', 53)" class="i">x</span> | <span onmouseout="hideTip(event, 'fs36', 54)" onmouseover="showTip(event, 'fs36', 54)" class="p">Choice2Of2</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 55)" onmouseover="showTip(event, 'fs27', 55)" class="p">None</span>
<span class="c">/// IoC Container</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs37', 56)" onmouseover="showTip(event, 'fs37', 56)" class="t">Container</span> () <span class="k">as</span> <span onmouseout="hideTip(event, 'fs38', 57)" onmouseover="showTip(event, 'fs38', 57)" class="v">container</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 58)" onmouseover="showTip(event, 'fs39', 58)" class="i">catalog</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs40', 59)" onmouseover="showTip(event, 'fs40', 59)" class="t">Dictionary</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs15', 60)" onmouseover="showTip(event, 'fs15', 60)" class="t">AbstractType</span>, <span onmouseout="hideTip(event, 'fs17', 61)" onmouseover="showTip(event, 'fs17', 61)" class="t">Constructor</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs12', 62)" onmouseover="showTip(event, 'fs12', 62)" class="t">Lifetime</span><span class="o">&gt;</span>()
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 63)" onmouseover="showTip(event, 'fs41', 63)" class="i">singletons</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs40', 64)" onmouseover="showTip(event, 'fs40', 64)" class="t">Dictionary</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs16', 65)" onmouseover="showTip(event, 'fs16', 65)" class="t">ConcreteType</span>,<span onmouseout="hideTip(event, 'fs21', 66)" onmouseover="showTip(event, 'fs21', 66)" class="t">obj</span><span class="o">&gt;</span>()
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs42', 67)" onmouseover="showTip(event, 'fs42', 67)" class="f">tryResolve</span> <span onmouseout="hideTip(event, 'fs43', 68)" onmouseover="showTip(event, 'fs43', 68)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs44', 69)" onmouseover="showTip(event, 'fs44', 69)" class="i">t</span> <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs39', 70)" onmouseover="showTip(event, 'fs39', 70)" class="i">catalog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 71)" onmouseover="showTip(event, 'fs45', 71)" class="f">TryGetValue</span> <span onmouseout="hideTip(event, 'fs44', 72)" onmouseover="showTip(event, 'fs44', 72)" class="i">t</span> <span class="k">with</span>
        | <span class="k">true</span>, (<span onmouseout="hideTip(event, 'fs18', 73)" onmouseover="showTip(event, 'fs18', 73)" class="p">Reflected</span> <span onmouseout="hideTip(event, 'fs46', 74)" onmouseover="showTip(event, 'fs46', 74)" class="i">u</span> , <span onmouseout="hideTip(event, 'fs47', 75)" onmouseover="showTip(event, 'fs47', 75)" class="i">lifetime</span>) <span class="k">-&gt;</span> 
            <span onmouseout="hideTip(event, 'fs48', 76)" onmouseover="showTip(event, 'fs48', 76)" class="f">tryObtain</span> <span onmouseout="hideTip(event, 'fs46', 77)" onmouseover="showTip(event, 'fs46', 77)" class="i">u</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs49', 78)" onmouseover="showTip(event, 'fs49', 78)" class="f">tryReflect</span> <span onmouseout="hideTip(event, 'fs43', 79)" onmouseover="showTip(event, 'fs43', 79)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs46', 80)" onmouseover="showTip(event, 'fs46', 80)" class="i">u</span>) <span onmouseout="hideTip(event, 'fs47', 81)" onmouseover="showTip(event, 'fs47', 81)" class="i">lifetime</span>
        | <span class="k">true</span>, (<span onmouseout="hideTip(event, 'fs19', 82)" onmouseover="showTip(event, 'fs19', 82)" class="p">Factory</span> <span onmouseout="hideTip(event, 'fs50', 83)" onmouseover="showTip(event, 'fs50', 83)" class="f">f</span>, <span onmouseout="hideTip(event, 'fs47', 84)" onmouseover="showTip(event, 'fs47', 84)" class="i">lifetime</span>) <span class="k">-&gt;</span> 
            <span onmouseout="hideTip(event, 'fs48', 85)" onmouseover="showTip(event, 'fs48', 85)" class="f">tryObtain</span> <span onmouseout="hideTip(event, 'fs44', 86)" onmouseover="showTip(event, 'fs44', 86)" class="i">t</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs50', 87)" onmouseover="showTip(event, 'fs50', 87)" class="f">f</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs34', 88)" onmouseover="showTip(event, 'fs34', 88)" class="p">Choice1Of2</span>) <span onmouseout="hideTip(event, 'fs47', 89)" onmouseover="showTip(event, 'fs47', 89)" class="i">lifetime</span>
        | <span class="k">false</span>, _ <span class="k">-&gt;</span> 
            <span onmouseout="hideTip(event, 'fs48', 90)" onmouseover="showTip(event, 'fs48', 90)" class="f">tryObtain</span> <span onmouseout="hideTip(event, 'fs44', 91)" onmouseover="showTip(event, 'fs44', 91)" class="i">t</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs49', 92)" onmouseover="showTip(event, 'fs49', 92)" class="f">tryReflect</span> <span onmouseout="hideTip(event, 'fs43', 93)" onmouseover="showTip(event, 'fs43', 93)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs44', 94)" onmouseover="showTip(event, 'fs44', 94)" class="i">t</span>) <span onmouseout="hideTip(event, 'fs13', 95)" onmouseover="showTip(event, 'fs13', 95)" class="p">Singleton</span> 
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs48', 96)" onmouseover="showTip(event, 'fs48', 96)" class="f">tryObtain</span> <span onmouseout="hideTip(event, 'fs51', 97)" onmouseover="showTip(event, 'fs51', 97)" class="i">t</span> <span onmouseout="hideTip(event, 'fs52', 98)" onmouseover="showTip(event, 'fs52', 98)" class="f">f</span> <span onmouseout="hideTip(event, 'fs47', 99)" onmouseover="showTip(event, 'fs47', 99)" class="i">lifetime</span> <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs41', 100)" onmouseover="showTip(event, 'fs41', 100)" class="i">singletons</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs53', 101)" onmouseover="showTip(event, 'fs53', 101)" class="f">TryGetValue</span> <span onmouseout="hideTip(event, 'fs51', 102)" onmouseover="showTip(event, 'fs51', 102)" class="i">t</span> <span class="k">with</span>
        | <span class="k">true</span>, <span onmouseout="hideTip(event, 'fs54', 103)" onmouseover="showTip(event, 'fs54', 103)" class="i">value</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs34', 104)" onmouseover="showTip(event, 'fs34', 104)" class="p">Choice1Of2</span>(<span onmouseout="hideTip(event, 'fs54', 105)" onmouseover="showTip(event, 'fs54', 105)" class="i">value</span>)
        | <span class="k">false</span>, _ <span class="k">-&gt;</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 106)" onmouseover="showTip(event, 'fs55', 106)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs52', 107)" onmouseover="showTip(event, 'fs52', 107)" class="f">f</span>()
            <span onmouseout="hideTip(event, 'fs55', 108)" onmouseover="showTip(event, 'fs55', 108)" class="i">result</span> <span class="o">|&gt;</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs34', 109)" onmouseover="showTip(event, 'fs34', 109)" class="p">Choice1Of2</span> <span onmouseout="hideTip(event, 'fs54', 110)" onmouseover="showTip(event, 'fs54', 110)" class="i">value</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs56', 111)" onmouseover="showTip(event, 'fs56', 111)" class="f">store</span> <span onmouseout="hideTip(event, 'fs51', 112)" onmouseover="showTip(event, 'fs51', 112)" class="i">t</span> <span onmouseout="hideTip(event, 'fs54', 113)" onmouseover="showTip(event, 'fs54', 113)" class="i">value</span> <span onmouseout="hideTip(event, 'fs47', 114)" onmouseover="showTip(event, 'fs47', 114)" class="i">lifetime</span> | <span onmouseout="hideTip(event, 'fs36', 115)" onmouseover="showTip(event, 'fs36', 115)" class="p">Choice2Of2</span> _ <span class="k">-&gt;</span> ()
            <span onmouseout="hideTip(event, 'fs55', 116)" onmouseover="showTip(event, 'fs55', 116)" class="i">result</span>
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs56', 117)" onmouseover="showTip(event, 'fs56', 117)" class="f">store</span> <span onmouseout="hideTip(event, 'fs51', 118)" onmouseover="showTip(event, 'fs51', 118)" class="i">t</span> <span onmouseout="hideTip(event, 'fs54', 119)" onmouseover="showTip(event, 'fs54', 119)" class="i">value</span> <span class="o">=</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs13', 120)" onmouseover="showTip(event, 'fs13', 120)" class="p">Singleton</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs41', 121)" onmouseover="showTip(event, 'fs41', 121)" class="i">singletons</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs57', 122)" onmouseover="showTip(event, 'fs57', 122)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs51', 123)" onmouseover="showTip(event, 'fs51', 123)" class="i">t</span>,<span onmouseout="hideTip(event, 'fs54', 124)" onmouseover="showTip(event, 'fs54', 124)" class="i">value</span>) | <span onmouseout="hideTip(event, 'fs14', 125)" onmouseover="showTip(event, 'fs14', 125)" class="p">Transient</span> <span class="k">-&gt;</span> ()
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs49', 126)" onmouseover="showTip(event, 'fs49', 126)" class="f">tryReflect</span> <span onmouseout="hideTip(event, 'fs43', 127)" onmouseover="showTip(event, 'fs43', 127)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs51', 128)" onmouseover="showTip(event, 'fs51', 128)" class="i">t</span> <span class="o">=</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs43', 129)" onmouseover="showTip(event, 'fs43', 129)" class="i">cs</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs58', 130)" onmouseover="showTip(event, 'fs58', 130)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs59', 131)" onmouseover="showTip(event, 'fs59', 131)" class="f">exists</span> ((<span class="o">=</span>) <span onmouseout="hideTip(event, 'fs51', 132)" onmouseover="showTip(event, 'fs51', 132)" class="i">t</span>) 
        <span class="k">then</span> <span onmouseout="hideTip(event, 'fs36', 133)" onmouseover="showTip(event, 'fs36', 133)" class="p">Choice2Of2</span> <span class="s">&quot;Cycle detected&quot;</span>
        <span class="k">else</span> <span onmouseout="hideTip(event, 'fs60', 134)" onmouseover="showTip(event, 'fs60', 134)" class="f">tryConstructors</span> (<span onmouseout="hideTip(event, 'fs51', 135)" onmouseover="showTip(event, 'fs51', 135)" class="i">t</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs43', 136)" onmouseover="showTip(event, 'fs43', 136)" class="i">cs</span>) <span onmouseout="hideTip(event, 'fs51', 137)" onmouseover="showTip(event, 'fs51', 137)" class="i">t</span>
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs60', 138)" onmouseover="showTip(event, 'fs60', 138)" class="f">tryConstructors</span> <span onmouseout="hideTip(event, 'fs43', 139)" onmouseover="showTip(event, 'fs43', 139)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs51', 140)" onmouseover="showTip(event, 'fs51', 140)" class="i">t</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs51', 141)" onmouseover="showTip(event, 'fs51', 141)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs61', 142)" onmouseover="showTip(event, 'fs61', 142)" class="f">GetConstructors</span>()
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 143)" onmouseover="showTip(event, 'fs62', 143)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs63', 144)" onmouseover="showTip(event, 'fs63', 144)" class="f">sortBy</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs64', 145)" onmouseover="showTip(event, 'fs64', 145)" class="i">c</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs64', 146)" onmouseover="showTip(event, 'fs64', 146)" class="i">c</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 147)" onmouseover="showTip(event, 'fs65', 147)" class="f">GetParameters</span>()<span class="o">.</span><span class="i">Length</span>)
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 148)" onmouseover="showTip(event, 'fs62', 148)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs66', 149)" onmouseover="showTip(event, 'fs66', 149)" class="f">tryPick</span> (<span onmouseout="hideTip(event, 'fs67', 150)" onmouseover="showTip(event, 'fs67', 150)" class="f">tryConstructor</span> <span onmouseout="hideTip(event, 'fs43', 151)" onmouseover="showTip(event, 'fs43', 151)" class="i">cs</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs33', 152)" onmouseover="showTip(event, 'fs33', 152)" class="f">toOption</span>)
        <span class="o">|&gt;</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs26', 153)" onmouseover="showTip(event, 'fs26', 153)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs54', 154)" onmouseover="showTip(event, 'fs54', 154)" class="i">value</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs34', 155)" onmouseover="showTip(event, 'fs34', 155)" class="p">Choice1Of2</span> <span onmouseout="hideTip(event, 'fs54', 156)" onmouseover="showTip(event, 'fs54', 156)" class="i">value</span> | <span onmouseout="hideTip(event, 'fs27', 157)" onmouseover="showTip(event, 'fs27', 157)" class="p">None</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs36', 158)" onmouseover="showTip(event, 'fs36', 158)" class="p">Choice2Of2</span> <span class="s">&quot;Failed to find matching constructor&quot;</span>
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs67', 159)" onmouseover="showTip(event, 'fs67', 159)" class="f">tryConstructor</span> <span onmouseout="hideTip(event, 'fs43', 160)" onmouseover="showTip(event, 'fs43', 160)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs68', 161)" onmouseover="showTip(event, 'fs68', 161)" class="i">ci</span> <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs69', 162)" onmouseover="showTip(event, 'fs69', 162)" class="i">ps</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs68', 163)" onmouseover="showTip(event, 'fs68', 163)" class="i">ci</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 164)" onmouseover="showTip(event, 'fs65', 164)" class="f">GetParameters</span>()
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs70', 165)" onmouseover="showTip(event, 'fs70', 165)" class="i">args</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 166)" onmouseover="showTip(event, 'fs69', 166)" class="i">ps</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 167)" onmouseover="showTip(event, 'fs62', 167)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs71', 168)" onmouseover="showTip(event, 'fs71', 168)" class="f">choose</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs72', 169)" onmouseover="showTip(event, 'fs72', 169)" class="i">p</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs73', 170)" onmouseover="showTip(event, 'fs73', 170)" class="f">tryResolveArgument</span> <span onmouseout="hideTip(event, 'fs43', 171)" onmouseover="showTip(event, 'fs43', 171)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs72', 172)" onmouseover="showTip(event, 'fs72', 172)" class="i">p</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs74', 173)" onmouseover="showTip(event, 'fs74', 173)" class="i">ParameterType</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs33', 174)" onmouseover="showTip(event, 'fs33', 174)" class="f">toOption</span>)
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs70', 175)" onmouseover="showTip(event, 'fs70', 175)" class="i">args</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs75', 176)" onmouseover="showTip(event, 'fs75', 176)" class="i">Length</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 177)" onmouseover="showTip(event, 'fs69', 177)" class="i">ps</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs75', 178)" onmouseover="showTip(event, 'fs75', 178)" class="i">Length</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs70', 179)" onmouseover="showTip(event, 'fs70', 179)" class="i">args</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs68', 180)" onmouseover="showTip(event, 'fs68', 180)" class="i">ci</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs76', 181)" onmouseover="showTip(event, 'fs76', 181)" class="f">Invoke</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs34', 182)" onmouseover="showTip(event, 'fs34', 182)" class="p">Choice1Of2</span>
        <span class="k">else</span> <span onmouseout="hideTip(event, 'fs36', 183)" onmouseover="showTip(event, 'fs36', 183)" class="p">Choice2Of2</span> <span class="s">&quot;Failed to resolve all parameters of constructor&quot;</span>
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs73', 184)" onmouseover="showTip(event, 'fs73', 184)" class="f">tryResolveArgument</span> <span onmouseout="hideTip(event, 'fs43', 185)" onmouseover="showTip(event, 'fs43', 185)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs22', 186)" onmouseover="showTip(event, 'fs22', 186)" class="i">t</span> <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs22', 187)" onmouseover="showTip(event, 'fs22', 187)" class="i">t</span> <span class="k">with</span>
        | <span onmouseout="hideTip(event, 'fs77', 188)" onmouseover="showTip(event, 'fs77', 188)" class="p">FunType</span>(<span onmouseout="hideTip(event, 'fs78', 189)" onmouseover="showTip(event, 'fs78', 189)" class="i">arg</span>,<span onmouseout="hideTip(event, 'fs79', 190)" onmouseover="showTip(event, 'fs79', 190)" class="i">result</span>) <span class="k">when</span> <span onmouseout="hideTip(event, 'fs78', 191)" onmouseover="showTip(event, 'fs78', 191)" class="i">arg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs80', 192)" onmouseover="showTip(event, 'fs80', 192)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs20', 193)" onmouseover="showTip(event, 'fs20', 193)" class="t">unit</span><span class="o">&gt;</span> <span class="k">-&gt;</span>
            <span onmouseout="hideTip(event, 'fs81', 194)" onmouseover="showTip(event, 'fs81', 194)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 195)" onmouseover="showTip(event, 'fs82', 195)" class="f">MakeFunction</span>(<span onmouseout="hideTip(event, 'fs22', 196)" onmouseover="showTip(event, 'fs22', 196)" class="i">t</span>,<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs83', 197)" onmouseover="showTip(event, 'fs83', 197)" class="i">args</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs38', 198)" onmouseover="showTip(event, 'fs38', 198)" class="v">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 199)" onmouseover="showTip(event, 'fs84', 199)" class="f">Resolve</span>(<span onmouseout="hideTip(event, 'fs79', 200)" onmouseover="showTip(event, 'fs79', 200)" class="i">result</span>)) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs34', 201)" onmouseover="showTip(event, 'fs34', 201)" class="p">Choice1Of2</span>
        | <span onmouseout="hideTip(event, 'fs85', 202)" onmouseover="showTip(event, 'fs85', 202)" class="p">SeqType</span> <span onmouseout="hideTip(event, 'fs22', 203)" onmouseover="showTip(event, 'fs22', 203)" class="i">t</span> <span class="k">-&gt;</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs86', 204)" onmouseover="showTip(event, 'fs86', 204)" class="i">interfaces</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 205)" onmouseover="showTip(event, 'fs39', 205)" class="i">catalog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs87', 206)" onmouseover="showTip(event, 'fs87', 206)" class="i">Keys</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 207)" onmouseover="showTip(event, 'fs88', 207)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs89', 208)" onmouseover="showTip(event, 'fs89', 208)" class="f">filter</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs90', 209)" onmouseover="showTip(event, 'fs90', 209)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs90', 210)" onmouseover="showTip(event, 'fs90', 210)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs91', 211)" onmouseover="showTip(event, 'fs91', 211)" class="f">GetInterfaces</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 212)" onmouseover="showTip(event, 'fs88', 212)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs92', 213)" onmouseover="showTip(event, 'fs92', 213)" class="f">exists</span> ((<span class="o">=</span>) <span onmouseout="hideTip(event, 'fs22', 214)" onmouseover="showTip(event, 'fs22', 214)" class="i">t</span>))
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs93', 215)" onmouseover="showTip(event, 'fs93', 215)" class="i">subTypes</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 216)" onmouseover="showTip(event, 'fs39', 216)" class="i">catalog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs87', 217)" onmouseover="showTip(event, 'fs87', 217)" class="i">Keys</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 218)" onmouseover="showTip(event, 'fs88', 218)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs89', 219)" onmouseover="showTip(event, 'fs89', 219)" class="f">filter</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs90', 220)" onmouseover="showTip(event, 'fs90', 220)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs90', 221)" onmouseover="showTip(event, 'fs90', 221)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 222)" onmouseover="showTip(event, 'fs94', 222)" class="f">IsSubclassOf</span> <span onmouseout="hideTip(event, 'fs22', 223)" onmouseover="showTip(event, 'fs22', 223)" class="i">t</span>)
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs95', 224)" onmouseover="showTip(event, 'fs95', 224)" class="i">values</span> <span class="o">=</span>
                <span onmouseout="hideTip(event, 'fs88', 225)" onmouseover="showTip(event, 'fs88', 225)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs96', 226)" onmouseover="showTip(event, 'fs96', 226)" class="f">append</span> <span onmouseout="hideTip(event, 'fs86', 227)" onmouseover="showTip(event, 'fs86', 227)" class="i">interfaces</span> <span onmouseout="hideTip(event, 'fs93', 228)" onmouseover="showTip(event, 'fs93', 228)" class="i">subTypes</span> 
                <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 229)" onmouseover="showTip(event, 'fs88', 229)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs97', 230)" onmouseover="showTip(event, 'fs97', 230)" class="f">choose</span> (<span onmouseout="hideTip(event, 'fs42', 231)" onmouseover="showTip(event, 'fs42', 231)" class="f">tryResolve</span> <span onmouseout="hideTip(event, 'fs43', 232)" onmouseover="showTip(event, 'fs43', 232)" class="i">cs</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs33', 233)" onmouseover="showTip(event, 'fs33', 233)" class="f">toOption</span>) 
                <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 234)" onmouseover="showTip(event, 'fs88', 234)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs98', 235)" onmouseover="showTip(event, 'fs98', 235)" class="f">toArray</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs99', 236)" onmouseover="showTip(event, 'fs99', 236)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs62', 237)" onmouseover="showTip(event, 'fs62', 237)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs100', 238)" onmouseover="showTip(event, 'fs100', 238)" class="f">CreateInstance</span>(<span onmouseout="hideTip(event, 'fs22', 239)" onmouseover="showTip(event, 'fs22', 239)" class="i">t</span>, <span onmouseout="hideTip(event, 'fs95', 240)" onmouseover="showTip(event, 'fs95', 240)" class="i">values</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs75', 241)" onmouseover="showTip(event, 'fs75', 241)" class="i">Length</span>)
            <span onmouseout="hideTip(event, 'fs62', 242)" onmouseover="showTip(event, 'fs62', 242)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs101', 243)" onmouseover="showTip(event, 'fs101', 243)" class="f">Copy</span>(<span onmouseout="hideTip(event, 'fs95', 244)" onmouseover="showTip(event, 'fs95', 244)" class="i">values</span>, <span onmouseout="hideTip(event, 'fs99', 245)" onmouseover="showTip(event, 'fs99', 245)" class="i">result</span>, <span onmouseout="hideTip(event, 'fs95', 246)" onmouseover="showTip(event, 'fs95', 246)" class="i">values</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs75', 247)" onmouseover="showTip(event, 'fs75', 247)" class="i">Length</span>)
            <span onmouseout="hideTip(event, 'fs99', 248)" onmouseover="showTip(event, 'fs99', 248)" class="i">result</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs102', 249)" onmouseover="showTip(event, 'fs102', 249)" class="f">box</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs34', 250)" onmouseover="showTip(event, 'fs34', 250)" class="p">Choice1Of2</span>
        | <span onmouseout="hideTip(event, 'fs22', 251)" onmouseover="showTip(event, 'fs22', 251)" class="i">t</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs42', 252)" onmouseover="showTip(event, 'fs42', 252)" class="f">tryResolve</span> <span onmouseout="hideTip(event, 'fs43', 253)" onmouseover="showTip(event, 'fs43', 253)" class="i">cs</span> <span onmouseout="hideTip(event, 'fs22', 254)" onmouseover="showTip(event, 'fs22', 254)" class="i">t</span>
    <span class="c">/// Register sequence of abstract types against specified concrete type</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 255)" onmouseover="showTip(event, 'fs38', 255)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs103', 256)" onmouseover="showTip(event, 'fs103', 256)" class="f">Register</span>(<span onmouseout="hideTip(event, 'fs104', 257)" onmouseover="showTip(event, 'fs104', 257)" class="i">abstractTypes</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs15', 258)" onmouseover="showTip(event, 'fs15', 258)" class="t">AbstractType</span> <span onmouseout="hideTip(event, 'fs105', 259)" onmouseover="showTip(event, 'fs105', 259)" class="t">seq</span>, <span onmouseout="hideTip(event, 'fs106', 260)" onmouseover="showTip(event, 'fs106', 260)" class="i">concreteType</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs16', 261)" onmouseover="showTip(event, 'fs16', 261)" class="t">ConcreteType</span>) <span class="o">=</span>
        <span class="k">for</span> <span onmouseout="hideTip(event, 'fs44', 262)" onmouseover="showTip(event, 'fs44', 262)" class="i">t</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs104', 263)" onmouseover="showTip(event, 'fs104', 263)" class="i">abstractTypes</span> <span class="k">do</span> <span onmouseout="hideTip(event, 'fs39', 264)" onmouseover="showTip(event, 'fs39', 264)" class="i">catalog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs107', 265)" onmouseover="showTip(event, 'fs107', 265)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs44', 266)" onmouseover="showTip(event, 'fs44', 266)" class="i">t</span>, (<span onmouseout="hideTip(event, 'fs18', 267)" onmouseover="showTip(event, 'fs18', 267)" class="p">Reflected</span> <span onmouseout="hideTip(event, 'fs106', 268)" onmouseover="showTip(event, 'fs106', 268)" class="i">concreteType</span>, <span onmouseout="hideTip(event, 'fs13', 269)" onmouseover="showTip(event, 'fs13', 269)" class="p">Singleton</span>))
    <span class="c">/// Register abstract type against specified type instance</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 270)" onmouseover="showTip(event, 'fs38', 270)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs108', 271)" onmouseover="showTip(event, 'fs108', 271)" class="f">Register</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs109', 272)" onmouseover="showTip(event, 'fs109', 272)" class="i">instance</span><span class="o">:</span><span class="o">&#39;</span><span class="i">TAbstract</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs39', 273)" onmouseover="showTip(event, 'fs39', 273)" class="i">catalog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs107', 274)" onmouseover="showTip(event, 'fs107', 274)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs80', 275)" onmouseover="showTip(event, 'fs80', 275)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span><span class="o">&gt;</span>, (<span onmouseout="hideTip(event, 'fs18', 276)" onmouseover="showTip(event, 'fs18', 276)" class="p">Reflected</span> <span onmouseout="hideTip(event, 'fs80', 277)" onmouseover="showTip(event, 'fs80', 277)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 278)" onmouseover="showTip(event, 'fs13', 278)" class="p">Singleton</span>))
        <span onmouseout="hideTip(event, 'fs41', 279)" onmouseover="showTip(event, 'fs41', 279)" class="i">singletons</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs57', 280)" onmouseover="showTip(event, 'fs57', 280)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs80', 281)" onmouseover="showTip(event, 'fs80', 281)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs109', 282)" onmouseover="showTip(event, 'fs109', 282)" class="i">instance</span>)
    <span class="c">/// Register abstract type against specified concrete type with given lifetime</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 283)" onmouseover="showTip(event, 'fs38', 283)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs110', 284)" onmouseover="showTip(event, 'fs110', 284)" class="f">Register</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span> <span class="k">when</span> <span class="o">&#39;</span><span class="i">TAbstract</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs111', 285)" onmouseover="showTip(event, 'fs111', 285)" class="i">not</span> <span class="k">struct</span><span class="o">&gt;</span>
            (<span onmouseout="hideTip(event, 'fs106', 286)" onmouseover="showTip(event, 'fs106', 286)" class="i">concreteType</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs16', 287)" onmouseover="showTip(event, 'fs16', 287)" class="t">ConcreteType</span>, <span onmouseout="hideTip(event, 'fs47', 288)" onmouseover="showTip(event, 'fs47', 288)" class="i">lifetime</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs12', 289)" onmouseover="showTip(event, 'fs12', 289)" class="t">Lifetime</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs112', 290)" onmouseover="showTip(event, 'fs112', 290)" class="i">abstractType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs80', 291)" onmouseover="showTip(event, 'fs80', 291)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span><span class="o">&gt;</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs106', 292)" onmouseover="showTip(event, 'fs106', 292)" class="i">concreteType</span> <span class="o">&lt;&gt;</span> <span onmouseout="hideTip(event, 'fs112', 293)" onmouseover="showTip(event, 'fs112', 293)" class="i">abstractType</span> <span class="o">&amp;&amp;</span>
           <span onmouseout="hideTip(event, 'fs111', 294)" onmouseover="showTip(event, 'fs111', 294)" class="f">not</span> (<span onmouseout="hideTip(event, 'fs106', 295)" onmouseover="showTip(event, 'fs106', 295)" class="i">concreteType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 296)" onmouseover="showTip(event, 'fs94', 296)" class="f">IsSubclassOf</span>(<span onmouseout="hideTip(event, 'fs112', 297)" onmouseover="showTip(event, 'fs112', 297)" class="i">abstractType</span>)) <span class="o">&amp;&amp;</span>
           <span onmouseout="hideTip(event, 'fs111', 298)" onmouseover="showTip(event, 'fs111', 298)" class="f">not</span> (<span onmouseout="hideTip(event, 'fs106', 299)" onmouseover="showTip(event, 'fs106', 299)" class="i">concreteType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs91', 300)" onmouseover="showTip(event, 'fs91', 300)" class="f">GetInterfaces</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 301)" onmouseover="showTip(event, 'fs62', 301)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs113', 302)" onmouseover="showTip(event, 'fs113', 302)" class="f">exists</span> ((<span class="o">=</span>) <span onmouseout="hideTip(event, 'fs112', 303)" onmouseover="showTip(event, 'fs112', 303)" class="i">abstractType</span>)) <span class="k">then</span>
            <span onmouseout="hideTip(event, 'fs114', 304)" onmouseover="showTip(event, 'fs114', 304)" class="f">invalidArg</span> <span class="s">&quot;concreteType&quot;</span> <span class="s">&quot;Concrete type does not implement abstract type&quot;</span>
        <span onmouseout="hideTip(event, 'fs39', 305)" onmouseover="showTip(event, 'fs39', 305)" class="i">catalog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs107', 306)" onmouseover="showTip(event, 'fs107', 306)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs112', 307)" onmouseover="showTip(event, 'fs112', 307)" class="i">abstractType</span>, (<span onmouseout="hideTip(event, 'fs18', 308)" onmouseover="showTip(event, 'fs18', 308)" class="p">Reflected</span> <span onmouseout="hideTip(event, 'fs106', 309)" onmouseover="showTip(event, 'fs106', 309)" class="i">concreteType</span>, <span onmouseout="hideTip(event, 'fs47', 310)" onmouseover="showTip(event, 'fs47', 310)" class="i">lifetime</span>))
    <span class="c">/// Register abstract type against specified factory with given lifetime</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 311)" onmouseover="showTip(event, 'fs38', 311)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs115', 312)" onmouseover="showTip(event, 'fs115', 312)" class="f">Register</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span> <span class="k">when</span> <span class="o">&#39;</span><span class="i">TAbstract</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs111', 313)" onmouseover="showTip(event, 'fs111', 313)" class="i">not</span> <span class="k">struct</span><span class="o">&gt;</span>
            (<span onmouseout="hideTip(event, 'fs116', 314)" onmouseover="showTip(event, 'fs116', 314)" class="f">f</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs20', 315)" onmouseover="showTip(event, 'fs20', 315)" class="t">unit</span><span class="k">-&gt;</span><span class="o">&#39;</span><span class="i">TAbstract</span>, <span onmouseout="hideTip(event, 'fs47', 316)" onmouseover="showTip(event, 'fs47', 316)" class="i">lifetime</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs12', 317)" onmouseover="showTip(event, 'fs12', 317)" class="t">Lifetime</span>) <span class="o">=</span> 
        <span onmouseout="hideTip(event, 'fs39', 318)" onmouseover="showTip(event, 'fs39', 318)" class="i">catalog</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs107', 319)" onmouseover="showTip(event, 'fs107', 319)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs80', 320)" onmouseover="showTip(event, 'fs80', 320)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span><span class="o">&gt;</span>, (<span onmouseout="hideTip(event, 'fs19', 321)" onmouseover="showTip(event, 'fs19', 321)" class="p">Factory</span>(<span onmouseout="hideTip(event, 'fs116', 322)" onmouseover="showTip(event, 'fs116', 322)" class="f">f</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs102', 323)" onmouseover="showTip(event, 'fs102', 323)" class="f">box</span>), <span onmouseout="hideTip(event, 'fs47', 324)" onmouseover="showTip(event, 'fs47', 324)" class="i">lifetime</span>))
    <span class="c">/// Resolve instance of specified abstract type</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 325)" onmouseover="showTip(event, 'fs38', 325)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs117', 326)" onmouseover="showTip(event, 'fs117', 326)" class="f">Resolve</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span> <span class="k">when</span> <span class="o">&#39;</span><span class="i">TAbstract</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs111', 327)" onmouseover="showTip(event, 'fs111', 327)" class="i">not</span> <span class="k">struct</span><span class="o">&gt;</span>() <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs38', 328)" onmouseover="showTip(event, 'fs38', 328)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 329)" onmouseover="showTip(event, 'fs84', 329)" class="f">Resolve</span>(<span onmouseout="hideTip(event, 'fs80', 330)" onmouseover="showTip(event, 'fs80', 330)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TAbstract</span><span class="o">&gt;</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">TAbstract</span>
    <span class="c">/// Resolve instsance of specified abstract type</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 331)" onmouseover="showTip(event, 'fs38', 331)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs118', 332)" onmouseover="showTip(event, 'fs118', 332)" class="f">Resolve</span>(<span onmouseout="hideTip(event, 'fs119', 333)" onmouseover="showTip(event, 'fs119', 333)" class="i">abstractType</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs15', 334)" onmouseover="showTip(event, 'fs15', 334)" class="t">AbstractType</span>) <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs42', 335)" onmouseover="showTip(event, 'fs42', 335)" class="f">tryResolve</span> [] <span onmouseout="hideTip(event, 'fs119', 336)" onmouseover="showTip(event, 'fs119', 336)" class="i">abstractType</span> <span class="k">with</span>
        | <span onmouseout="hideTip(event, 'fs34', 337)" onmouseover="showTip(event, 'fs34', 337)" class="p">Choice1Of2</span> <span onmouseout="hideTip(event, 'fs54', 338)" onmouseover="showTip(event, 'fs54', 338)" class="i">value</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs54', 339)" onmouseover="showTip(event, 'fs54', 339)" class="i">value</span>
        | <span onmouseout="hideTip(event, 'fs36', 340)" onmouseover="showTip(event, 'fs36', 340)" class="p">Choice2Of2</span> <span onmouseout="hideTip(event, 'fs120', 341)" onmouseover="showTip(event, 'fs120', 341)" class="i">message</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 342)" onmouseover="showTip(event, 'fs10', 342)" class="t">TypeResolutionException</span>(<span onmouseout="hideTip(event, 'fs120', 343)" onmouseover="showTip(event, 'fs120', 343)" class="i">message</span>,<span onmouseout="hideTip(event, 'fs119', 344)" onmouseover="showTip(event, 'fs119', 344)" class="i">abstractType</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs121', 345)" onmouseover="showTip(event, 'fs121', 345)" class="f">raise</span>
    <span class="c">/// Remove instance reference from container</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 346)" onmouseover="showTip(event, 'fs38', 346)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs122', 347)" onmouseover="showTip(event, 'fs122', 347)" class="f">Release</span>(<span onmouseout="hideTip(event, 'fs123', 348)" onmouseover="showTip(event, 'fs123', 348)" class="i">instance</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs21', 349)" onmouseover="showTip(event, 'fs21', 349)" class="t">obj</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs41', 350)" onmouseover="showTip(event, 'fs41', 350)" class="i">singletons</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 351)" onmouseover="showTip(event, 'fs88', 351)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs89', 352)" onmouseover="showTip(event, 'fs89', 352)" class="f">filter</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs124', 353)" onmouseover="showTip(event, 'fs124', 353)" class="i">pair</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs124', 354)" onmouseover="showTip(event, 'fs124', 354)" class="i">pair</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs125', 355)" onmouseover="showTip(event, 'fs125', 355)" class="i">Value</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs123', 356)" onmouseover="showTip(event, 'fs123', 356)" class="i">instance</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 357)" onmouseover="showTip(event, 'fs88', 357)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs126', 358)" onmouseover="showTip(event, 'fs126', 358)" class="f">toList</span>
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs58', 359)" onmouseover="showTip(event, 'fs58', 359)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs127', 360)" onmouseover="showTip(event, 'fs127', 360)" class="f">iter</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs124', 361)" onmouseover="showTip(event, 'fs124', 361)" class="i">pair</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs41', 362)" onmouseover="showTip(event, 'fs41', 362)" class="i">singletons</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs128', 363)" onmouseover="showTip(event, 'fs128', 363)" class="f">Remove</span>(<span onmouseout="hideTip(event, 'fs124', 364)" onmouseover="showTip(event, 'fs124', 364)" class="i">pair</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs129', 365)" onmouseover="showTip(event, 'fs129', 365)" class="i">Key</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 366)" onmouseover="showTip(event, 'fs130', 366)" class="f">ignore</span>)

<span class="k">open</span> <span onmouseout="hideTip(event, 'fs131', 367)" onmouseover="showTip(event, 'fs131', 367)" class="i">NUnit</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs132', 368)" onmouseover="showTip(event, 'fs132', 368)" class="i">Framework</span>

[&lt;<span onmouseout="hideTip(event, 'fs133', 369)" onmouseover="showTip(event, 'fs133', 369)" class="t">TestFixture</span>&gt;]
<span class="k">module</span> <span class="t">``Container Register, Resolve, Release Tests``</span> <span class="o">=</span>
    
    [&lt;<span onmouseout="hideTip(event, 'fs134', 370)" onmouseover="showTip(event, 'fs134', 370)" class="t">AbstractClass</span>&gt;]
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs135', 371)" onmouseover="showTip(event, 'fs135', 371)" class="t">AbstractType</span> () <span class="o">=</span> <span class="k">do</span> ()

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs136', 372)" onmouseover="showTip(event, 'fs136', 372)" class="t">ConcreteType</span> () <span class="o">=</span> <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs135', 373)" onmouseover="showTip(event, 'fs135', 373)" class="t">AbstractType</span>()

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs137', 374)" onmouseover="showTip(event, 'fs137', 374)" class="t">IMarkerInterface</span> <span class="o">=</span> <span class="k">interface</span> <span class="k">end</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs138', 375)" onmouseover="showTip(event, 'fs138', 375)" class="t">MarkedType</span> () <span class="o">=</span> <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs137', 376)" onmouseover="showTip(event, 'fs137', 376)" class="t">IMarkerInterface</span>
    
    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 377)" onmouseover="showTip(event, 'fs139', 377)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs140', 378)" onmouseover="showTip(event, 'fs140', 378)" class="f">``registering 2 instances of an abstract type in a single container should throw``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 379)" onmouseover="showTip(event, 'fs38', 379)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 380)" onmouseover="showTip(event, 'fs37', 380)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 381)" onmouseover="showTip(event, 'fs38', 381)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 382)" onmouseover="showTip(event, 'fs141', 382)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 383)" onmouseover="showTip(event, 'fs135', 383)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 384)" onmouseover="showTip(event, 'fs80', 384)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 385)" onmouseover="showTip(event, 'fs135', 385)" class="t">AbstractType</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 386)" onmouseover="showTip(event, 'fs13', 386)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs142', 387)" onmouseover="showTip(event, 'fs142', 387)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs143', 388)" onmouseover="showTip(event, 'fs143', 388)" class="f">Throws</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs1', 389)" onmouseover="showTip(event, 'fs1', 389)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs144', 390)" onmouseover="showTip(event, 'fs144', 390)" class="t">ArgumentException</span><span class="o">&gt;</span>(<span class="k">fun</span> () <span class="k">-&gt;</span>
            <span onmouseout="hideTip(event, 'fs38', 391)" onmouseover="showTip(event, 'fs38', 391)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 392)" onmouseover="showTip(event, 'fs141', 392)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 393)" onmouseover="showTip(event, 'fs135', 393)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 394)" onmouseover="showTip(event, 'fs80', 394)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 395)" onmouseover="showTip(event, 'fs135', 395)" class="t">AbstractType</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 396)" onmouseover="showTip(event, 'fs13', 396)" class="p">Singleton</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 397)" onmouseover="showTip(event, 'fs130', 397)" class="f">ignore</span>
        ) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 398)" onmouseover="showTip(event, 'fs130', 398)" class="f">ignore</span>

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 399)" onmouseover="showTip(event, 'fs139', 399)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs145', 400)" onmouseover="showTip(event, 'fs145', 400)" class="f">``attempting to resolve an unregistered type should throw``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 401)" onmouseover="showTip(event, 'fs38', 401)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 402)" onmouseover="showTip(event, 'fs37', 402)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs142', 403)" onmouseover="showTip(event, 'fs142', 403)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs143', 404)" onmouseover="showTip(event, 'fs143', 404)" class="f">Throws</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 405)" onmouseover="showTip(event, 'fs10', 405)" class="t">TypeResolutionException</span><span class="o">&gt;</span>(<span class="k">fun</span> () <span class="k">-&gt;</span>  
            <span onmouseout="hideTip(event, 'fs38', 406)" onmouseover="showTip(event, 'fs38', 406)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 407)" onmouseover="showTip(event, 'fs84', 407)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 408)" onmouseover="showTip(event, 'fs135', 408)" class="t">AbstractType</span><span class="o">&gt;</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 409)" onmouseover="showTip(event, 'fs130', 409)" class="f">ignore</span>
        ) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 410)" onmouseover="showTip(event, 'fs130', 410)" class="f">ignore</span>

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 411)" onmouseover="showTip(event, 'fs139', 411)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs146', 412)" onmouseover="showTip(event, 'fs146', 412)" class="f">``resolving a registered abstract type should return an instance of the specified concrete type``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 413)" onmouseover="showTip(event, 'fs38', 413)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 414)" onmouseover="showTip(event, 'fs37', 414)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 415)" onmouseover="showTip(event, 'fs38', 415)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 416)" onmouseover="showTip(event, 'fs141', 416)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 417)" onmouseover="showTip(event, 'fs135', 417)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 418)" onmouseover="showTip(event, 'fs80', 418)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs136', 419)" onmouseover="showTip(event, 'fs136', 419)" class="t">ConcreteType</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 420)" onmouseover="showTip(event, 'fs13', 420)" class="p">Singleton</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs147', 421)" onmouseover="showTip(event, 'fs147', 421)" class="i">instance</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 422)" onmouseover="showTip(event, 'fs38', 422)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 423)" onmouseover="showTip(event, 'fs84', 423)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 424)" onmouseover="showTip(event, 'fs135', 424)" class="t">AbstractType</span><span class="o">&gt;</span>()
        <span onmouseout="hideTip(event, 'fs142', 425)" onmouseover="showTip(event, 'fs142', 425)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs148', 426)" onmouseover="showTip(event, 'fs148', 426)" class="f">True</span>(<span onmouseout="hideTip(event, 'fs147', 427)" onmouseover="showTip(event, 'fs147', 427)" class="i">instance</span> <span class="o">:?</span> <span onmouseout="hideTip(event, 'fs136', 428)" onmouseover="showTip(event, 'fs136', 428)" class="t">ConcreteType</span>)

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 429)" onmouseover="showTip(event, 'fs139', 429)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs149', 430)" onmouseover="showTip(event, 'fs149', 430)" class="f">``resolving a type with a singleton lifetime should always return the same instance``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 431)" onmouseover="showTip(event, 'fs38', 431)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 432)" onmouseover="showTip(event, 'fs37', 432)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 433)" onmouseover="showTip(event, 'fs38', 433)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 434)" onmouseover="showTip(event, 'fs141', 434)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 435)" onmouseover="showTip(event, 'fs135', 435)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 436)" onmouseover="showTip(event, 'fs80', 436)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs136', 437)" onmouseover="showTip(event, 'fs136', 437)" class="t">ConcreteType</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 438)" onmouseover="showTip(event, 'fs13', 438)" class="p">Singleton</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs150', 439)" onmouseover="showTip(event, 'fs150', 439)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 440)" onmouseover="showTip(event, 'fs38', 440)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 441)" onmouseover="showTip(event, 'fs84', 441)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 442)" onmouseover="showTip(event, 'fs135', 442)" class="t">AbstractType</span><span class="o">&gt;</span>()
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs151', 443)" onmouseover="showTip(event, 'fs151', 443)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 444)" onmouseover="showTip(event, 'fs38', 444)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 445)" onmouseover="showTip(event, 'fs84', 445)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 446)" onmouseover="showTip(event, 'fs135', 446)" class="t">AbstractType</span><span class="o">&gt;</span>()
        <span onmouseout="hideTip(event, 'fs142', 447)" onmouseover="showTip(event, 'fs142', 447)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs148', 448)" onmouseover="showTip(event, 'fs148', 448)" class="f">True</span>( <span onmouseout="hideTip(event, 'fs152', 449)" onmouseover="showTip(event, 'fs152', 449)" class="t">Object</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs153', 450)" onmouseover="showTip(event, 'fs153', 450)" class="f">ReferenceEquals</span>(<span onmouseout="hideTip(event, 'fs150', 451)" onmouseover="showTip(event, 'fs150', 451)" class="i">a</span>,<span onmouseout="hideTip(event, 'fs151', 452)" onmouseover="showTip(event, 'fs151', 452)" class="i">b</span>) )
        
    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 453)" onmouseover="showTip(event, 'fs139', 453)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs154', 454)" onmouseover="showTip(event, 'fs154', 454)" class="f">``resolving a type with a transient lifetime should a new instance each time``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 455)" onmouseover="showTip(event, 'fs38', 455)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 456)" onmouseover="showTip(event, 'fs37', 456)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 457)" onmouseover="showTip(event, 'fs38', 457)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 458)" onmouseover="showTip(event, 'fs141', 458)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 459)" onmouseover="showTip(event, 'fs135', 459)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 460)" onmouseover="showTip(event, 'fs80', 460)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs136', 461)" onmouseover="showTip(event, 'fs136', 461)" class="t">ConcreteType</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs14', 462)" onmouseover="showTip(event, 'fs14', 462)" class="p">Transient</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs150', 463)" onmouseover="showTip(event, 'fs150', 463)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 464)" onmouseover="showTip(event, 'fs38', 464)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 465)" onmouseover="showTip(event, 'fs84', 465)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 466)" onmouseover="showTip(event, 'fs135', 466)" class="t">AbstractType</span><span class="o">&gt;</span>()
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs151', 467)" onmouseover="showTip(event, 'fs151', 467)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 468)" onmouseover="showTip(event, 'fs38', 468)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 469)" onmouseover="showTip(event, 'fs84', 469)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 470)" onmouseover="showTip(event, 'fs135', 470)" class="t">AbstractType</span><span class="o">&gt;</span>()
        <span onmouseout="hideTip(event, 'fs142', 471)" onmouseover="showTip(event, 'fs142', 471)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs155', 472)" onmouseover="showTip(event, 'fs155', 472)" class="f">AreNotSame</span>(<span onmouseout="hideTip(event, 'fs150', 473)" onmouseover="showTip(event, 'fs150', 473)" class="i">a</span>,<span onmouseout="hideTip(event, 'fs151', 474)" onmouseover="showTip(event, 'fs151', 474)" class="i">b</span>)

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 475)" onmouseover="showTip(event, 'fs139', 475)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs156', 476)" onmouseover="showTip(event, 'fs156', 476)" class="f">``resolving a registered instance of a type should return that instance``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 477)" onmouseover="showTip(event, 'fs38', 477)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 478)" onmouseover="showTip(event, 'fs37', 478)" class="t">Container</span>()
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs157', 479)" onmouseover="showTip(event, 'fs157', 479)" class="i">this</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs136', 480)" onmouseover="showTip(event, 'fs136', 480)" class="t">ConcreteType</span>()
        <span onmouseout="hideTip(event, 'fs38', 481)" onmouseover="showTip(event, 'fs38', 481)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 482)" onmouseover="showTip(event, 'fs141', 482)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 483)" onmouseover="showTip(event, 'fs135', 483)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs157', 484)" onmouseover="showTip(event, 'fs157', 484)" class="i">this</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs158', 485)" onmouseover="showTip(event, 'fs158', 485)" class="i">that</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 486)" onmouseover="showTip(event, 'fs38', 486)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 487)" onmouseover="showTip(event, 'fs84', 487)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 488)" onmouseover="showTip(event, 'fs135', 488)" class="t">AbstractType</span><span class="o">&gt;</span>()
        <span onmouseout="hideTip(event, 'fs142', 489)" onmouseover="showTip(event, 'fs142', 489)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs159', 490)" onmouseover="showTip(event, 'fs159', 490)" class="f">AreSame</span>(<span onmouseout="hideTip(event, 'fs157', 491)" onmouseover="showTip(event, 'fs157', 491)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs158', 492)" onmouseover="showTip(event, 'fs158', 492)" class="i">that</span>)

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 493)" onmouseover="showTip(event, 'fs139', 493)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs160', 494)" onmouseover="showTip(event, 'fs160', 494)" class="f">``resolving a type registered as a factory should call the specified factory``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs161', 495)" onmouseover="showTip(event, 'fs161', 495)" class="v">called</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs162', 496)" onmouseover="showTip(event, 'fs162', 496)" class="f">ref</span> <span class="k">false</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs163', 497)" onmouseover="showTip(event, 'fs163', 497)" class="f">factory</span> <span class="o">=</span> <span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs161', 498)" onmouseover="showTip(event, 'fs161', 498)" class="v">called</span> <span class="o">:=</span> <span class="k">true</span>; <span onmouseout="hideTip(event, 'fs136', 499)" onmouseover="showTip(event, 'fs136', 499)" class="t">ConcreteType</span>() <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs135', 500)" onmouseover="showTip(event, 'fs135', 500)" class="t">AbstractType</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 501)" onmouseover="showTip(event, 'fs38', 501)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 502)" onmouseover="showTip(event, 'fs37', 502)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 503)" onmouseover="showTip(event, 'fs38', 503)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 504)" onmouseover="showTip(event, 'fs141', 504)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 505)" onmouseover="showTip(event, 'fs135', 505)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs163', 506)" onmouseover="showTip(event, 'fs163', 506)" class="f">factory</span>, <span onmouseout="hideTip(event, 'fs13', 507)" onmouseover="showTip(event, 'fs13', 507)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs38', 508)" onmouseover="showTip(event, 'fs38', 508)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 509)" onmouseover="showTip(event, 'fs84', 509)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs135', 510)" onmouseover="showTip(event, 'fs135', 510)" class="t">AbstractType</span><span class="o">&gt;</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 511)" onmouseover="showTip(event, 'fs130', 511)" class="f">ignore</span>
        <span onmouseout="hideTip(event, 'fs142', 512)" onmouseover="showTip(event, 'fs142', 512)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs148', 513)" onmouseover="showTip(event, 'fs148', 513)" class="f">True</span>( <span onmouseout="hideTip(event, 'fs161', 514)" onmouseover="showTip(event, 'fs161', 514)" class="v">called</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs164', 515)" onmouseover="showTip(event, 'fs164', 515)" class="i">Value</span> )

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 516)" onmouseover="showTip(event, 'fs139', 516)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs165', 517)" onmouseover="showTip(event, 'fs165', 517)" class="f">``releasing a registered concrete instance then resolving the type should return a new concrete instance``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 518)" onmouseover="showTip(event, 'fs38', 518)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 519)" onmouseover="showTip(event, 'fs37', 519)" class="t">Container</span>()
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs157', 520)" onmouseover="showTip(event, 'fs157', 520)" class="i">this</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs136', 521)" onmouseover="showTip(event, 'fs136', 521)" class="t">ConcreteType</span>()
        <span onmouseout="hideTip(event, 'fs38', 522)" onmouseover="showTip(event, 'fs38', 522)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 523)" onmouseover="showTip(event, 'fs141', 523)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs136', 524)" onmouseover="showTip(event, 'fs136', 524)" class="t">ConcreteType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs157', 525)" onmouseover="showTip(event, 'fs157', 525)" class="i">this</span>)
        <span onmouseout="hideTip(event, 'fs38', 526)" onmouseover="showTip(event, 'fs38', 526)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs166', 527)" onmouseover="showTip(event, 'fs166', 527)" class="f">Release</span>(<span onmouseout="hideTip(event, 'fs157', 528)" onmouseover="showTip(event, 'fs157', 528)" class="i">this</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs167', 529)" onmouseover="showTip(event, 'fs167', 529)" class="i">that</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 530)" onmouseover="showTip(event, 'fs38', 530)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 531)" onmouseover="showTip(event, 'fs84', 531)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs136', 532)" onmouseover="showTip(event, 'fs136', 532)" class="t">ConcreteType</span><span class="o">&gt;</span>()
        <span onmouseout="hideTip(event, 'fs142', 533)" onmouseover="showTip(event, 'fs142', 533)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs148', 534)" onmouseover="showTip(event, 'fs148', 534)" class="f">True</span>( <span onmouseout="hideTip(event, 'fs111', 535)" onmouseover="showTip(event, 'fs111', 535)" class="f">not</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs152', 536)" onmouseover="showTip(event, 'fs152', 536)" class="t">Object</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs153', 537)" onmouseover="showTip(event, 'fs153', 537)" class="f">ReferenceEquals</span>(<span onmouseout="hideTip(event, 'fs157', 538)" onmouseover="showTip(event, 'fs157', 538)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs167', 539)" onmouseover="showTip(event, 'fs167', 539)" class="i">that</span>) )

    <span class="k">do</span>
        <span onmouseout="hideTip(event, 'fs140', 540)" onmouseover="showTip(event, 'fs140', 540)" class="f">``registering 2 instances of an abstract type in a single container should throw``</span> ()
        <span onmouseout="hideTip(event, 'fs145', 541)" onmouseover="showTip(event, 'fs145', 541)" class="f">``attempting to resolve an unregistered type should throw``</span> ()
        <span onmouseout="hideTip(event, 'fs146', 542)" onmouseover="showTip(event, 'fs146', 542)" class="f">``resolving a registered abstract type should return an instance of the specified concrete type``</span>  ()
        <span onmouseout="hideTip(event, 'fs149', 543)" onmouseover="showTip(event, 'fs149', 543)" class="f">``resolving a type with a singleton lifetime should always return the same instance``</span> ()
        <span onmouseout="hideTip(event, 'fs154', 544)" onmouseover="showTip(event, 'fs154', 544)" class="f">``resolving a type with a transient lifetime should a new instance each time``</span> ()
        <span onmouseout="hideTip(event, 'fs156', 545)" onmouseover="showTip(event, 'fs156', 545)" class="f">``resolving a registered instance of a type should return that instance``</span> ()
        <span onmouseout="hideTip(event, 'fs160', 546)" onmouseover="showTip(event, 'fs160', 546)" class="f">``resolving a type registered as a factory should call the specified factory``</span> ()
        <span onmouseout="hideTip(event, 'fs165', 547)" onmouseover="showTip(event, 'fs165', 547)" class="f">``releasing a registered concrete instance then resolving the type should return a new concrete instance``</span> ()

[&lt;<span onmouseout="hideTip(event, 'fs133', 548)" onmouseover="showTip(event, 'fs133', 548)" class="t">TestFixture</span>&gt;]
<span class="k">module</span> <span class="t">``Constructor Tests``</span> <span class="o">=</span>
    
    [&lt;<span onmouseout="hideTip(event, 'fs134', 549)" onmouseover="showTip(event, 'fs134', 549)" class="t">AbstractClass</span>&gt;]
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs168', 550)" onmouseover="showTip(event, 'fs168', 550)" class="t">AbstractType</span> () <span class="o">=</span> <span class="k">do</span> ()
   
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs169', 551)" onmouseover="showTip(event, 'fs169', 551)" class="t">ConstructorWithValueTypeArg</span> (<span onmouseout="hideTip(event, 'fs170', 552)" onmouseover="showTip(event, 'fs170', 552)" class="i">arg</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs171', 553)" onmouseover="showTip(event, 'fs171', 553)" class="t">int</span>) <span class="o">=</span> <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs168', 554)" onmouseover="showTip(event, 'fs168', 554)" class="t">AbstractType</span>()

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 555)" onmouseover="showTip(event, 'fs139', 555)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs172', 556)" onmouseover="showTip(event, 'fs172', 556)" class="f">``resolving type with value type dependency in constructor should throw``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 557)" onmouseover="showTip(event, 'fs38', 557)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 558)" onmouseover="showTip(event, 'fs37', 558)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 559)" onmouseover="showTip(event, 'fs38', 559)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 560)" onmouseover="showTip(event, 'fs141', 560)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 561)" onmouseover="showTip(event, 'fs168', 561)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 562)" onmouseover="showTip(event, 'fs80', 562)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs169', 563)" onmouseover="showTip(event, 'fs169', 563)" class="t">ConstructorWithValueTypeArg</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 564)" onmouseover="showTip(event, 'fs13', 564)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs142', 565)" onmouseover="showTip(event, 'fs142', 565)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs143', 566)" onmouseover="showTip(event, 'fs143', 566)" class="f">Throws</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 567)" onmouseover="showTip(event, 'fs10', 567)" class="t">TypeResolutionException</span><span class="o">&gt;</span>(<span class="k">fun</span> () <span class="k">-&gt;</span>
            <span onmouseout="hideTip(event, 'fs38', 568)" onmouseover="showTip(event, 'fs38', 568)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 569)" onmouseover="showTip(event, 'fs84', 569)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 570)" onmouseover="showTip(event, 'fs168', 570)" class="t">AbstractType</span><span class="o">&gt;</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 571)" onmouseover="showTip(event, 'fs130', 571)" class="f">ignore</span>
        ) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 572)" onmouseover="showTip(event, 'fs130', 572)" class="f">ignore</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs173', 573)" onmouseover="showTip(event, 'fs173', 573)" class="t">ReferenceType</span>() <span class="o">=</span> <span class="k">do</span> ()
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs174', 574)" onmouseover="showTip(event, 'fs174', 574)" class="t">ConstructorWithReferenceTypeArg</span> (<span onmouseout="hideTip(event, 'fs175', 575)" onmouseover="showTip(event, 'fs175', 575)" class="i">arg</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs173', 576)" onmouseover="showTip(event, 'fs173', 576)" class="t">ReferenceType</span>) <span class="o">=</span> <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs168', 577)" onmouseover="showTip(event, 'fs168', 577)" class="t">AbstractType</span>()

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 578)" onmouseover="showTip(event, 'fs139', 578)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs176', 579)" onmouseover="showTip(event, 'fs176', 579)" class="f">``resolving type with reference type dependency in constructor should inject reference``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 580)" onmouseover="showTip(event, 'fs38', 580)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 581)" onmouseover="showTip(event, 'fs37', 581)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 582)" onmouseover="showTip(event, 'fs38', 582)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 583)" onmouseover="showTip(event, 'fs141', 583)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 584)" onmouseover="showTip(event, 'fs168', 584)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 585)" onmouseover="showTip(event, 'fs80', 585)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs174', 586)" onmouseover="showTip(event, 'fs174', 586)" class="t">ConstructorWithReferenceTypeArg</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 587)" onmouseover="showTip(event, 'fs13', 587)" class="p">Singleton</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs177', 588)" onmouseover="showTip(event, 'fs177', 588)" class="i">instance</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 589)" onmouseover="showTip(event, 'fs38', 589)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 590)" onmouseover="showTip(event, 'fs84', 590)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 591)" onmouseover="showTip(event, 'fs168', 591)" class="t">AbstractType</span><span class="o">&gt;</span>()
        <span onmouseout="hideTip(event, 'fs142', 592)" onmouseover="showTip(event, 'fs142', 592)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs178', 593)" onmouseover="showTip(event, 'fs178', 593)" class="f">NotNull</span>(<span onmouseout="hideTip(event, 'fs177', 594)" onmouseover="showTip(event, 'fs177', 594)" class="i">instance</span>)

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs179', 595)" onmouseover="showTip(event, 'fs179', 595)" class="t">ConstructorWithSelfReferenceArg</span> (<span onmouseout="hideTip(event, 'fs180', 596)" onmouseover="showTip(event, 'fs180', 596)" class="i">arg</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs168', 597)" onmouseover="showTip(event, 'fs168', 597)" class="t">AbstractType</span>) <span class="o">=</span> <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs168', 598)" onmouseover="showTip(event, 'fs168', 598)" class="t">AbstractType</span>()

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 599)" onmouseover="showTip(event, 'fs139', 599)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs181', 600)" onmouseover="showTip(event, 'fs181', 600)" class="f">``resolving type with self type dependency in constructor should fail``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 601)" onmouseover="showTip(event, 'fs38', 601)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 602)" onmouseover="showTip(event, 'fs37', 602)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 603)" onmouseover="showTip(event, 'fs38', 603)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 604)" onmouseover="showTip(event, 'fs141', 604)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 605)" onmouseover="showTip(event, 'fs168', 605)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 606)" onmouseover="showTip(event, 'fs80', 606)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs179', 607)" onmouseover="showTip(event, 'fs179', 607)" class="t">ConstructorWithSelfReferenceArg</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 608)" onmouseover="showTip(event, 'fs13', 608)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs142', 609)" onmouseover="showTip(event, 'fs142', 609)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs143', 610)" onmouseover="showTip(event, 'fs143', 610)" class="f">Throws</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 611)" onmouseover="showTip(event, 'fs10', 611)" class="t">TypeResolutionException</span><span class="o">&gt;</span>(<span class="k">fun</span> () <span class="k">-&gt;</span>
                <span onmouseout="hideTip(event, 'fs38', 612)" onmouseover="showTip(event, 'fs38', 612)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 613)" onmouseover="showTip(event, 'fs84', 613)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 614)" onmouseover="showTip(event, 'fs168', 614)" class="t">AbstractType</span><span class="o">&gt;</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 615)" onmouseover="showTip(event, 'fs130', 615)" class="f">ignore</span>
        ) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 616)" onmouseover="showTip(event, 'fs130', 616)" class="f">ignore</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs182', 617)" onmouseover="showTip(event, 'fs182', 617)" class="t">ConstructorWithFunArg</span> (<span onmouseout="hideTip(event, 'fs183', 618)" onmouseover="showTip(event, 'fs183', 618)" class="f">arg</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs20', 619)" onmouseover="showTip(event, 'fs20', 619)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs173', 620)" onmouseover="showTip(event, 'fs173', 620)" class="t">ReferenceType</span>) <span class="o">=</span> 
        <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs168', 621)" onmouseover="showTip(event, 'fs168', 621)" class="t">AbstractType</span>()
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs184', 622)" onmouseover="showTip(event, 'fs184', 622)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs185', 623)" onmouseover="showTip(event, 'fs185', 623)" class="f">Factory</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs183', 624)" onmouseover="showTip(event, 'fs183', 624)" class="f">arg</span>()

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 625)" onmouseover="showTip(event, 'fs139', 625)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs186', 626)" onmouseover="showTip(event, 'fs186', 626)" class="f">``resolving type with fun type argument in constructor should inject factory``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 627)" onmouseover="showTip(event, 'fs38', 627)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 628)" onmouseover="showTip(event, 'fs37', 628)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 629)" onmouseover="showTip(event, 'fs38', 629)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 630)" onmouseover="showTip(event, 'fs141', 630)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 631)" onmouseover="showTip(event, 'fs168', 631)" class="t">AbstractType</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 632)" onmouseover="showTip(event, 'fs80', 632)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs182', 633)" onmouseover="showTip(event, 'fs182', 633)" class="t">ConstructorWithFunArg</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 634)" onmouseover="showTip(event, 'fs13', 634)" class="p">Singleton</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs187', 635)" onmouseover="showTip(event, 'fs187', 635)" class="i">instance</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 636)" onmouseover="showTip(event, 'fs38', 636)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 637)" onmouseover="showTip(event, 'fs84', 637)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs168', 638)" onmouseover="showTip(event, 'fs168', 638)" class="t">AbstractType</span><span class="o">&gt;</span>() <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs182', 639)" onmouseover="showTip(event, 'fs182', 639)" class="t">ConstructorWithFunArg</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs188', 640)" onmouseover="showTip(event, 'fs188', 640)" class="i">refValue</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs187', 641)" onmouseover="showTip(event, 'fs187', 641)" class="i">instance</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs189', 642)" onmouseover="showTip(event, 'fs189', 642)" class="f">Factory</span>()
        <span onmouseout="hideTip(event, 'fs142', 643)" onmouseover="showTip(event, 'fs142', 643)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs178', 644)" onmouseover="showTip(event, 'fs178', 644)" class="f">NotNull</span>(<span onmouseout="hideTip(event, 'fs188', 645)" onmouseover="showTip(event, 'fs188', 645)" class="i">refValue</span>)

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs190', 646)" onmouseover="showTip(event, 'fs190', 646)" class="t">SubType1</span> () <span class="o">=</span> <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs168', 647)" onmouseover="showTip(event, 'fs168', 647)" class="t">AbstractType</span>()
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs191', 648)" onmouseover="showTip(event, 'fs191', 648)" class="t">SubType2</span> () <span class="o">=</span> <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs168', 649)" onmouseover="showTip(event, 'fs168', 649)" class="t">AbstractType</span>()
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs192', 650)" onmouseover="showTip(event, 'fs192', 650)" class="t">ConstructorWithSeqArg</span> (<span onmouseout="hideTip(event, 'fs93', 651)" onmouseover="showTip(event, 'fs93', 651)" class="i">subTypes</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs168', 652)" onmouseover="showTip(event, 'fs168', 652)" class="t">AbstractType</span> <span onmouseout="hideTip(event, 'fs105', 653)" onmouseover="showTip(event, 'fs105', 653)" class="t">seq</span>) <span class="o">=</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs193', 654)" onmouseover="showTip(event, 'fs193', 654)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs194', 655)" onmouseover="showTip(event, 'fs194', 655)" class="i">SubTypes</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs93', 656)" onmouseover="showTip(event, 'fs93', 656)" class="i">subTypes</span>

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 657)" onmouseover="showTip(event, 'fs139', 657)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs195', 658)" onmouseover="showTip(event, 'fs195', 658)" class="f">``resolving type with seq type argument in constructor should inject sub types``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 659)" onmouseover="showTip(event, 'fs38', 659)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 660)" onmouseover="showTip(event, 'fs37', 660)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 661)" onmouseover="showTip(event, 'fs38', 661)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 662)" onmouseover="showTip(event, 'fs141', 662)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs190', 663)" onmouseover="showTip(event, 'fs190', 663)" class="t">SubType1</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 664)" onmouseover="showTip(event, 'fs80', 664)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs190', 665)" onmouseover="showTip(event, 'fs190', 665)" class="t">SubType1</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 666)" onmouseover="showTip(event, 'fs13', 666)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs38', 667)" onmouseover="showTip(event, 'fs38', 667)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 668)" onmouseover="showTip(event, 'fs141', 668)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs191', 669)" onmouseover="showTip(event, 'fs191', 669)" class="t">SubType2</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 670)" onmouseover="showTip(event, 'fs80', 670)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs191', 671)" onmouseover="showTip(event, 'fs191', 671)" class="t">SubType2</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 672)" onmouseover="showTip(event, 'fs13', 672)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs38', 673)" onmouseover="showTip(event, 'fs38', 673)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 674)" onmouseover="showTip(event, 'fs141', 674)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs192', 675)" onmouseover="showTip(event, 'fs192', 675)" class="t">ConstructorWithSeqArg</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 676)" onmouseover="showTip(event, 'fs80', 676)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs192', 677)" onmouseover="showTip(event, 'fs192', 677)" class="t">ConstructorWithSeqArg</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 678)" onmouseover="showTip(event, 'fs13', 678)" class="p">Singleton</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs196', 679)" onmouseover="showTip(event, 'fs196', 679)" class="i">instance</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 680)" onmouseover="showTip(event, 'fs38', 680)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 681)" onmouseover="showTip(event, 'fs84', 681)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs192', 682)" onmouseover="showTip(event, 'fs192', 682)" class="t">ConstructorWithSeqArg</span><span class="o">&gt;</span>()
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs197', 683)" onmouseover="showTip(event, 'fs197', 683)" class="i">types</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs196', 684)" onmouseover="showTip(event, 'fs196', 684)" class="i">instance</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs198', 685)" onmouseover="showTip(event, 'fs198', 685)" class="i">SubTypes</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 686)" onmouseover="showTip(event, 'fs88', 686)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs199', 687)" onmouseover="showTip(event, 'fs199', 687)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs200', 688)" onmouseover="showTip(event, 'fs200', 688)" class="i">i</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs200', 689)" onmouseover="showTip(event, 'fs200', 689)" class="i">i</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs201', 690)" onmouseover="showTip(event, 'fs201', 690)" class="f">GetType</span>()<span class="o">.</span><span class="i">Name</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs202', 691)" onmouseover="showTip(event, 'fs202', 691)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs203', 692)" onmouseover="showTip(event, 'fs203', 692)" class="f">ofSeq</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs204', 693)" onmouseover="showTip(event, 'fs204', 693)" class="i">types&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs205', 694)" onmouseover="showTip(event, 'fs205', 694)" class="f">set</span> [ <span onmouseout="hideTip(event, 'fs80', 695)" onmouseover="showTip(event, 'fs80', 695)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs190', 696)" onmouseover="showTip(event, 'fs190', 696)" class="t">SubType1</span><span class="o">&gt;</span><span class="o">.</span><span class="i">Name</span>; <span onmouseout="hideTip(event, 'fs80', 697)" onmouseover="showTip(event, 'fs80', 697)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs191', 698)" onmouseover="showTip(event, 'fs191', 698)" class="t">SubType2</span><span class="o">&gt;</span><span class="o">.</span><span class="i">Name</span> ]
        <span onmouseout="hideTip(event, 'fs142', 699)" onmouseover="showTip(event, 'fs142', 699)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs206', 700)" onmouseover="showTip(event, 'fs206', 700)" class="f">That</span>((<span onmouseout="hideTip(event, 'fs197', 701)" onmouseover="showTip(event, 'fs197', 701)" class="i">types</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs204', 702)" onmouseover="showTip(event, 'fs204', 702)" class="i">types&#39;</span>))

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs207', 703)" onmouseover="showTip(event, 'fs207', 703)" class="t">Marker</span> <span class="o">=</span> <span class="k">interface</span> <span class="k">end</span>
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs208', 704)" onmouseover="showTip(event, 'fs208', 704)" class="t">MarkedType1</span> () <span class="o">=</span> <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs207', 705)" onmouseover="showTip(event, 'fs207', 705)" class="t">Marker</span>
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs209', 706)" onmouseover="showTip(event, 'fs209', 706)" class="t">MarkedType2</span> () <span class="o">=</span> <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs207', 707)" onmouseover="showTip(event, 'fs207', 707)" class="t">Marker</span>
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs210', 708)" onmouseover="showTip(event, 'fs210', 708)" class="t">ConstructorWithInterfaceArg</span> (<span onmouseout="hideTip(event, 'fs211', 709)" onmouseover="showTip(event, 'fs211', 709)" class="i">markedTypes</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs207', 710)" onmouseover="showTip(event, 'fs207', 710)" class="t">Marker</span> <span onmouseout="hideTip(event, 'fs105', 711)" onmouseover="showTip(event, 'fs105', 711)" class="t">seq</span>) <span class="o">=</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs212', 712)" onmouseover="showTip(event, 'fs212', 712)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs213', 713)" onmouseover="showTip(event, 'fs213', 713)" class="i">MarkedTypes</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs211', 714)" onmouseover="showTip(event, 'fs211', 714)" class="i">markedTypes</span>

    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs139', 715)" onmouseover="showTip(event, 'fs139', 715)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs214', 716)" onmouseover="showTip(event, 'fs214', 716)" class="f">``resolving type with seq type argument in constructor should inject interfaces``</span> () <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 717)" onmouseover="showTip(event, 'fs38', 717)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 718)" onmouseover="showTip(event, 'fs37', 718)" class="t">Container</span>()
        <span onmouseout="hideTip(event, 'fs38', 719)" onmouseover="showTip(event, 'fs38', 719)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 720)" onmouseover="showTip(event, 'fs141', 720)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs208', 721)" onmouseover="showTip(event, 'fs208', 721)" class="t">MarkedType1</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 722)" onmouseover="showTip(event, 'fs80', 722)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs208', 723)" onmouseover="showTip(event, 'fs208', 723)" class="t">MarkedType1</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 724)" onmouseover="showTip(event, 'fs13', 724)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs38', 725)" onmouseover="showTip(event, 'fs38', 725)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 726)" onmouseover="showTip(event, 'fs141', 726)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs209', 727)" onmouseover="showTip(event, 'fs209', 727)" class="t">MarkedType2</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 728)" onmouseover="showTip(event, 'fs80', 728)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs209', 729)" onmouseover="showTip(event, 'fs209', 729)" class="t">MarkedType2</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 730)" onmouseover="showTip(event, 'fs13', 730)" class="p">Singleton</span>)
        <span onmouseout="hideTip(event, 'fs38', 731)" onmouseover="showTip(event, 'fs38', 731)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 732)" onmouseover="showTip(event, 'fs141', 732)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs210', 733)" onmouseover="showTip(event, 'fs210', 733)" class="t">ConstructorWithInterfaceArg</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 734)" onmouseover="showTip(event, 'fs80', 734)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs210', 735)" onmouseover="showTip(event, 'fs210', 735)" class="t">ConstructorWithInterfaceArg</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 736)" onmouseover="showTip(event, 'fs13', 736)" class="p">Singleton</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs215', 737)" onmouseover="showTip(event, 'fs215', 737)" class="i">instance</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 738)" onmouseover="showTip(event, 'fs38', 738)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 739)" onmouseover="showTip(event, 'fs84', 739)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs210', 740)" onmouseover="showTip(event, 'fs210', 740)" class="t">ConstructorWithInterfaceArg</span><span class="o">&gt;</span>()
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs197', 741)" onmouseover="showTip(event, 'fs197', 741)" class="i">types</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs215', 742)" onmouseover="showTip(event, 'fs215', 742)" class="i">instance</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs216', 743)" onmouseover="showTip(event, 'fs216', 743)" class="i">MarkedTypes</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs88', 744)" onmouseover="showTip(event, 'fs88', 744)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs199', 745)" onmouseover="showTip(event, 'fs199', 745)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs217', 746)" onmouseover="showTip(event, 'fs217', 746)" class="i">i</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs217', 747)" onmouseover="showTip(event, 'fs217', 747)" class="i">i</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs201', 748)" onmouseover="showTip(event, 'fs201', 748)" class="f">GetType</span>()<span class="o">.</span><span class="i">Name</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs202', 749)" onmouseover="showTip(event, 'fs202', 749)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs203', 750)" onmouseover="showTip(event, 'fs203', 750)" class="f">ofSeq</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs204', 751)" onmouseover="showTip(event, 'fs204', 751)" class="i">types&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs205', 752)" onmouseover="showTip(event, 'fs205', 752)" class="f">set</span> [ <span onmouseout="hideTip(event, 'fs80', 753)" onmouseover="showTip(event, 'fs80', 753)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs208', 754)" onmouseover="showTip(event, 'fs208', 754)" class="t">MarkedType1</span><span class="o">&gt;</span><span class="o">.</span><span class="i">Name</span>; <span onmouseout="hideTip(event, 'fs80', 755)" onmouseover="showTip(event, 'fs80', 755)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs209', 756)" onmouseover="showTip(event, 'fs209', 756)" class="t">MarkedType2</span><span class="o">&gt;</span><span class="o">.</span><span class="i">Name</span> ]
        <span onmouseout="hideTip(event, 'fs142', 757)" onmouseover="showTip(event, 'fs142', 757)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs206', 758)" onmouseover="showTip(event, 'fs206', 758)" class="f">That</span>((<span onmouseout="hideTip(event, 'fs197', 759)" onmouseover="showTip(event, 'fs197', 759)" class="i">types</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs204', 760)" onmouseover="showTip(event, 'fs204', 760)" class="i">types&#39;</span>))

    <span class="k">do</span>  <span onmouseout="hideTip(event, 'fs172', 761)" onmouseover="showTip(event, 'fs172', 761)" class="f">``resolving type with value type dependency in constructor should throw``</span> ()
        <span onmouseout="hideTip(event, 'fs176', 762)" onmouseover="showTip(event, 'fs176', 762)" class="f">``resolving type with reference type dependency in constructor should inject reference``</span> ()
        <span onmouseout="hideTip(event, 'fs181', 763)" onmouseover="showTip(event, 'fs181', 763)" class="f">``resolving type with self type dependency in constructor should fail``</span> ()
        <span onmouseout="hideTip(event, 'fs186', 764)" onmouseover="showTip(event, 'fs186', 764)" class="f">``resolving type with fun type argument in constructor should inject factory``</span> ()
        <span onmouseout="hideTip(event, 'fs195', 765)" onmouseover="showTip(event, 'fs195', 765)" class="f">``resolving type with seq type argument in constructor should inject sub types``</span> ()
        <span onmouseout="hideTip(event, 'fs214', 766)" onmouseover="showTip(event, 'fs214', 766)" class="f">``resolving type with seq type argument in constructor should inject interfaces``</span> ()

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs218', 767)" onmouseover="showTip(event, 'fs218', 767)" class="t">Usage</span> <span class="o">=</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs219', 768)" onmouseover="showTip(event, 'fs219', 768)" class="t">ICalculate</span> <span class="o">=</span>
        <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs220', 769)" onmouseover="showTip(event, 'fs220', 769)" class="f">Incr</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs171', 770)" onmouseover="showTip(event, 'fs171', 770)" class="t">int</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs171', 771)" onmouseover="showTip(event, 'fs171', 771)" class="t">int</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs221', 772)" onmouseover="showTip(event, 'fs221', 772)" class="t">Calculator</span> () <span class="o">=</span>
        <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs219', 773)" onmouseover="showTip(event, 'fs219', 773)" class="t">ICalculate</span> <span class="k">with</span>
            <span class="k">member</span> <span onmouseout="hideTip(event, 'fs222', 774)" onmouseover="showTip(event, 'fs222', 774)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs223', 775)" onmouseover="showTip(event, 'fs223', 775)" class="f">Incr</span>(<span onmouseout="hideTip(event, 'fs224', 776)" onmouseover="showTip(event, 'fs224', 776)" class="i">x</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs171', 777)" onmouseover="showTip(event, 'fs171', 777)" class="t">int</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs224', 778)" onmouseover="showTip(event, 'fs224', 778)" class="i">x</span> <span class="o">+</span> <span class="n">1</span>
    
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs225', 779)" onmouseover="showTip(event, 'fs225', 779)" class="i">container</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 780)" onmouseover="showTip(event, 'fs37', 780)" class="t">Container</span>()

    <span class="c">// Register</span>
    <span onmouseout="hideTip(event, 'fs225', 781)" onmouseover="showTip(event, 'fs225', 781)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs141', 782)" onmouseover="showTip(event, 'fs141', 782)" class="f">Register</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs219', 783)" onmouseover="showTip(event, 'fs219', 783)" class="t">ICalculate</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs80', 784)" onmouseover="showTip(event, 'fs80', 784)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs221', 785)" onmouseover="showTip(event, 'fs221', 785)" class="t">Calculator</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs13', 786)" onmouseover="showTip(event, 'fs13', 786)" class="p">Singleton</span>)

    <span class="c">// Resolve</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs226', 787)" onmouseover="showTip(event, 'fs226', 787)" class="i">calc</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs225', 788)" onmouseover="showTip(event, 'fs225', 788)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs84', 789)" onmouseover="showTip(event, 'fs84', 789)" class="f">Resolve</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs219', 790)" onmouseover="showTip(event, 'fs219', 790)" class="t">ICalculate</span><span class="o">&gt;</span>()
    
    <span onmouseout="hideTip(event, 'fs227', 791)" onmouseover="showTip(event, 'fs227', 791)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%d</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs226', 792)" onmouseover="showTip(event, 'fs226', 792)" class="i">calc</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs228', 793)" onmouseover="showTip(event, 'fs228', 793)" class="f">Incr</span> <span class="n">1</span>)
    
    <span class="c">// Release</span>
    <span onmouseout="hideTip(event, 'fs225', 794)" onmouseover="showTip(event, 'fs225', 794)" class="i">container</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs166', 795)" onmouseover="showTip(event, 'fs166', 795)" class="f">Release</span>(<span onmouseout="hideTip(event, 'fs226', 796)" onmouseover="showTip(event, 'fs226', 796)" class="i">calc</span>)

    <span onmouseout="hideTip(event, 'fs229', 797)" onmouseover="showTip(event, 'fs229', 797)" class="t">Console</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs230', 798)" onmouseover="showTip(event, 'fs230', 798)" class="f">ReadLine</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs130', 799)" onmouseover="showTip(event, 'fs130', 799)" class="f">ignore</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Collections</div>
<div class="tip" id="fs3">namespace System.Collections.Generic</div>
<div class="tip" id="fs4">namespace System.Reflection</div>
<div class="tip" id="fs5">namespace Microsoft</div>
<div class="tip" id="fs6">namespace Microsoft.FSharp</div>
<div class="tip" id="fs7">namespace Microsoft.FSharp.Reflection</div>
<div class="tip" id="fs8">type Message = string<br /><br />Full name: Script.Message</div>
<div class="tip" id="fs9">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs10">exception TypeResolutionException of Message * Type<br /><br />Full name: Script.TypeResolutionException</div>
<div class="tip" id="fs11">type Type =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Assembly : Assembly<br />&#160;&#160;member AssemblyQualifiedName : string<br />&#160;&#160;member Attributes : TypeAttributes<br />&#160;&#160;member BaseType : Type<br />&#160;&#160;member ContainsGenericParameters : bool<br />&#160;&#160;member DeclaringMethod : MethodBase<br />&#160;&#160;member DeclaringType : Type<br />&#160;&#160;member Equals : o:obj -&gt; bool + 1 overload<br />&#160;&#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&gt; Type[]<br />&#160;&#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&gt; MemberInfo[]<br />&#160;&#160;...<br /><br />Full name: System.Type</div>
<div class="tip" id="fs12">type Lifetime =<br />&#160;&#160;| Singleton<br />&#160;&#160;| Transient<br /><br />Full name: Script.Lifetime</div>
<div class="tip" id="fs13">union case Lifetime.Singleton: Lifetime</div>
<div class="tip" id="fs14">union case Lifetime.Transient: Lifetime</div>
<div class="tip" id="fs15">type AbstractType = Type<br /><br />Full name: Script.AbstractType</div>
<div class="tip" id="fs16">type ConcreteType = Type<br /><br />Full name: Script.ConcreteType</div>
<div class="tip" id="fs17">type private Constructor =<br />&#160;&#160;| Reflected of ConcreteType<br />&#160;&#160;| Factory of (unit -&gt; obj)<br /><br />Full name: Script.Constructor</div>
<div class="tip" id="fs18">union case Constructor.Reflected: ConcreteType -&gt; Constructor</div>
<div class="tip" id="fs19">union case Constructor.Factory: (unit -&gt; obj) -&gt; Constructor</div>
<div class="tip" id="fs20">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs21">type obj = Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs22">val t : Type</div>
<div class="tip" id="fs23">type FSharpType =<br />&#160;&#160;static member GetExceptionFields : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetFunctionElements : functionType:Type -&gt; Type * Type<br />&#160;&#160;static member GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetTupleElements : tupleType:Type -&gt; Type []<br />&#160;&#160;static member GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []<br />&#160;&#160;static member IsExceptionRepresentation : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsFunction : typ:Type -&gt; bool<br />&#160;&#160;static member IsModule : typ:Type -&gt; bool<br />&#160;&#160;static member IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsTuple : typ:Type -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpType</div>
<div class="tip" id="fs24">static member FSharpType.IsFunction : typ:Type -&gt; bool</div>
<div class="tip" id="fs25">static member FSharpType.GetFunctionElements : functionType:Type -&gt; Type * Type</div>
<div class="tip" id="fs26">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs27">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs28">property Type.IsGenericType: bool</div>
<div class="tip" id="fs29">Type.GetGenericTypeDefinition() : Type</div>
<div class="tip" id="fs30">val typedefof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typedefof</div>
<div class="tip" id="fs31">type IEnumerable&lt;&#39;T&gt; =<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;&#39;T&gt;<br /><br />Full name: System.Collections.Generic.IEnumerable&lt;_&gt;</div>
<div class="tip" id="fs32">Type.GetGenericArguments() : Type []</div>
<div class="tip" id="fs33">val private toOption : _arg1:Choice&lt;&#39;a,&#39;b&gt; -&gt; &#39;a option<br /><br />Full name: Script.toOption</div>
<div class="tip" id="fs34">union case Choice.Choice1Of2: &#39;T1 -&gt; Choice&lt;&#39;T1,&#39;T2&gt;</div>
<div class="tip" id="fs35">val x : &#39;a</div>
<div class="tip" id="fs36">union case Choice.Choice2Of2: &#39;T2 -&gt; Choice&lt;&#39;T1,&#39;T2&gt;</div>
<div class="tip" id="fs37">Multiple items<br />type Container =<br />&#160;&#160;new : unit -&gt; Container<br />&#160;&#160;member Register : instance:&#39;TAbstract -&gt; unit<br />&#160;&#160;member Register : abstractTypes:seq&lt;AbstractType&gt; * concreteType:ConcreteType -&gt; unit<br />&#160;&#160;member Register : concreteType:ConcreteType * lifetime:Lifetime -&gt; unit<br />&#160;&#160;member Register : f:(unit -&gt; &#39;TAbstract) * lifetime:Lifetime -&gt; unit (requires reference type)<br />&#160;&#160;member Release : instance:obj -&gt; unit<br />&#160;&#160;member Resolve : unit -&gt; &#39;TAbstract (requires reference type)<br />&#160;&#160;member Resolve : abstractType:AbstractType -&gt; obj<br /><br />Full name: Script.Container<br /><em><br /><br />&#160;IoC Container</em><br /><br />--------------------<br />new : unit -&gt; Container</div>
<div class="tip" id="fs38">val container : Container</div>
<div class="tip" id="fs39">val catalog : Dictionary&lt;AbstractType,(Constructor * Lifetime)&gt;</div>
<div class="tip" id="fs40">Multiple items<br />type Dictionary&lt;&#39;TKey,&#39;TValue&gt; =<br />&#160;&#160;new : unit -&gt; Dictionary&lt;&#39;TKey, &#39;TValue&gt; + 5 overloads<br />&#160;&#160;member Add : key:&#39;TKey * value:&#39;TValue -&gt; unit<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Comparer : IEqualityComparer&lt;&#39;TKey&gt;<br />&#160;&#160;member ContainsKey : key:&#39;TKey -&gt; bool<br />&#160;&#160;member ContainsValue : value:&#39;TValue -&gt; bool<br />&#160;&#160;member Count : int<br />&#160;&#160;member GetEnumerator : unit -&gt; Enumerator&lt;&#39;TKey, &#39;TValue&gt;<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;member Item : &#39;TKey -&gt; &#39;TValue with get, set<br />&#160;&#160;...<br />&#160;&#160;nested type Enumerator<br />&#160;&#160;nested type KeyCollection<br />&#160;&#160;nested type ValueCollection<br /><br />Full name: System.Collections.Generic.Dictionary&lt;_,_&gt;<br /><br />--------------------<br />Dictionary() : unit<br />Dictionary(capacity: int) : unit<br />Dictionary(comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />Dictionary(dictionary: IDictionary&lt;&#39;TKey,&#39;TValue&gt;) : unit<br />Dictionary(capacity: int, comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />Dictionary(dictionary: IDictionary&lt;&#39;TKey,&#39;TValue&gt;, comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit</div>
<div class="tip" id="fs41">val singletons : Dictionary&lt;ConcreteType,obj&gt;</div>
<div class="tip" id="fs42">val tryResolve : (ConcreteType list -&gt; AbstractType -&gt; Choice&lt;obj,string&gt;)</div>
<div class="tip" id="fs43">val cs : ConcreteType list</div>
<div class="tip" id="fs44">val t : AbstractType</div>
<div class="tip" id="fs45">Dictionary.TryGetValue(key: AbstractType, value: byref&lt;Constructor * Lifetime&gt;) : bool</div>
<div class="tip" id="fs46">val u : ConcreteType</div>
<div class="tip" id="fs47">val lifetime : Lifetime</div>
<div class="tip" id="fs48">val tryObtain : (ConcreteType -&gt; (unit -&gt; Choice&lt;obj,string&gt;) -&gt; Lifetime -&gt; Choice&lt;obj,string&gt;)</div>
<div class="tip" id="fs49">val tryReflect : (ConcreteType list -&gt; ConcreteType -&gt; Choice&lt;obj,string&gt;)</div>
<div class="tip" id="fs50">val f : (unit -&gt; obj)</div>
<div class="tip" id="fs51">val t : ConcreteType</div>
<div class="tip" id="fs52">val f : (unit -&gt; Choice&lt;obj,string&gt;)</div>
<div class="tip" id="fs53">Dictionary.TryGetValue(key: ConcreteType, value: byref&lt;obj&gt;) : bool</div>
<div class="tip" id="fs54">val value : obj</div>
<div class="tip" id="fs55">val result : Choice&lt;obj,string&gt;</div>
<div class="tip" id="fs56">val store : (ConcreteType -&gt; obj -&gt; Lifetime -&gt; unit)</div>
<div class="tip" id="fs57">Dictionary.Add(key: ConcreteType, value: obj) : unit</div>
<div class="tip" id="fs58">Multiple items<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; List&lt;&#39;T&gt; + 2 overloads<br />&#160;&#160;member Add : item:&#39;T -&gt; unit<br />&#160;&#160;member AddRange : collection:IEnumerable&lt;&#39;T&gt; -&gt; unit<br />&#160;&#160;member AsReadOnly : unit -&gt; ReadOnlyCollection&lt;&#39;T&gt;<br />&#160;&#160;member BinarySearch : item:&#39;T -&gt; int + 2 overloads<br />&#160;&#160;member Capacity : int with get, set<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Contains : item:&#39;T -&gt; bool<br />&#160;&#160;member ConvertAll&lt;&#39;TOutput&gt; : converter:Converter&lt;&#39;T, &#39;TOutput&gt; -&gt; List&lt;&#39;TOutput&gt;<br />&#160;&#160;member CopyTo : array:&#39;T[] -&gt; unit + 2 overloads<br />&#160;&#160;...<br />&#160;&#160;nested type Enumerator<br /><br />Full name: System.Collections.Generic.List&lt;_&gt;<br /><br />--------------------<br />List() : unit<br />List(capacity: int) : unit<br />List(collection: IEnumerable&lt;&#39;T&gt;) : unit</div>
<div class="tip" id="fs59">val exists : predicate:(&#39;T -&gt; bool) -&gt; list:&#39;T list -&gt; bool<br /><br />Full name: Microsoft.FSharp.Collections.List.exists</div>
<div class="tip" id="fs60">val tryConstructors : (ConcreteType list -&gt; ConcreteType -&gt; Choice&lt;obj,string&gt;)</div>
<div class="tip" id="fs61">Type.GetConstructors() : ConstructorInfo []<br />Type.GetConstructors(bindingAttr: BindingFlags) : ConstructorInfo []</div>
<div class="tip" id="fs62">type Array =<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CopyTo : array:Array * index:int -&gt; unit + 1 overload<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator<br />&#160;&#160;member GetLength : dimension:int -&gt; int<br />&#160;&#160;member GetLongLength : dimension:int -&gt; int64<br />&#160;&#160;member GetLowerBound : dimension:int -&gt; int<br />&#160;&#160;member GetUpperBound : dimension:int -&gt; int<br />&#160;&#160;member GetValue : [&lt;ParamArray&gt;] indices:int[] -&gt; obj + 7 overloads<br />&#160;&#160;member Initialize : unit -&gt; unit<br />&#160;&#160;member IsFixedSize : bool<br />&#160;&#160;...<br /><br />Full name: System.Array</div>
<div class="tip" id="fs63">val sortBy : projection:(&#39;T -&gt; &#39;Key) -&gt; array:&#39;T [] -&gt; &#39;T [] (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Array.sortBy</div>
<div class="tip" id="fs64">val c : ConstructorInfo</div>
<div class="tip" id="fs65">MethodBase.GetParameters() : ParameterInfo []</div>
<div class="tip" id="fs66">val tryPick : chooser:(&#39;T -&gt; &#39;U option) -&gt; array:&#39;T [] -&gt; &#39;U option<br /><br />Full name: Microsoft.FSharp.Collections.Array.tryPick</div>
<div class="tip" id="fs67">val tryConstructor : (ConcreteType list -&gt; ConstructorInfo -&gt; Choice&lt;obj,string&gt;)</div>
<div class="tip" id="fs68">val ci : ConstructorInfo</div>
<div class="tip" id="fs69">val ps : ParameterInfo []</div>
<div class="tip" id="fs70">val args : obj []</div>
<div class="tip" id="fs71">val choose : chooser:(&#39;T -&gt; &#39;U option) -&gt; array:&#39;T [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.choose</div>
<div class="tip" id="fs72">val p : ParameterInfo</div>
<div class="tip" id="fs73">val tryResolveArgument : (ConcreteType list -&gt; Type -&gt; Choice&lt;obj,string&gt;)</div>
<div class="tip" id="fs74">property ParameterInfo.ParameterType: Type</div>
<div class="tip" id="fs75">property Array.Length: int</div>
<div class="tip" id="fs76">ConstructorInfo.Invoke(parameters: obj []) : obj<br />MethodBase.Invoke(obj: obj, parameters: obj []) : obj<br />ConstructorInfo.Invoke(invokeAttr: BindingFlags, binder: Binder, parameters: obj [], culture: Globalization.CultureInfo) : obj<br />MethodBase.Invoke(obj: obj, invokeAttr: BindingFlags, binder: Binder, parameters: obj [], culture: Globalization.CultureInfo) : obj</div>
<div class="tip" id="fs77">active recognizer FunType: Type -&gt; (Type * Type) option<br /><br />Full name: Script.( |FunType|_| )</div>
<div class="tip" id="fs78">val arg : Type</div>
<div class="tip" id="fs79">val result : Type</div>
<div class="tip" id="fs80">val typeof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs81">type FSharpValue =<br />&#160;&#160;static member GetExceptionFields : exn:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetRecordField : record:obj * info:PropertyInfo -&gt; obj<br />&#160;&#160;static member GetRecordFields : record:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetTupleField : tuple:obj * index:int -&gt; obj<br />&#160;&#160;static member GetTupleFields : tuple:obj -&gt; obj []<br />&#160;&#160;static member GetUnionFields : value:obj * unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo * obj []<br />&#160;&#160;static member MakeFunction : functionType:Type * implementation:(obj -&gt; obj) -&gt; obj<br />&#160;&#160;static member MakeRecord : recordType:Type * values:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;static member MakeTuple : tupleElements:obj [] * tupleType:Type -&gt; obj<br />&#160;&#160;static member MakeUnion : unionCase:UnionCaseInfo * args:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpValue</div>
<div class="tip" id="fs82">static member FSharpValue.MakeFunction : functionType:Type * implementation:(obj -&gt; obj) -&gt; obj</div>
<div class="tip" id="fs83">val args : obj</div>
<div class="tip" id="fs84">member Container.Resolve : unit -&gt; &#39;TAbstract (requires reference type)<br /><em><br /><br />&#160;Resolve instance of specified abstract type</em><br />member Container.Resolve : abstractType:AbstractType -&gt; obj<br /><em><br /><br />&#160;Resolve instsance of specified abstract type</em></div>
<div class="tip" id="fs85">active recognizer SeqType: Type -&gt; Type option<br /><br />Full name: Script.( |SeqType|_| )</div>
<div class="tip" id="fs86">val interfaces : seq&lt;AbstractType&gt;</div>
<div class="tip" id="fs87">property Dictionary.Keys: Dictionary`2.KeyCollection&lt;AbstractType,(Constructor * Lifetime)&gt;</div>
<div class="tip" id="fs88">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs89">val filter : predicate:(&#39;T -&gt; bool) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.filter</div>
<div class="tip" id="fs90">val x : AbstractType</div>
<div class="tip" id="fs91">Type.GetInterfaces() : Type []</div>
<div class="tip" id="fs92">val exists : predicate:(&#39;T -&gt; bool) -&gt; source:seq&lt;&#39;T&gt; -&gt; bool<br /><br />Full name: Microsoft.FSharp.Collections.Seq.exists</div>
<div class="tip" id="fs93">val subTypes : seq&lt;AbstractType&gt;</div>
<div class="tip" id="fs94">Type.IsSubclassOf(c: Type) : bool</div>
<div class="tip" id="fs95">val values : obj []</div>
<div class="tip" id="fs96">val append : source1:seq&lt;&#39;T&gt; -&gt; source2:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.append</div>
<div class="tip" id="fs97">val choose : chooser:(&#39;T -&gt; &#39;U option) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.choose</div>
<div class="tip" id="fs98">val toArray : source:seq&lt;&#39;T&gt; -&gt; &#39;T []<br /><br />Full name: Microsoft.FSharp.Collections.Seq.toArray</div>
<div class="tip" id="fs99">val result : Array</div>
<div class="tip" id="fs100">Array.CreateInstance(elementType: Type, [&lt;ParamArray&gt;] lengths: int64 []) : Array<br />Array.CreateInstance(elementType: Type, [&lt;ParamArray&gt;] lengths: int []) : Array<br />Array.CreateInstance(elementType: Type, length: int) : Array<br />Array.CreateInstance(elementType: Type, lengths: int [], lowerBounds: int []) : Array<br />Array.CreateInstance(elementType: Type, length1: int, length2: int) : Array<br />Array.CreateInstance(elementType: Type, length1: int, length2: int, length3: int) : Array</div>
<div class="tip" id="fs101">Array.Copy(sourceArray: Array, destinationArray: Array, length: int64) : unit<br />Array.Copy(sourceArray: Array, destinationArray: Array, length: int) : unit<br />Array.Copy(sourceArray: Array, sourceIndex: int64, destinationArray: Array, destinationIndex: int64, length: int64) : unit<br />Array.Copy(sourceArray: Array, sourceIndex: int, destinationArray: Array, destinationIndex: int, length: int) : unit</div>
<div class="tip" id="fs102">val box : value:&#39;T -&gt; obj<br /><br />Full name: Microsoft.FSharp.Core.Operators.box</div>
<div class="tip" id="fs103">member Container.Register : abstractTypes:seq&lt;AbstractType&gt; * concreteType:ConcreteType -&gt; unit<br /><br />Full name: Script.Container.Register<br /><em><br /><br />&#160;Register sequence of abstract types against specified concrete type</em></div>
<div class="tip" id="fs104">val abstractTypes : seq&lt;AbstractType&gt;</div>
<div class="tip" id="fs105">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs106">val concreteType : ConcreteType</div>
<div class="tip" id="fs107">Dictionary.Add(key: AbstractType, value: Constructor * Lifetime) : unit</div>
<div class="tip" id="fs108">member Container.Register : instance:&#39;TAbstract -&gt; unit<br /><br />Full name: Script.Container.Register<br /><em><br /><br />&#160;Register abstract type against specified type instance</em></div>
<div class="tip" id="fs109">val instance : &#39;TAbstract</div>
<div class="tip" id="fs110">member Container.Register : concreteType:ConcreteType * lifetime:Lifetime -&gt; unit<br /><br />Full name: Script.Container.Register<br /><em><br /><br />&#160;Register abstract type against specified concrete type with given lifetime</em></div>
<div class="tip" id="fs111">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs112">val abstractType : Type</div>
<div class="tip" id="fs113">val exists : predicate:(&#39;T -&gt; bool) -&gt; array:&#39;T [] -&gt; bool<br /><br />Full name: Microsoft.FSharp.Collections.Array.exists</div>
<div class="tip" id="fs114">val invalidArg : argumentName:string -&gt; message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.invalidArg</div>
<div class="tip" id="fs115">member Container.Register : f:(unit -&gt; &#39;TAbstract) * lifetime:Lifetime -&gt; unit (requires reference type)<br /><br />Full name: Script.Container.Register<br /><em><br /><br />&#160;Register abstract type against specified factory with given lifetime</em></div>
<div class="tip" id="fs116">val f : (unit -&gt; &#39;TAbstract) (requires reference type)</div>
<div class="tip" id="fs117">member Container.Resolve : unit -&gt; &#39;TAbstract (requires reference type)<br /><br />Full name: Script.Container.Resolve<br /><em><br /><br />&#160;Resolve instance of specified abstract type</em></div>
<div class="tip" id="fs118">member Container.Resolve : abstractType:AbstractType -&gt; obj<br /><br />Full name: Script.Container.Resolve<br /><em><br /><br />&#160;Resolve instsance of specified abstract type</em></div>
<div class="tip" id="fs119">val abstractType : AbstractType</div>
<div class="tip" id="fs120">val message : string</div>
<div class="tip" id="fs121">val raise : exn:Exception -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.raise</div>
<div class="tip" id="fs122">member Container.Release : instance:obj -&gt; unit<br /><br />Full name: Script.Container.Release<br /><em><br /><br />&#160;Remove instance reference from container</em></div>
<div class="tip" id="fs123">val instance : obj</div>
<div class="tip" id="fs124">val pair : KeyValuePair&lt;ConcreteType,obj&gt;</div>
<div class="tip" id="fs125">property KeyValuePair.Value: obj</div>
<div class="tip" id="fs126">val toList : source:seq&lt;&#39;T&gt; -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.Seq.toList</div>
<div class="tip" id="fs127">val iter : action:(&#39;T -&gt; unit) -&gt; list:&#39;T list -&gt; unit<br /><br />Full name: Microsoft.FSharp.Collections.List.iter</div>
<div class="tip" id="fs128">Dictionary.Remove(key: ConcreteType) : bool</div>
<div class="tip" id="fs129">property KeyValuePair.Key: ConcreteType</div>
<div class="tip" id="fs130">val ignore : value:&#39;T -&gt; unit<br /><br />Full name: Microsoft.FSharp.Core.Operators.ignore</div>
<div class="tip" id="fs131">namespace NUnit</div>
<div class="tip" id="fs132">namespace NUnit.Framework</div>
<div class="tip" id="fs133">Multiple items<br />type TestFixtureAttribute =<br />&#160;&#160;inherit NUnitAttribute<br />&#160;&#160;new : unit -&gt; TestFixtureAttribute + 1 overload<br />&#160;&#160;member Arguments : obj[] with get, set<br />&#160;&#160;member Author : string with get, set<br />&#160;&#160;member BuildFrom : typeInfo:ITypeInfo -&gt; IEnumerable&lt;TestSuite&gt;<br />&#160;&#160;member Category : string with get, set<br />&#160;&#160;member Description : string with get, set<br />&#160;&#160;member Explicit : bool with get, set<br />&#160;&#160;member Ignore : string with get, set<br />&#160;&#160;member IgnoreReason : string with get, set<br />&#160;&#160;member Properties : IPropertyBag with get, set<br />&#160;&#160;...<br /><br />Full name: NUnit.Framework.TestFixtureAttribute<br /><br />--------------------<br />TestFixtureAttribute() : unit<br />TestFixtureAttribute([&lt;ParamArray&gt;] arguments: obj []) : unit</div>
<div class="tip" id="fs134">Multiple items<br />type AbstractClassAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; AbstractClassAttribute<br /><br />Full name: Microsoft.FSharp.Core.AbstractClassAttribute<br /><br />--------------------<br />new : unit -&gt; AbstractClassAttribute</div>
<div class="tip" id="fs135">Multiple items<br />type AbstractType =<br />&#160;&#160;new : unit -&gt; AbstractType<br /><br />Full name: Script.Container Register, Resolve, Release Tests.AbstractType<br /><br />--------------------<br />new : unit -&gt; Container Register&lt;...&gt;.AbstractType</div>
<div class="tip" id="fs136">Multiple items<br />type ConcreteType =<br />&#160;&#160;inherit AbstractType<br />&#160;&#160;new : unit -&gt; ConcreteType<br /><br />Full name: Script.Container Register, Resolve, Release Tests.ConcreteType<br /><br />--------------------<br />new : unit -&gt; Container Register&lt;...&gt;.ConcreteType</div>
<div class="tip" id="fs137">type IMarkerInterface<br /><br />Full name: Script.Container Register, Resolve, Release Tests.IMarkerInterface</div>
<div class="tip" id="fs138">Multiple items<br />type MarkedType =<br />&#160;&#160;interface IMarkerInterface<br />&#160;&#160;new : unit -&gt; MarkedType<br /><br />Full name: Script.Container Register, Resolve, Release Tests.MarkedType<br /><br />--------------------<br />new : unit -&gt; Container Register&lt;...&gt;.MarkedType</div>
<div class="tip" id="fs139">Multiple items<br />type TestAttribute =<br />&#160;&#160;inherit NUnitAttribute<br />&#160;&#160;new : unit -&gt; TestAttribute<br />&#160;&#160;member ApplyToTest : test:Test -&gt; unit<br />&#160;&#160;member Author : string with get, set<br />&#160;&#160;member BuildFrom : method:IMethodInfo * suite:Test -&gt; TestMethod<br />&#160;&#160;member Description : string with get, set<br />&#160;&#160;member ExpectedResult : obj with get, set<br />&#160;&#160;member HasExpectedResult : bool with get, set<br />&#160;&#160;member TestOf : Type with get, set<br /><br />Full name: NUnit.Framework.TestAttribute<br /><br />--------------------<br />TestAttribute() : unit</div>
<div class="tip" id="fs140">val ( registering 2 instances of an abstract type in a single container should throw ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( registering 2 instances of an abstract type in a single container should throw )</div>
<div class="tip" id="fs141">member Container.Register : instance:&#39;TAbstract -&gt; unit<br /><em><br /><br />&#160;Register abstract type against specified type instance</em><br />member Container.Register : abstractTypes:seq&lt;AbstractType&gt; * concreteType:ConcreteType -&gt; unit<br /><em><br /><br />&#160;Register sequence of abstract types against specified concrete type</em><br />member Container.Register : concreteType:ConcreteType * lifetime:Lifetime -&gt; unit<br /><em><br /><br />&#160;Register abstract type against specified concrete type with given lifetime</em><br />member Container.Register : f:(unit -&gt; &#39;TAbstract) * lifetime:Lifetime -&gt; unit (requires reference type)<br /><em><br /><br />&#160;Register abstract type against specified factory with given lifetime</em></div>
<div class="tip" id="fs142">type Assert =<br />&#160;&#160;static member AreEqual : expected:obj * actual:obj -&gt; unit + 5 overloads<br />&#160;&#160;static member AreNotEqual : expected:obj * actual:obj -&gt; unit + 1 overload<br />&#160;&#160;static member AreNotSame : expected:obj * actual:obj -&gt; unit + 1 overload<br />&#160;&#160;static member AreSame : expected:obj * actual:obj -&gt; unit + 1 overload<br />&#160;&#160;static member ByVal : actual:obj * expression:IResolveConstraint -&gt; unit + 1 overload<br />&#160;&#160;static member Catch : code:TestDelegate -&gt; Exception + 5 overloads<br />&#160;&#160;static member Contains : expected:obj * actual:ICollection -&gt; unit + 1 overload<br />&#160;&#160;static member DoesNotThrow : code:TestDelegate -&gt; unit + 1 overload<br />&#160;&#160;static member Equals : a:obj * b:obj -&gt; bool<br />&#160;&#160;static member Fail : unit -&gt; unit + 2 overloads<br />&#160;&#160;...<br /><br />Full name: NUnit.Framework.Assert</div>
<div class="tip" id="fs143">Assert.Throws&lt;&#39;TActual (requires &#39;TActual :&gt; exn)&gt;(code: TestDelegate) : &#39;TActual<br />Assert.Throws(expectedExceptionType: Type, code: TestDelegate) : exn<br />Assert.Throws(expression: Constraints.IResolveConstraint, code: TestDelegate) : exn<br />Assert.Throws&lt;&#39;TActual (requires &#39;TActual :&gt; exn)&gt;(code: TestDelegate, message: string, [&lt;ParamArray&gt;] args: obj []) : &#39;TActual<br />Assert.Throws(expectedExceptionType: Type, code: TestDelegate, message: string, [&lt;ParamArray&gt;] args: obj []) : exn<br />Assert.Throws(expression: Constraints.IResolveConstraint, code: TestDelegate, message: string, [&lt;ParamArray&gt;] args: obj []) : exn</div>
<div class="tip" id="fs144">Multiple items<br />type ArgumentException =<br />&#160;&#160;inherit SystemException<br />&#160;&#160;new : unit -&gt; ArgumentException + 4 overloads<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;member Message : string<br />&#160;&#160;member ParamName : string<br /><br />Full name: System.ArgumentException<br /><br />--------------------<br />ArgumentException() : unit<br />ArgumentException(message: string) : unit<br />ArgumentException(message: string, innerException: exn) : unit<br />ArgumentException(message: string, paramName: string) : unit<br />ArgumentException(message: string, paramName: string, innerException: exn) : unit</div>
<div class="tip" id="fs145">val ( attempting to resolve an unregistered type should throw ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( attempting to resolve an unregistered type should throw )</div>
<div class="tip" id="fs146">val ( resolving a registered abstract type should return an instance of the specified concrete type ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( resolving a registered abstract type should return an instance of the specified concrete type )</div>
<div class="tip" id="fs147">val instance : Container Register&lt;...&gt;.AbstractType</div>
<div class="tip" id="fs148">Assert.True(condition: bool) : unit<br />Assert.True(condition: Nullable&lt;bool&gt;) : unit<br />Assert.True(condition: bool, message: string, [&lt;ParamArray&gt;] args: obj []) : unit<br />Assert.True(condition: Nullable&lt;bool&gt;, message: string, [&lt;ParamArray&gt;] args: obj []) : unit</div>
<div class="tip" id="fs149">val ( resolving a type with a singleton lifetime should always return the same instance ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( resolving a type with a singleton lifetime should always return the same instance )</div>
<div class="tip" id="fs150">val a : Container Register&lt;...&gt;.AbstractType</div>
<div class="tip" id="fs151">val b : Container Register&lt;...&gt;.AbstractType</div>
<div class="tip" id="fs152">Multiple items<br />type Object =<br />&#160;&#160;new : unit -&gt; obj<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetType : unit -&gt; Type<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;static member Equals : objA:obj * objB:obj -&gt; bool<br />&#160;&#160;static member ReferenceEquals : objA:obj * objB:obj -&gt; bool<br /><br />Full name: System.Object<br /><br />--------------------<br />Object() : unit</div>
<div class="tip" id="fs153">Object.ReferenceEquals(objA: obj, objB: obj) : bool</div>
<div class="tip" id="fs154">val ( resolving a type with a transient lifetime should a new instance each time ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( resolving a type with a transient lifetime should a new instance each time )</div>
<div class="tip" id="fs155">Assert.AreNotSame(expected: obj, actual: obj) : unit<br />Assert.AreNotSame(expected: obj, actual: obj, message: string, [&lt;ParamArray&gt;] args: obj []) : unit</div>
<div class="tip" id="fs156">val ( resolving a registered instance of a type should return that instance ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( resolving a registered instance of a type should return that instance )</div>
<div class="tip" id="fs157">val this : Container Register&lt;...&gt;.ConcreteType</div>
<div class="tip" id="fs158">val that : Container Register&lt;...&gt;.AbstractType</div>
<div class="tip" id="fs159">Assert.AreSame(expected: obj, actual: obj) : unit<br />Assert.AreSame(expected: obj, actual: obj, message: string, [&lt;ParamArray&gt;] args: obj []) : unit</div>
<div class="tip" id="fs160">val ( resolving a type registered as a factory should call the specified factory ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( resolving a type registered as a factory should call the specified factory )</div>
<div class="tip" id="fs161">val called : bool ref</div>
<div class="tip" id="fs162">Multiple items<br />val ref : value:&#39;T -&gt; &#39;T ref<br /><br />Full name: Microsoft.FSharp.Core.Operators.ref<br /><br />--------------------<br />type &#39;T ref = Ref&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.ref&lt;_&gt;</div>
<div class="tip" id="fs163">val factory : (unit -&gt; Container Register&lt;...&gt;.AbstractType)</div>
<div class="tip" id="fs164">property Ref.Value: bool</div>
<div class="tip" id="fs165">val ( releasing a registered concrete instance then resolving the type should return a new concrete instance ) : unit -&gt; unit<br /><br />Full name: Script.Container Register, Resolve, Release Tests.( releasing a registered concrete instance then resolving the type should return a new concrete instance )</div>
<div class="tip" id="fs166">member Container.Release : instance:obj -&gt; unit<br /><em><br /><br />&#160;Remove instance reference from container</em></div>
<div class="tip" id="fs167">val that : Container Register&lt;...&gt;.ConcreteType</div>
<div class="tip" id="fs168">Multiple items<br />type AbstractType =<br />&#160;&#160;new : unit -&gt; AbstractType<br /><br />Full name: Script.Constructor Tests.AbstractType<br /><br />--------------------<br />new : unit -&gt; AbstractType</div>
<div class="tip" id="fs169">Multiple items<br />type ConstructorWithValueTypeArg =<br />&#160;&#160;inherit AbstractType<br />&#160;&#160;new : arg:int -&gt; ConstructorWithValueTypeArg<br /><br />Full name: Script.Constructor Tests.ConstructorWithValueTypeArg<br /><br />--------------------<br />new : arg:int -&gt; ConstructorWithValueTypeArg</div>
<div class="tip" id="fs170">val arg : int</div>
<div class="tip" id="fs171">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs172">val ( resolving type with value type dependency in constructor should throw ) : unit -&gt; unit<br /><br />Full name: Script.Constructor Tests.( resolving type with value type dependency in constructor should throw )</div>
<div class="tip" id="fs173">Multiple items<br />type ReferenceType =<br />&#160;&#160;new : unit -&gt; ReferenceType<br /><br />Full name: Script.Constructor Tests.ReferenceType<br /><br />--------------------<br />new : unit -&gt; ReferenceType</div>
<div class="tip" id="fs174">Multiple items<br />type ConstructorWithReferenceTypeArg =<br />&#160;&#160;inherit AbstractType<br />&#160;&#160;new : arg:ReferenceType -&gt; ConstructorWithReferenceTypeArg<br /><br />Full name: Script.Constructor Tests.ConstructorWithReferenceTypeArg<br /><br />--------------------<br />new : arg:ReferenceType -&gt; ConstructorWithReferenceTypeArg</div>
<div class="tip" id="fs175">val arg : ReferenceType</div>
<div class="tip" id="fs176">val ( resolving type with reference type dependency in constructor should inject reference ) : unit -&gt; unit<br /><br />Full name: Script.Constructor Tests.( resolving type with reference type dependency in constructor should inject reference )</div>
<div class="tip" id="fs177">val instance : AbstractType</div>
<div class="tip" id="fs178">Assert.NotNull(anObject: obj) : unit<br />Assert.NotNull(anObject: obj, message: string, [&lt;ParamArray&gt;] args: obj []) : unit</div>
<div class="tip" id="fs179">Multiple items<br />type ConstructorWithSelfReferenceArg =<br />&#160;&#160;inherit AbstractType<br />&#160;&#160;new : arg:AbstractType -&gt; ConstructorWithSelfReferenceArg<br /><br />Full name: Script.Constructor Tests.ConstructorWithSelfReferenceArg<br /><br />--------------------<br />new : arg:AbstractType -&gt; ConstructorWithSelfReferenceArg</div>
<div class="tip" id="fs180">val arg : AbstractType</div>
<div class="tip" id="fs181">val ( resolving type with self type dependency in constructor should fail ) : unit -&gt; unit<br /><br />Full name: Script.Constructor Tests.( resolving type with self type dependency in constructor should fail )</div>
<div class="tip" id="fs182">Multiple items<br />type ConstructorWithFunArg =<br />&#160;&#160;inherit AbstractType<br />&#160;&#160;new : arg:(unit -&gt; ReferenceType) -&gt; ConstructorWithFunArg<br />&#160;&#160;member Factory : unit -&gt; ReferenceType<br /><br />Full name: Script.Constructor Tests.ConstructorWithFunArg<br /><br />--------------------<br />new : arg:(unit -&gt; ReferenceType) -&gt; ConstructorWithFunArg</div>
<div class="tip" id="fs183">val arg : (unit -&gt; ReferenceType)</div>
<div class="tip" id="fs184">val this : ConstructorWithFunArg</div>
<div class="tip" id="fs185">member ConstructorWithFunArg.Factory : unit -&gt; ReferenceType<br /><br />Full name: Script.Constructor Tests.ConstructorWithFunArg.Factory</div>
<div class="tip" id="fs186">val ( resolving type with fun type argument in constructor should inject factory ) : unit -&gt; unit<br /><br />Full name: Script.Constructor Tests.( resolving type with fun type argument in constructor should inject factory )</div>
<div class="tip" id="fs187">val instance : ConstructorWithFunArg</div>
<div class="tip" id="fs188">val refValue : ReferenceType</div>
<div class="tip" id="fs189">member ConstructorWithFunArg.Factory : unit -&gt; ReferenceType</div>
<div class="tip" id="fs190">Multiple items<br />type SubType1 =<br />&#160;&#160;inherit AbstractType<br />&#160;&#160;new : unit -&gt; SubType1<br /><br />Full name: Script.Constructor Tests.SubType1<br /><br />--------------------<br />new : unit -&gt; SubType1</div>
<div class="tip" id="fs191">Multiple items<br />type SubType2 =<br />&#160;&#160;inherit AbstractType<br />&#160;&#160;new : unit -&gt; SubType2<br /><br />Full name: Script.Constructor Tests.SubType2<br /><br />--------------------<br />new : unit -&gt; SubType2</div>
<div class="tip" id="fs192">Multiple items<br />type ConstructorWithSeqArg =<br />&#160;&#160;new : subTypes:seq&lt;AbstractType&gt; -&gt; ConstructorWithSeqArg<br />&#160;&#160;member SubTypes : seq&lt;AbstractType&gt;<br /><br />Full name: Script.Constructor Tests.ConstructorWithSeqArg<br /><br />--------------------<br />new : subTypes:seq&lt;AbstractType&gt; -&gt; ConstructorWithSeqArg</div>
<div class="tip" id="fs193">val this : ConstructorWithSeqArg</div>
<div class="tip" id="fs194">member ConstructorWithSeqArg.SubTypes : seq&lt;AbstractType&gt;<br /><br />Full name: Script.Constructor Tests.ConstructorWithSeqArg.SubTypes</div>
<div class="tip" id="fs195">val ( resolving type with seq type argument in constructor should inject sub types ) : unit -&gt; unit<br /><br />Full name: Script.Constructor Tests.( resolving type with seq type argument in constructor should inject sub types )</div>
<div class="tip" id="fs196">val instance : ConstructorWithSeqArg</div>
<div class="tip" id="fs197">val types : Set&lt;string&gt;</div>
<div class="tip" id="fs198">property ConstructorWithSeqArg.SubTypes: seq&lt;AbstractType&gt;</div>
<div class="tip" id="fs199">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs200">val i : AbstractType</div>
<div class="tip" id="fs201">Object.GetType() : Type</div>
<div class="tip" id="fs202">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;member IsProperSupersetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Set&lt;_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs203">val ofSeq : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.ofSeq</div>
<div class="tip" id="fs204">val types&#39; : Set&lt;string&gt;</div>
<div class="tip" id="fs205">val set : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set</div>
<div class="tip" id="fs206">Assert.That(condition: Func&lt;bool&gt;) : unit<br />Assert.That(condition: bool) : unit<br />Assert.That&lt;&#39;TActual&gt;(actual: &#39;TActual, expression: Constraints.IResolveConstraint) : unit<br />Assert.That(code: TestDelegate, constraint: Constraints.IResolveConstraint) : unit<br />Assert.That&lt;&#39;TActual&gt;(del: Constraints.ActualValueDelegate&lt;&#39;TActual&gt;, expr: Constraints.IResolveConstraint) : unit<br />Assert.That(condition: Func&lt;bool&gt;, message: string, [&lt;ParamArray&gt;] args: obj []) : unit<br />Assert.That(condition: bool, message: string, [&lt;ParamArray&gt;] args: obj []) : unit<br />Assert.That&lt;&#39;TActual&gt;(actual: &#39;TActual, expression: Constraints.IResolveConstraint, message: string, [&lt;ParamArray&gt;] args: obj []) : unit<br />Assert.That(code: TestDelegate, constraint: Constraints.IResolveConstraint, message: string, [&lt;ParamArray&gt;] args: string []) : unit<br />Assert.That&lt;&#39;TActual&gt;(del: Constraints.ActualValueDelegate&lt;&#39;TActual&gt;, expr: Constraints.IResolveConstraint, message: string, [&lt;ParamArray&gt;] args: obj []) : unit</div>
<div class="tip" id="fs207">type Marker<br /><br />Full name: Script.Constructor Tests.Marker</div>
<div class="tip" id="fs208">Multiple items<br />type MarkedType1 =<br />&#160;&#160;interface Marker<br />&#160;&#160;new : unit -&gt; MarkedType1<br /><br />Full name: Script.Constructor Tests.MarkedType1<br /><br />--------------------<br />new : unit -&gt; MarkedType1</div>
<div class="tip" id="fs209">Multiple items<br />type MarkedType2 =<br />&#160;&#160;interface Marker<br />&#160;&#160;new : unit -&gt; MarkedType2<br /><br />Full name: Script.Constructor Tests.MarkedType2<br /><br />--------------------<br />new : unit -&gt; MarkedType2</div>
<div class="tip" id="fs210">Multiple items<br />type ConstructorWithInterfaceArg =<br />&#160;&#160;new : markedTypes:seq&lt;Marker&gt; -&gt; ConstructorWithInterfaceArg<br />&#160;&#160;member MarkedTypes : seq&lt;Marker&gt;<br /><br />Full name: Script.Constructor Tests.ConstructorWithInterfaceArg<br /><br />--------------------<br />new : markedTypes:seq&lt;Marker&gt; -&gt; ConstructorWithInterfaceArg</div>
<div class="tip" id="fs211">val markedTypes : seq&lt;Marker&gt;</div>
<div class="tip" id="fs212">val this : ConstructorWithInterfaceArg</div>
<div class="tip" id="fs213">member ConstructorWithInterfaceArg.MarkedTypes : seq&lt;Marker&gt;<br /><br />Full name: Script.Constructor Tests.ConstructorWithInterfaceArg.MarkedTypes</div>
<div class="tip" id="fs214">val ( resolving type with seq type argument in constructor should inject interfaces ) : unit -&gt; unit<br /><br />Full name: Script.Constructor Tests.( resolving type with seq type argument in constructor should inject interfaces )</div>
<div class="tip" id="fs215">val instance : ConstructorWithInterfaceArg</div>
<div class="tip" id="fs216">property ConstructorWithInterfaceArg.MarkedTypes: seq&lt;Marker&gt;</div>
<div class="tip" id="fs217">val i : Marker</div>
<div class="tip" id="fs218">module Usage<br /><br />from Script</div>
<div class="tip" id="fs219">type ICalculate =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Incr : int -&gt; int<br />&#160;&#160;end<br /><br />Full name: Script.Usage.ICalculate</div>
<div class="tip" id="fs220">abstract member ICalculate.Incr : int -&gt; int<br /><br />Full name: Script.Usage.ICalculate.Incr</div>
<div class="tip" id="fs221">Multiple items<br />type Calculator =<br />&#160;&#160;interface ICalculate<br />&#160;&#160;new : unit -&gt; Calculator<br /><br />Full name: Script.Usage.Calculator<br /><br />--------------------<br />new : unit -&gt; Calculator</div>
<div class="tip" id="fs222">val this : Calculator</div>
<div class="tip" id="fs223">override Calculator.Incr : x:int -&gt; int<br /><br />Full name: Script.Usage.Calculator.Incr</div>
<div class="tip" id="fs224">val x : int</div>
<div class="tip" id="fs225">val container : Container<br /><br />Full name: Script.Usage.container</div>
<div class="tip" id="fs226">val calc : ICalculate<br /><br />Full name: Script.Usage.calc</div>
<div class="tip" id="fs227">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs228">abstract member ICalculate.Incr : int -&gt; int</div>
<div class="tip" id="fs229">type Console =<br />&#160;&#160;static member BackgroundColor : ConsoleColor with get, set<br />&#160;&#160;static member Beep : unit -&gt; unit + 1 overload<br />&#160;&#160;static member BufferHeight : int with get, set<br />&#160;&#160;static member BufferWidth : int with get, set<br />&#160;&#160;static member CapsLock : bool<br />&#160;&#160;static member Clear : unit -&gt; unit<br />&#160;&#160;static member CursorLeft : int with get, set<br />&#160;&#160;static member CursorSize : int with get, set<br />&#160;&#160;static member CursorTop : int with get, set<br />&#160;&#160;static member CursorVisible : bool with get, set<br />&#160;&#160;...<br /><br />Full name: System.Console</div>
<div class="tip" id="fs230">Console.ReadLine() : string</div>

