<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">module</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">Memoize</span>

<span class="c">//More generic variant of http://www.fssnip.net/c4  </span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">Concurrent</span>  
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">cache</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">ConcurrentDictionary</span><span class="o">&lt;</span>(<span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="t">string</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="t">obj</span>),<span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="t">Lazy</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="t">obj</span><span class="o">&gt;</span><span class="o">&gt;</span>()  
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="f">memoizeConcurrent</span> (<span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="i">caller</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="t">string</span>) (<span onmouseout="hideTip(event, 'fs12', 14)" onmouseover="showTip(event, 'fs12', 14)" class="f">f</span><span class="o">:</span> (<span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span>)) <span class="o">=</span>  
    <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 15)" onmouseover="showTip(event, 'fs13', 15)" class="i">x</span> <span class="k">-&gt;</span> (<span onmouseout="hideTip(event, 'fs5', 16)" onmouseover="showTip(event, 'fs5', 16)" class="i">cache</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 17)" onmouseover="showTip(event, 'fs14', 17)" class="f">GetOrAdd</span>((<span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="i">caller</span>, <span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="i">x</span><span class="o">|&gt;</span><span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="f">box</span>), <span class="k">lazy</span> ((<span onmouseout="hideTip(event, 'fs12', 21)" onmouseover="showTip(event, 'fs12', 21)" class="f">f</span> <span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="i">x</span>)<span class="o">|&gt;</span><span onmouseout="hideTip(event, 'fs15', 23)" onmouseover="showTip(event, 'fs15', 23)" class="f">box</span>))<span class="o">.</span><span class="f">Force</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="f">unbox</span>) <span class="o">:</span> <span class="o">&#39;</span><span class="i">b</span>

<span class="c">// and this works also with F# async functions.</span>
<span class="k">let</span> <span class="k">internal</span> <span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="f">memoizeAsync</span> <span onmouseout="hideTip(event, 'fs18', 26)" onmouseover="showTip(event, 'fs18', 26)" class="f">f</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 27)" onmouseover="showTip(event, 'fs19', 27)" class="i">cache</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 28)" onmouseover="showTip(event, 'fs2', 28)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 29)" onmouseover="showTip(event, 'fs3', 29)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 30)" onmouseover="showTip(event, 'fs4', 30)" class="i">Concurrent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 31)" onmouseover="showTip(event, 'fs6', 31)" class="t">ConcurrentDictionary</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span>, <span onmouseout="hideTip(event, 'fs2', 32)" onmouseover="showTip(event, 'fs2', 32)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 33)" onmouseover="showTip(event, 'fs20', 33)" class="i">Threading</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 34)" onmouseover="showTip(event, 'fs21', 34)" class="i">Tasks</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 35)" onmouseover="showTip(event, 'fs22', 35)" class="t">Task</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span><span class="o">&gt;</span>()
    <span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs13', 36)" onmouseover="showTip(event, 'fs13', 36)" class="i">x</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span>) <span class="k">-&gt;</span> <span class="c">// task.Result serialization to sync after done.</span>
        <span onmouseout="hideTip(event, 'fs19', 37)" onmouseover="showTip(event, 'fs19', 37)" class="i">cache</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 38)" onmouseover="showTip(event, 'fs23', 38)" class="f">GetOrAdd</span>(<span onmouseout="hideTip(event, 'fs13', 39)" onmouseover="showTip(event, 'fs13', 39)" class="i">x</span>, <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 40)" onmouseover="showTip(event, 'fs13', 40)" class="i">x</span> <span class="k">-&gt;</span> <span class="c">// Lazy is needed for &quot;if managed to start multiple before added&quot;</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 41)" onmouseover="showTip(event, 'fs24', 41)" class="i">threadfix</span> <span class="o">=</span> <span class="k">lazy</span>( <span onmouseout="hideTip(event, 'fs18', 42)" onmouseover="showTip(event, 'fs18', 42)" class="f">f</span>(<span onmouseout="hideTip(event, 'fs13', 43)" onmouseover="showTip(event, 'fs13', 43)" class="i">x</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs25', 44)" onmouseover="showTip(event, 'fs25', 44)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 45)" onmouseover="showTip(event, 'fs26', 45)" class="f">StartAsTask</span> )
            <span onmouseout="hideTip(event, 'fs24', 46)" onmouseover="showTip(event, 'fs24', 46)" class="i">threadfix</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 47)" onmouseover="showTip(event, 'fs27', 47)" class="f">Force</span>()) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs25', 48)" onmouseover="showTip(event, 'fs25', 48)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 49)" onmouseover="showTip(event, 'fs28', 49)" class="f">AwaitTask</span>

<span class="c">(*</span>
<span class="c">[&lt;Test&gt;]</span>
<span class="c">let ``async cache should work``() =</span>
<span class="c">    let mutable x = 0</span>
<span class="c">    let someSlowFunc mykey = async { </span>
<span class="c">        Console.WriteLine &quot;Simulated downloading...&quot;</span>
<span class="c">        do! Async.Sleep 400</span>
<span class="c">        Console.WriteLine &quot;Simulated downloading Done.&quot;</span>
<span class="c">        x &lt;- x + 1 // Side effect!</span>
<span class="c">        return &quot;&quot; }</span>
<span class="c">    let memFunc = memoizeAsync &lt;| someSlowFunc</span>
<span class="c">    async {</span>
<span class="c">        do! memFunc &quot;a&quot; |&gt; Async.Ignore</span>
<span class="c">        do! memFunc &quot;a&quot; |&gt; Async.Ignore</span>
<span class="c">        do! memFunc &quot;a&quot; |&gt; Async.Ignore</span>
<span class="c">        for i = 1 to 30 do</span>
<span class="c">            Async.Start( memFunc &quot;a&quot; |&gt; Async.Ignore )</span>
<span class="c">            Async.Start( memFunc &quot;a&quot; |&gt; Async.Ignore )</span>
<span class="c">        do! Async.Sleep 500</span>
<span class="c">        do! memFunc &quot;a&quot; |&gt; Async.Ignore</span>
<span class="c">        do! memFunc &quot;a&quot; |&gt; Async.Ignore</span>
<span class="c">        for i = 1 to 30 do</span>
<span class="c">            Async.Start( memFunc &quot;a&quot; |&gt; Async.Ignore )</span>
<span class="c">    } |&gt; Async.RunSynchronously</span>
<span class="c">    x |&gt; shouldEqual 1</span>

<span class="c">*)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">module Memoize</div>
<div class="tip" id="fs2">namespace System</div>
<div class="tip" id="fs3">namespace System.Collections</div>
<div class="tip" id="fs4">namespace System.Collections.Concurrent</div>
<div class="tip" id="fs5">val cache : ConcurrentDictionary&lt;(string * obj),Lazy&lt;obj&gt;&gt;<br /><br />Full name: Memoize.cache</div>
<div class="tip" id="fs6">Multiple items<br />type ConcurrentDictionary&lt;&#39;TKey,&#39;TValue&gt; =<br />&#160;&#160;new : unit -&gt; ConcurrentDictionary&lt;&#39;TKey, &#39;TValue&gt; + 6 overloads<br />&#160;&#160;member AddOrUpdate : key:&#39;TKey * addValueFactory:Func&lt;&#39;TKey, &#39;TValue&gt; * updateValueFactory:Func&lt;&#39;TKey, &#39;TValue, &#39;TValue&gt; -&gt; &#39;TValue + 1 overload<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member ContainsKey : key:&#39;TKey -&gt; bool<br />&#160;&#160;member Count : int<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;KeyValuePair&lt;&#39;TKey, &#39;TValue&gt;&gt;<br />&#160;&#160;member GetOrAdd : key:&#39;TKey * valueFactory:Func&lt;&#39;TKey, &#39;TValue&gt; -&gt; &#39;TValue + 1 overload<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : &#39;TKey -&gt; &#39;TValue with get, set<br />&#160;&#160;member Keys : ICollection&lt;&#39;TKey&gt;<br />&#160;&#160;...<br /><br />Full name: System.Collections.Concurrent.ConcurrentDictionary&lt;_,_&gt;<br /><br />--------------------<br />ConcurrentDictionary() : unit<br />ConcurrentDictionary(collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;) : unit<br />ConcurrentDictionary(comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />ConcurrentDictionary(concurrencyLevel: int, capacity: int) : unit<br />ConcurrentDictionary(collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />ConcurrentDictionary(concurrencyLevel: int, collection: System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;&#39;TKey,&#39;TValue&gt;&gt;, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />ConcurrentDictionary(concurrencyLevel: int, capacity: int, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;TKey&gt;) : unit</div>
<div class="tip" id="fs7">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs8">type obj = System.Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs9">Multiple items<br />active recognizer Lazy: Lazy&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.( |Lazy| )<br /><br />--------------------<br />type Lazy&lt;&#39;T&gt; = System.Lazy&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Lazy&lt;_&gt;</div>
<div class="tip" id="fs10">val memoizeConcurrent : caller:string -&gt; f:(&#39;a -&gt; &#39;b) -&gt; x:&#39;a -&gt; &#39;b<br /><br />Full name: Memoize.memoizeConcurrent</div>
<div class="tip" id="fs11">val caller : string</div>
<div class="tip" id="fs12">val f : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs13">val x : &#39;a</div>
<div class="tip" id="fs14">ConcurrentDictionary.GetOrAdd(key: string * obj, value: Lazy&lt;obj&gt;) : Lazy&lt;obj&gt;<br />ConcurrentDictionary.GetOrAdd(key: string * obj, valueFactory: System.Func&lt;(string * obj),Lazy&lt;obj&gt;&gt;) : Lazy&lt;obj&gt;</div>
<div class="tip" id="fs15">val box : value:&#39;T -&gt; obj<br /><br />Full name: Microsoft.FSharp.Core.Operators.box</div>
<div class="tip" id="fs16">val unbox : value:obj -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.unbox</div>
<div class="tip" id="fs17">val internal memoizeAsync : f:(&#39;a -&gt; Async&lt;&#39;b&gt;) -&gt; (&#39;a -&gt; Async&lt;&#39;b&gt;)<br /><br />Full name: Memoize.memoizeAsync</div>
<div class="tip" id="fs18">val f : (&#39;a -&gt; Async&lt;&#39;b&gt;)</div>
<div class="tip" id="fs19">val cache : ConcurrentDictionary&lt;&#39;a,System.Threading.Tasks.Task&lt;&#39;b&gt;&gt;</div>
<div class="tip" id="fs20">namespace System.Threading</div>
<div class="tip" id="fs21">namespace System.Threading.Tasks</div>
<div class="tip" id="fs22">Multiple items<br />type Task&lt;&#39;TResult&gt; =<br />&#160;&#160;inherit Task<br />&#160;&#160;new : function:Func&lt;&#39;TResult&gt; -&gt; Task&lt;&#39;TResult&gt; + 7 overloads<br />&#160;&#160;member ContinueWith : continuationAction:Action&lt;Task&lt;&#39;TResult&gt;&gt; -&gt; Task + 9 overloads<br />&#160;&#160;member Result : &#39;TResult with get, set<br />&#160;&#160;static member Factory : TaskFactory&lt;&#39;TResult&gt;<br /><br />Full name: System.Threading.Tasks.Task&lt;_&gt;<br /><br />--------------------<br />type Task =<br />&#160;&#160;new : action:Action -&gt; Task + 7 overloads<br />&#160;&#160;member AsyncState : obj<br />&#160;&#160;member ContinueWith : continuationAction:Action&lt;Task&gt; -&gt; Task + 9 overloads<br />&#160;&#160;member CreationOptions : TaskCreationOptions<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member Exception : AggregateException<br />&#160;&#160;member Id : int<br />&#160;&#160;member IsCanceled : bool<br />&#160;&#160;member IsCompleted : bool<br />&#160;&#160;member IsFaulted : bool<br />&#160;&#160;...<br /><br />Full name: System.Threading.Tasks.Task<br /><br />--------------------<br />System.Threading.Tasks.Task(function: System.Func&lt;&#39;TResult&gt;) : unit<br />System.Threading.Tasks.Task(function: System.Func&lt;&#39;TResult&gt;, cancellationToken: System.Threading.CancellationToken) : unit<br />System.Threading.Tasks.Task(function: System.Func&lt;&#39;TResult&gt;, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit<br />System.Threading.Tasks.Task(function: System.Func&lt;obj,&#39;TResult&gt;, state: obj) : unit<br />System.Threading.Tasks.Task(function: System.Func&lt;&#39;TResult&gt;, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit<br />System.Threading.Tasks.Task(function: System.Func&lt;obj,&#39;TResult&gt;, state: obj, cancellationToken: System.Threading.CancellationToken) : unit<br />System.Threading.Tasks.Task(function: System.Func&lt;obj,&#39;TResult&gt;, state: obj, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit<br />System.Threading.Tasks.Task(function: System.Func&lt;obj,&#39;TResult&gt;, state: obj, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit<br /><br />--------------------<br />System.Threading.Tasks.Task(action: System.Action) : unit<br />System.Threading.Tasks.Task(action: System.Action, cancellationToken: System.Threading.CancellationToken) : unit<br />System.Threading.Tasks.Task(action: System.Action, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit<br />System.Threading.Tasks.Task(action: System.Action&lt;obj&gt;, state: obj) : unit<br />System.Threading.Tasks.Task(action: System.Action, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit<br />System.Threading.Tasks.Task(action: System.Action&lt;obj&gt;, state: obj, cancellationToken: System.Threading.CancellationToken) : unit<br />System.Threading.Tasks.Task(action: System.Action&lt;obj&gt;, state: obj, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit<br />System.Threading.Tasks.Task(action: System.Action&lt;obj&gt;, state: obj, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions) : unit</div>
<div class="tip" id="fs23">ConcurrentDictionary.GetOrAdd(key: &#39;a, value: System.Threading.Tasks.Task&lt;&#39;b&gt;) : System.Threading.Tasks.Task&lt;&#39;b&gt;<br />ConcurrentDictionary.GetOrAdd(key: &#39;a, valueFactory: System.Func&lt;&#39;a,System.Threading.Tasks.Task&lt;&#39;b&gt;&gt;) : System.Threading.Tasks.Task&lt;&#39;b&gt;</div>
<div class="tip" id="fs24">val threadfix : Lazy&lt;System.Threading.Tasks.Task&lt;&#39;b&gt;&gt;</div>
<div class="tip" id="fs25">Multiple items<br />type Async<br />static member AsBeginEnd : computation:(&#39;Arg -&gt; Async&lt;&#39;T&gt;) -&gt; (&#39;Arg * AsyncCallback * obj -&gt; IAsyncResult) * (IAsyncResult -&gt; &#39;T) * (IAsyncResult -&gt; unit)<br />static member AwaitEvent : event:IEvent&lt;&#39;Del,&#39;T&gt; * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt; (requires delegate and &#39;Del :&gt; Delegate)<br />static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member AwaitTask : task:Task -&gt; Async&lt;unit&gt;<br />static member AwaitTask : task:Task&lt;&#39;T&gt; -&gt; Async&lt;&#39;T&gt;<br />static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member CancelDefaultToken : unit -&gt; unit<br />static member Catch : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;Choice&lt;&#39;T,exn&gt;&gt;<br />static member FromBeginEnd : beginAction:(AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg:&#39;Arg1 * beginAction:(&#39;Arg1 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * beginAction:(&#39;Arg1 * &#39;Arg2 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * arg3:&#39;Arg3 * beginAction:(&#39;Arg1 * &#39;Arg2 * &#39;Arg3 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromContinuations : callback:((&#39;T -&gt; unit) * (exn -&gt; unit) * (OperationCanceledException -&gt; unit) -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member Ignore : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;<br />static member OnCancel : interruption:(unit -&gt; unit) -&gt; Async&lt;IDisposable&gt;<br />static member Parallel : computations:seq&lt;Async&lt;&#39;T&gt;&gt; -&gt; Async&lt;&#39;T []&gt;<br />static member RunSynchronously : computation:Async&lt;&#39;T&gt; * ?timeout:int * ?cancellationToken:CancellationToken -&gt; &#39;T<br />static member Sleep : millisecondsDueTime:int -&gt; Async&lt;unit&gt;<br />static member Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&gt; Task&lt;&#39;T&gt;<br />static member StartChild : computation:Async&lt;&#39;T&gt; * ?millisecondsTimeout:int -&gt; Async&lt;Async&lt;&#39;T&gt;&gt;<br />static member StartChildAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions -&gt; Async&lt;Task&lt;&#39;T&gt;&gt;<br />static member StartImmediate : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartWithContinuations : computation:Async&lt;&#39;T&gt; * continuation:(&#39;T -&gt; unit) * exceptionContinuation:(exn -&gt; unit) * cancellationContinuation:(OperationCanceledException -&gt; unit) * ?cancellationToken:CancellationToken -&gt; unit<br />static member SwitchToContext : syncContext:SynchronizationContext -&gt; Async&lt;unit&gt;<br />static member SwitchToNewThread : unit -&gt; Async&lt;unit&gt;<br />static member SwitchToThreadPool : unit -&gt; Async&lt;unit&gt;<br />static member TryCancelled : computation:Async&lt;&#39;T&gt; * compensation:(OperationCanceledException -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member CancellationToken : Async&lt;CancellationToken&gt;<br />static member DefaultCancellationToken : CancellationToken<br /><br />Full name: Microsoft.FSharp.Control.Async<br /><br />--------------------<br />type Async&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Async&lt;_&gt;</div>
<div class="tip" id="fs26">static member Async.StartAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:System.Threading.Tasks.TaskCreationOptions * ?cancellationToken:System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;&#39;T&gt;</div>
<div class="tip" id="fs27">member System.Lazy.Force : unit -&gt; &#39;T</div>
<div class="tip" id="fs28">static member Async.AwaitTask : task:System.Threading.Tasks.Task -&gt; Async&lt;unit&gt;<br />static member Async.AwaitTask : task:System.Threading.Tasks.Task&lt;&#39;T&gt; -&gt; Async&lt;&#39;T&gt;</div>

