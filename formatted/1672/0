<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">FsUnit</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">NUnit</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Framework</span>

[&lt;<span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">Test</span>&gt;]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="f">FsRotate</span>() <span class="o">=</span>

<span class="c">// splitAt available in F# 4 ...</span>
<span class="c">(*</span>
<span class="c">    let slice step ls = </span>
<span class="c">        let input = ls |&gt; List.ofSeq</span>
<span class="c">        match step &lt; 0 with</span>
<span class="c">        | false -&gt; List.splitAt step input |&gt; fun (x,y)-&gt; List.append y x</span>
<span class="c">        | _ -&gt; List.splitAt (List.length input + step) input |&gt; fun (x,y) -&gt; List.append y x</span>
<span class="c">*)</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">rotate</span> <span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="i">step</span> <span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="i">input</span> <span class="o">=</span>
        <span class="k">let</span>  <span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="i">ls</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">input</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="f">ofSeq</span>
        <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 14)" onmouseover="showTip(event, 'fs12', 14)" class="f">fold</span> (<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs13', 15)" onmouseover="showTip(event, 'fs13', 15)" class="i">s</span>, <span onmouseout="hideTip(event, 'fs14', 16)" onmouseover="showTip(event, 'fs14', 16)" class="i">c</span>) <span onmouseout="hideTip(event, 'fs15', 17)" onmouseover="showTip(event, 'fs15', 17)" class="i">e</span> <span class="k">-&gt;</span> <span class="k">if</span> <span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="i">s</span> <span class="o">&lt;&gt;</span> <span class="n">0</span> <span class="k">then</span> (<span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="i">s</span><span class="o">-</span><span class="n">1</span> , <span onmouseout="hideTip(event, 'fs10', 20)" onmouseover="showTip(event, 'fs10', 20)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 21)" onmouseover="showTip(event, 'fs16', 21)" class="f">append</span> <span onmouseout="hideTip(event, 'fs14', 22)" onmouseover="showTip(event, 'fs14', 22)" class="i">c</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 23)" onmouseover="showTip(event, 'fs17', 23)" class="i">Tail</span> [<span onmouseout="hideTip(event, 'fs15', 24)" onmouseover="showTip(event, 'fs15', 24)" class="i">e</span>]) <span class="k">else</span> (<span class="n">0</span>, <span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="i">c</span>)) (<span onmouseout="hideTip(event, 'fs7', 26)" onmouseover="showTip(event, 'fs7', 26)" class="i">step</span>, <span onmouseout="hideTip(event, 'fs9', 27)" onmouseover="showTip(event, 'fs9', 27)" class="i">ls</span>) <span onmouseout="hideTip(event, 'fs9', 28)" onmouseover="showTip(event, 'fs9', 28)" class="i">ls</span>
        <span class="o">|&gt;</span> <span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs18', 29)" onmouseover="showTip(event, 'fs18', 29)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs19', 30)" onmouseover="showTip(event, 'fs19', 30)" class="i">y</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs19', 31)" onmouseover="showTip(event, 'fs19', 31)" class="i">y</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs10', 32)" onmouseover="showTip(event, 'fs10', 32)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 33)" onmouseover="showTip(event, 'fs11', 33)" class="f">ofSeq</span>

    [<span class="n">1</span>;<span class="n">2</span>;<span class="n">3</span>;<span class="n">4</span>] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs6', 34)" onmouseover="showTip(event, 'fs6', 34)" class="f">rotate</span> <span class="n">1</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 35)" onmouseover="showTip(event, 'fs20', 35)" class="f">should</span> <span onmouseout="hideTip(event, 'fs21', 36)" onmouseover="showTip(event, 'fs21', 36)" class="f">equal</span> [<span class="n">2</span>;<span class="n">3</span>;<span class="n">4</span>;<span class="n">1</span>]
    <span class="s">&quot;hello&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs6', 37)" onmouseover="showTip(event, 'fs6', 37)" class="f">rotate</span>  <span class="n">2</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="f">should</span> <span onmouseout="hideTip(event, 'fs21', 39)" onmouseover="showTip(event, 'fs21', 39)" class="f">equal</span> <span class="s">&quot;llohe&quot;</span>

<span class="c">(*</span>
<span class="c">    [1;2;3;4] |&gt; slice 1 |&gt; should equal [2;3;4;1]</span>
<span class="c">    &quot;hello&quot; |&gt; slice 2 |&gt; should equal &quot;llohe&quot;</span>
<span class="c">    &quot;negative ok&quot; |&gt; slice -2 |&gt; should equal &quot;oknegative &quot;</span>
<span class="c">*)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace FsUnit</div>
<div class="tip" id="fs2">namespace NUnit</div>
<div class="tip" id="fs3">namespace NUnit.Framework</div>
<div class="tip" id="fs4">Multiple items<br />type TestAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; TestAttribute<br />&#160;&#160;member Description : string with get, set<br /><br />Full name: NUnit.Framework.TestAttribute<br /><br />--------------------<br />TestAttribute() : unit</div>
<div class="tip" id="fs5">val FsRotate : unit -&gt; unit<br /><br />Full name: Script.FsRotate</div>
<div class="tip" id="fs6">val rotate : (int -&gt; seq&lt;&#39;a&gt; -&gt; &#39;a list)</div>
<div class="tip" id="fs7">val step : int</div>
<div class="tip" id="fs8">val input : seq&lt;&#39;a&gt;</div>
<div class="tip" id="fs9">val ls : &#39;a list</div>
<div class="tip" id="fs10">Multiple items<br />type List =<br />&#160;&#160;new : unit -&gt; List<br />&#160;&#160;static member Map : actual:ICollection -&gt; ListMapper<br /><br />Full name: NUnit.Framework.List<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;<br /><br />--------------------<br />List() : unit</div>
<div class="tip" id="fs11">val ofSeq : source:seq&lt;&#39;T&gt; -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.ofSeq</div>
<div class="tip" id="fs12">val fold : folder:(&#39;State -&gt; &#39;T -&gt; &#39;State) -&gt; state:&#39;State -&gt; list:&#39;T list -&gt; &#39;State<br /><br />Full name: Microsoft.FSharp.Collections.List.fold</div>
<div class="tip" id="fs13">val s : int</div>
<div class="tip" id="fs14">val c : &#39;a list</div>
<div class="tip" id="fs15">val e : &#39;a</div>
<div class="tip" id="fs16">val append : list1:&#39;T list -&gt; list2:&#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.append</div>
<div class="tip" id="fs17">property List.Tail: &#39;a list</div>
<div class="tip" id="fs18">val x : int</div>
<div class="tip" id="fs19">val y : &#39;a list</div>
<div class="tip" id="fs20">val should : f:(&#39;a -&gt; #Constraints.Constraint) -&gt; x:&#39;a -&gt; y:obj -&gt; unit<br /><br />Full name: FsUnit.TopLevelOperators.should</div>
<div class="tip" id="fs21">val equal : x:&#39;a -&gt; EqualsConstraint<br /><br />Full name: FsUnit.TopLevelOperators.equal</div>

