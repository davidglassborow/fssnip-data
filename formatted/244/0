<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
<span class="l">81: </span>
<span class="l">82: </span>
<span class="l">83: </span>
<span class="l">84: </span>
<span class="l">85: </span>
<span class="l">86: </span>
<span class="l">87: </span>
<span class="l">88: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// A method with a “normal” (call-by-value) argument is declared like this </span>
<span class="c">(*</span>
<span class="c">def foo(x: Int) = {</span>
<span class="c">    val a = x</span>
<span class="c">    val b = x</span>
<span class="c">    (a, b)</span>
<span class="c">}</span>
<span class="c">foo({println(&quot;hello&quot;); 2 + 2})</span>

<span class="c">//hello</span>
<span class="c">//res0: (Int, Int) = (4,4)</span>
<span class="c">*)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">foo</span> (<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">x</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">int</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="i">x</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 7)" onmouseover="showTip(event, 'fs2', 7)" class="i">x</span>
    <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="i">a</span>, <span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="i">b</span>
<span onmouseout="hideTip(event, 'fs1', 10)" onmouseover="showTip(event, 'fs1', 10)" class="f">foo</span> (<span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="f">printfn</span> <span class="s">&quot;Hello&quot;</span>; <span class="n">2</span> <span class="o">+</span> <span class="n">2</span>)
<span class="c">//Hello</span>
<span class="c">//val it : int * int = (4, 4)</span>

<span class="c">// A method with a lazy (call-by-name) argument is declared like this </span>
<span class="c">(*</span>
<span class="c">def foo(x: =&gt; Int) = {</span>
<span class="c">    val a = x</span>
<span class="c">    val b = x</span>
<span class="c">    (a, b)</span>
<span class="c">}</span>
<span class="c">foo({println(&quot;hello&quot;); 2 + 2})</span>

<span class="c">//hello</span>
<span class="c">//hello</span>
<span class="c">//res0: (Int, Int) = (4,4)</span>
<span class="c">*)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 12)" onmouseover="showTip(event, 'fs7', 12)" class="f">foo</span> (<span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="f">x</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 15)" onmouseover="showTip(event, 'fs3', 15)" class="t">int</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 16)" onmouseover="showTip(event, 'fs4', 16)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 17)" onmouseover="showTip(event, 'fs8', 17)" class="f">x</span>()
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 18)" onmouseover="showTip(event, 'fs5', 18)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 19)" onmouseover="showTip(event, 'fs8', 19)" class="f">x</span>()
    <span onmouseout="hideTip(event, 'fs4', 20)" onmouseover="showTip(event, 'fs4', 20)" class="i">a</span>, <span onmouseout="hideTip(event, 'fs5', 21)" onmouseover="showTip(event, 'fs5', 21)" class="i">b</span>
<span onmouseout="hideTip(event, 'fs7', 22)" onmouseover="showTip(event, 'fs7', 22)" class="f">foo</span> <span class="o">&lt;|</span> <span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs6', 23)" onmouseover="showTip(event, 'fs6', 23)" class="f">printfn</span> <span class="s">&quot;hello&quot;</span>; <span class="n">2</span> <span class="o">+</span> <span class="n">2</span>
<span class="c">//hello</span>
<span class="c">//hello</span>
<span class="c">//val it : int * int = (4, 4)</span>

<span class="c">// A method that takes a no-argument function (a thunk) is declared like this </span>
<span class="c">(*</span>
<span class="c">def foo(x:() =&gt; Int) = {</span>
<span class="c">    val a = x</span>
<span class="c">    val b = x</span>
<span class="c">    val c = x()</span>
<span class="c">    (a, b, c)</span>
<span class="c">}</span>
<span class="c">foo(() =&gt; {println(&quot;hello&quot;); 2 + 2})</span>

<span class="c">//hello</span>
<span class="c">//res0: (() =&gt; Int, () =&gt; Int, Int) = (&lt;function&gt;,&lt;function&gt;,4)</span>

<span class="c">*)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 24)" onmouseover="showTip(event, 'fs10', 24)" class="f">foo</span> (<span onmouseout="hideTip(event, 'fs8', 25)" onmouseover="showTip(event, 'fs8', 25)" class="f">x</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs9', 26)" onmouseover="showTip(event, 'fs9', 26)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 27)" onmouseover="showTip(event, 'fs3', 27)" class="t">int</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 28)" onmouseover="showTip(event, 'fs11', 28)" class="f">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 29)" onmouseover="showTip(event, 'fs8', 29)" class="f">x</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 30)" onmouseover="showTip(event, 'fs12', 30)" class="f">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 31)" onmouseover="showTip(event, 'fs8', 31)" class="f">x</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 32)" onmouseover="showTip(event, 'fs13', 32)" class="i">c</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 33)" onmouseover="showTip(event, 'fs8', 33)" class="f">x</span>()
    <span onmouseout="hideTip(event, 'fs11', 34)" onmouseover="showTip(event, 'fs11', 34)" class="f">a</span>, <span onmouseout="hideTip(event, 'fs12', 35)" onmouseover="showTip(event, 'fs12', 35)" class="f">b</span>, <span onmouseout="hideTip(event, 'fs13', 36)" onmouseover="showTip(event, 'fs13', 36)" class="i">c</span>
<span onmouseout="hideTip(event, 'fs10', 37)" onmouseover="showTip(event, 'fs10', 37)" class="f">foo</span> <span class="o">&lt;|</span> <span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs6', 38)" onmouseover="showTip(event, 'fs6', 38)" class="f">printfn</span> <span class="s">&quot;hello&quot;</span>; <span class="n">2</span> <span class="o">+</span> <span class="n">2</span>
<span class="c">//hello</span>
<span class="c">//val it : (unit -&gt; int) * (unit -&gt; int) * int =</span>
<span class="c">//  (&lt;fun:it@65-10&gt;, &lt;fun:it@65-10&gt;, 4)</span>

<span class="c">// Lazy values allow you to turn call-by-name lazy arguments into call-by-need lazy arguments. </span>
<span class="c">(*</span>
<span class="c">//def foo(def x: Int) = {</span>
<span class="c">def foo(x: =&gt; Int) = {</span>
<span class="c">    lazy val a = x</span>
<span class="c">    (a, a, a)</span>
<span class="c">}</span>
<span class="c">foo({println(&quot;hello&quot;); 2 + 2})</span>

<span class="c">hello</span>
<span class="c">res0: (Int, Int, Int) = (4,4,4)</span>
<span class="c">*)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 39)" onmouseover="showTip(event, 'fs14', 39)" class="f">foo</span> (<span onmouseout="hideTip(event, 'fs15', 40)" onmouseover="showTip(event, 'fs15', 40)" class="i">x</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs16', 41)" onmouseover="showTip(event, 'fs16', 41)" class="t">Lazy</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs3', 42)" onmouseover="showTip(event, 'fs3', 42)" class="t">int</span><span class="o">&gt;</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 43)" onmouseover="showTip(event, 'fs17', 43)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 44)" onmouseover="showTip(event, 'fs15', 44)" class="i">x</span>
    <span onmouseout="hideTip(event, 'fs17', 45)" onmouseover="showTip(event, 'fs17', 45)" class="i">a</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 46)" onmouseover="showTip(event, 'fs18', 46)" class="i">Value</span>, <span onmouseout="hideTip(event, 'fs17', 47)" onmouseover="showTip(event, 'fs17', 47)" class="i">a</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 48)" onmouseover="showTip(event, 'fs18', 48)" class="i">Value</span>, <span onmouseout="hideTip(event, 'fs17', 49)" onmouseover="showTip(event, 'fs17', 49)" class="i">a</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 50)" onmouseover="showTip(event, 'fs18', 50)" class="i">Value</span>
<span onmouseout="hideTip(event, 'fs14', 51)" onmouseover="showTip(event, 'fs14', 51)" class="f">foo</span> <span class="o">&lt;|</span> <span class="k">lazy</span> (<span onmouseout="hideTip(event, 'fs6', 52)" onmouseover="showTip(event, 'fs6', 52)" class="f">printfn</span> <span class="s">&quot;hello&quot;</span>; <span class="n">2</span> <span class="o">+</span> <span class="n">2</span>)
<span class="c">//hello</span>
<span class="c">//val it : int * int * int = (4, 4, 4)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val foo : x:int -&gt; int * int<br /><br />Full name: Script.foo</div>
<div class="tip" id="fs2">val x : int</div>
<div class="tip" id="fs3">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs4">val a : int</div>
<div class="tip" id="fs5">val b : int</div>
<div class="tip" id="fs6">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs7">val foo : x:(unit -&gt; int) -&gt; int * int<br /><br />Full name: Script.foo</div>
<div class="tip" id="fs8">val x : (unit -&gt; int)</div>
<div class="tip" id="fs9">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs10">val foo : x:(unit -&gt; int) -&gt; (unit -&gt; int) * (unit -&gt; int) * int<br /><br />Full name: Script.foo</div>
<div class="tip" id="fs11">val a : (unit -&gt; int)</div>
<div class="tip" id="fs12">val b : (unit -&gt; int)</div>
<div class="tip" id="fs13">val c : int</div>
<div class="tip" id="fs14">val foo : x:Lazy&lt;int&gt; -&gt; int * int * int<br /><br />Full name: Script.foo</div>
<div class="tip" id="fs15">val x : Lazy&lt;int&gt;</div>
<div class="tip" id="fs16">Multiple items<br />active recognizer Lazy: Lazy&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.( |Lazy| )<br /><br />--------------------<br />type Lazy&lt;&#39;T&gt; = System.Lazy&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Lazy&lt;_&gt;</div>
<div class="tip" id="fs17">val a : Lazy&lt;int&gt;</div>
<div class="tip" id="fs18">property System.Lazy.Value: int</div>

