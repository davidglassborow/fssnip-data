<h2><a name="An-F-friendly-SocketAsyncEventArgs-subclass" class="anchor" href="#An-F-friendly-SocketAsyncEventArgs-subclass">An F#-friendly SocketAsyncEventArgs subclass</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">AsyncSocketEventArgs</span>(<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">callback</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">SocketAsyncEventArgs</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">unit</span>) <span class="k">as</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="v">x</span> <span class="o">=</span>
    <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="t">SocketAsyncEventArgs</span>()
    <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="v">disposed</span> <span class="o">=</span> <span class="k">false</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">subscription</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="v">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">Completed</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="f">Subscribe</span>(<span onmouseout="hideTip(event, 'fs2', 12)" onmouseover="showTip(event, 'fs2', 12)" class="f">callback</span>)
    <span class="k">member</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="f">Dispose</span>(<span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="i">disposing</span>) <span class="o">=</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="f">not</span> <span onmouseout="hideTip(event, 'fs6', 17)" onmouseover="showTip(event, 'fs6', 17)" class="v">disposed</span> <span class="k">then</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="i">disposing</span> <span class="k">then</span>
                <span onmouseout="hideTip(event, 'fs7', 19)" onmouseover="showTip(event, 'fs7', 19)" class="i">subscription</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 20)" onmouseover="showTip(event, 'fs13', 20)" class="f">Dispose</span>()
            <span class="k">base</span><span class="o">.</span><span class="f">Dispose</span>()
            <span onmouseout="hideTip(event, 'fs6', 21)" onmouseover="showTip(event, 'fs6', 21)" class="v">disposed</span> <span class="o">&lt;-</span> <span class="k">true</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 22)" onmouseover="showTip(event, 'fs5', 22)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="f">CallbackSync</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 24)" onmouseover="showTip(event, 'fs2', 24)" class="f">callback</span> <span onmouseout="hideTip(event, 'fs5', 25)" onmouseover="showTip(event, 'fs5', 25)" class="i">x</span>
    <span class="c">/// Call Close when using AsyncSocketEventArgs and not Dispose,</span>
    <span class="c">/// or cast to IDisposable to use the explicit implementation.</span>
    <span class="c">/// This is necessary as the dispose method is sealed on the</span>
    <span class="c">/// SocketAsyncEventArgs</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 26)" onmouseover="showTip(event, 'fs5', 26)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 27)" onmouseover="showTip(event, 'fs15', 27)" class="f">Close</span>() <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs5', 28)" onmouseover="showTip(event, 'fs5', 28)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 29)" onmouseover="showTip(event, 'fs16', 29)" class="f">Dispose</span>(<span class="k">true</span>)
    <span class="k">override</span> <span onmouseout="hideTip(event, 'fs5', 30)" onmouseover="showTip(event, 'fs5', 30)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 31)" onmouseover="showTip(event, 'fs17', 31)" class="f">Finalize</span>() <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs5', 32)" onmouseover="showTip(event, 'fs5', 32)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 33)" onmouseover="showTip(event, 'fs16', 33)" class="f">Dispose</span>(<span class="k">false</span>)
    <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="t">IDisposable</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 35)" onmouseover="showTip(event, 'fs5', 35)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 36)" onmouseover="showTip(event, 'fs19', 36)" class="f">Dispose</span>() <span class="o">=</span>
            <span onmouseout="hideTip(event, 'fs5', 37)" onmouseover="showTip(event, 'fs5', 37)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 38)" onmouseover="showTip(event, 'fs16', 38)" class="f">Dispose</span>(<span class="k">true</span>)
            <span onmouseout="hideTip(event, 'fs20', 39)" onmouseover="showTip(event, 'fs20', 39)" class="t">GC</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 40)" onmouseover="showTip(event, 'fs21', 40)" class="f">SuppressFinalize</span>(<span onmouseout="hideTip(event, 'fs5', 41)" onmouseover="showTip(event, 'fs5', 41)" class="i">x</span>)
</code></pre></td>
</tr>
</table>
<h2><a name="Socket-extensions-using-the-AsyncSocketEventArgs-type" class="anchor" href="#Socket-extensions-using-the-AsyncSocketEventArgs-type">Socket extensions using the AsyncSocketEventArgs type</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Helper method to make Async calls easier.  InvokeAsyncMethod ensures the callback always</span>
<span class="c">/// gets called even if an error occurs or the Async method completes synchronously.</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs22', 42)" onmouseover="showTip(event, 'fs22', 42)" class="f">invokeAsyncMethod</span>(<span onmouseout="hideTip(event, 'fs23', 43)" onmouseover="showTip(event, 'fs23', 43)" class="f">asyncmethod</span>, <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="i">args</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 45)" onmouseover="showTip(event, 'fs1', 45)" class="t">AsyncSocketEventArgs</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 46)" onmouseover="showTip(event, 'fs25', 46)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 47)" onmouseover="showTip(event, 'fs23', 47)" class="f">asyncmethod</span> <span onmouseout="hideTip(event, 'fs24', 48)" onmouseover="showTip(event, 'fs24', 48)" class="i">args</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs25', 49)" onmouseover="showTip(event, 'fs25', 49)" class="i">result</span> <span class="o">&lt;&gt;</span> <span class="k">true</span> <span class="k">then</span>
        <span onmouseout="hideTip(event, 'fs24', 50)" onmouseover="showTip(event, 'fs24', 50)" class="i">args</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 51)" onmouseover="showTip(event, 'fs26', 51)" class="f">CallbackSync</span>()

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs27', 52)" onmouseover="showTip(event, 'fs27', 52)" class="t">Socket</span> <span class="k">with</span> 
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 53)" onmouseover="showTip(event, 'fs28', 53)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 54)" onmouseover="showTip(event, 'fs29', 54)" class="f">AcceptAsync</span>(<span onmouseout="hideTip(event, 'fs24', 55)" onmouseover="showTip(event, 'fs24', 55)" class="i">args</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs22', 56)" onmouseover="showTip(event, 'fs22', 56)" class="f">invokeAsyncMethod</span>(<span onmouseout="hideTip(event, 'fs28', 57)" onmouseover="showTip(event, 'fs28', 57)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 58)" onmouseover="showTip(event, 'fs30', 58)" class="f">AcceptAsync</span>, <span onmouseout="hideTip(event, 'fs24', 59)" onmouseover="showTip(event, 'fs24', 59)" class="i">args</span>) 
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 60)" onmouseover="showTip(event, 'fs28', 60)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 61)" onmouseover="showTip(event, 'fs31', 61)" class="f">ReceiveAsync</span>(<span onmouseout="hideTip(event, 'fs24', 62)" onmouseover="showTip(event, 'fs24', 62)" class="i">args</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs22', 63)" onmouseover="showTip(event, 'fs22', 63)" class="f">invokeAsyncMethod</span>(<span onmouseout="hideTip(event, 'fs28', 64)" onmouseover="showTip(event, 'fs28', 64)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 65)" onmouseover="showTip(event, 'fs32', 65)" class="f">ReceiveAsync</span>, <span onmouseout="hideTip(event, 'fs24', 66)" onmouseover="showTip(event, 'fs24', 66)" class="i">args</span>) 
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 67)" onmouseover="showTip(event, 'fs28', 67)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 68)" onmouseover="showTip(event, 'fs33', 68)" class="f">SendAsync</span>(<span onmouseout="hideTip(event, 'fs24', 69)" onmouseover="showTip(event, 'fs24', 69)" class="i">args</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs22', 70)" onmouseover="showTip(event, 'fs22', 70)" class="f">invokeAsyncMethod</span>(<span onmouseout="hideTip(event, 'fs28', 71)" onmouseover="showTip(event, 'fs28', 71)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 72)" onmouseover="showTip(event, 'fs34', 72)" class="f">SendAsync</span>, <span onmouseout="hideTip(event, 'fs24', 73)" onmouseover="showTip(event, 'fs24', 73)" class="i">args</span>) 
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 74)" onmouseover="showTip(event, 'fs28', 74)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 75)" onmouseover="showTip(event, 'fs35', 75)" class="f">ConnectAsync</span>(<span onmouseout="hideTip(event, 'fs24', 76)" onmouseover="showTip(event, 'fs24', 76)" class="i">args</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs22', 77)" onmouseover="showTip(event, 'fs22', 77)" class="f">invokeAsyncMethod</span>(<span onmouseout="hideTip(event, 'fs28', 78)" onmouseover="showTip(event, 'fs28', 78)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 79)" onmouseover="showTip(event, 'fs36', 79)" class="f">ConnectAsync</span>, <span onmouseout="hideTip(event, 'fs24', 80)" onmouseover="showTip(event, 'fs24', 80)" class="i">args</span>)
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs28', 81)" onmouseover="showTip(event, 'fs28', 81)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 82)" onmouseover="showTip(event, 'fs37', 82)" class="f">DisconnectAsync</span>(<span onmouseout="hideTip(event, 'fs24', 83)" onmouseover="showTip(event, 'fs24', 83)" class="i">args</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs22', 84)" onmouseover="showTip(event, 'fs22', 84)" class="f">invokeAsyncMethod</span>(<span onmouseout="hideTip(event, 'fs28', 85)" onmouseover="showTip(event, 'fs28', 85)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 86)" onmouseover="showTip(event, 'fs38', 86)" class="f">DisconnectAsync</span>, <span onmouseout="hideTip(event, 'fs24', 87)" onmouseover="showTip(event, 'fs24', 87)" class="i">args</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />type AsyncSocketEventArgs =<br />&#160;&#160;inherit SocketAsyncEventArgs<br />&#160;&#160;interface IDisposable<br />&#160;&#160;new : callback:(SocketAsyncEventArgs -&gt; unit) -&gt; AsyncSocketEventArgs<br />&#160;&#160;member CallbackSync : unit -&gt; unit<br />&#160;&#160;member Close : unit -&gt; unit<br />&#160;&#160;member private Dispose : disposing:bool -&gt; unit<br />&#160;&#160;override Finalize : unit -&gt; unit<br /><br />Full name: Script.AsyncSocketEventArgs<br /><em><br /><br />&#160;An F#-friendly SocketAsyncEventArgs subclass.</em><br /><br />--------------------<br />new : callback:(SocketAsyncEventArgs -&gt; unit) -&gt; AsyncSocketEventArgs</div>
<div class="tip" id="fs2">val callback : (SocketAsyncEventArgs -&gt; unit)</div>
<div class="tip" id="fs3">Multiple items<br />type SocketAsyncEventArgs =<br />&#160;&#160;inherit EventArgs<br />&#160;&#160;new : unit -&gt; SocketAsyncEventArgs<br />&#160;&#160;member AcceptSocket : Socket with get, set<br />&#160;&#160;member Buffer : byte[]<br />&#160;&#160;member BufferList : IList&lt;ArraySegment&lt;byte&gt;&gt; with get, set<br />&#160;&#160;member BytesTransferred : int<br />&#160;&#160;member ConnectByNameError : Exception<br />&#160;&#160;member ConnectSocket : Socket<br />&#160;&#160;member Count : int<br />&#160;&#160;member DisconnectReuseSocket : bool with get, set<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;...<br /><br />Full name: System.Net.Sockets.SocketAsyncEventArgs<br /><br />--------------------<br />SocketAsyncEventArgs() : unit</div>
<div class="tip" id="fs4">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs5">val x : AsyncSocketEventArgs</div>
<div class="tip" id="fs6">val mutable disposed : bool</div>
<div class="tip" id="fs7">val subscription : IDisposable</div>
<div class="tip" id="fs8">event SocketAsyncEventArgs.Completed: IEvent&lt;EventHandler&lt;SocketAsyncEventArgs&gt;,SocketAsyncEventArgs&gt;</div>
<div class="tip" id="fs9">member IObservable.Subscribe : callback:(&#39;T -&gt; unit) -&gt; IDisposable<br />IObservable.Subscribe(observer: IObserver&lt;SocketAsyncEventArgs&gt;) : IDisposable</div>
<div class="tip" id="fs10">member private AsyncSocketEventArgs.Dispose : disposing:bool -&gt; unit<br /><br />Full name: Script.AsyncSocketEventArgs.Dispose</div>
<div class="tip" id="fs11">val disposing : bool</div>
<div class="tip" id="fs12">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs13">IDisposable.Dispose() : unit</div>
<div class="tip" id="fs14">member AsyncSocketEventArgs.CallbackSync : unit -&gt; unit<br /><br />Full name: Script.AsyncSocketEventArgs.CallbackSync</div>
<div class="tip" id="fs15">member AsyncSocketEventArgs.Close : unit -&gt; unit<br /><br />Full name: Script.AsyncSocketEventArgs.Close<br /><em><br /><br />&#160;Call Close when using AsyncSocketEventArgs and not Dispose,<br />&#160;or cast to IDisposable to use the explicit implementation.<br />&#160;This is necessary as the dispose method is sealed on the<br />&#160;SocketAsyncEventArgs</em></div>
<div class="tip" id="fs16">SocketAsyncEventArgs.Dispose() : unit<br />member private AsyncSocketEventArgs.Dispose : disposing:bool -&gt; unit</div>
<div class="tip" id="fs17">override AsyncSocketEventArgs.Finalize : unit -&gt; unit<br /><br />Full name: Script.AsyncSocketEventArgs.Finalize</div>
<div class="tip" id="fs18">type IDisposable =<br />&#160;&#160;member Dispose : unit -&gt; unit<br /><br />Full name: System.IDisposable</div>
<div class="tip" id="fs19">override AsyncSocketEventArgs.Dispose : unit -&gt; unit<br /><br />Full name: Script.AsyncSocketEventArgs.Dispose</div>
<div class="tip" id="fs20">type GC =<br />&#160;&#160;static member AddMemoryPressure : bytesAllocated:int64 -&gt; unit<br />&#160;&#160;static member CancelFullGCNotification : unit -&gt; unit<br />&#160;&#160;static member Collect : unit -&gt; unit + 2 overloads<br />&#160;&#160;static member CollectionCount : generation:int -&gt; int<br />&#160;&#160;static member GetGeneration : obj:obj -&gt; int + 1 overload<br />&#160;&#160;static member GetTotalMemory : forceFullCollection:bool -&gt; int64<br />&#160;&#160;static member KeepAlive : obj:obj -&gt; unit<br />&#160;&#160;static member MaxGeneration : int<br />&#160;&#160;static member ReRegisterForFinalize : obj:obj -&gt; unit<br />&#160;&#160;static member RegisterForFullGCNotification : maxGenerationThreshold:int * largeObjectHeapThreshold:int -&gt; unit<br />&#160;&#160;...<br /><br />Full name: System.GC</div>
<div class="tip" id="fs21">GC.SuppressFinalize(obj: obj) : unit</div>
<div class="tip" id="fs22">val invokeAsyncMethod : asyncmethod:(AsyncSocketEventArgs -&gt; bool) * args:AsyncSocketEventArgs -&gt; unit<br /><br />Full name: Script.invokeAsyncMethod<br /><em><br /><br />&#160;Helper method to make Async calls easier.  InvokeAsyncMethod ensures the callback always<br />&#160;gets called even if an error occurs or the Async method completes synchronously.</em></div>
<div class="tip" id="fs23">val asyncmethod : (AsyncSocketEventArgs -&gt; bool)</div>
<div class="tip" id="fs24">val args : AsyncSocketEventArgs</div>
<div class="tip" id="fs25">val result : bool</div>
<div class="tip" id="fs26">member AsyncSocketEventArgs.CallbackSync : unit -&gt; unit</div>
<div class="tip" id="fs27">Multiple items<br />type Socket =<br />&#160;&#160;new : socketInformation:SocketInformation -&gt; Socket + 1 overload<br />&#160;&#160;member Accept : unit -&gt; Socket<br />&#160;&#160;member AcceptAsync : e:SocketAsyncEventArgs -&gt; bool<br />&#160;&#160;member AddressFamily : AddressFamily<br />&#160;&#160;member Available : int<br />&#160;&#160;member BeginAccept : callback:AsyncCallback * state:obj -&gt; IAsyncResult + 2 overloads<br />&#160;&#160;member BeginConnect : remoteEP:EndPoint * callback:AsyncCallback * state:obj -&gt; IAsyncResult + 3 overloads<br />&#160;&#160;member BeginDisconnect : reuseSocket:bool * callback:AsyncCallback * state:obj -&gt; IAsyncResult<br />&#160;&#160;member BeginReceive : buffers:IList&lt;ArraySegment&lt;byte&gt;&gt; * socketFlags:SocketFlags * callback:AsyncCallback * state:obj -&gt; IAsyncResult + 3 overloads<br />&#160;&#160;member BeginReceiveFrom : buffer:byte[] * offset:int * size:int * socketFlags:SocketFlags * remoteEP:EndPoint * callback:AsyncCallback * state:obj -&gt; IAsyncResult<br />&#160;&#160;...<br /><br />Full name: System.Net.Sockets.Socket<br /><br />--------------------<br />Socket(socketInformation: SocketInformation) : unit<br />Socket(addressFamily: AddressFamily, socketType: SocketType, protocolType: ProtocolType) : unit</div>
<div class="tip" id="fs28">val s : Socket</div>
<div class="tip" id="fs29">member Socket.AcceptAsync : args:AsyncSocketEventArgs -&gt; unit<br /><br />Full name: Script.AcceptAsync</div>
<div class="tip" id="fs30">member Socket.AcceptAsync : args:AsyncSocketEventArgs -&gt; unit<br />Socket.AcceptAsync(e: SocketAsyncEventArgs) : bool</div>
<div class="tip" id="fs31">member Socket.ReceiveAsync : args:AsyncSocketEventArgs -&gt; unit<br /><br />Full name: Script.ReceiveAsync</div>
<div class="tip" id="fs32">member Socket.ReceiveAsync : args:AsyncSocketEventArgs -&gt; unit<br />Socket.ReceiveAsync(e: SocketAsyncEventArgs) : bool</div>
<div class="tip" id="fs33">member Socket.SendAsync : args:AsyncSocketEventArgs -&gt; unit<br /><br />Full name: Script.SendAsync</div>
<div class="tip" id="fs34">member Socket.SendAsync : args:AsyncSocketEventArgs -&gt; unit<br />Socket.SendAsync(e: SocketAsyncEventArgs) : bool</div>
<div class="tip" id="fs35">member Socket.ConnectAsync : args:AsyncSocketEventArgs -&gt; unit<br /><br />Full name: Script.ConnectAsync</div>
<div class="tip" id="fs36">member Socket.ConnectAsync : args:AsyncSocketEventArgs -&gt; unit<br />Socket.ConnectAsync(e: SocketAsyncEventArgs) : bool</div>
<div class="tip" id="fs37">member Socket.DisconnectAsync : args:AsyncSocketEventArgs -&gt; unit<br /><br />Full name: Script.DisconnectAsync</div>
<div class="tip" id="fs38">member Socket.DisconnectAsync : args:AsyncSocketEventArgs -&gt; unit<br />Socket.DisconnectAsync(e: SocketAsyncEventArgs) : bool</div>

