<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">E</span> <span class="o">=</span> {<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Node1</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">string</span>; <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">Node2</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="t">string</span>; <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">Weight</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">int</span>} 
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">G</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 9)" onmouseover="showTip(event, 'fs1', 9)" class="t">E</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="t">list</span>

<span class="c">//one of the nodes should be in the set and the other not</span>
<span class="c">//returns the node not in the set</span>
<span class="c">//O(log n)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="f">hasOneNodeOf</span> (<span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">e</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 13)" onmouseover="showTip(event, 'fs1', 13)" class="t">E</span>) (<span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="i">nodeSet</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="t">Set</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs3', 16)" onmouseover="showTip(event, 'fs3', 16)" class="t">string</span><span class="o">&gt;</span>) <span class="o">=</span>
    <span class="k">if</span>   <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="i">nodeSet</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="f">Contains</span> <span onmouseout="hideTip(event, 'fs10', 19)" onmouseover="showTip(event, 'fs10', 19)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 20)" onmouseover="showTip(event, 'fs2', 20)" class="i">Node1</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="f">not</span>( <span onmouseout="hideTip(event, 'fs11', 22)" onmouseover="showTip(event, 'fs11', 22)" class="i">nodeSet</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="f">Contains</span> <span onmouseout="hideTip(event, 'fs10', 24)" onmouseover="showTip(event, 'fs10', 24)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 25)" onmouseover="showTip(event, 'fs4', 25)" class="i">Node2</span>) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 28)" onmouseover="showTip(event, 'fs4', 28)" class="i">Node2</span>
    <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs11', 29)" onmouseover="showTip(event, 'fs11', 29)" class="i">nodeSet</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 30)" onmouseover="showTip(event, 'fs13', 30)" class="f">Contains</span> <span onmouseout="hideTip(event, 'fs10', 31)" onmouseover="showTip(event, 'fs10', 31)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 32)" onmouseover="showTip(event, 'fs4', 32)" class="i">Node2</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs14', 33)" onmouseover="showTip(event, 'fs14', 33)" class="f">not</span>( <span onmouseout="hideTip(event, 'fs11', 34)" onmouseover="showTip(event, 'fs11', 34)" class="i">nodeSet</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 35)" onmouseover="showTip(event, 'fs13', 35)" class="f">Contains</span> <span onmouseout="hideTip(event, 'fs10', 36)" onmouseover="showTip(event, 'fs10', 36)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 37)" onmouseover="showTip(event, 'fs2', 37)" class="i">Node1</span>) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs15', 38)" onmouseover="showTip(event, 'fs15', 38)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs10', 39)" onmouseover="showTip(event, 'fs10', 39)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 40)" onmouseover="showTip(event, 'fs2', 40)" class="i">Node1</span>
    <span class="k">else</span> <span onmouseout="hideTip(event, 'fs16', 41)" onmouseover="showTip(event, 'fs16', 41)" class="p">None</span>

<span class="c">//finds the mininum weight edge from a set of nodes and a list of available edges</span>
<span class="c">//the edges must be sorted in increasing order of weight</span>
<span class="c">//retruns the minium edge, the new node, and the remaining edges (order is preserved)</span>
<span class="c">//O(n log n) worst case - amortized complextity should be much better - O(log n)?</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 42)" onmouseover="showTip(event, 'fs17', 42)" class="f">minEdge</span> <span onmouseout="hideTip(event, 'fs11', 43)" onmouseover="showTip(event, 'fs11', 43)" class="i">nodeSet</span> <span onmouseout="hideTip(event, 'fs18', 44)" onmouseover="showTip(event, 'fs18', 44)" class="i">sortedEdges</span> <span class="o">=</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs19', 45)" onmouseover="showTip(event, 'fs19', 45)" class="f">minEdge&#39;</span> <span onmouseout="hideTip(event, 'fs20', 46)" onmouseover="showTip(event, 'fs20', 46)" class="i">vs</span> <span onmouseout="hideTip(event, 'fs21', 47)" onmouseover="showTip(event, 'fs21', 47)" class="i">esDone</span> <span onmouseout="hideTip(event, 'fs22', 48)" onmouseover="showTip(event, 'fs22', 48)" class="i">esLeft</span> <span class="o">=</span> <span class="c">//recursive inner function that does the work</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs22', 49)" onmouseover="showTip(event, 'fs22', 49)" class="i">esLeft</span> <span class="k">with</span>
        | [] <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs16', 50)" onmouseover="showTip(event, 'fs16', 50)" class="p">None</span>
        | <span onmouseout="hideTip(event, 'fs10', 51)" onmouseover="showTip(event, 'fs10', 51)" class="i">e</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs23', 52)" onmouseover="showTip(event, 'fs23', 52)" class="i">rest</span> <span class="k">-&gt;</span> 
            <span class="k">match</span> <span onmouseout="hideTip(event, 'fs11', 53)" onmouseover="showTip(event, 'fs11', 53)" class="i">nodeSet</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs9', 54)" onmouseover="showTip(event, 'fs9', 54)" class="f">hasOneNodeOf</span> <span onmouseout="hideTip(event, 'fs10', 55)" onmouseover="showTip(event, 'fs10', 55)" class="i">e</span> <span class="k">with</span>
            | <span onmouseout="hideTip(event, 'fs15', 56)" onmouseover="showTip(event, 'fs15', 56)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs24', 57)" onmouseover="showTip(event, 'fs24', 57)" class="i">n</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 58)" onmouseover="showTip(event, 'fs15', 58)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs10', 59)" onmouseover="showTip(event, 'fs10', 59)" class="i">e</span>, <span onmouseout="hideTip(event, 'fs24', 60)" onmouseover="showTip(event, 'fs24', 60)" class="i">n</span>, (<span onmouseout="hideTip(event, 'fs21', 61)" onmouseover="showTip(event, 'fs21', 61)" class="i">esDone</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs25', 62)" onmouseover="showTip(event, 'fs25', 62)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 63)" onmouseover="showTip(event, 'fs26', 63)" class="f">rev</span>) <span class="o">@</span> <span onmouseout="hideTip(event, 'fs23', 64)" onmouseover="showTip(event, 'fs23', 64)" class="i">rest</span>)
            | <span onmouseout="hideTip(event, 'fs16', 65)" onmouseover="showTip(event, 'fs16', 65)" class="p">None</span>   <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs19', 66)" onmouseover="showTip(event, 'fs19', 66)" class="f">minEdge&#39;</span> <span onmouseout="hideTip(event, 'fs20', 67)" onmouseover="showTip(event, 'fs20', 67)" class="i">vs</span> (<span onmouseout="hideTip(event, 'fs10', 68)" onmouseover="showTip(event, 'fs10', 68)" class="i">e</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs21', 69)" onmouseover="showTip(event, 'fs21', 69)" class="i">esDone</span>) <span onmouseout="hideTip(event, 'fs23', 70)" onmouseover="showTip(event, 'fs23', 70)" class="i">rest</span>
    <span onmouseout="hideTip(event, 'fs19', 71)" onmouseover="showTip(event, 'fs19', 71)" class="f">minEdge&#39;</span> <span onmouseout="hideTip(event, 'fs11', 72)" onmouseover="showTip(event, 'fs11', 72)" class="i">nodeSet</span> [] <span onmouseout="hideTip(event, 'fs18', 73)" onmouseover="showTip(event, 'fs18', 73)" class="i">sortedEdges</span>

<span class="c">//find the minimum spanning tree of a non-empty, connected graph</span>
<span class="c">//based on Kruskal&#39;s algorithm</span>
<span class="c">//O(E log E)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 74)" onmouseover="showTip(event, 'fs27', 74)" class="f">mst</span> (<span onmouseout="hideTip(event, 'fs28', 75)" onmouseover="showTip(event, 'fs28', 75)" class="i">g</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs7', 76)" onmouseover="showTip(event, 'fs7', 76)" class="t">G</span>) <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 77)" onmouseover="showTip(event, 'fs18', 77)" class="i">sortedEdges</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 78)" onmouseover="showTip(event, 'fs28', 78)" class="i">g</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs25', 79)" onmouseover="showTip(event, 'fs25', 79)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 80)" onmouseover="showTip(event, 'fs29', 80)" class="f">sortBy</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs10', 81)" onmouseover="showTip(event, 'fs10', 81)" class="i">e</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 82)" onmouseover="showTip(event, 'fs10', 82)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 83)" onmouseover="showTip(event, 'fs5', 83)" class="i">Weight</span>)  <span class="c">//list of available edges  O(n log n)</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 84)" onmouseover="showTip(event, 'fs11', 84)" class="i">nodeSet</span>     <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 85)" onmouseover="showTip(event, 'fs30', 85)" class="f">set</span> [<span onmouseout="hideTip(event, 'fs18', 86)" onmouseover="showTip(event, 'fs18', 86)" class="i">sortedEdges</span><span class="o">.</span>[<span class="n">0</span>]<span class="o">.</span><span class="i">Node1</span>]           <span class="c">//starting node set</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 87)" onmouseover="showTip(event, 'fs31', 87)" class="i">numNodes</span>    <span class="o">=</span>  <span class="c">//O(n log n)</span>
        <span onmouseout="hideTip(event, 'fs28', 88)" onmouseover="showTip(event, 'fs28', 88)" class="i">g</span> 
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs32', 89)" onmouseover="showTip(event, 'fs32', 89)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 90)" onmouseover="showTip(event, 'fs33', 90)" class="f">collect</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs10', 91)" onmouseover="showTip(event, 'fs10', 91)" class="i">e</span> <span class="k">-&gt;</span> [<span onmouseout="hideTip(event, 'fs10', 92)" onmouseover="showTip(event, 'fs10', 92)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 93)" onmouseover="showTip(event, 'fs2', 93)" class="i">Node1</span>; <span onmouseout="hideTip(event, 'fs10', 94)" onmouseover="showTip(event, 'fs10', 94)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 95)" onmouseover="showTip(event, 'fs4', 95)" class="i">Node2</span>]) 
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs32', 96)" onmouseover="showTip(event, 'fs32', 96)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 97)" onmouseover="showTip(event, 'fs34', 97)" class="f">distinct</span> 
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs32', 98)" onmouseover="showTip(event, 'fs32', 98)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 99)" onmouseover="showTip(event, 'fs35', 99)" class="f">length</span>

    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs36', 100)" onmouseover="showTip(event, 'fs36', 100)" class="f">mst&#39;</span> <span onmouseout="hideTip(event, 'fs11', 101)" onmouseover="showTip(event, 'fs11', 101)" class="i">nodeSet</span> <span onmouseout="hideTip(event, 'fs37', 102)" onmouseover="showTip(event, 'fs37', 102)" class="i">nodeCount</span> <span onmouseout="hideTip(event, 'fs38', 103)" onmouseover="showTip(event, 'fs38', 103)" class="i">minEdges</span> <span onmouseout="hideTip(event, 'fs39', 104)" onmouseover="showTip(event, 'fs39', 104)" class="i">availableEdges</span> <span class="o">=</span>  <span class="c">//recursive inner function</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs37', 105)" onmouseover="showTip(event, 'fs37', 105)" class="i">nodeCount</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs31', 106)" onmouseover="showTip(event, 'fs31', 106)" class="i">numNodes</span> <span class="k">then</span>
            <span onmouseout="hideTip(event, 'fs38', 107)" onmouseover="showTip(event, 'fs38', 107)" class="i">minEdges</span>
        <span class="k">else</span>
            <span class="k">match</span> <span onmouseout="hideTip(event, 'fs17', 108)" onmouseover="showTip(event, 'fs17', 108)" class="f">minEdge</span> <span onmouseout="hideTip(event, 'fs11', 109)" onmouseover="showTip(event, 'fs11', 109)" class="i">nodeSet</span> <span onmouseout="hideTip(event, 'fs39', 110)" onmouseover="showTip(event, 'fs39', 110)" class="i">availableEdges</span>  <span class="k">with</span> <span class="c">//O(n log n) worst case, O(log n) amortized</span>
            | <span onmouseout="hideTip(event, 'fs15', 111)" onmouseover="showTip(event, 'fs15', 111)" class="p">Some</span> (<span onmouseout="hideTip(event, 'fs10', 112)" onmouseover="showTip(event, 'fs10', 112)" class="i">e</span>,<span onmouseout="hideTip(event, 'fs24', 113)" onmouseover="showTip(event, 'fs24', 113)" class="i">n</span>,<span onmouseout="hideTip(event, 'fs23', 114)" onmouseover="showTip(event, 'fs23', 114)" class="i">rest</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs36', 115)" onmouseover="showTip(event, 'fs36', 115)" class="f">mst&#39;</span> (<span onmouseout="hideTip(event, 'fs11', 116)" onmouseover="showTip(event, 'fs11', 116)" class="i">nodeSet</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 117)" onmouseover="showTip(event, 'fs40', 117)" class="f">Add</span> <span onmouseout="hideTip(event, 'fs24', 118)" onmouseover="showTip(event, 'fs24', 118)" class="i">n</span>) (<span onmouseout="hideTip(event, 'fs37', 119)" onmouseover="showTip(event, 'fs37', 119)" class="i">nodeCount</span> <span class="o">+</span> <span class="n">1</span>) (<span onmouseout="hideTip(event, 'fs10', 120)" onmouseover="showTip(event, 'fs10', 120)" class="i">e</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs38', 121)" onmouseover="showTip(event, 'fs38', 121)" class="i">minEdges</span>) <span onmouseout="hideTip(event, 'fs23', 122)" onmouseover="showTip(event, 'fs23', 122)" class="i">rest</span>
            | <span onmouseout="hideTip(event, 'fs16', 123)" onmouseover="showTip(event, 'fs16', 123)" class="p">None</span>   <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs41', 124)" onmouseover="showTip(event, 'fs41', 124)" class="f">failwith</span> <span class="s">&quot;not a connected graph&quot;</span>

    <span onmouseout="hideTip(event, 'fs36', 125)" onmouseover="showTip(event, 'fs36', 125)" class="f">mst&#39;</span> <span onmouseout="hideTip(event, 'fs11', 126)" onmouseover="showTip(event, 'fs11', 126)" class="i">nodeSet</span> <span class="n">1</span> [] <span onmouseout="hideTip(event, 'fs18', 127)" onmouseover="showTip(event, 'fs18', 127)" class="i">sortedEdges</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 128)" onmouseover="showTip(event, 'fs42', 128)" class="i">g</span> <span class="o">=</span>
    [
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;a&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;b&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">4</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;a&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;c&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">2</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;a&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;e&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">3</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;b&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;d&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">5</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;c&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;d&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">1</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;c&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;e&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">6</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;c&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;f&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">3</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;d&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;f&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">6</span>}
        {<span class="i">Node1</span><span class="o">=</span><span class="s">&quot;e&quot;</span>; <span class="i">Node2</span><span class="o">=</span><span class="s">&quot;f&quot;</span>; <span class="i">Weight</span><span class="o">=</span><span class="n">2</span>}
    ]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 129)" onmouseover="showTip(event, 'fs43', 129)" class="i">minSpanTree</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 130)" onmouseover="showTip(event, 'fs27', 130)" class="f">mst</span> <span onmouseout="hideTip(event, 'fs42', 131)" onmouseover="showTip(event, 'fs42', 131)" class="i">g</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">type E =<br />&#160;&#160;{Node1: string;<br />&#160;&#160;&#160;Node2: string;<br />&#160;&#160;&#160;Weight: int;}<br /><br />Full name: Script.E</div>
<div class="tip" id="fs2">E.Node1: string</div>
<div class="tip" id="fs3">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs4">E.Node2: string</div>
<div class="tip" id="fs5">E.Weight: int</div>
<div class="tip" id="fs6">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs7">type G = E list<br /><br />Full name: Script.G</div>
<div class="tip" id="fs8">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs9">val hasOneNodeOf : e:E -&gt; nodeSet:Set&lt;string&gt; -&gt; string option<br /><br />Full name: Script.hasOneNodeOf</div>
<div class="tip" id="fs10">val e : E</div>
<div class="tip" id="fs11">val nodeSet : Set&lt;string&gt;</div>
<div class="tip" id="fs12">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;member IsProperSupersetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Set&lt;_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs13">member Set.Contains : value:&#39;T -&gt; bool</div>
<div class="tip" id="fs14">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs15">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs16">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs17">val minEdge : nodeSet:Set&lt;string&gt; -&gt; sortedEdges:E list -&gt; (E * string * E list) option<br /><br />Full name: Script.minEdge</div>
<div class="tip" id="fs18">val sortedEdges : E list</div>
<div class="tip" id="fs19">val minEdge&#39; : (&#39;a -&gt; E list -&gt; E list -&gt; (E * string * E list) option)</div>
<div class="tip" id="fs20">val vs : &#39;a</div>
<div class="tip" id="fs21">val esDone : E list</div>
<div class="tip" id="fs22">val esLeft : E list</div>
<div class="tip" id="fs23">val rest : E list</div>
<div class="tip" id="fs24">val n : string</div>
<div class="tip" id="fs25">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs26">val rev : list:&#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.rev</div>
<div class="tip" id="fs27">val mst : g:G -&gt; E list<br /><br />Full name: Script.mst</div>
<div class="tip" id="fs28">val g : G</div>
<div class="tip" id="fs29">val sortBy : projection:(&#39;T -&gt; &#39;Key) -&gt; list:&#39;T list -&gt; &#39;T list (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.List.sortBy</div>
<div class="tip" id="fs30">val set : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set</div>
<div class="tip" id="fs31">val numNodes : int</div>
<div class="tip" id="fs32">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs33">val collect : mapping:(&#39;T -&gt; #seq&lt;&#39;U&gt;) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.collect</div>
<div class="tip" id="fs34">val distinct : source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt; (requires equality)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.distinct</div>
<div class="tip" id="fs35">val length : source:seq&lt;&#39;T&gt; -&gt; int<br /><br />Full name: Microsoft.FSharp.Collections.Seq.length</div>
<div class="tip" id="fs36">val mst&#39; : (Set&lt;string&gt; -&gt; int -&gt; E list -&gt; E list -&gt; E list)</div>
<div class="tip" id="fs37">val nodeCount : int</div>
<div class="tip" id="fs38">val minEdges : E list</div>
<div class="tip" id="fs39">val availableEdges : E list</div>
<div class="tip" id="fs40">member Set.Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs41">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs42">val g : E list<br /><br />Full name: Script.g</div>
<div class="tip" id="fs43">val minSpanTree : E list<br /><br />Full name: Script.minSpanTree</div>

