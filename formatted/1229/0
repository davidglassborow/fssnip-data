<h2><a name="Background" class="anchor" href="#Background">Background</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>

<span class="c">// Let&#39;s say we have an interface representing vectors</span>
<span class="c">// (in reality this would have quite a few members)</span>
<span class="k">type</span> <span class="i">IVector</span> <span class="o">=</span>
  <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Data</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">seq</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">float</span><span class="o">&gt;</span>
  <span class="k">abstract</span> <span class="i">GetValue</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">int</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="i">float</span>

<span class="c">// Now, we have a concrete vector implementation using an array</span>
<span class="k">type</span> <span class="i">ArrayVector</span>(<span class="i">data</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">float</span>[]) <span class="o">=</span> 
  <span class="k">interface</span> <span class="i">IVector</span> <span class="k">with</span>
    <span class="k">member</span> <span class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 8)" onmouseover="showTip(event, 'fs2', 8)" class="i">Data</span> <span class="o">=</span> <span class="i">data</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="i">ofArray</span>
    <span class="k">member</span> <span class="i">x</span><span class="o">.</span><span class="i">GetValue</span>(<span class="i">i</span>) <span class="o">=</span> <span class="i">data</span><span class="o">.</span>[<span class="i">i</span>]
</code></pre></td>
</tr>
</table>
<h2><a name="Currently" class="anchor" href="#Currently">Currently</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// And we want to create a &quot;lazy&quot; vector that loads the data</span>
<span class="c">// from database. It has range of values and other operations</span>
<span class="c">// can check for &#39;DatabaseVector&#39; and instead of actually working</span>
<span class="c">// with in-memory data, they can just adjust min/max date...</span>
<span class="c">//</span>
<span class="c">// When we actually access the data of the vector, this needs</span>
<span class="c">// to load the data from the database and redirect all operations</span>
<span class="c">// to an actual in-memory vector</span>
<span class="k">type</span> <span class="i">DatabaseVector</span>(<span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">min</span><span class="o">:</span><span class="i">DateTime</span>, <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="i">max</span><span class="o">:</span><span class="i">DateTime</span>) <span class="o">=</span> 
  <span class="k">let</span> <span class="i">vector</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="i">Lazy</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="i">Create</span>(<span class="k">fun</span> () <span class="k">-&gt;</span>
    <span class="k">let</span> <span class="i">count</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="i">int</span> (<span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="i">max</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs8', 17)" onmouseover="showTip(event, 'fs8', 17)" class="i">min</span>)<span class="o">.</span><span class="i">TotalDays</span> 
    <span class="k">let</span> <span class="i">data</span> <span class="o">=</span> [| <span class="k">for</span> <span class="i">i</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="i">count</span> <span class="o">-</span> <span class="n">1</span> <span class="k">-&gt;</span> <span class="n">3.0</span> |]
    <span class="i">ArrayVector</span>(<span class="i">data</span>) <span class="o">:&gt;</span> <span class="i">IVector</span>)

  <span class="c">// Now we have to implement the interface by writing</span>
  <span class="c">// all the members and just making calls to &#39;vector&#39; :-((</span>
  <span class="k">interface</span> <span class="i">IVector</span> <span class="k">with</span>
    <span class="k">member</span> <span class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 18)" onmouseover="showTip(event, 'fs2', 18)" class="i">Data</span> <span class="o">=</span> <span class="i">vector</span><span class="o">.</span><span class="i">Value</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 19)" onmouseover="showTip(event, 'fs2', 19)" class="i">Data</span>
    <span class="k">member</span> <span class="i">x</span><span class="o">.</span><span class="i">GetValue</span>(<span class="i">i</span>) <span class="o">=</span> <span class="i">vector</span><span class="o">.</span><span class="i">Value</span><span class="o">.</span><span class="i">GetValue</span>(<span class="i">i</span>)
</code></pre></td>
</tr>
</table>
<h2><a name="Suggestion" class="anchor" href="#Suggestion">Suggestion</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">type</span> <span class="i">DatabaseVector</span>(<span onmouseout="hideTip(event, 'fs8', 20)" onmouseover="showTip(event, 'fs8', 20)" class="i">min</span><span class="o">:</span><span class="i">DateTime</span>, <span onmouseout="hideTip(event, 'fs9', 21)" onmouseover="showTip(event, 'fs9', 21)" class="i">max</span><span class="o">:</span><span class="i">DateTime</span>) <span class="o">=</span> 
  <span class="k">let</span> <span class="i">vector</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 22)" onmouseover="showTip(event, 'fs10', 22)" class="i">Lazy</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 23)" onmouseover="showTip(event, 'fs11', 23)" class="i">Create</span>(<span class="k">fun</span> () <span class="k">-&gt;</span>
    <span class="k">let</span> <span class="i">count</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 24)" onmouseover="showTip(event, 'fs5', 24)" class="i">int</span> (<span onmouseout="hideTip(event, 'fs9', 25)" onmouseover="showTip(event, 'fs9', 25)" class="i">max</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs8', 26)" onmouseover="showTip(event, 'fs8', 26)" class="i">min</span>)<span class="o">.</span><span class="i">TotalDays</span> 
    <span class="k">let</span> <span class="i">data</span> <span class="o">=</span> [| <span class="k">for</span> <span class="i">i</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="i">count</span> <span class="o">-</span> <span class="n">1</span> <span class="k">-&gt;</span> <span class="n">3.0</span> |]
    <span class="i">ArrayVector</span>(<span class="i">data</span>) <span class="o">:&gt;</span> <span class="i">IVector</span>)

  <span class="c">// I would like to be able to say &quot;implement this interface&quot;</span>
  <span class="c">// by delegating all the operations to the object returned by </span>
  <span class="c">// an expression &lt;expr&gt;. In this example, the expression is just</span>
  <span class="c">// &#39;vector.Value&#39; (but you can imagine other functions to implement</span>
  <span class="c">// common interfaces like IDisposable, etc...)</span>
  <span class="k">interface</span> <span class="i">IVector</span> <span class="o">=</span> <span class="i">vector</span><span class="o">.</span><span class="i">Value</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace Microsoft.FSharp.Data</div>
<div class="tip" id="fs3">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = System.Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs4">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.float<br /><br />--------------------<br />type float = System.Double<br /><br />Full name: Microsoft.FSharp.Core.float<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float<br /><br />Full name: Microsoft.FSharp.Core.float&lt;_&gt;</div>
<div class="tip" id="fs5">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs6">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs7">val ofArray : source:&#39;T [] -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.ofArray</div>
<div class="tip" id="fs8">val min : e1:&#39;T -&gt; e2:&#39;T -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.Operators.min</div>
<div class="tip" id="fs9">val max : e1:&#39;T -&gt; e2:&#39;T -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Core.Operators.max</div>
<div class="tip" id="fs10">Multiple items<br />active recognizer Lazy: Lazy&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.( |Lazy| )<br /><br />--------------------<br />type Lazy&lt;&#39;T&gt; = System.Lazy&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Lazy&lt;_&gt;</div>
<div class="tip" id="fs11">static member System.Lazy.Create : creator:(unit -&gt; &#39;T) -&gt; System.Lazy&lt;&#39;T&gt;</div>

