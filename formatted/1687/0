<h2><a name="DotLiquid-template-integration-for-Suave" class="anchor" href="#DotLiquid-template-integration-for-Suave">DotLiquid template integration for Suave</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">parseTemplate</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">template</span> <span class="o">=</span>
  <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">registerTypeTree</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">ty</span> <span class="o">=</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">IsRecord</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">ty</span> <span class="k">then</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">fields</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="f">GetRecordFields</span>(<span onmouseout="hideTip(event, 'fs4', 11)" onmouseover="showTip(event, 'fs4', 11)" class="i">ty</span>)
      <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="t">Template</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="f">RegisterSafeType</span>(<span onmouseout="hideTip(event, 'fs4', 14)" onmouseover="showTip(event, 'fs4', 14)" class="i">ty</span>, [| <span class="k">for</span> <span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="i">f</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs7', 16)" onmouseover="showTip(event, 'fs7', 16)" class="i">fields</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="i">f</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 18)" onmouseover="showTip(event, 'fs12', 18)" class="i">Name</span> |])
      <span class="k">for</span> <span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="i">f</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs7', 20)" onmouseover="showTip(event, 'fs7', 20)" class="i">fields</span> <span class="k">do</span> <span onmouseout="hideTip(event, 'fs3', 21)" onmouseover="showTip(event, 'fs3', 21)" class="f">registerTypeTree</span> <span onmouseout="hideTip(event, 'fs11', 22)" onmouseover="showTip(event, 'fs11', 22)" class="i">f</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="i">PropertyType</span>
    <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs4', 24)" onmouseover="showTip(event, 'fs4', 24)" class="i">ty</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="i">IsGenericType</span> <span class="o">&amp;&amp;</span>
        ( <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="i">t</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 27)" onmouseover="showTip(event, 'fs4', 27)" class="i">ty</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 28)" onmouseover="showTip(event, 'fs16', 28)" class="f">GetGenericTypeDefinition</span>()
          <span class="k">in</span> <span onmouseout="hideTip(event, 'fs15', 29)" onmouseover="showTip(event, 'fs15', 29)" class="i">t</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 30)" onmouseover="showTip(event, 'fs17', 30)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs18', 31)" onmouseover="showTip(event, 'fs18', 31)" class="t">seq</span><span class="o">&lt;</span>_<span class="o">&gt;</span><span class="o">&gt;</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs15', 32)" onmouseover="showTip(event, 'fs15', 32)" class="i">t</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs19', 34)" onmouseover="showTip(event, 'fs19', 34)" class="t">list</span><span class="o">&lt;</span>_<span class="o">&gt;</span><span class="o">&gt;</span> ) <span class="k">then</span>
      () <span class="c">//registerTypeTree (ty.GetGenericArguments().[0])</span>
      <span onmouseout="hideTip(event, 'fs3', 35)" onmouseover="showTip(event, 'fs3', 35)" class="f">registerTypeTree</span> (<span onmouseout="hideTip(event, 'fs4', 36)" onmouseover="showTip(event, 'fs4', 36)" class="i">ty</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 37)" onmouseover="showTip(event, 'fs20', 37)" class="f">GetGenericArguments</span>()<span class="o">.</span>[<span class="n">0</span>])
    <span class="k">else</span> () <span class="c">(* printfn &quot;%s&quot; ty.FullName *)</span>

  <span onmouseout="hideTip(event, 'fs3', 38)" onmouseover="showTip(event, 'fs3', 38)" class="f">registerTypeTree</span> <span onmouseout="hideTip(event, 'fs21', 39)" onmouseover="showTip(event, 'fs21', 39)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 40)" onmouseover="showTip(event, 'fs22', 40)" class="i">t</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 41)" onmouseover="showTip(event, 'fs9', 41)" class="t">Template</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 42)" onmouseover="showTip(event, 'fs23', 42)" class="f">Parse</span>(<span onmouseout="hideTip(event, 'fs2', 43)" onmouseover="showTip(event, 'fs2', 43)" class="i">template</span>)
  <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="i">k</span> (<span onmouseout="hideTip(event, 'fs25', 45)" onmouseover="showTip(event, 'fs25', 45)" class="i">v</span><span class="o">:</span><span class="o">&#39;</span><span class="i">T</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs22', 46)" onmouseover="showTip(event, 'fs22', 46)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 47)" onmouseover="showTip(event, 'fs26', 47)" class="f">Render</span>(<span onmouseout="hideTip(event, 'fs27', 48)" onmouseover="showTip(event, 'fs27', 48)" class="t">Hash</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 49)" onmouseover="showTip(event, 'fs28', 49)" class="f">FromDictionary</span>(<span onmouseout="hideTip(event, 'fs29', 50)" onmouseover="showTip(event, 'fs29', 50)" class="f">dict</span> [<span onmouseout="hideTip(event, 'fs24', 51)" onmouseover="showTip(event, 'fs24', 51)" class="i">k</span>, <span onmouseout="hideTip(event, 'fs30', 52)" onmouseover="showTip(event, 'fs30', 52)" class="f">box</span> <span onmouseout="hideTip(event, 'fs25', 53)" onmouseover="showTip(event, 'fs25', 53)" class="i">v</span>]))
</code></pre></td>
</tr>
</table>
<h2><a name="Simple-demo" class="anchor" href="#Simple-demo">Simple demo</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">type</span> <span onmouseout="hideTip(event, 'fs31', 54)" onmouseover="showTip(event, 'fs31', 54)" class="t">Task</span> <span class="o">=</span>
  { <span onmouseout="hideTip(event, 'fs32', 55)" onmouseover="showTip(event, 'fs32', 55)" class="i">What</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs33', 56)" onmouseover="showTip(event, 'fs33', 56)" class="t">string</span> }
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs34', 57)" onmouseover="showTip(event, 'fs34', 57)" class="t">Person</span> <span class="o">=</span>
  { <span onmouseout="hideTip(event, 'fs35', 58)" onmouseover="showTip(event, 'fs35', 58)" class="i">Name</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs33', 59)" onmouseover="showTip(event, 'fs33', 59)" class="t">string</span>
    <span onmouseout="hideTip(event, 'fs36', 60)" onmouseover="showTip(event, 'fs36', 60)" class="i">Tasks</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs18', 61)" onmouseover="showTip(event, 'fs18', 61)" class="t">seq</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs31', 62)" onmouseover="showTip(event, 'fs31', 62)" class="t">Task</span><span class="o">&gt;</span> }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 63)" onmouseover="showTip(event, 'fs37', 63)" class="f">t</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 64)" onmouseover="showTip(event, 'fs1', 64)" class="f">parseTemplate</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs34', 65)" onmouseover="showTip(event, 'fs34', 65)" class="t">Person</span><span class="o">&gt;</span> <span class="s">&quot;&quot;&quot;&lt;p&gt;{{ user.Name }} has to do:&lt;/p&gt;</span>
<span class="s">  &lt;ul&gt;</span>
<span class="s">    {% for item in user.Tasks -%}</span>
<span class="s">      &lt;li&gt;{{ item.What }}&lt;/li&gt;</span>
<span class="s">    {% endfor -%}</span>
<span class="s">  &lt;/ul&gt;</span>
<span class="s">&quot;&quot;&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 66)" onmouseover="showTip(event, 'fs38', 66)" class="i">app</span> <span class="o">=</span> <span class="i">OK</span> (<span onmouseout="hideTip(event, 'fs37', 67)" onmouseover="showTip(event, 'fs37', 67)" class="i">t</span> <span class="s">&quot;user&quot;</span> {<span class="i">Name</span><span class="o">=</span><span class="s">&quot;Tomas&quot;</span>; <span class="i">Tasks</span> <span class="o">=</span> [ {<span class="i">What</span><span class="o">=</span><span class="s">&quot;sleep&quot;</span>}; {<span class="i">What</span><span class="o">=</span><span class="s">&quot;eat&quot;</span>} ]})
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val parseTemplate : template:string -&gt; (string -&gt; &#39;T -&gt; string)<br /><br />Full name: Script.parseTemplate</div>
<div class="tip" id="fs2">val template : string</div>
<div class="tip" id="fs3">val registerTypeTree : (Type -&gt; unit)</div>
<div class="tip" id="fs4">val ty : Type</div>
<div class="tip" id="fs5">type FSharpType =<br />&#160;&#160;static member GetExceptionFields : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetFunctionElements : functionType:Type -&gt; Type * Type<br />&#160;&#160;static member GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetTupleElements : tupleType:Type -&gt; Type []<br />&#160;&#160;static member GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []<br />&#160;&#160;static member IsExceptionRepresentation : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsFunction : typ:Type -&gt; bool<br />&#160;&#160;static member IsModule : typ:Type -&gt; bool<br />&#160;&#160;static member IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsTuple : typ:Type -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpType</div>
<div class="tip" id="fs6">static member FSharpType.IsRecord : typ:Type * ?allowAccessToPrivateRepresentation:bool -&gt; bool<br />static member FSharpType.IsRecord : typ:Type * ?bindingFlags:Reflection.BindingFlags -&gt; bool</div>
<div class="tip" id="fs7">val fields : Reflection.PropertyInfo []</div>
<div class="tip" id="fs8">static member FSharpType.GetRecordFields : recordType:Type * ?allowAccessToPrivateRepresentation:bool -&gt; Reflection.PropertyInfo []<br />static member FSharpType.GetRecordFields : recordType:Type * ?bindingFlags:Reflection.BindingFlags -&gt; Reflection.PropertyInfo []</div>
<div class="tip" id="fs9">type Template =<br />&#160;&#160;member Assigns : Hash<br />&#160;&#160;member Errors : List&lt;Exception&gt;<br />&#160;&#160;member InstanceAssigns : Hash<br />&#160;&#160;member Registers : Hash<br />&#160;&#160;member Render : unit -&gt; string + 4 overloads<br />&#160;&#160;member Root : Document with get, set<br />&#160;&#160;static val NamingConvention : INamingConvention<br />&#160;&#160;static member FileSystem : IFileSystem with get, set<br />&#160;&#160;static member GetSafeTypeTransformer : type:Type -&gt; Func&lt;obj, obj&gt;<br />&#160;&#160;static member GetTagType : name:string -&gt; Type<br />&#160;&#160;...<br /><br />Full name: DotLiquid.Template</div>
<div class="tip" id="fs10">Template.RegisterSafeType(type: Type, func: Func&lt;obj,obj&gt;) : unit<br />Template.RegisterSafeType(type: Type, allowedMembers: string []) : unit<br />Template.RegisterSafeType(type: Type, allowedMembers: string [], func: Func&lt;obj,obj&gt;) : unit</div>
<div class="tip" id="fs11">val f : Reflection.PropertyInfo</div>
<div class="tip" id="fs12">property Reflection.MemberInfo.Name: string</div>
<div class="tip" id="fs13">property Reflection.PropertyInfo.PropertyType: Type</div>
<div class="tip" id="fs14">property Type.IsGenericType: bool</div>
<div class="tip" id="fs15">val t : Type</div>
<div class="tip" id="fs16">Type.GetGenericTypeDefinition() : Type</div>
<div class="tip" id="fs17">val typedefof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typedefof</div>
<div class="tip" id="fs18">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs19">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs20">Type.GetGenericArguments() : Type []</div>
<div class="tip" id="fs21">val typeof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs22">val t : Template</div>
<div class="tip" id="fs23">Template.Parse(source: string) : Template</div>
<div class="tip" id="fs24">val k : string</div>
<div class="tip" id="fs25">val v : &#39;T</div>
<div class="tip" id="fs26">Template.Render() : string<br />Template.Render(parameters: RenderParameters) : string<br />Template.Render(localVariables: Hash) : string<br />Template.Render(stream: Stream, parameters: RenderParameters) : unit<br />Template.Render(result: TextWriter, parameters: RenderParameters) : unit</div>
<div class="tip" id="fs27">Multiple items<br />type Hash =<br />&#160;&#160;new : unit -&gt; Hash + 2 overloads<br />&#160;&#160;member Add : item:KeyValuePair&lt;string, obj&gt; -&gt; unit + 2 overloads<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Contains : key:obj -&gt; bool + 1 overload<br />&#160;&#160;member ContainsKey : key:string -&gt; bool<br />&#160;&#160;member CopyTo : array:KeyValuePair&lt;string, obj&gt;[] * arrayIndex:int -&gt; unit + 1 overload<br />&#160;&#160;member Count : int<br />&#160;&#160;member Get&lt;&#39;T&gt; : key:string -&gt; &#39;T<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;KeyValuePair&lt;string, obj&gt;&gt;<br />&#160;&#160;member IsFixedSize : bool<br />&#160;&#160;...<br /><br />Full name: DotLiquid.Hash<br /><br />--------------------<br />Hash() : unit<br />Hash(defaultValue: obj) : unit<br />Hash(lambda: Func&lt;Hash,string,obj&gt;) : unit</div>
<div class="tip" id="fs28">Hash.FromDictionary(dictionary: Collections.Generic.IDictionary&lt;string,obj&gt;) : Hash</div>
<div class="tip" id="fs29">val dict : keyValuePairs:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Collections.Generic.IDictionary&lt;&#39;Key,&#39;Value&gt; (requires equality)<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.dict</div>
<div class="tip" id="fs30">val box : value:&#39;T -&gt; obj<br /><br />Full name: Microsoft.FSharp.Core.Operators.box</div>
<div class="tip" id="fs31">type Task =<br />&#160;&#160;{What: string;}<br /><br />Full name: Script.Task</div>
<div class="tip" id="fs32">Task.What: string</div>
<div class="tip" id="fs33">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs34">type Person =<br />&#160;&#160;{Name: string;<br />&#160;&#160;&#160;Tasks: seq&lt;Task&gt;;}<br /><br />Full name: Script.Person</div>
<div class="tip" id="fs35">Person.Name: string</div>
<div class="tip" id="fs36">Person.Tasks: seq&lt;Task&gt;</div>
<div class="tip" id="fs37">val t : (string -&gt; Person -&gt; string)<br /><br />Full name: Script.t</div>
<div class="tip" id="fs38">val app : obj<br /><br />Full name: Script.app</div>

