<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
<span class="l">81: </span>
<span class="l">82: </span>
<span class="l">83: </span>
<span class="l">84: </span>
<span class="l">85: </span>
<span class="l">86: </span>
<span class="l">87: </span>
<span class="l">88: </span>
<span class="l">89: </span>
<span class="l">90: </span>
<span class="l">91: </span>
<span class="l">92: </span>
<span class="l">93: </span>
<span class="l">94: </span>
<span class="l">95: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span id="fst1" onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1, document.getElementById('fst1'))" class="omitted">(Parser Monad omitted. Code available here: https://bitbucket.org/ZachBray/parsad)</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">expr</span> <span class="o">=</span>
   | <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="p">JSObject</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">Map</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs2', 6)" onmouseover="showTip(event, 'fs2', 6)" class="t">expr</span><span class="o">&gt;</span>
   | <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="p">JSNumber</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">float</span>
   | <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="p">JSString</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="t">string</span>
   | <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="p">JSArray</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs2', 12)" onmouseover="showTip(event, 'fs2', 12)" class="t">expr</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="t">list</span>
   | <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="p">JSBool</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="t">bool</span>
   | <span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="p">JSNull</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 17)" onmouseover="showTip(event, 'fs14', 17)" class="f">jsBool</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 18)" onmouseover="showTip(event, 'fs15', 18)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs16', 19)" onmouseover="showTip(event, 'fs16', 19)" class="i">b</span> <span class="o">=</span> <span class="s">&quot;true|false&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs11', 20)" onmouseover="showTip(event, 'fs11', 20)" class="p">JSBool</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs17', 21)" onmouseover="showTip(event, 'fs17', 21)" class="t">Boolean</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 22)" onmouseover="showTip(event, 'fs18', 22)" class="f">Parse</span> <span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="i">b</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 24)" onmouseover="showTip(event, 'fs19', 24)" class="f">jsNumber</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs20', 26)" onmouseover="showTip(event, 'fs20', 26)" class="i">n</span> <span class="o">=</span> <span class="s">&quot;[-+]?[0-9]*\.?[0-9]+&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs6', 27)" onmouseover="showTip(event, 'fs6', 27)" class="p">JSNumber</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs21', 28)" onmouseover="showTip(event, 'fs21', 28)" class="t">Double</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 29)" onmouseover="showTip(event, 'fs22', 29)" class="f">Parse</span> <span onmouseout="hideTip(event, 'fs20', 30)" onmouseover="showTip(event, 'fs20', 30)" class="i">n</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 31)" onmouseover="showTip(event, 'fs23', 31)" class="f">jsString</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 32)" onmouseover="showTip(event, 'fs15', 32)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs24', 33)" onmouseover="showTip(event, 'fs24', 33)" class="i">str</span> <span class="o">=</span> <span class="s">&quot;</span><span class="e">\&quot;</span><span class="s">[^</span><span class="e">\&quot;</span><span class="s">]*</span><span class="e">\&quot;</span><span class="s">&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs8', 34)" onmouseover="showTip(event, 'fs8', 34)" class="p">JSString</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs24', 35)" onmouseover="showTip(event, 'fs24', 35)" class="i">str</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 36)" onmouseover="showTip(event, 'fs25', 36)" class="f">jsNull</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 37)" onmouseover="showTip(event, 'fs15', 37)" class="i">parser</span> {
   <span class="k">let!</span> _ <span class="o">=</span> <span class="s">&quot;null&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs13', 38)" onmouseover="showTip(event, 'fs13', 38)" class="p">JSNull</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 39)" onmouseover="showTip(event, 'fs26', 39)" class="f">justAn</span> (<span onmouseout="hideTip(event, 'fs27', 40)" onmouseover="showTip(event, 'fs27', 40)" class="i">pattern</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs5', 41)" onmouseover="showTip(event, 'fs5', 41)" class="t">string</span>) (<span onmouseout="hideTip(event, 'fs28', 42)" onmouseover="showTip(event, 'fs28', 42)" class="f">k</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs29', 43)" onmouseover="showTip(event, 'fs29', 43)" class="t">unit</span> <span class="k">-&gt;</span> _) () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 44)" onmouseover="showTip(event, 'fs15', 44)" class="i">parser</span> {
   <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 45)" onmouseover="showTip(event, 'fs27', 45)" class="i">pattern</span>
   <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs28', 46)" onmouseover="showTip(event, 'fs28', 46)" class="f">k</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 47)" onmouseover="showTip(event, 'fs30', 47)" class="f">followedBy</span> (<span onmouseout="hideTip(event, 'fs27', 48)" onmouseover="showTip(event, 'fs27', 48)" class="i">pattern</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs5', 49)" onmouseover="showTip(event, 'fs5', 49)" class="t">string</span>) (<span onmouseout="hideTip(event, 'fs31', 50)" onmouseover="showTip(event, 'fs31', 50)" class="f">k</span><span class="o">:</span><span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs29', 51)" onmouseover="showTip(event, 'fs29', 51)" class="t">unit</span> <span class="k">-&gt;</span> _) (<span onmouseout="hideTip(event, 'fs32', 52)" onmouseover="showTip(event, 'fs32', 52)" class="f">f</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs29', 53)" onmouseover="showTip(event, 'fs29', 53)" class="t">unit</span> <span class="k">-&gt;</span> _) () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 54)" onmouseover="showTip(event, 'fs15', 54)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs33', 55)" onmouseover="showTip(event, 'fs33', 55)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs32', 56)" onmouseover="showTip(event, 'fs32', 56)" class="f">f</span>
   <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 57)" onmouseover="showTip(event, 'fs27', 57)" class="i">pattern</span>
   <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs31', 58)" onmouseover="showTip(event, 'fs31', 58)" class="f">k</span> <span onmouseout="hideTip(event, 'fs33', 59)" onmouseover="showTip(event, 'fs33', 59)" class="i">x</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 60)" onmouseover="showTip(event, 'fs34', 60)" class="f">listOf</span> (<span onmouseout="hideTip(event, 'fs35', 61)" onmouseover="showTip(event, 'fs35', 61)" class="i">startSymbol</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs5', 62)" onmouseover="showTip(event, 'fs5', 62)" class="t">string</span>) <span onmouseout="hideTip(event, 'fs32', 63)" onmouseover="showTip(event, 'fs32', 63)" class="f">f</span> <span onmouseout="hideTip(event, 'fs36', 64)" onmouseover="showTip(event, 'fs36', 64)" class="i">endSymbol</span> () <span class="o">=</span>
   <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs37', 65)" onmouseover="showTip(event, 'fs37', 65)" class="f">listOf</span> (<span onmouseout="hideTip(event, 'fs38', 66)" onmouseover="showTip(event, 'fs38', 66)" class="i">xs</span><span class="o">:</span>_ <span onmouseout="hideTip(event, 'fs10', 67)" onmouseover="showTip(event, 'fs10', 67)" class="t">list</span>) (<span onmouseout="hideTip(event, 'fs39', 68)" onmouseover="showTip(event, 'fs39', 68)" class="f">f</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs29', 69)" onmouseover="showTip(event, 'fs29', 69)" class="t">unit</span> <span class="k">-&gt;</span> _) () <span class="o">=</span> 
      <span onmouseout="hideTip(event, 'fs15', 70)" onmouseover="showTip(event, 'fs15', 70)" class="i">parser</span> {
         <span class="k">return!</span> [
            <span onmouseout="hideTip(event, 'fs39', 71)" onmouseover="showTip(event, 'fs39', 71)" class="f">f</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs30', 72)" onmouseover="showTip(event, 'fs30', 72)" class="f">followedBy</span> <span class="s">&quot;,&quot;</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs40', 73)" onmouseover="showTip(event, 'fs40', 73)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs37', 74)" onmouseover="showTip(event, 'fs37', 74)" class="f">listOf</span> (<span onmouseout="hideTip(event, 'fs40', 75)" onmouseover="showTip(event, 'fs40', 75)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs38', 76)" onmouseover="showTip(event, 'fs38', 76)" class="i">xs</span>) <span onmouseout="hideTip(event, 'fs39', 77)" onmouseover="showTip(event, 'fs39', 77)" class="f">f</span>)
            <span onmouseout="hideTip(event, 'fs39', 78)" onmouseover="showTip(event, 'fs39', 78)" class="f">f</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs30', 79)" onmouseover="showTip(event, 'fs30', 79)" class="f">followedBy</span> <span onmouseout="hideTip(event, 'fs36', 80)" onmouseover="showTip(event, 'fs36', 80)" class="i">endSymbol</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs40', 81)" onmouseover="showTip(event, 'fs40', 81)" class="i">x</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 82)" onmouseover="showTip(event, 'fs15', 82)" class="i">parser</span> { <span class="k">return</span> <span onmouseout="hideTip(event, 'fs40', 83)" onmouseover="showTip(event, 'fs40', 83)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs38', 84)" onmouseover="showTip(event, 'fs38', 84)" class="i">xs</span> })
            <span onmouseout="hideTip(event, 'fs26', 85)" onmouseover="showTip(event, 'fs26', 85)" class="f">justAn</span> <span onmouseout="hideTip(event, 'fs36', 86)" onmouseover="showTip(event, 'fs36', 86)" class="i">endSymbol</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 87)" onmouseover="showTip(event, 'fs15', 87)" class="i">parser</span> { <span class="k">return</span> <span onmouseout="hideTip(event, 'fs38', 88)" onmouseover="showTip(event, 'fs38', 88)" class="i">xs</span> })
         ]
      }
   <span onmouseout="hideTip(event, 'fs15', 89)" onmouseover="showTip(event, 'fs15', 89)" class="i">parser</span> {
      <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs35', 90)" onmouseover="showTip(event, 'fs35', 90)" class="i">startSymbol</span>
      <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs37', 91)" onmouseover="showTip(event, 'fs37', 91)" class="f">listOf</span> <span onmouseout="hideTip(event, 'fs41', 92)" onmouseover="showTip(event, 'fs41', 92)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs42', 93)" onmouseover="showTip(event, 'fs42', 93)" class="i">empty</span> <span onmouseout="hideTip(event, 'fs32', 94)" onmouseover="showTip(event, 'fs32', 94)" class="f">f</span>
   }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 95)" onmouseover="showTip(event, 'fs43', 95)" class="f">jsArray</span> <span onmouseout="hideTip(event, 'fs44', 96)" onmouseover="showTip(event, 'fs44', 96)" class="f">f</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 97)" onmouseover="showTip(event, 'fs15', 97)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs45', 98)" onmouseover="showTip(event, 'fs45', 98)" class="i">xs</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs34', 99)" onmouseover="showTip(event, 'fs34', 99)" class="f">listOf</span> <span class="s">&quot;\[&quot;</span> <span onmouseout="hideTip(event, 'fs44', 100)" onmouseover="showTip(event, 'fs44', 100)" class="f">f</span> <span class="s">&quot;\]&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs9', 101)" onmouseover="showTip(event, 'fs9', 101)" class="p">JSArray</span> <span onmouseout="hideTip(event, 'fs45', 102)" onmouseover="showTip(event, 'fs45', 102)" class="i">xs</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs46', 103)" onmouseover="showTip(event, 'fs46', 103)" class="f">jsAssign</span> (<span onmouseout="hideTip(event, 'fs47', 104)" onmouseover="showTip(event, 'fs47', 104)" class="f">varValue</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs29', 105)" onmouseover="showTip(event, 'fs29', 105)" class="t">unit</span> <span class="k">-&gt;</span> _) () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 106)" onmouseover="showTip(event, 'fs15', 106)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs48', 107)" onmouseover="showTip(event, 'fs48', 107)" class="i">name</span> <span class="o">=</span> <span class="s">&quot;</span><span class="e">\&quot;</span><span class="s">[^</span><span class="e">\&quot;</span><span class="s">]*</span><span class="e">\&quot;</span><span class="s">&quot;</span>
   <span class="k">let!</span> _ <span class="o">=</span> <span class="s">&quot;\:&quot;</span>
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs49', 108)" onmouseover="showTip(event, 'fs49', 108)" class="i">value</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 109)" onmouseover="showTip(event, 'fs47', 109)" class="f">varValue</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs48', 110)" onmouseover="showTip(event, 'fs48', 110)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs49', 111)" onmouseover="showTip(event, 'fs49', 111)" class="i">value</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs50', 112)" onmouseover="showTip(event, 'fs50', 112)" class="f">jsObj</span> <span onmouseout="hideTip(event, 'fs44', 113)" onmouseover="showTip(event, 'fs44', 113)" class="f">f</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 114)" onmouseover="showTip(event, 'fs15', 114)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs51', 115)" onmouseover="showTip(event, 'fs51', 115)" class="i">assignments</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs34', 116)" onmouseover="showTip(event, 'fs34', 116)" class="f">listOf</span> <span class="s">&quot;\{&quot;</span> (<span onmouseout="hideTip(event, 'fs46', 117)" onmouseover="showTip(event, 'fs46', 117)" class="f">jsAssign</span> <span onmouseout="hideTip(event, 'fs44', 118)" onmouseover="showTip(event, 'fs44', 118)" class="f">f</span>) <span class="s">&quot;\}&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs51', 119)" onmouseover="showTip(event, 'fs51', 119)" class="i">assignments</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 120)" onmouseover="showTip(event, 'fs4', 120)" class="t">Map</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 121)" onmouseover="showTip(event, 'fs52', 121)" class="f">ofList</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs3', 122)" onmouseover="showTip(event, 'fs3', 122)" class="p">JSObject</span>
}

<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs53', 123)" onmouseover="showTip(event, 'fs53', 123)" class="f">json</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 124)" onmouseover="showTip(event, 'fs15', 124)" class="i">parser</span> {
   <span class="k">return!</span> [
      <span onmouseout="hideTip(event, 'fs50', 125)" onmouseover="showTip(event, 'fs50', 125)" class="f">jsObj</span> <span onmouseout="hideTip(event, 'fs53', 126)" onmouseover="showTip(event, 'fs53', 126)" class="f">json</span>
      <span onmouseout="hideTip(event, 'fs43', 127)" onmouseover="showTip(event, 'fs43', 127)" class="f">jsArray</span> <span onmouseout="hideTip(event, 'fs53', 128)" onmouseover="showTip(event, 'fs53', 128)" class="f">json</span>
      <span onmouseout="hideTip(event, 'fs19', 129)" onmouseover="showTip(event, 'fs19', 129)" class="f">jsNumber</span>
      <span onmouseout="hideTip(event, 'fs23', 130)" onmouseover="showTip(event, 'fs23', 130)" class="f">jsString</span>
      <span onmouseout="hideTip(event, 'fs14', 131)" onmouseover="showTip(event, 'fs14', 131)" class="f">jsBool</span>
      <span onmouseout="hideTip(event, 'fs25', 132)" onmouseover="showTip(event, 'fs25', 132)" class="f">jsNull</span>
   ]
}

<span class="c">// Example</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs54', 133)" onmouseover="showTip(event, 'fs54', 133)" class="i">exampleJson</span> <span class="o">=</span> <span class="s">@&quot;</span>
<span class="s">{  &quot;&quot;name&quot;&quot;: &quot;&quot;Zach&quot;&quot;,</span>
<span class="s">   &quot;&quot;age&quot;&quot;: 24,</span>
<span class="s">   &quot;&quot;isMale&quot;&quot;: true,</span>
<span class="s">   &quot;&quot;bosses&quot;&quot;: [</span>
<span class="s">      { &quot;&quot;name&quot;&quot;: &quot;&quot;Phil&quot;&quot; },</span>
<span class="s">      { &quot;&quot;name&quot;&quot;: &quot;&quot;Mark&quot;&quot; }</span>
<span class="s">   ]</span>
<span class="s">}&quot;</span>

<span onmouseout="hideTip(event, 'fs55', 134)" onmouseover="showTip(event, 'fs55', 134)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs53', 135)" onmouseover="showTip(event, 'fs53', 135)" class="f">json</span>()<span class="o">.</span><span class="f">Parse</span> <span onmouseout="hideTip(event, 'fs54', 136)" onmouseover="showTip(event, 'fs54', 136)" class="i">exampleJson</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">open System.Text.RegularExpressions<br />open System<br /><br />type text = string<br />type error = string<br /><br />[&lt;AutoOpen&gt;]<br />module String =<br />&#160;&#160;&#160;let isEmpty(str:string) =<br />&#160;&#160;&#160;&#160;&#160;&#160;str.Trim().Length = 0<br /><br />&#160;&#160;&#160;let (|Empty|_|) str =<br />&#160;&#160;&#160;&#160;&#160;&#160;if isEmpty str then Some()<br />&#160;&#160;&#160;&#160;&#160;&#160;else None<br /><br />type &#39;a Parser = <br />&#160;&#160;&#160;| Parser of (text -&gt; error ref -&gt; (&#39;a * text) option)<br />&#160;&#160;&#160;member x.Evaluate(text, error) =<br />&#160;&#160;&#160;&#160;&#160;&#160;let (Parser f) = x<br />&#160;&#160;&#160;&#160;&#160;&#160;f text error<br />&#160;&#160;&#160;member x.Parse text =<br />&#160;&#160;&#160;&#160;&#160;&#160;let error = ref &quot;&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;match x.Evaluate(text, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;| Some (y, Empty) -&gt; y<br />&#160;&#160;&#160;&#160;&#160;&#160;| Some _ | None -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;failwith !error<br /><br />type ParserBuilder() =<br />&#160;&#160;&#160;let parse patterns text =<br />&#160;&#160;&#160;&#160;&#160;&#160;let pattern = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;patterns |&gt; Seq.map (sprintf &quot;(%s)&quot;)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; String.concat &quot;&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;let regex = Regex (sprintf &quot;^\s*%s&quot; pattern, RegexOptions.Singleline)<br />&#160;&#160;&#160;&#160;&#160;&#160;let matchAttempt = regex.Match text<br />&#160;&#160;&#160;&#160;&#160;&#160;let groups =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[ for group in matchAttempt.Groups -&gt; group.Value ]<br />&#160;&#160;&#160;&#160;&#160;&#160;match groups with<br />&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; []<br />&#160;&#160;&#160;&#160;&#160;&#160;| x::xs -&gt; xs<br /><br />&#160;&#160;&#160;let parsePattern pattern (f:string -&gt; &#39;a Parser) text error =<br />&#160;&#160;&#160;&#160;&#160;&#160;match text |&gt; parse [pattern; &quot;.*&quot;]  with<br />&#160;&#160;&#160;&#160;&#160;&#160;| [value; rest] -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let g = f value<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g.Evaluate(rest, error)<br />&#160;&#160;&#160;&#160;&#160;&#160;| _ -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected &#39;%s&#39; but found &#39;%s&#39;&quot; pattern text<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<br />&#160;&#160;&#160;let parseInfix (left:unit -&gt; &#39;a Parser) op (right:unit -&gt; &#39;b Parser) (f:(&#39;a*string*&#39;b) -&gt; &#39;c Parser) text error =<br />&#160;&#160;&#160;&#160;&#160;&#160;match text |&gt; parse [&quot;.*&quot;; op; &quot;.*&quot;] with<br />&#160;&#160;&#160;&#160;&#160;&#160;| [x; op; y] -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match left().Evaluate(x, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(x, Empty) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match right().Evaluate(y, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(y, rest) -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f(x, op, y).Evaluate(rest, error)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| None -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected expression but found &#39;%s&#39;&quot; y<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some _ | None -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected expression but found &#39;%s&#39;&quot; x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;| _ -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected &#39;&lt;x&gt; %s &lt;y&gt;&#39; but found &#39;%s&#39;&quot; op text<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br /><br />&#160;&#160;&#160;let parseAny (parsers:(unit -&gt; &#39;a Parser) list) (f: &#39;a -&gt; &#39;b Parser) text error =<br />&#160;&#160;&#160;&#160;&#160;&#160;parsers |&gt; Seq.tryPick (fun parser -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match parser().Evaluate(text, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(x, rest) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let g = f x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g.Evaluate(rest, error)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| None -&gt; None<br />&#160;&#160;&#160;&#160;&#160;&#160;)<br /><br />&#160;&#160;&#160;member b.Bind (parsers, f) =<br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(parseAny parsers f)<br />&#160;&#160;&#160;member b.Bind ((left, op, right), f) =<br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(parseInfix left op right f)<br />&#160;&#160;&#160;member b.Bind (parser, f) = <br />&#160;&#160;&#160;&#160;&#160;&#160;b.Bind([parser], f)<br />&#160;&#160;&#160;member b.Bind (pattern:string, f) = <br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(parsePattern pattern f)<br />&#160;&#160;&#160;member b.Return x =<br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(fun text error -&gt; Some(x, text))<br />&#160;&#160;&#160;member b.ReturnFrom(parsers:_ list) =<br />&#160;&#160;&#160;&#160;&#160;&#160;b.Bind(parsers, b.Return)<br />&#160;&#160;&#160;member b.ReturnFrom(parser:unit -&gt; _ Parser) =<br />&#160;&#160;&#160;&#160;&#160;&#160;b.Bind(parser, b.Return)<br /><br />let parser = ParserBuilder()</div>
<div class="tip" id="fs2">type expr =<br />&#160;&#160;| JSObject of Map&lt;string,expr&gt;<br />&#160;&#160;| JSNumber of float<br />&#160;&#160;| JSString of string<br />&#160;&#160;| JSArray of expr list<br />&#160;&#160;| JSBool of bool<br />&#160;&#160;| JSNull<br /><br />Full name: Script.expr</div>
<div class="tip" id="fs3">union case expr.JSObject: Map&lt;string,expr&gt; -&gt; expr</div>
<div class="tip" id="fs4">Multiple items<br />module Map<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Map&lt;&#39;Key,&#39;Value (requires comparison)&gt; =<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface ICollection&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface IDictionary&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member Add : key:&#39;Key * value:&#39;Value -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member ContainsKey : key:&#39;Key -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member Remove : key:&#39;Key -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Map&lt;_,_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;</div>
<div class="tip" id="fs5">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs6">union case expr.JSNumber: float -&gt; expr</div>
<div class="tip" id="fs7">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.float<br /><br />--------------------<br />type float = Double<br /><br />Full name: Microsoft.FSharp.Core.float<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float<br /><br />Full name: Microsoft.FSharp.Core.float&lt;_&gt;</div>
<div class="tip" id="fs8">union case expr.JSString: string -&gt; expr</div>
<div class="tip" id="fs9">union case expr.JSArray: expr list -&gt; expr</div>
<div class="tip" id="fs10">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs11">union case expr.JSBool: bool -&gt; expr</div>
<div class="tip" id="fs12">type bool = Boolean<br /><br />Full name: Microsoft.FSharp.Core.bool</div>
<div class="tip" id="fs13">union case expr.JSNull: expr</div>
<div class="tip" id="fs14">val jsBool : unit -&gt; expr Parser<br /><br />Full name: Script.jsBool</div>
<div class="tip" id="fs15">val parser : ParserBuilder<br /><br />Full name: Script.parser</div>
<div class="tip" id="fs16">val b : string</div>
<div class="tip" id="fs17">type Boolean =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : obj:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 1 overload<br />&#160;&#160;&#160;&#160;static val TrueString : string<br />&#160;&#160;&#160;&#160;static val FalseString : string<br />&#160;&#160;&#160;&#160;static member Parse : value:string -&gt; bool<br />&#160;&#160;&#160;&#160;static member TryParse : value:string * result:bool -&gt; bool<br />&#160;&#160;end<br /><br />Full name: System.Boolean</div>
<div class="tip" id="fs18">Boolean.Parse(value: string) : bool</div>
<div class="tip" id="fs19">val jsNumber : unit -&gt; expr Parser<br /><br />Full name: Script.jsNumber</div>
<div class="tip" id="fs20">val n : string</div>
<div class="tip" id="fs21">type Double =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 3 overloads<br />&#160;&#160;&#160;&#160;static val MinValue : float<br />&#160;&#160;&#160;&#160;static val MaxValue : float<br />&#160;&#160;&#160;&#160;static val Epsilon : float<br />&#160;&#160;&#160;&#160;static val NegativeInfinity : float<br />&#160;&#160;&#160;&#160;static val PositiveInfinity : float<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Double</div>
<div class="tip" id="fs22">Double.Parse(s: string) : float<br />Double.Parse(s: string, provider: IFormatProvider) : float<br />Double.Parse(s: string, style: Globalization.NumberStyles) : float<br />Double.Parse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider) : float</div>
<div class="tip" id="fs23">val jsString : unit -&gt; expr Parser<br /><br />Full name: Script.jsString</div>
<div class="tip" id="fs24">val str : string</div>
<div class="tip" id="fs25">val jsNull : unit -&gt; expr Parser<br /><br />Full name: Script.jsNull</div>
<div class="tip" id="fs26">val justAn : pattern:string -&gt; k:(unit -&gt; &#39;a Parser) -&gt; unit -&gt; &#39;a Parser<br /><br />Full name: Script.justAn</div>
<div class="tip" id="fs27">val pattern : string</div>
<div class="tip" id="fs28">val k : (unit -&gt; &#39;a Parser)</div>
<div class="tip" id="fs29">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs30">val followedBy : pattern:string -&gt; k:(&#39;a -&gt; unit -&gt; &#39;a0 Parser) -&gt; f:(unit -&gt; &#39;a Parser) -&gt; unit -&gt; &#39;a0 Parser<br /><br />Full name: Script.followedBy</div>
<div class="tip" id="fs31">val k : (&#39;a -&gt; unit -&gt; &#39;a0 Parser)</div>
<div class="tip" id="fs32">val f : (unit -&gt; &#39;a Parser)</div>
<div class="tip" id="fs33">val x : &#39;a</div>
<div class="tip" id="fs34">val listOf : startSymbol:string -&gt; f:(unit -&gt; &#39;a Parser) -&gt; endSymbol:string -&gt; unit -&gt; &#39;a list Parser<br /><br />Full name: Script.listOf</div>
<div class="tip" id="fs35">val startSymbol : string</div>
<div class="tip" id="fs36">val endSymbol : string</div>
<div class="tip" id="fs37">val listOf : (&#39;b list -&gt; (unit -&gt; &#39;b Parser) -&gt; unit -&gt; &#39;b list Parser)</div>
<div class="tip" id="fs38">val xs : &#39;b list</div>
<div class="tip" id="fs39">val f : (unit -&gt; &#39;b Parser)</div>
<div class="tip" id="fs40">val x : &#39;b</div>
<div class="tip" id="fs41">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs42">val empty&lt;&#39;T&gt; : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.empty</div>
<div class="tip" id="fs43">val jsArray : f:(unit -&gt; expr Parser) -&gt; unit -&gt; expr Parser<br /><br />Full name: Script.jsArray</div>
<div class="tip" id="fs44">val f : (unit -&gt; expr Parser)</div>
<div class="tip" id="fs45">val xs : expr list</div>
<div class="tip" id="fs46">val jsAssign : varValue:(unit -&gt; &#39;a Parser) -&gt; unit -&gt; (string * &#39;a) Parser<br /><br />Full name: Script.jsAssign</div>
<div class="tip" id="fs47">val varValue : (unit -&gt; &#39;a Parser)</div>
<div class="tip" id="fs48">val name : string</div>
<div class="tip" id="fs49">val value : &#39;a</div>
<div class="tip" id="fs50">val jsObj : f:(unit -&gt; expr Parser) -&gt; unit -&gt; expr Parser<br /><br />Full name: Script.jsObj</div>
<div class="tip" id="fs51">val assignments : (string * expr) list</div>
<div class="tip" id="fs52">val ofList : elements:(&#39;Key * &#39;T) list -&gt; Map&lt;&#39;Key,&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Map.ofList</div>
<div class="tip" id="fs53">val json : unit -&gt; expr Parser<br /><br />Full name: Script.json</div>
<div class="tip" id="fs54">val exampleJson : string<br /><br />Full name: Script.exampleJson</div>
<div class="tip" id="fs55">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

