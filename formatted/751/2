<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="prep">#if</span> <span class="i">INTERACTIVE</span>
<span class="inactive">#r</span><span class="inactive"> </span><span class="inactive">&quot;FSharp.PowerPack.Linq.dll&quot;</span>
<span class="inactive">#r</span><span class="inactive"> </span><span class="inactive">&quot;AutoMapper.dll&quot;</span><span class="inactive"> </span>
<span class="prep">#endif</span>

<span class="k">namespace</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Quotations</span>

<span class="k">module</span> <span class="t">Expr</span> <span class="o">=</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">System</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">Expressions</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 9)" onmouseover="showTip(event, 'fs2', 9)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 10)" onmouseover="showTip(event, 'fs3', 10)" class="i">Quotations</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 11)" onmouseover="showTip(event, 'fs1', 11)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 12)" onmouseover="showTip(event, 'fs2', 12)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">Linq</span><span class="o">.</span><span class="i">QuotationEvaluation</span>

    <span class="c">/// Translates simple F# quotation to LINQ expression</span>
    <span class="c">/// (the function supports only variables, property getters,</span>
    <span class="c">/// method calls and static method calls)</span>
    <span class="c">// http://www.fssnip.net/c6</span>
    <span class="k">let</span> <span class="k">rec</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs8', 14)" onmouseover="showTip(event, 'fs8', 14)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="i">expr</span> <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="i">expr</span> <span class="k">with</span>
        | <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="p">Var</span>(<span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="i">var</span>) <span class="k">-&gt;</span>
            <span class="c">// Variable access</span>
            <span onmouseout="hideTip(event, 'fs13', 20)" onmouseover="showTip(event, 'fs13', 20)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="f">Variable</span>(<span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="i">var</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 23)" onmouseover="showTip(event, 'fs15', 23)" class="i">Type</span>, <span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="i">var</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 25)" onmouseover="showTip(event, 'fs16', 25)" class="i">Name</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs13', 26)" onmouseover="showTip(event, 'fs13', 26)" class="t">Expression</span>
        | <span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 28)" onmouseover="showTip(event, 'fs17', 28)" class="p">PropertyGet</span>(<span onmouseout="hideTip(event, 'fs18', 29)" onmouseover="showTip(event, 'fs18', 29)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs19', 30)" onmouseover="showTip(event, 'fs19', 30)" class="i">inst</span>, <span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="i">pi</span>, []) <span class="k">-&gt;</span>
            <span class="c">// Getter of an instance property</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 32)" onmouseover="showTip(event, 'fs21', 32)" class="i">instExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 33)" onmouseover="showTip(event, 'fs8', 33)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs19', 34)" onmouseover="showTip(event, 'fs19', 34)" class="i">inst</span>
            <span onmouseout="hideTip(event, 'fs13', 35)" onmouseover="showTip(event, 'fs13', 35)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 36)" onmouseover="showTip(event, 'fs22', 36)" class="f">Property</span>(<span onmouseout="hideTip(event, 'fs21', 37)" onmouseover="showTip(event, 'fs21', 37)" class="i">instExpr</span>, <span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="i">pi</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs13', 39)" onmouseover="showTip(event, 'fs13', 39)" class="t">Expression</span>
        | <span onmouseout="hideTip(event, 'fs10', 40)" onmouseover="showTip(event, 'fs10', 40)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 41)" onmouseover="showTip(event, 'fs23', 41)" class="p">Call</span>(<span onmouseout="hideTip(event, 'fs18', 42)" onmouseover="showTip(event, 'fs18', 42)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs19', 43)" onmouseover="showTip(event, 'fs19', 43)" class="i">inst</span>, <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs25', 45)" onmouseover="showTip(event, 'fs25', 45)" class="i">args</span>) <span class="k">-&gt;</span>
            <span class="c">// Method call - translate instance &amp; arguments recursively</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 46)" onmouseover="showTip(event, 'fs26', 46)" class="i">argsExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 47)" onmouseover="showTip(event, 'fs27', 47)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 48)" onmouseover="showTip(event, 'fs28', 48)" class="f">map</span> <span onmouseout="hideTip(event, 'fs8', 49)" onmouseover="showTip(event, 'fs8', 49)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs25', 50)" onmouseover="showTip(event, 'fs25', 50)" class="i">args</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 51)" onmouseover="showTip(event, 'fs21', 51)" class="i">instExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 52)" onmouseover="showTip(event, 'fs8', 52)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs19', 53)" onmouseover="showTip(event, 'fs19', 53)" class="i">inst</span>
            <span onmouseout="hideTip(event, 'fs13', 54)" onmouseover="showTip(event, 'fs13', 54)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 55)" onmouseover="showTip(event, 'fs29', 55)" class="f">Call</span>(<span onmouseout="hideTip(event, 'fs21', 56)" onmouseover="showTip(event, 'fs21', 56)" class="i">instExpr</span>, <span onmouseout="hideTip(event, 'fs24', 57)" onmouseover="showTip(event, 'fs24', 57)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs26', 58)" onmouseover="showTip(event, 'fs26', 58)" class="i">argsExpr</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs13', 59)" onmouseover="showTip(event, 'fs13', 59)" class="t">Expression</span>
        | <span onmouseout="hideTip(event, 'fs10', 60)" onmouseover="showTip(event, 'fs10', 60)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 61)" onmouseover="showTip(event, 'fs23', 61)" class="p">Call</span>(<span onmouseout="hideTip(event, 'fs30', 62)" onmouseover="showTip(event, 'fs30', 62)" class="p">None</span>, <span onmouseout="hideTip(event, 'fs24', 63)" onmouseover="showTip(event, 'fs24', 63)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs25', 64)" onmouseover="showTip(event, 'fs25', 64)" class="i">args</span>) <span class="k">-&gt;</span>
            <span class="c">// Static method call - no instance</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 65)" onmouseover="showTip(event, 'fs26', 65)" class="i">argsExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 66)" onmouseover="showTip(event, 'fs27', 66)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 67)" onmouseover="showTip(event, 'fs28', 67)" class="f">map</span> <span onmouseout="hideTip(event, 'fs8', 68)" onmouseover="showTip(event, 'fs8', 68)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs25', 69)" onmouseover="showTip(event, 'fs25', 69)" class="i">args</span>
            <span onmouseout="hideTip(event, 'fs13', 70)" onmouseover="showTip(event, 'fs13', 70)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 71)" onmouseover="showTip(event, 'fs29', 71)" class="f">Call</span>(<span onmouseout="hideTip(event, 'fs24', 72)" onmouseover="showTip(event, 'fs24', 72)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs26', 73)" onmouseover="showTip(event, 'fs26', 73)" class="i">argsExpr</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs13', 74)" onmouseover="showTip(event, 'fs13', 74)" class="t">Expression</span>
        | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs31', 75)" onmouseover="showTip(event, 'fs31', 75)" class="f">failwith</span> <span class="s">&quot;not supported&quot;</span>

    <span class="c">// http://stackoverflow.com/questions/10658207/using-automapper-with-f</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 76)" onmouseover="showTip(event, 'fs32', 76)" class="f">ToAutoMapperGet</span> (<span onmouseout="hideTip(event, 'fs33', 77)" onmouseover="showTip(event, 'fs33', 77)" class="i">expr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs34', 78)" onmouseover="showTip(event, 'fs34', 78)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span class="o">=</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs33', 79)" onmouseover="showTip(event, 'fs33', 79)" class="i">expr</span> <span class="k">with</span>
        | <span onmouseout="hideTip(event, 'fs10', 80)" onmouseover="showTip(event, 'fs10', 80)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 81)" onmouseover="showTip(event, 'fs35', 81)" class="p">Lambda</span>(<span onmouseout="hideTip(event, 'fs36', 82)" onmouseover="showTip(event, 'fs36', 82)" class="i">v</span>, <span onmouseout="hideTip(event, 'fs37', 83)" onmouseover="showTip(event, 'fs37', 83)" class="i">body</span>) <span class="k">-&gt;</span>
            <span class="c">// Build LINQ style lambda expression</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 84)" onmouseover="showTip(event, 'fs38', 84)" class="i">bodyExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 85)" onmouseover="showTip(event, 'fs13', 85)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 86)" onmouseover="showTip(event, 'fs39', 86)" class="f">Convert</span>(<span onmouseout="hideTip(event, 'fs8', 87)" onmouseover="showTip(event, 'fs8', 87)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs37', 88)" onmouseover="showTip(event, 'fs37', 88)" class="i">body</span>, <span onmouseout="hideTip(event, 'fs40', 89)" onmouseover="showTip(event, 'fs40', 89)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs41', 90)" onmouseover="showTip(event, 'fs41', 90)" class="t">obj</span><span class="o">&gt;</span>)
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 91)" onmouseover="showTip(event, 'fs42', 91)" class="i">paramExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 92)" onmouseover="showTip(event, 'fs13', 92)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs43', 93)" onmouseover="showTip(event, 'fs43', 93)" class="f">Parameter</span>(<span onmouseout="hideTip(event, 'fs36', 94)" onmouseover="showTip(event, 'fs36', 94)" class="i">v</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 95)" onmouseover="showTip(event, 'fs15', 95)" class="i">Type</span>, <span onmouseout="hideTip(event, 'fs36', 96)" onmouseover="showTip(event, 'fs36', 96)" class="i">v</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 97)" onmouseover="showTip(event, 'fs16', 97)" class="i">Name</span>)
            <span onmouseout="hideTip(event, 'fs13', 98)" onmouseover="showTip(event, 'fs13', 98)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs44', 99)" onmouseover="showTip(event, 'fs44', 99)" class="f">Lambda</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs45', 100)" onmouseover="showTip(event, 'fs45', 100)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span>, <span onmouseout="hideTip(event, 'fs41', 101)" onmouseover="showTip(event, 'fs41', 101)" class="t">obj</span><span class="o">&gt;</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs38', 102)" onmouseover="showTip(event, 'fs38', 102)" class="i">bodyExpr</span>, <span onmouseout="hideTip(event, 'fs42', 103)" onmouseover="showTip(event, 'fs42', 103)" class="i">paramExpr</span>)
        | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs31', 104)" onmouseover="showTip(event, 'fs31', 104)" class="f">failwith</span> <span class="s">&quot;not supported&quot;</span>

    <span class="c">// http://stackoverflow.com/questions/10647198/how-to-convert-expra-b-to-expressionfunca-obj</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs46', 105)" onmouseover="showTip(event, 'fs46', 105)" class="f">ToFuncExpression</span> (<span onmouseout="hideTip(event, 'fs33', 106)" onmouseover="showTip(event, 'fs33', 106)" class="i">expr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs34', 107)" onmouseover="showTip(event, 'fs34', 107)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs47', 108)" onmouseover="showTip(event, 'fs47', 108)" class="i">call</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs33', 109)" onmouseover="showTip(event, 'fs33', 109)" class="i">expr</span><span class="o">.</span><span class="i">ToLinqExpression</span>() <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs48', 110)" onmouseover="showTip(event, 'fs48', 110)" class="t">MethodCallExpression</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs49', 111)" onmouseover="showTip(event, 'fs49', 111)" class="i">lambda</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 112)" onmouseover="showTip(event, 'fs47', 112)" class="i">call</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs50', 113)" onmouseover="showTip(event, 'fs50', 113)" class="i">Arguments</span><span class="o">.</span>[<span class="n">0</span>] <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs51', 114)" onmouseover="showTip(event, 'fs51', 114)" class="t">LambdaExpression</span>
        <span onmouseout="hideTip(event, 'fs13', 115)" onmouseover="showTip(event, 'fs13', 115)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs44', 116)" onmouseover="showTip(event, 'fs44', 116)" class="f">Lambda</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs45', 117)" onmouseover="showTip(event, 'fs45', 117)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span>, <span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs49', 118)" onmouseover="showTip(event, 'fs49', 118)" class="i">lambda</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 119)" onmouseover="showTip(event, 'fs52', 119)" class="i">Body</span>, <span onmouseout="hideTip(event, 'fs49', 120)" onmouseover="showTip(event, 'fs49', 120)" class="i">lambda</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs53', 121)" onmouseover="showTip(event, 'fs53', 121)" class="i">Parameters</span>) 

<span class="k">namespace</span> <span onmouseout="hideTip(event, 'fs54', 122)" onmouseover="showTip(event, 'fs54', 122)" class="i">AutoMapper</span>

<span class="c">/// Functions for working with AutoMapper using F# quotations,</span>
<span class="c">/// in a manner that is compatible with F# type-inference.</span>
<span class="k">module</span> <span class="t">AutoMap</span> <span class="o">=</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs4', 123)" onmouseover="showTip(event, 'fs4', 123)" class="i">System</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 124)" onmouseover="showTip(event, 'fs1', 124)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 125)" onmouseover="showTip(event, 'fs2', 125)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 126)" onmouseover="showTip(event, 'fs3', 126)" class="i">Quotations</span>

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 127)" onmouseover="showTip(event, 'fs55', 127)" class="f">forMember</span> (<span onmouseout="hideTip(event, 'fs56', 128)" onmouseover="showTip(event, 'fs56', 128)" class="i">destMember</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs57', 129)" onmouseover="showTip(event, 'fs57', 129)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">dest</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">mbr</span><span class="o">&gt;</span>) 
                  (<span onmouseout="hideTip(event, 'fs58', 130)" onmouseover="showTip(event, 'fs58', 130)" class="f">memberOpts</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs59', 131)" onmouseover="showTip(event, 'fs59', 131)" class="t">IMemberConfigurationExpression</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">source</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs60', 132)" onmouseover="showTip(event, 'fs60', 132)" class="t">unit</span>) 
                  (<span onmouseout="hideTip(event, 'fs61', 133)" onmouseover="showTip(event, 'fs61', 133)" class="i">map</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs62', 134)" onmouseover="showTip(event, 'fs62', 134)" class="t">IMappingExpression</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">source</span>, <span class="o">&#39;</span><span class="i">dest</span><span class="o">&gt;</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs61', 135)" onmouseover="showTip(event, 'fs61', 135)" class="i">map</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs63', 136)" onmouseover="showTip(event, 'fs63', 136)" class="f">ForMember</span>(<span onmouseout="hideTip(event, 'fs57', 137)" onmouseover="showTip(event, 'fs57', 137)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs64', 138)" onmouseover="showTip(event, 'fs64', 138)" class="f">ToAutoMapperGet</span> <span onmouseout="hideTip(event, 'fs56', 139)" onmouseover="showTip(event, 'fs56', 139)" class="i">destMember</span>, <span onmouseout="hideTip(event, 'fs58', 140)" onmouseover="showTip(event, 'fs58', 140)" class="f">memberOpts</span>)

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs65', 141)" onmouseover="showTip(event, 'fs65', 141)" class="f">mapMember</span> <span onmouseout="hideTip(event, 'fs66', 142)" onmouseover="showTip(event, 'fs66', 142)" class="i">destMember</span> (<span onmouseout="hideTip(event, 'fs67', 143)" onmouseover="showTip(event, 'fs67', 143)" class="i">sourceMap</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs57', 144)" onmouseover="showTip(event, 'fs57', 144)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">source</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">mapped</span><span class="o">&gt;</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs55', 145)" onmouseover="showTip(event, 'fs55', 145)" class="f">forMember</span> <span onmouseout="hideTip(event, 'fs66', 146)" onmouseover="showTip(event, 'fs66', 146)" class="i">destMember</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs68', 147)" onmouseover="showTip(event, 'fs68', 147)" class="i">o</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs68', 148)" onmouseover="showTip(event, 'fs68', 148)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 149)" onmouseover="showTip(event, 'fs69', 149)" class="f">MapFrom</span>(<span onmouseout="hideTip(event, 'fs57', 150)" onmouseover="showTip(event, 'fs57', 150)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs70', 151)" onmouseover="showTip(event, 'fs70', 151)" class="f">ToFuncExpression</span> <span onmouseout="hideTip(event, 'fs67', 152)" onmouseover="showTip(event, 'fs67', 152)" class="i">sourceMap</span>))

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 153)" onmouseover="showTip(event, 'fs71', 153)" class="f">ignoreMember</span> <span onmouseout="hideTip(event, 'fs66', 154)" onmouseover="showTip(event, 'fs66', 154)" class="i">destMember</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs55', 155)" onmouseover="showTip(event, 'fs55', 155)" class="f">forMember</span> <span onmouseout="hideTip(event, 'fs66', 156)" onmouseover="showTip(event, 'fs66', 156)" class="i">destMember</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs72', 157)" onmouseover="showTip(event, 'fs72', 157)" class="i">o</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs72', 158)" onmouseover="showTip(event, 'fs72', 158)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs73', 159)" onmouseover="showTip(event, 'fs73', 159)" class="f">Ignore</span>())

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs74', 160)" onmouseover="showTip(event, 'fs74', 160)" class="f">forMemberName</span> (<span onmouseout="hideTip(event, 'fs75', 161)" onmouseover="showTip(event, 'fs75', 161)" class="i">destMember</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs76', 162)" onmouseover="showTip(event, 'fs76', 162)" class="t">string</span>) 
                      (<span onmouseout="hideTip(event, 'fs58', 163)" onmouseover="showTip(event, 'fs58', 163)" class="f">memberOpts</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs59', 164)" onmouseover="showTip(event, 'fs59', 164)" class="t">IMemberConfigurationExpression</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">source</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs60', 165)" onmouseover="showTip(event, 'fs60', 165)" class="t">unit</span>) 
                      (<span onmouseout="hideTip(event, 'fs61', 166)" onmouseover="showTip(event, 'fs61', 166)" class="i">map</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs62', 167)" onmouseover="showTip(event, 'fs62', 167)" class="t">IMappingExpression</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">source</span>, <span class="o">&#39;</span><span class="i">dest</span><span class="o">&gt;</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs61', 168)" onmouseover="showTip(event, 'fs61', 168)" class="i">map</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs63', 169)" onmouseover="showTip(event, 'fs63', 169)" class="f">ForMember</span>(<span onmouseout="hideTip(event, 'fs75', 170)" onmouseover="showTip(event, 'fs75', 170)" class="i">destMember</span>, <span onmouseout="hideTip(event, 'fs58', 171)" onmouseover="showTip(event, 'fs58', 171)" class="f">memberOpts</span>)

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs77', 172)" onmouseover="showTip(event, 'fs77', 172)" class="f">mapMemberName</span> <span onmouseout="hideTip(event, 'fs75', 173)" onmouseover="showTip(event, 'fs75', 173)" class="i">destMember</span> (<span onmouseout="hideTip(event, 'fs67', 174)" onmouseover="showTip(event, 'fs67', 174)" class="i">sourceMap</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs57', 175)" onmouseover="showTip(event, 'fs57', 175)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">source</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">mapped</span><span class="o">&gt;</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs74', 176)" onmouseover="showTip(event, 'fs74', 176)" class="f">forMemberName</span> <span onmouseout="hideTip(event, 'fs75', 177)" onmouseover="showTip(event, 'fs75', 177)" class="i">destMember</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs68', 178)" onmouseover="showTip(event, 'fs68', 178)" class="i">o</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs68', 179)" onmouseover="showTip(event, 'fs68', 179)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 180)" onmouseover="showTip(event, 'fs69', 180)" class="f">MapFrom</span>(<span onmouseout="hideTip(event, 'fs57', 181)" onmouseover="showTip(event, 'fs57', 181)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs70', 182)" onmouseover="showTip(event, 'fs70', 182)" class="f">ToFuncExpression</span> <span onmouseout="hideTip(event, 'fs67', 183)" onmouseover="showTip(event, 'fs67', 183)" class="i">sourceMap</span>))

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 184)" onmouseover="showTip(event, 'fs78', 184)" class="f">ignoreMemberName</span> <span onmouseout="hideTip(event, 'fs75', 185)" onmouseover="showTip(event, 'fs75', 185)" class="i">destMember</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs74', 186)" onmouseover="showTip(event, 'fs74', 186)" class="f">forMemberName</span> <span onmouseout="hideTip(event, 'fs75', 187)" onmouseover="showTip(event, 'fs75', 187)" class="i">destMember</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs79', 188)" onmouseover="showTip(event, 'fs79', 188)" class="i">o</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs79', 189)" onmouseover="showTip(event, 'fs79', 189)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs73', 190)" onmouseover="showTip(event, 'fs73', 190)" class="f">Ignore</span>())
        
[&lt;<span onmouseout="hideTip(event, 'fs80', 191)" onmouseover="showTip(event, 'fs80', 191)" class="t">AutoOpen</span>&gt;]
<span class="k">module</span> <span onmouseout="hideTip(event, 'fs81', 192)" onmouseover="showTip(event, 'fs81', 192)" class="t">AutoMapperExtensions</span> <span class="o">=</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs4', 193)" onmouseover="showTip(event, 'fs4', 193)" class="i">System</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs4', 194)" onmouseover="showTip(event, 'fs4', 194)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 195)" onmouseover="showTip(event, 'fs82', 195)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs83', 196)" onmouseover="showTip(event, 'fs83', 196)" class="i">Generic</span>

    <span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs84', 197)" onmouseover="showTip(event, 'fs84', 197)" class="f">isNull</span> <span onmouseout="hideTip(event, 'fs85', 198)" onmouseover="showTip(event, 'fs85', 198)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs86', 199)" onmouseover="showTip(event, 'fs86', 199)" class="t">Object</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs87', 200)" onmouseover="showTip(event, 'fs87', 200)" class="f">ReferenceEquals</span>(<span onmouseout="hideTip(event, 'fs85', 201)" onmouseover="showTip(event, 'fs85', 201)" class="i">x</span>, <span class="k">null</span>)
    
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs88', 202)" onmouseover="showTip(event, 'fs88', 202)" class="t">IList</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs89', 203)" onmouseover="showTip(event, 'fs89', 203)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs90', 204)" onmouseover="showTip(event, 'fs90', 204)" class="f">MapTo</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> () <span class="o">=</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs84', 205)" onmouseover="showTip(event, 'fs84', 205)" class="f">isNull</span> <span onmouseout="hideTip(event, 'fs89', 206)" onmouseover="showTip(event, 'fs89', 206)" class="i">this</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs91', 207)" onmouseover="showTip(event, 'fs91', 207)" class="f">nullArg</span> <span class="s">&quot;this&quot;</span>
            <span onmouseout="hideTip(event, 'fs92', 208)" onmouseover="showTip(event, 'fs92', 208)" class="t">Mapper</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs93', 209)" onmouseover="showTip(event, 'fs93', 209)" class="f">Map</span>(<span onmouseout="hideTip(event, 'fs89', 210)" onmouseover="showTip(event, 'fs89', 210)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs89', 211)" onmouseover="showTip(event, 'fs89', 211)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 212)" onmouseover="showTip(event, 'fs94', 212)" class="f">GetType</span>(), <span onmouseout="hideTip(event, 'fs40', 213)" onmouseover="showTip(event, 'fs40', 213)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs95', 214)" onmouseover="showTip(event, 'fs95', 214)" class="t">ResizeArray</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs88', 215)" onmouseover="showTip(event, 'fs88', 215)" class="t">IList</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs96', 216)" onmouseover="showTip(event, 'fs96', 216)" class="t">IEnumerable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs97', 217)" onmouseover="showTip(event, 'fs97', 217)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs98', 218)" onmouseover="showTip(event, 'fs98', 218)" class="f">MapTo</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> () <span class="o">=</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs84', 219)" onmouseover="showTip(event, 'fs84', 219)" class="f">isNull</span> <span onmouseout="hideTip(event, 'fs97', 220)" onmouseover="showTip(event, 'fs97', 220)" class="i">this</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs91', 221)" onmouseover="showTip(event, 'fs91', 221)" class="f">nullArg</span> <span class="s">&quot;this&quot;</span>
            <span onmouseout="hideTip(event, 'fs92', 222)" onmouseover="showTip(event, 'fs92', 222)" class="t">Mapper</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs93', 223)" onmouseover="showTip(event, 'fs93', 223)" class="f">Map</span>(<span onmouseout="hideTip(event, 'fs97', 224)" onmouseover="showTip(event, 'fs97', 224)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs97', 225)" onmouseover="showTip(event, 'fs97', 225)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 226)" onmouseover="showTip(event, 'fs94', 226)" class="f">GetType</span>(), <span onmouseout="hideTip(event, 'fs40', 227)" onmouseover="showTip(event, 'fs40', 227)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs96', 228)" onmouseover="showTip(event, 'fs96', 228)" class="t">IEnumerable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs96', 229)" onmouseover="showTip(event, 'fs96', 229)" class="t">IEnumerable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs4', 230)" onmouseover="showTip(event, 'fs4', 230)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 231)" onmouseover="showTip(event, 'fs82', 231)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs99', 232)" onmouseover="showTip(event, 'fs99', 232)" class="t">IEnumerable</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs100', 233)" onmouseover="showTip(event, 'fs100', 233)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs101', 234)" onmouseover="showTip(event, 'fs101', 234)" class="f">MapTo</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> () <span class="o">=</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs84', 235)" onmouseover="showTip(event, 'fs84', 235)" class="f">isNull</span> <span onmouseout="hideTip(event, 'fs100', 236)" onmouseover="showTip(event, 'fs100', 236)" class="i">this</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs91', 237)" onmouseover="showTip(event, 'fs91', 237)" class="f">nullArg</span> <span class="s">&quot;this&quot;</span>
            <span onmouseout="hideTip(event, 'fs92', 238)" onmouseover="showTip(event, 'fs92', 238)" class="t">Mapper</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs93', 239)" onmouseover="showTip(event, 'fs93', 239)" class="f">Map</span>(<span onmouseout="hideTip(event, 'fs100', 240)" onmouseover="showTip(event, 'fs100', 240)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs100', 241)" onmouseover="showTip(event, 'fs100', 241)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 242)" onmouseover="showTip(event, 'fs94', 242)" class="f">GetType</span>(), <span onmouseout="hideTip(event, 'fs40', 243)" onmouseover="showTip(event, 'fs40', 243)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs96', 244)" onmouseover="showTip(event, 'fs96', 244)" class="t">IEnumerable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs96', 245)" onmouseover="showTip(event, 'fs96', 245)" class="t">IEnumerable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs4', 246)" onmouseover="showTip(event, 'fs4', 246)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs86', 247)" onmouseover="showTip(event, 'fs86', 247)" class="t">Object</span> <span class="k">with</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs102', 248)" onmouseover="showTip(event, 'fs102', 248)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs103', 249)" onmouseover="showTip(event, 'fs103', 249)" class="f">MapTo</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> () <span class="o">=</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs84', 250)" onmouseover="showTip(event, 'fs84', 250)" class="f">isNull</span> <span onmouseout="hideTip(event, 'fs102', 251)" onmouseover="showTip(event, 'fs102', 251)" class="i">this</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs91', 252)" onmouseover="showTip(event, 'fs91', 252)" class="f">nullArg</span> <span class="s">&quot;this&quot;</span>
            <span onmouseout="hideTip(event, 'fs92', 253)" onmouseover="showTip(event, 'fs92', 253)" class="t">Mapper</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs93', 254)" onmouseover="showTip(event, 'fs93', 254)" class="f">Map</span>(<span onmouseout="hideTip(event, 'fs102', 255)" onmouseover="showTip(event, 'fs102', 255)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs102', 256)" onmouseover="showTip(event, 'fs102', 256)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 257)" onmouseover="showTip(event, 'fs94', 257)" class="f">GetType</span>(), <span onmouseout="hideTip(event, 'fs40', 258)" onmouseover="showTip(event, 'fs40', 258)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">b</span>

        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs102', 259)" onmouseover="showTip(event, 'fs102', 259)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs104', 260)" onmouseover="showTip(event, 'fs104', 260)" class="f">MapPropertiesToInstance</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs105', 261)" onmouseover="showTip(event, 'fs105', 261)" class="i">value</span><span class="o">:</span><span class="o">&#39;</span><span class="i">b</span>) <span class="o">=</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs84', 262)" onmouseover="showTip(event, 'fs84', 262)" class="f">isNull</span> <span onmouseout="hideTip(event, 'fs102', 263)" onmouseover="showTip(event, 'fs102', 263)" class="i">this</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs91', 264)" onmouseover="showTip(event, 'fs91', 264)" class="f">nullArg</span> <span class="s">&quot;this&quot;</span>
            <span onmouseout="hideTip(event, 'fs92', 265)" onmouseover="showTip(event, 'fs92', 265)" class="t">Mapper</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs93', 266)" onmouseover="showTip(event, 'fs93', 266)" class="f">Map</span>(<span onmouseout="hideTip(event, 'fs102', 267)" onmouseover="showTip(event, 'fs102', 267)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs105', 268)" onmouseover="showTip(event, 'fs105', 268)" class="i">value</span>, <span onmouseout="hideTip(event, 'fs102', 269)" onmouseover="showTip(event, 'fs102', 269)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 270)" onmouseover="showTip(event, 'fs94', 270)" class="f">GetType</span>(), <span onmouseout="hideTip(event, 'fs40', 271)" onmouseover="showTip(event, 'fs40', 271)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">b</span>

        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs102', 272)" onmouseover="showTip(event, 'fs102', 272)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs106', 273)" onmouseover="showTip(event, 'fs106', 273)" class="f">DynamicMapTo</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span> () <span class="o">=</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs84', 274)" onmouseover="showTip(event, 'fs84', 274)" class="f">isNull</span> <span onmouseout="hideTip(event, 'fs102', 275)" onmouseover="showTip(event, 'fs102', 275)" class="i">this</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs91', 276)" onmouseover="showTip(event, 'fs91', 276)" class="f">nullArg</span> <span class="s">&quot;this&quot;</span>
            <span onmouseout="hideTip(event, 'fs92', 277)" onmouseover="showTip(event, 'fs92', 277)" class="t">Mapper</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs107', 278)" onmouseover="showTip(event, 'fs107', 278)" class="f">DynamicMap</span>(<span onmouseout="hideTip(event, 'fs102', 279)" onmouseover="showTip(event, 'fs102', 279)" class="i">this</span>, <span onmouseout="hideTip(event, 'fs102', 280)" onmouseover="showTip(event, 'fs102', 280)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 281)" onmouseover="showTip(event, 'fs94', 281)" class="f">GetType</span>(), <span onmouseout="hideTip(event, 'fs40', 282)" onmouseover="showTip(event, 'fs40', 282)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">b</span><span class="o">&gt;</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">b</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace Microsoft</div>
<div class="tip" id="fs2">namespace Microsoft.FSharp</div>
<div class="tip" id="fs3">namespace Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs4">namespace System</div>
<div class="tip" id="fs5">namespace System.Linq</div>
<div class="tip" id="fs6">namespace System.Linq.Expressions</div>
<div class="tip" id="fs7">namespace Microsoft.FSharp.Linq</div>
<div class="tip" id="fs8">val private translateSimpleExpr : expr:Expr -&gt; Expression<br /><br />Full name: Microsoft.FSharp.Quotations.Expr.translateSimpleExpr<br /><em><br /><br />&#160;Translates simple F# quotation to LINQ expression<br />&#160;(the function supports only variables, property getters,<br />&#160;method calls and static method calls)</em></div>
<div class="tip" id="fs9">val expr : Expr</div>
<div class="tip" id="fs10">module Patterns<br /><br />from Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs11">active recognizer Var: Expr -&gt; Var option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Var|_| )</div>
<div class="tip" id="fs12">val var : Var</div>
<div class="tip" id="fs13">Multiple items<br />type Expression =<br />&#160;&#160;member CanReduce : bool<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Reduce : unit -&gt; Expression<br />&#160;&#160;member ReduceAndCheck : unit -&gt; Expression<br />&#160;&#160;member ReduceExtensions : unit -&gt; Expression<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member Add : left:Expression * right:Expression -&gt; BinaryExpression + 1 overload<br />&#160;&#160;static member AddAssign : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;static member AddAssignChecked : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;...<br /><br />Full name: System.Linq.Expressions.Expression<br /><br />--------------------<br />type Expression&lt;&#39;TDelegate&gt; =<br />&#160;&#160;inherit LambdaExpression<br />&#160;&#160;member Compile : unit -&gt; &#39;TDelegate + 1 overload<br />&#160;&#160;member Update : body:Expression * parameters:IEnumerable&lt;ParameterExpression&gt; -&gt; Expression&lt;&#39;TDelegate&gt;<br /><br />Full name: System.Linq.Expressions.Expression&lt;_&gt;</div>
<div class="tip" id="fs14">Expression.Variable(type: Type) : ParameterExpression<br />Expression.Variable(type: Type, name: string) : ParameterExpression</div>
<div class="tip" id="fs15">property Var.Type: Type</div>
<div class="tip" id="fs16">property Var.Name: string</div>
<div class="tip" id="fs17">active recognizer PropertyGet: Expr -&gt; (Expr option * Reflection.PropertyInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |PropertyGet|_| )</div>
<div class="tip" id="fs18">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs19">val inst : Expr</div>
<div class="tip" id="fs20">val pi : Reflection.PropertyInfo</div>
<div class="tip" id="fs21">val instExpr : Expression</div>
<div class="tip" id="fs22">Expression.Property(expression: Expression, propertyAccessor: Reflection.MethodInfo) : MemberExpression<br />Expression.Property(expression: Expression, property: Reflection.PropertyInfo) : MemberExpression<br />Expression.Property(expression: Expression, propertyName: string) : MemberExpression<br />Expression.Property(expression: Expression, type: Type, propertyName: string) : MemberExpression<br />Expression.Property(instance: Expression, indexer: Reflection.PropertyInfo, arguments: Collections.Generic.IEnumerable&lt;Expression&gt;) : IndexExpression<br />Expression.Property(instance: Expression, indexer: Reflection.PropertyInfo, [&lt;ParamArray&gt;] arguments: Expression []) : IndexExpression<br />Expression.Property(instance: Expression, propertyName: string, [&lt;ParamArray&gt;] arguments: Expression []) : IndexExpression</div>
<div class="tip" id="fs23">active recognizer Call: Expr -&gt; (Expr option * Reflection.MethodInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Call|_| )</div>
<div class="tip" id="fs24">val mi : Reflection.MethodInfo</div>
<div class="tip" id="fs25">val args : Expr list</div>
<div class="tip" id="fs26">val argsExpr : seq&lt;Expression&gt;</div>
<div class="tip" id="fs27">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs28">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs29">Expression.Call(instance: Expression, method: Reflection.MethodInfo) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, arguments: Collections.Generic.IEnumerable&lt;Expression&gt;) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, arg0: Expression) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, method: Reflection.MethodInfo, arguments: Collections.Generic.IEnumerable&lt;Expression&gt;) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, method: Reflection.MethodInfo, [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, arg0: Expression, arg1: Expression) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(type: Type, methodName: string, typeArguments: Type [], [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, methodName: string, typeArguments: Type [], [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, method: Reflection.MethodInfo, arg0: Expression, arg1: Expression) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>
<div class="tip" id="fs30">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs31">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs32">val ToAutoMapperGet : expr:Expr&lt;(&#39;a -&gt; &#39;b)&gt; -&gt; Expression&lt;Func&lt;&#39;a,obj&gt;&gt;<br /><br />Full name: Microsoft.FSharp.Quotations.Expr.ToAutoMapperGet</div>
<div class="tip" id="fs33">val expr : Expr&lt;(&#39;a -&gt; &#39;b)&gt;</div>
<div class="tip" id="fs34">Multiple items<br />type Expr =<br />&#160;&#160;override Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetFreeVars : unit -&gt; seq&lt;Var&gt;<br />&#160;&#160;member Substitute : substitution:(Var -&gt; Expr option) -&gt; Expr<br />&#160;&#160;member ToString : full:bool -&gt; string<br />&#160;&#160;member CustomAttributes : Expr list<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member AddressOf : target:Expr -&gt; Expr<br />&#160;&#160;static member AddressSet : target:Expr * value:Expr -&gt; Expr<br />&#160;&#160;static member Application : functionExpr:Expr * argument:Expr -&gt; Expr<br />&#160;&#160;static member Applications : functionExpr:Expr * arguments:Expr list list -&gt; Expr<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Quotations.Expr<br /><br />--------------------<br />type Expr&lt;&#39;T&gt; =<br />&#160;&#160;inherit Expr<br />&#160;&#160;member Raw : Expr<br /><br />Full name: Microsoft.FSharp.Quotations.Expr&lt;_&gt;</div>
<div class="tip" id="fs35">active recognizer Lambda: Expr -&gt; (Var * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Lambda|_| )</div>
<div class="tip" id="fs36">val v : Var</div>
<div class="tip" id="fs37">val body : Expr</div>
<div class="tip" id="fs38">val bodyExpr : UnaryExpression</div>
<div class="tip" id="fs39">Expression.Convert(expression: Expression, type: Type) : UnaryExpression<br />Expression.Convert(expression: Expression, type: Type, method: Reflection.MethodInfo) : UnaryExpression</div>
<div class="tip" id="fs40">val typeof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs41">type obj = Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs42">val paramExpr : ParameterExpression</div>
<div class="tip" id="fs43">Expression.Parameter(type: Type) : ParameterExpression<br />Expression.Parameter(type: Type, name: string) : ParameterExpression</div>
<div class="tip" id="fs44">Expression.Lambda(body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, name: string, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(delegateType: Type, body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(delegateType: Type, body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, tailCall: bool, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, tailCall: bool, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, name: string, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>
<div class="tip" id="fs45">Multiple items<br />type Func&lt;&#39;TResult&gt; =<br />&#160;&#160;delegate of unit -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;T16,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 * &#39;T16 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;</div>
<div class="tip" id="fs46">val ToFuncExpression : expr:Expr&lt;(&#39;a -&gt; &#39;b)&gt; -&gt; Expression&lt;Func&lt;&#39;a,&#39;b&gt;&gt;<br /><br />Full name: Microsoft.FSharp.Quotations.Expr.ToFuncExpression</div>
<div class="tip" id="fs47">val call : MethodCallExpression</div>
<div class="tip" id="fs48">type MethodCallExpression =<br />&#160;&#160;inherit Expression<br />&#160;&#160;member Arguments : ReadOnlyCollection&lt;Expression&gt;<br />&#160;&#160;member Method : MethodInfo<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Object : Expression<br />&#160;&#160;member Type : Type<br />&#160;&#160;member Update : object:Expression * arguments:IEnumerable&lt;Expression&gt; -&gt; MethodCallExpression<br /><br />Full name: System.Linq.Expressions.MethodCallExpression</div>
<div class="tip" id="fs49">val lambda : LambdaExpression</div>
<div class="tip" id="fs50">property MethodCallExpression.Arguments: Collections.ObjectModel.ReadOnlyCollection&lt;Expression&gt;</div>
<div class="tip" id="fs51">type LambdaExpression =<br />&#160;&#160;inherit Expression<br />&#160;&#160;member Body : Expression<br />&#160;&#160;member Compile : unit -&gt; Delegate + 1 overload<br />&#160;&#160;member CompileToMethod : method:MethodBuilder -&gt; unit + 1 overload<br />&#160;&#160;member Name : string<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Parameters : ReadOnlyCollection&lt;ParameterExpression&gt;<br />&#160;&#160;member ReturnType : Type<br />&#160;&#160;member TailCall : bool<br />&#160;&#160;member Type : Type<br /><br />Full name: System.Linq.Expressions.LambdaExpression</div>
<div class="tip" id="fs52">property LambdaExpression.Body: Expression</div>
<div class="tip" id="fs53">property LambdaExpression.Parameters: Collections.ObjectModel.ReadOnlyCollection&lt;ParameterExpression&gt;</div>
<div class="tip" id="fs54">namespace AutoMapper</div>
<div class="tip" id="fs55">val forMember : destMember:Expr&lt;(&#39;dest -&gt; &#39;mbr)&gt; -&gt; memberOpts:(IMemberConfigurationExpression&lt;&#39;source&gt; -&gt; unit) -&gt; map:IMappingExpression&lt;&#39;source,&#39;dest&gt; -&gt; IMappingExpression&lt;&#39;source,&#39;dest&gt;<br /><br />Full name: AutoMapper.AutoMap.forMember</div>
<div class="tip" id="fs56">val destMember : Expr&lt;(&#39;dest -&gt; &#39;mbr)&gt;</div>
<div class="tip" id="fs57">Multiple items<br />module Expr<br /><br />from Microsoft.FSharp.Quotations<br /><br />--------------------<br />type Expr =<br />&#160;&#160;override Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetFreeVars : unit -&gt; seq&lt;Var&gt;<br />&#160;&#160;member Substitute : substitution:(Var -&gt; Expr option) -&gt; Expr<br />&#160;&#160;member ToString : full:bool -&gt; string<br />&#160;&#160;member CustomAttributes : Expr list<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member AddressOf : target:Expr -&gt; Expr<br />&#160;&#160;static member AddressSet : target:Expr * value:Expr -&gt; Expr<br />&#160;&#160;static member Application : functionExpr:Expr * argument:Expr -&gt; Expr<br />&#160;&#160;static member Applications : functionExpr:Expr * arguments:Expr list list -&gt; Expr<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Quotations.Expr<br /><br />--------------------<br />type Expr&lt;&#39;T&gt; =<br />&#160;&#160;inherit Expr<br />&#160;&#160;member Raw : Expr<br /><br />Full name: Microsoft.FSharp.Quotations.Expr&lt;_&gt;</div>
<div class="tip" id="fs58">val memberOpts : (IMemberConfigurationExpression&lt;&#39;source&gt; -&gt; unit)</div>
<div class="tip" id="fs59">Multiple items<br />type IMemberConfigurationExpression =<br />&#160;&#160;member MapFrom : sourceMember:string -&gt; unit<br /><br />Full name: AutoMapper.IMemberConfigurationExpression<br /><br />--------------------<br />type IMemberConfigurationExpression&lt;&#39;TSource&gt; =<br />&#160;&#160;member Condition : condition:Func&lt;&#39;TSource, bool&gt; -&gt; unit + 1 overload<br />&#160;&#160;member DoNotUseDestinationValue : unit -&gt; unit<br />&#160;&#160;member ExplicitExpansion : unit -&gt; unit<br />&#160;&#160;member Ignore : unit -&gt; unit<br />&#160;&#160;member MapFrom&lt;&#39;TMember&gt; : sourceMember:Expression&lt;Func&lt;&#39;TSource, &#39;TMember&gt;&gt; -&gt; unit + 1 overload<br />&#160;&#160;member NullSubstitute : nullSubstitute:obj -&gt; unit<br />&#160;&#160;member PreCondition : condition:Func&lt;&#39;TSource, bool&gt; -&gt; unit + 1 overload<br />&#160;&#160;member ResolveUsing&lt;&#39;TValueResolver&gt; : unit -&gt; IResolverConfigurationExpression&lt;&#39;TSource, &#39;TValueResolver&gt; + 5 overloads<br />&#160;&#160;member SetMappingOrder : mappingOrder:int -&gt; unit<br />&#160;&#160;member UseDestinationValue : unit -&gt; unit<br />&#160;&#160;...<br /><br />Full name: AutoMapper.IMemberConfigurationExpression&lt;_&gt;</div>
<div class="tip" id="fs60">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs61">val map : IMappingExpression&lt;&#39;source,&#39;dest&gt;</div>
<div class="tip" id="fs62">Multiple items<br />type IMappingExpression =<br />&#160;&#160;member AfterMap&lt;&#39;TMappingAction&gt; : unit -&gt; IMappingExpression + 1 overload<br />&#160;&#160;member As : typeOverride:Type -&gt; unit<br />&#160;&#160;member BeforeMap&lt;&#39;TMappingAction&gt; : unit -&gt; IMappingExpression + 1 overload<br />&#160;&#160;member ConstructProjectionUsing : ctor:LambdaExpression -&gt; IMappingExpression<br />&#160;&#160;member ConstructUsing : ctor:Func&lt;ResolutionContext, obj&gt; -&gt; IMappingExpression + 1 overload<br />&#160;&#160;member ConstructUsingServiceLocator : unit -&gt; IMappingExpression<br />&#160;&#160;member ConvertUsing&lt;&#39;TTypeConverter&gt; : unit -&gt; unit + 1 overload<br />&#160;&#160;member ForAllMembers : memberOptions:Action&lt;IMemberConfigurationExpression&gt; -&gt; unit<br />&#160;&#160;member ForCtorParam : ctorParamName:string * paramOptions:Action&lt;ICtorParamConfigurationExpression&lt;obj&gt;&gt; -&gt; IMappingExpression<br />&#160;&#160;member ForMember : name:string * memberOptions:Action&lt;IMemberConfigurationExpression&gt; -&gt; IMappingExpression<br />&#160;&#160;...<br /><br />Full name: AutoMapper.IMappingExpression<br /><br />--------------------<br />type IMappingExpression&lt;&#39;TSource,&#39;TDestination&gt; =<br />&#160;&#160;member AfterMap&lt;&#39;TMappingAction&gt; : unit -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt; + 1 overload<br />&#160;&#160;member As&lt;&#39;T&gt; : unit -&gt; unit<br />&#160;&#160;member BeforeMap&lt;&#39;TMappingAction&gt; : unit -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt; + 1 overload<br />&#160;&#160;member ConstructProjectionUsing : ctor:Expression&lt;Func&lt;&#39;TSource, &#39;TDestination&gt;&gt; -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt;<br />&#160;&#160;member ConstructUsing : ctor:Func&lt;&#39;TSource, &#39;TDestination&gt; -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt; + 1 overload<br />&#160;&#160;member ConstructUsingServiceLocator : unit -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt;<br />&#160;&#160;member ConvertUsing&lt;&#39;TTypeConverter&gt; : unit -&gt; unit + 4 overloads<br />&#160;&#160;member ForAllMembers : memberOptions:Action&lt;IMemberConfigurationExpression&lt;&#39;TSource&gt;&gt; -&gt; unit<br />&#160;&#160;member ForCtorParam : ctorParamName:string * paramOptions:Action&lt;ICtorParamConfigurationExpression&lt;&#39;TSource&gt;&gt; -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt;<br />&#160;&#160;member ForMember : destinationMember:Expression&lt;Func&lt;&#39;TDestination, obj&gt;&gt; * memberOptions:Action&lt;IMemberConfigurationExpression&lt;&#39;TSource&gt;&gt; -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt; + 1 overload<br />&#160;&#160;...<br /><br />Full name: AutoMapper.IMappingExpression&lt;_,_&gt;</div>
<div class="tip" id="fs63">IMappingExpression.ForMember(name: string, memberOptions: Action&lt;IMemberConfigurationExpression&lt;&#39;source&gt;&gt;) : IMappingExpression&lt;&#39;source,&#39;dest&gt;<br />IMappingExpression.ForMember(destinationMember: Linq.Expressions.Expression&lt;Func&lt;&#39;dest,obj&gt;&gt;, memberOptions: Action&lt;IMemberConfigurationExpression&lt;&#39;source&gt;&gt;) : IMappingExpression&lt;&#39;source,&#39;dest&gt;</div>
<div class="tip" id="fs64">val ToAutoMapperGet : expr:Expr&lt;(&#39;a -&gt; &#39;b)&gt; -&gt; Linq.Expressions.Expression&lt;Func&lt;&#39;a,obj&gt;&gt;<br /><br />Full name: Microsoft.FSharp.Quotations.Expr.ToAutoMapperGet</div>
<div class="tip" id="fs65">val mapMember : destMember:Expr&lt;(&#39;a -&gt; &#39;b)&gt; -&gt; sourceMap:Expr&lt;(&#39;source -&gt; &#39;mapped)&gt; -&gt; (IMappingExpression&lt;&#39;source,&#39;a&gt; -&gt; IMappingExpression&lt;&#39;source,&#39;a&gt;)<br /><br />Full name: AutoMapper.AutoMap.mapMember</div>
<div class="tip" id="fs66">val destMember : Expr&lt;(&#39;a -&gt; &#39;b)&gt;</div>
<div class="tip" id="fs67">val sourceMap : Expr&lt;(&#39;source -&gt; &#39;mapped)&gt;</div>
<div class="tip" id="fs68">val o : IMemberConfigurationExpression&lt;&#39;source&gt;</div>
<div class="tip" id="fs69">IMemberConfigurationExpression.MapFrom&lt;&#39;TMember&gt;(property: string) : unit<br />IMemberConfigurationExpression.MapFrom&lt;&#39;TMember&gt;(sourceMember: Linq.Expressions.Expression&lt;Func&lt;&#39;source,&#39;TMember&gt;&gt;) : unit</div>
<div class="tip" id="fs70">val ToFuncExpression : expr:Expr&lt;(&#39;a -&gt; &#39;b)&gt; -&gt; Linq.Expressions.Expression&lt;Func&lt;&#39;a,&#39;b&gt;&gt;<br /><br />Full name: Microsoft.FSharp.Quotations.Expr.ToFuncExpression</div>
<div class="tip" id="fs71">val ignoreMember : destMember:Expr&lt;(&#39;a -&gt; &#39;b)&gt; -&gt; (IMappingExpression&lt;&#39;c,&#39;a&gt; -&gt; IMappingExpression&lt;&#39;c,&#39;a&gt;)<br /><br />Full name: AutoMapper.AutoMap.ignoreMember</div>
<div class="tip" id="fs72">val o : IMemberConfigurationExpression&lt;&#39;c&gt;</div>
<div class="tip" id="fs73">IMemberConfigurationExpression.Ignore() : unit</div>
<div class="tip" id="fs74">val forMemberName : destMember:string -&gt; memberOpts:(IMemberConfigurationExpression&lt;&#39;source&gt; -&gt; unit) -&gt; map:IMappingExpression&lt;&#39;source,&#39;dest&gt; -&gt; IMappingExpression&lt;&#39;source,&#39;dest&gt;<br /><br />Full name: AutoMapper.AutoMap.forMemberName</div>
<div class="tip" id="fs75">val destMember : string</div>
<div class="tip" id="fs76">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs77">val mapMemberName : destMember:string -&gt; sourceMap:Expr&lt;(&#39;source -&gt; &#39;mapped)&gt; -&gt; (IMappingExpression&lt;&#39;source,&#39;a&gt; -&gt; IMappingExpression&lt;&#39;source,&#39;a&gt;)<br /><br />Full name: AutoMapper.AutoMap.mapMemberName</div>
<div class="tip" id="fs78">val ignoreMemberName : destMember:string -&gt; (IMappingExpression&lt;&#39;a,&#39;b&gt; -&gt; IMappingExpression&lt;&#39;a,&#39;b&gt;)<br /><br />Full name: AutoMapper.AutoMap.ignoreMemberName</div>
<div class="tip" id="fs79">val o : IMemberConfigurationExpression&lt;&#39;a&gt;</div>
<div class="tip" id="fs80">Multiple items<br />type AutoOpenAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; AutoOpenAttribute<br />&#160;&#160;new : path:string -&gt; AutoOpenAttribute<br />&#160;&#160;member Path : string<br /><br />Full name: Microsoft.FSharp.Core.AutoOpenAttribute<br /><br />--------------------<br />new : unit -&gt; AutoOpenAttribute<br />new : path:string -&gt; AutoOpenAttribute</div>
<div class="tip" id="fs81">module AutoMapperExtensions<br /><br />from AutoMapper</div>
<div class="tip" id="fs82">namespace System.Collections</div>
<div class="tip" id="fs83">namespace System.Collections.Generic</div>
<div class="tip" id="fs84">val isNull : x:&#39;a -&gt; bool<br /><br />Full name: AutoMapper.AutoMapperExtensions.isNull</div>
<div class="tip" id="fs85">val x : &#39;a</div>
<div class="tip" id="fs86">Multiple items<br />type Object =<br />&#160;&#160;new : unit -&gt; obj<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetType : unit -&gt; Type<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;static member Equals : objA:obj * objB:obj -&gt; bool<br />&#160;&#160;static member ReferenceEquals : objA:obj * objB:obj -&gt; bool<br /><br />Full name: System.Object<br /><br />--------------------<br />Object() : unit</div>
<div class="tip" id="fs87">Object.ReferenceEquals(objA: obj, objB: obj) : bool</div>
<div class="tip" id="fs88">type IList&lt;&#39;T&gt; =<br />&#160;&#160;member IndexOf : item:&#39;T -&gt; int<br />&#160;&#160;member Insert : index:int * item:&#39;T -&gt; unit<br />&#160;&#160;member Item : int -&gt; &#39;T with get, set<br />&#160;&#160;member RemoveAt : index:int -&gt; unit<br /><br />Full name: System.Collections.Generic.IList&lt;_&gt;</div>
<div class="tip" id="fs89">val this : IList&lt;&#39;T&gt;</div>
<div class="tip" id="fs90">Multiple items<br />member IList.MapTo : unit -&gt; IList&lt;&#39;b&gt;<br /><br />Full name: AutoMapper.AutoMapperExtensions.MapTo<br /><br />--------------------<br />type MapToAttribute =<br />&#160;&#160;inherit SourceToDestinationMapperAttribute<br />&#160;&#160;new : matchingName:string -&gt; MapToAttribute<br />&#160;&#160;member IsMatch : typeInfo:TypeDetails * memberInfo:MemberInfo * destType:Type * nameToSearch:string -&gt; bool<br />&#160;&#160;member MatchingName : string<br /><br />Full name: AutoMapper.MapToAttribute<br /><br />--------------------<br />MapToAttribute(matchingName: string) : unit</div>
<div class="tip" id="fs91">val nullArg : argumentName:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.nullArg</div>
<div class="tip" id="fs92">type Mapper =<br />&#160;&#160;static member AddGlobalIgnore : startingwith:string -&gt; unit<br />&#160;&#160;static member AddProfile&lt;&#39;TProfile&gt; : unit -&gt; unit + 1 overload<br />&#160;&#160;static member AllowNullDestinationValues : bool with get, set<br />&#160;&#160;static member AssertConfigurationIsValid : unit -&gt; unit + 3 overloads<br />&#160;&#160;static member Configuration : IConfiguration<br />&#160;&#160;static member CreateMap&lt;&#39;TSource, &#39;TDestination&gt; : unit -&gt; IMappingExpression&lt;&#39;TSource, &#39;TDestination&gt; + 3 overloads<br />&#160;&#160;static member CreateProfile : profileName:string -&gt; IProfileExpression + 1 overload<br />&#160;&#160;static member DynamicMap&lt;&#39;TSource, &#39;TDestination&gt; : source:&#39;TSource -&gt; &#39;TDestination + 4 overloads<br />&#160;&#160;static member Engine : IMappingEngine<br />&#160;&#160;static member FindTypeMapFor&lt;&#39;TSource, &#39;TDestination&gt; : unit -&gt; TypeMap + 1 overload<br />&#160;&#160;...<br /><br />Full name: AutoMapper.Mapper</div>
<div class="tip" id="fs93">Mapper.Map&lt;&#39;TSource,&#39;TDestination&gt;(source: &#39;TSource) : &#39;TDestination<br />Mapper.Map&lt;&#39;TDestination&gt;(source: obj) : &#39;TDestination<br />Mapper.Map&lt;&#39;TSource,&#39;TDestination&gt;(source: &#39;TSource, opts: Action&lt;IMappingOperationOptions&lt;&#39;TSource,&#39;TDestination&gt;&gt;) : &#39;TDestination<br />Mapper.Map&lt;&#39;TSource,&#39;TDestination&gt;(source: &#39;TSource, destination: &#39;TDestination) : &#39;TDestination<br />Mapper.Map&lt;&#39;TDestination&gt;(source: obj, opts: Action&lt;IMappingOperationOptions&gt;) : &#39;TDestination<br />Mapper.Map(source: obj, sourceType: Type, destinationType: Type) : obj<br />Mapper.Map&lt;&#39;TSource,&#39;TDestination&gt;(source: &#39;TSource, destination: &#39;TDestination, opts: Action&lt;IMappingOperationOptions&lt;&#39;TSource,&#39;TDestination&gt;&gt;) : &#39;TDestination<br />Mapper.Map(source: obj, destination: obj, sourceType: Type, destinationType: Type) : obj<br />Mapper.Map(source: obj, sourceType: Type, destinationType: Type, opts: Action&lt;IMappingOperationOptions&gt;) : obj<br />Mapper.Map(source: obj, destination: obj, sourceType: Type, destinationType: Type, opts: Action&lt;IMappingOperationOptions&gt;) : obj</div>
<div class="tip" id="fs94">Object.GetType() : Type</div>
<div class="tip" id="fs95">type ResizeArray&lt;&#39;T&gt; = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.ResizeArray&lt;_&gt;</div>
<div class="tip" id="fs96">type IEnumerable&lt;&#39;T&gt; =<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;&#39;T&gt;<br /><br />Full name: System.Collections.Generic.IEnumerable&lt;_&gt;</div>
<div class="tip" id="fs97">val this : IEnumerable&lt;&#39;T&gt;</div>
<div class="tip" id="fs98">Multiple items<br />member IEnumerable.MapTo : unit -&gt; IEnumerable&lt;&#39;b&gt;<br /><br />Full name: AutoMapper.AutoMapperExtensions.MapTo<br /><br />--------------------<br />type MapToAttribute =<br />&#160;&#160;inherit SourceToDestinationMapperAttribute<br />&#160;&#160;new : matchingName:string -&gt; MapToAttribute<br />&#160;&#160;member IsMatch : typeInfo:TypeDetails * memberInfo:MemberInfo * destType:Type * nameToSearch:string -&gt; bool<br />&#160;&#160;member MatchingName : string<br /><br />Full name: AutoMapper.MapToAttribute<br /><br />--------------------<br />MapToAttribute(matchingName: string) : unit</div>
<div class="tip" id="fs99">type IEnumerable =<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator<br /><br />Full name: System.Collections.IEnumerable</div>
<div class="tip" id="fs100">val this : Collections.IEnumerable</div>
<div class="tip" id="fs101">Multiple items<br />member Collections.IEnumerable.MapTo : unit -&gt; IEnumerable&lt;&#39;b&gt;<br /><br />Full name: AutoMapper.AutoMapperExtensions.MapTo<br /><br />--------------------<br />type MapToAttribute =<br />&#160;&#160;inherit SourceToDestinationMapperAttribute<br />&#160;&#160;new : matchingName:string -&gt; MapToAttribute<br />&#160;&#160;member IsMatch : typeInfo:TypeDetails * memberInfo:MemberInfo * destType:Type * nameToSearch:string -&gt; bool<br />&#160;&#160;member MatchingName : string<br /><br />Full name: AutoMapper.MapToAttribute<br /><br />--------------------<br />MapToAttribute(matchingName: string) : unit</div>
<div class="tip" id="fs102">val this : Object</div>
<div class="tip" id="fs103">Multiple items<br />member Object.MapTo : unit -&gt; &#39;b<br /><br />Full name: AutoMapper.AutoMapperExtensions.MapTo<br /><br />--------------------<br />type MapToAttribute =<br />&#160;&#160;inherit SourceToDestinationMapperAttribute<br />&#160;&#160;new : matchingName:string -&gt; MapToAttribute<br />&#160;&#160;member IsMatch : typeInfo:TypeDetails * memberInfo:MemberInfo * destType:Type * nameToSearch:string -&gt; bool<br />&#160;&#160;member MatchingName : string<br /><br />Full name: AutoMapper.MapToAttribute<br /><br />--------------------<br />MapToAttribute(matchingName: string) : unit</div>
<div class="tip" id="fs104">member Object.MapPropertiesToInstance : value:&#39;b -&gt; &#39;b<br /><br />Full name: AutoMapper.AutoMapperExtensions.MapPropertiesToInstance</div>
<div class="tip" id="fs105">val value : &#39;b</div>
<div class="tip" id="fs106">member Object.DynamicMapTo : unit -&gt; &#39;b<br /><br />Full name: AutoMapper.AutoMapperExtensions.DynamicMapTo</div>
<div class="tip" id="fs107">Mapper.DynamicMap&lt;&#39;TDestination&gt;(source: obj) : &#39;TDestination<br />Mapper.DynamicMap&lt;&#39;TSource,&#39;TDestination&gt;(source: &#39;TSource) : &#39;TDestination<br />Mapper.DynamicMap&lt;&#39;TSource,&#39;TDestination&gt;(source: &#39;TSource, destination: &#39;TDestination) : unit<br />Mapper.DynamicMap(source: obj, sourceType: Type, destinationType: Type) : obj<br />Mapper.DynamicMap(source: obj, destination: obj, sourceType: Type, destinationType: Type) : unit</div>

