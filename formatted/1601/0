<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// ============================================================================</span>
<span class="c">// PART 1: Primitive types, expressions and calculating</span>
<span class="c">// ============================================================================</span>

<span class="c">// Some setup for the scripts below - this can be ignored :-)</span>
<span class="k">let</span> <span class="i">__</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">failwith</span> <span class="s">&quot;!&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">a</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">b</span> <span class="o">=</span> <span class="k">if</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="f">not</span> (<span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">b</span>) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="f">failwith</span> <span class="s">&quot;Failed!&quot;</span>

<span class="c">// ----------------------------------------------------------------------------</span>
<span class="c">// WALKTHROUGH: Primitive types and type inference</span>
<span class="c">// ----------------------------------------------------------------------------</span>

<span class="c">// In this script, you&#39;re going to walk through the basic F# concepts.</span>
<span class="c">// The snippets in the file are written as simple tests - you need to </span>
<span class="c">// fill in the missing pieces and then you can run the snippet to check</span>
<span class="c">// whether it works correctly. Start by selecting the following two lines</span>
<span class="c">// and sending them to F# Interactive (using Alt+Enter in Visual Studio</span>
<span class="c">// or using right click - Send to F# Interactive).</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">answer</span> <span class="o">=</span> <span class="n">42</span>
<span onmouseout="hideTip(event, 'fs2', 10)" onmouseover="showTip(event, 'fs2', 10)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="i">answer</span> <span class="n">42</span>


<span class="c">// Now try running a snippet with a placeholder &quot;__&quot; and then fill the</span>
<span class="c">// placeholder with the correct answer and run the snippet again.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 12)" onmouseover="showTip(event, 'fs7', 12)" class="i">demo</span> <span class="o">=</span> <span class="n">21</span> <span class="o">*</span> <span class="n">2</span>
<span onmouseout="hideTip(event, 'fs2', 13)" onmouseover="showTip(event, 'fs2', 13)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs6', 14)" onmouseover="showTip(event, 'fs6', 14)" class="i">answer</span> <span onmouseout="hideTip(event, 'fs8', 15)" onmouseover="showTip(event, 'fs8', 15)" class="i">__</span>


<span class="c">// F# uses type inference and so all variables have a static type </span>
<span class="c">// (see this by putting mouse pointer over the identifier). There</span>
<span class="c">// are two basic numeric types:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="i">integers</span> <span class="o">=</span> <span class="n">32</span> <span class="o">+</span> <span class="n">10</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="i">floats</span> <span class="o">=</span> <span class="n">31.5</span> <span class="o">+</span> <span class="n">10.5</span>

<span onmouseout="hideTip(event, 'fs2', 18)" onmouseover="showTip(event, 'fs2', 18)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs9', 19)" onmouseover="showTip(event, 'fs9', 19)" class="i">integers</span> <span onmouseout="hideTip(event, 'fs8', 20)" onmouseover="showTip(event, 'fs8', 20)" class="i">__</span>
<span onmouseout="hideTip(event, 'fs2', 21)" onmouseover="showTip(event, 'fs2', 21)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs10', 22)" onmouseover="showTip(event, 'fs10', 22)" class="i">floats</span> <span onmouseout="hideTip(event, 'fs8', 23)" onmouseover="showTip(event, 'fs8', 23)" class="i">__</span>


<span class="c">// You can use standard logical operations when working with numbers:</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 24)" onmouseover="showTip(event, 'fs11', 24)" class="i">high</span> <span class="o">=</span> <span class="n">100.0</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 25)" onmouseover="showTip(event, 'fs12', 25)" class="i">low</span> <span class="o">=</span> <span class="n">50.0</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 26)" onmouseover="showTip(event, 'fs13', 26)" class="i">check1</span> <span class="o">=</span> <span class="n">75.0</span> <span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs12', 27)" onmouseover="showTip(event, 'fs12', 27)" class="i">low</span> <span class="o">&amp;&amp;</span> <span class="n">75.0</span> <span class="o">&lt;</span> <span onmouseout="hideTip(event, 'fs11', 28)" onmouseover="showTip(event, 'fs11', 28)" class="i">high</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 29)" onmouseover="showTip(event, 'fs14', 29)" class="i">check2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 30)" onmouseover="showTip(event, 'fs8', 30)" class="i">__</span> <span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs12', 31)" onmouseover="showTip(event, 'fs12', 31)" class="i">low</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs8', 32)" onmouseover="showTip(event, 'fs8', 32)" class="i">__</span> <span class="o">&lt;</span> <span onmouseout="hideTip(event, 'fs11', 33)" onmouseover="showTip(event, 'fs11', 33)" class="i">high</span>

<span onmouseout="hideTip(event, 'fs2', 34)" onmouseover="showTip(event, 'fs2', 34)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs13', 35)" onmouseover="showTip(event, 'fs13', 35)" class="i">check1</span> <span class="k">true</span>
<span onmouseout="hideTip(event, 'fs2', 36)" onmouseover="showTip(event, 'fs2', 36)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs14', 37)" onmouseover="showTip(event, 'fs14', 37)" class="i">check2</span> <span class="k">false</span>

<span class="c">// ----------------------------------------------------------------------------</span>
<span class="c">// WALKTHROUGH: Calling .NET objects and mutation</span>
<span class="c">// ----------------------------------------------------------------------------</span>

<span class="c">// F# gives you full access to the .NET ecosystem. This means that you</span>
<span class="c">// can access all standard .NET libraries such as System.Random (here,</span>
<span class="c">// fill the rest of the condition so that the snippet always works!)</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs15', 38)" onmouseover="showTip(event, 'fs15', 38)" class="i">System</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs16', 39)" onmouseover="showTip(event, 'fs16', 39)" class="i">rnd</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs17', 40)" onmouseover="showTip(event, 'fs17', 40)" class="t">Random</span>()
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 41)" onmouseover="showTip(event, 'fs18', 41)" class="i">num</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 42)" onmouseover="showTip(event, 'fs16', 42)" class="i">rnd</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 43)" onmouseover="showTip(event, 'fs19', 43)" class="f">Next</span>(<span class="n">4</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 44)" onmouseover="showTip(event, 'fs20', 44)" class="i">rndCheck</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 45)" onmouseover="showTip(event, 'fs18', 45)" class="i">num</span> <span class="o">=</span> <span class="n">0</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs18', 46)" onmouseover="showTip(event, 'fs18', 46)" class="i">num</span> <span class="o">=</span> <span class="n">1</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs8', 47)" onmouseover="showTip(event, 'fs8', 47)" class="i">__</span>

<span onmouseout="hideTip(event, 'fs2', 48)" onmouseover="showTip(event, 'fs2', 48)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs20', 49)" onmouseover="showTip(event, 'fs20', 49)" class="i">rndCheck</span> <span class="k">true</span>


<span class="c">// All variables that we defined before (like &#39;num&#39;) become accessible</span>
<span class="c">// in the subsequent code. To avoid this, we can use &#39;do&#39; blocks for</span>
<span class="c">// snippets. Select and run the following block as a whole (including</span>
<span class="c">// the &#39;do&#39; keyword)</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 50)" onmouseover="showTip(event, 'fs21', 50)" class="i">demo</span> <span class="o">=</span> <span class="n">1</span>
  <span onmouseout="hideTip(event, 'fs2', 51)" onmouseover="showTip(event, 'fs2', 51)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs21', 52)" onmouseover="showTip(event, 'fs21', 52)" class="i">demo</span> <span class="n">1</span>


<span class="c">// By default, F# values are immutable, but you can mark them as mutable.</span>
<span class="c">// Try removing the &#39;mutable&#39; keyword and see what happens!</span>
<span class="k">do</span>
  <span class="k">let</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs22', 53)" onmouseover="showTip(event, 'fs22', 53)" class="v">message1</span> <span class="o">=</span> <span class="s">&quot;Hello &quot;</span>
  <span onmouseout="hideTip(event, 'fs22', 54)" onmouseover="showTip(event, 'fs22', 54)" class="v">message1</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs22', 55)" onmouseover="showTip(event, 'fs22', 55)" class="v">message1</span> <span class="o">+</span> <span class="s">&quot;world!&quot;</span>
  <span onmouseout="hideTip(event, 'fs22', 56)" onmouseover="showTip(event, 'fs22', 56)" class="v">message1</span> <span class="o">&lt;-</span> <span onmouseout="hideTip(event, 'fs22', 57)" onmouseover="showTip(event, 'fs22', 57)" class="v">message1</span> <span class="o">+</span> <span class="s">&quot; How are you?&quot;</span>

  <span onmouseout="hideTip(event, 'fs2', 58)" onmouseover="showTip(event, 'fs2', 58)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs22', 59)" onmouseover="showTip(event, 'fs22', 59)" class="v">message1</span> <span onmouseout="hideTip(event, 'fs8', 60)" onmouseover="showTip(event, 'fs8', 60)" class="i">__</span>


<span class="c">// F# also supports &quot;variable shadowing&quot;. When you define variable with the</span>
<span class="c">// same name as one already defined, the previous value is hidden (this only</span>
<span class="c">// works inside local scope, so run the following with the &#39;do&#39; block!)</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 61)" onmouseover="showTip(event, 'fs23', 61)" class="i">message</span> <span class="o">=</span> <span class="s">&quot;Hello &quot;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 62)" onmouseover="showTip(event, 'fs23', 62)" class="i">message</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 63)" onmouseover="showTip(event, 'fs23', 63)" class="i">message</span> <span class="o">+</span> <span class="s">&quot;world!&quot;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 64)" onmouseover="showTip(event, 'fs23', 64)" class="i">message</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 65)" onmouseover="showTip(event, 'fs8', 65)" class="i">__</span>

  <span onmouseout="hideTip(event, 'fs2', 66)" onmouseover="showTip(event, 'fs2', 66)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs23', 67)" onmouseover="showTip(event, 'fs23', 67)" class="i">message</span> <span class="s">&quot;Hello world! I&#39;m good!&quot;</span>

<span class="c">// ----------------------------------------------------------------------------</span>
<span class="c">// WALKTHROUGH: Writing and calling functions</span>
<span class="c">// ----------------------------------------------------------------------------</span>

<span class="c">// The &#39;let&#39; keyword is not only used for defining variables, but also for</span>
<span class="c">// defining functions. In &#39;let f x = ...&#39; the identifier &#39;f&#39; is the name</span>
<span class="c">// of the function and &#39;x&#39; is the argument of the function.</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 68)" onmouseover="showTip(event, 'fs24', 68)" class="f">twoTimes</span> <span onmouseout="hideTip(event, 'fs25', 69)" onmouseover="showTip(event, 'fs25', 69)" class="i">num</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs25', 70)" onmouseover="showTip(event, 'fs25', 70)" class="i">num</span> <span class="o">*</span> <span class="n">2</span>

  <span onmouseout="hideTip(event, 'fs2', 71)" onmouseover="showTip(event, 'fs2', 71)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs24', 72)" onmouseover="showTip(event, 'fs24', 72)" class="f">twoTimes</span> <span class="n">21</span>) <span onmouseout="hideTip(event, 'fs8', 73)" onmouseover="showTip(event, 'fs8', 73)" class="i">__</span>

<span class="c">// Note that the type of the function is inferred. In the previous example,</span>
<span class="c">// the function body used &#39;2&#39; and so it is a function &#39;int -&gt; int&#39; (you can</span>
<span class="c">// see that in the tool tips). F# is indentation-sensitive, so you do not need </span>
<span class="c">// to write brackets, but the body of the function needs to be indented further.</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 74)" onmouseover="showTip(event, 'fs26', 74)" class="f">twoTimesFloat</span> <span onmouseout="hideTip(event, 'fs27', 75)" onmouseover="showTip(event, 'fs27', 75)" class="i">num</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs8', 76)" onmouseover="showTip(event, 'fs8', 76)" class="i">__</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs28', 77)" onmouseover="showTip(event, 'fs28', 77)" class="f">twoTimesString</span> <span onmouseout="hideTip(event, 'fs29', 78)" onmouseover="showTip(event, 'fs29', 78)" class="i">str</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs8', 79)" onmouseover="showTip(event, 'fs8', 79)" class="i">__</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs8', 80)" onmouseover="showTip(event, 'fs8', 80)" class="i">__</span>

  <span onmouseout="hideTip(event, 'fs2', 81)" onmouseover="showTip(event, 'fs2', 81)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs26', 82)" onmouseover="showTip(event, 'fs26', 82)" class="f">twoTimesFloat</span> <span class="n">21.0</span>) <span class="n">42.0</span>
  <span onmouseout="hideTip(event, 'fs2', 83)" onmouseover="showTip(event, 'fs2', 83)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs28', 84)" onmouseover="showTip(event, 'fs28', 84)" class="f">twoTimesString</span> <span class="s">&quot;Hi&quot;</span>) <span class="s">&quot;Hi Hi&quot;</span>

<span class="c">// When writing functions of multiple arguments, the arguments are separated</span>
<span class="c">// by spaces. This is both in the declaration and when calling the function.</span>
<span class="c">// However, you need parentheses when the argument is a more complex expression.</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 85)" onmouseover="showTip(event, 'fs30', 85)" class="f">add</span> <span onmouseout="hideTip(event, 'fs31', 86)" onmouseover="showTip(event, 'fs31', 86)" class="i">a</span> <span onmouseout="hideTip(event, 'fs32', 87)" onmouseover="showTip(event, 'fs32', 87)" class="i">b</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs31', 88)" onmouseover="showTip(event, 'fs31', 88)" class="i">a</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs32', 89)" onmouseover="showTip(event, 'fs32', 89)" class="i">b</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 90)" onmouseover="showTip(event, 'fs33', 90)" class="f">mul</span> <span onmouseout="hideTip(event, 'fs31', 91)" onmouseover="showTip(event, 'fs31', 91)" class="i">a</span> <span onmouseout="hideTip(event, 'fs32', 92)" onmouseover="showTip(event, 'fs32', 92)" class="i">b</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs31', 93)" onmouseover="showTip(event, 'fs31', 93)" class="i">a</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs32', 94)" onmouseover="showTip(event, 'fs32', 94)" class="i">b</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 95)" onmouseover="showTip(event, 'fs34', 95)" class="i">r1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs33', 96)" onmouseover="showTip(event, 'fs33', 96)" class="f">mul</span> (<span onmouseout="hideTip(event, 'fs30', 97)" onmouseover="showTip(event, 'fs30', 97)" class="f">add</span> <span class="n">3</span> <span class="n">4</span>) (<span onmouseout="hideTip(event, 'fs33', 98)" onmouseover="showTip(event, 'fs33', 98)" class="f">mul</span> <span class="n">2</span> <span class="n">3</span>)
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 99)" onmouseover="showTip(event, 'fs35', 99)" class="i">r2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 100)" onmouseover="showTip(event, 'fs30', 100)" class="f">add</span> (<span onmouseout="hideTip(event, 'fs33', 101)" onmouseover="showTip(event, 'fs33', 101)" class="f">mul</span> <span class="n">3</span> (<span onmouseout="hideTip(event, 'fs30', 102)" onmouseover="showTip(event, 'fs30', 102)" class="f">add</span> <span class="n">4</span> <span class="n">3</span>)) <span class="n">21</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 103)" onmouseover="showTip(event, 'fs36', 103)" class="i">r3</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 104)" onmouseover="showTip(event, 'fs30', 104)" class="f">add</span> (<span onmouseout="hideTip(event, 'fs16', 105)" onmouseover="showTip(event, 'fs16', 105)" class="i">rnd</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 106)" onmouseover="showTip(event, 'fs19', 106)" class="f">Next</span>(<span class="n">2</span>)) <span class="n">41</span>
  <span onmouseout="hideTip(event, 'fs2', 107)" onmouseover="showTip(event, 'fs2', 107)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs34', 108)" onmouseover="showTip(event, 'fs34', 108)" class="i">r1</span> <span onmouseout="hideTip(event, 'fs8', 109)" onmouseover="showTip(event, 'fs8', 109)" class="i">__</span>
  <span onmouseout="hideTip(event, 'fs2', 110)" onmouseover="showTip(event, 'fs2', 110)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs35', 111)" onmouseover="showTip(event, 'fs35', 111)" class="i">r2</span> <span onmouseout="hideTip(event, 'fs8', 112)" onmouseover="showTip(event, 'fs8', 112)" class="i">__</span>
  <span onmouseout="hideTip(event, 'fs2', 113)" onmouseover="showTip(event, 'fs2', 113)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs36', 114)" onmouseover="showTip(event, 'fs36', 114)" class="i">r3</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 115)" onmouseover="showTip(event, 'fs8', 115)" class="i">__</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs36', 116)" onmouseover="showTip(event, 'fs36', 116)" class="i">r3</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 117)" onmouseover="showTip(event, 'fs8', 117)" class="i">__</span>) <span class="k">true</span>

<span class="c">// For the task at the end, you also need to know how to </span>
<span class="c">// calculate exponentials using F# -- use the ** operator!</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 118)" onmouseover="showTip(event, 'fs37', 118)" class="i">exp</span> <span class="o">=</span> <span class="n">2.0</span> <span class="o">**</span> <span class="n">5.0</span>
  <span onmouseout="hideTip(event, 'fs2', 119)" onmouseover="showTip(event, 'fs2', 119)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs37', 120)" onmouseover="showTip(event, 'fs37', 120)" class="i">exp</span> <span class="n">32.0</span>

<span class="c">// ============================================================================</span>
<span class="c">// TASK #1: Calculating compound interest</span>
<span class="c">// ============================================================================</span>

<span class="c">// As an example, calculate compound interest formula. That is,</span>
<span class="c">// when borrowing money, the interest is added to the total sum</span>
<span class="c">// and the next interest is calculated from the borrowed money,</span>
<span class="c">// *including* the added interest.</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 121)" onmouseover="showTip(event, 'fs38', 121)" class="i">interest</span> <span class="o">=</span> <span class="n">0.02</span>     <span class="c">// Interest rate is 2%</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 122)" onmouseover="showTip(event, 'fs39', 122)" class="i">periods</span> <span class="o">=</span> <span class="n">12.0</span>      <span class="c">// Number of times the interest is compounded per year</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 123)" onmouseover="showTip(event, 'fs40', 123)" class="i">years</span> <span class="o">=</span> <span class="n">10.0</span>        <span class="c">// Number of years the money is borrowed for</span>

<span class="c">// Calculate compound interest using the formula from:</span>
<span class="c">// http://en.wikipedia.org/wiki/Compound_interest#Compound_Interest</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 124)" onmouseover="showTip(event, 'fs41', 124)" class="f">compound</span> <span onmouseout="hideTip(event, 'fs42', 125)" onmouseover="showTip(event, 'fs42', 125)" class="i">investment</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs8', 126)" onmouseover="showTip(event, 'fs8', 126)" class="i">__</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 127)" onmouseover="showTip(event, 'fs43', 127)" class="i">res</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs41', 128)" onmouseover="showTip(event, 'fs41', 128)" class="f">compound</span> <span class="n">1000.0</span>
<span onmouseout="hideTip(event, 'fs2', 129)" onmouseover="showTip(event, 'fs2', 129)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs44', 130)" onmouseover="showTip(event, 'fs44', 130)" class="f">round</span> <span onmouseout="hideTip(event, 'fs43', 131)" onmouseover="showTip(event, 'fs43', 131)" class="i">res</span>) <span class="n">1221.0</span>

<span onmouseout="hideTip(event, 'fs45', 132)" onmouseover="showTip(event, 'fs45', 132)" class="f">printfn</span> <span class="s">&quot;Compound interest (full): </span><span class="pf">%f</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs43', 133)" onmouseover="showTip(event, 'fs43', 133)" class="i">res</span>
<span onmouseout="hideTip(event, 'fs45', 134)" onmouseover="showTip(event, 'fs45', 134)" class="f">printfn</span> <span class="s">&quot;Compound interest (two digits): </span><span class="pf">%.2f</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs43', 135)" onmouseover="showTip(event, 'fs43', 135)" class="i">res</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs2">val shouldEqual : a:&#39;a -&gt; b:&#39;a -&gt; unit (requires equality)<br /><br />Full name: Script.shouldEqual</div>
<div class="tip" id="fs3">val a : &#39;a (requires equality)</div>
<div class="tip" id="fs4">val b : &#39;a (requires equality)</div>
<div class="tip" id="fs5">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs6">val answer : int<br /><br />Full name: Script.answer</div>
<div class="tip" id="fs7">val demo : int<br /><br />Full name: Script.demo</div>
<div class="tip" id="fs8">val __&lt;&#39;T&gt; : &#39;T<br /><br />Full name: Script.__</div>
<div class="tip" id="fs9">val integers : int<br /><br />Full name: Script.integers</div>
<div class="tip" id="fs10">val floats : float<br /><br />Full name: Script.floats</div>
<div class="tip" id="fs11">val high : float<br /><br />Full name: Script.high</div>
<div class="tip" id="fs12">val low : float<br /><br />Full name: Script.low</div>
<div class="tip" id="fs13">val check1 : bool<br /><br />Full name: Script.check1</div>
<div class="tip" id="fs14">val check2 : bool<br /><br />Full name: Script.check2</div>
<div class="tip" id="fs15">namespace System</div>
<div class="tip" id="fs16">val rnd : Random<br /><br />Full name: Script.rnd</div>
<div class="tip" id="fs17">Multiple items<br />type Random =<br />&#160;&#160;new : unit -&gt; Random + 1 overload<br />&#160;&#160;member Next : unit -&gt; int + 2 overloads<br />&#160;&#160;member NextBytes : buffer:byte[] -&gt; unit<br />&#160;&#160;member NextDouble : unit -&gt; float<br /><br />Full name: System.Random<br /><br />--------------------<br />Random() : unit<br />Random(Seed: int) : unit</div>
<div class="tip" id="fs18">val num : int<br /><br />Full name: Script.num</div>
<div class="tip" id="fs19">Random.Next() : int<br />Random.Next(maxValue: int) : int<br />Random.Next(minValue: int, maxValue: int) : int</div>
<div class="tip" id="fs20">val rndCheck : bool<br /><br />Full name: Script.rndCheck</div>
<div class="tip" id="fs21">val demo : int</div>
<div class="tip" id="fs22">val mutable message1 : string</div>
<div class="tip" id="fs23">val message : string</div>
<div class="tip" id="fs24">val twoTimes : (int -&gt; int)</div>
<div class="tip" id="fs25">val num : int</div>
<div class="tip" id="fs26">val twoTimesFloat : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs27">val num : &#39;a</div>
<div class="tip" id="fs28">val twoTimesString : (&#39;a -&gt; string)</div>
<div class="tip" id="fs29">val str : &#39;a</div>
<div class="tip" id="fs30">val add : (int -&gt; int -&gt; int)</div>
<div class="tip" id="fs31">val a : int</div>
<div class="tip" id="fs32">val b : int</div>
<div class="tip" id="fs33">val mul : (int -&gt; int -&gt; int)</div>
<div class="tip" id="fs34">val r1 : int</div>
<div class="tip" id="fs35">val r2 : int</div>
<div class="tip" id="fs36">val r3 : int</div>
<div class="tip" id="fs37">val exp : float</div>
<div class="tip" id="fs38">val interest : float<br /><br />Full name: Script.interest</div>
<div class="tip" id="fs39">val periods : float<br /><br />Full name: Script.periods</div>
<div class="tip" id="fs40">val years : float<br /><br />Full name: Script.years</div>
<div class="tip" id="fs41">val compound : investment:&#39;a -&gt; &#39;b<br /><br />Full name: Script.compound</div>
<div class="tip" id="fs42">val investment : &#39;a</div>
<div class="tip" id="fs43">val res : float<br /><br />Full name: Script.res</div>
<div class="tip" id="fs44">val round : value:&#39;T -&gt; &#39;T (requires member Round)<br /><br />Full name: Microsoft.FSharp.Core.Operators.round</div>
<div class="tip" id="fs45">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

