<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// F# uses object-oriented &#39;reference equality&#39; when </span>
<span class="c">// comparing types defined as classes (but functional</span>
<span class="c">// style structural equality for ADTs)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">Name</span>() <span class="o">=</span> 
  <span class="k">class</span> <span class="k">end</span>

<span class="c">// So we can use &#39;=&#39; to test whether two names are equal</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">eq</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">n2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="i">n1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="i">n2</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="i">n1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="t">Name</span>()
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">n2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 10)" onmouseover="showTip(event, 'fs1', 10)" class="t">Name</span>()
<span onmouseout="hideTip(event, 'fs2', 11)" onmouseover="showTip(event, 'fs2', 11)" class="f">eq</span> <span onmouseout="hideTip(event, 'fs5', 12)" onmouseover="showTip(event, 'fs5', 12)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="i">n1</span> <span class="c">// true</span>
<span onmouseout="hideTip(event, 'fs2', 14)" onmouseover="showTip(event, 'fs2', 14)" class="f">eq</span> <span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs6', 16)" onmouseover="showTip(event, 'fs6', 16)" class="i">n2</span> <span class="c">// false</span>


<span class="c">// Function that works on any F# (and .NET) type can be</span>
<span class="c">// implemented using reflection mechanism (which is quite</span>
<span class="c">// powerful, but it is based on .NET so it is not very</span>
<span class="c">// elegant and also not very efficient)</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs7', 17)" onmouseover="showTip(event, 'fs7', 17)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 18)" onmouseover="showTip(event, 'fs8', 18)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 19)" onmouseover="showTip(event, 'fs9', 19)" class="i">Reflection</span>

<span class="c">// A function that replaces all occurrences of &#39;n1&#39; in &#39;any&#39; with &#39;n2&#39;</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs10', 20)" onmouseover="showTip(event, 'fs10', 20)" class="f">sw</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> (<span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="i">n1</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 22)" onmouseover="showTip(event, 'fs1', 22)" class="t">Name</span>) (<span onmouseout="hideTip(event, 'fs12', 23)" onmouseover="showTip(event, 'fs12', 23)" class="i">n2</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 24)" onmouseover="showTip(event, 'fs1', 24)" class="t">Name</span>) (<span onmouseout="hideTip(event, 'fs13', 25)" onmouseover="showTip(event, 'fs13', 25)" class="i">any</span><span class="o">:</span><span class="o">&#39;</span><span class="i">a</span>) <span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span class="o">=</span>
  <span class="c">// Get the run-time representation of the type of &#39;any&#39;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 26)" onmouseover="showTip(event, 'fs14', 26)" class="i">typ</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 27)" onmouseover="showTip(event, 'fs13', 27)" class="i">any</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 28)" onmouseover="showTip(event, 'fs15', 28)" class="f">GetType</span>()
  <span class="c">// If it is a Name, then check if it equals &#39;n1&#39; and substitute</span>
  <span class="k">if</span> <span onmouseout="hideTip(event, 'fs14', 29)" onmouseover="showTip(event, 'fs14', 29)" class="i">typ</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 30)" onmouseover="showTip(event, 'fs16', 30)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs1', 31)" onmouseover="showTip(event, 'fs1', 31)" class="t">Name</span><span class="o">&gt;</span> <span class="k">then</span>
    <span class="c">// We know that it is &#39;Name&#39;, but we need to convert the type</span>
    <span class="c">// from &#39;a to Name (using &#39;unbox&#39;) and then back using &#39;box&#39;</span>
    <span class="c">// and downcast operator (:?&gt;)</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 32)" onmouseover="showTip(event, 'fs17', 32)" class="i">asName</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 33)" onmouseover="showTip(event, 'fs18', 33)" class="f">unbox</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs1', 34)" onmouseover="showTip(event, 'fs1', 34)" class="t">Name</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs13', 35)" onmouseover="showTip(event, 'fs13', 35)" class="i">any</span>
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs17', 36)" onmouseover="showTip(event, 'fs17', 36)" class="i">asName</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 37)" onmouseover="showTip(event, 'fs11', 37)" class="i">n1</span> <span class="k">then</span> (<span onmouseout="hideTip(event, 'fs19', 38)" onmouseover="showTip(event, 'fs19', 38)" class="f">box</span> <span onmouseout="hideTip(event, 'fs12', 39)" onmouseover="showTip(event, 'fs12', 39)" class="i">n2</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs13', 40)" onmouseover="showTip(event, 'fs13', 40)" class="i">any</span>
  <span class="c">// If it is a record, walk over all fields recursively</span>
  <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs20', 41)" onmouseover="showTip(event, 'fs20', 41)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 42)" onmouseover="showTip(event, 'fs21', 42)" class="f">IsRecord</span>(<span onmouseout="hideTip(event, 'fs14', 43)" onmouseover="showTip(event, 'fs14', 43)" class="i">typ</span>) <span class="k">then</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 44)" onmouseover="showTip(event, 'fs22', 44)" class="i">fields</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 45)" onmouseover="showTip(event, 'fs23', 45)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 46)" onmouseover="showTip(event, 'fs24', 46)" class="f">GetRecordFields</span>(<span onmouseout="hideTip(event, 'fs13', 47)" onmouseover="showTip(event, 'fs13', 47)" class="i">any</span>)
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 48)" onmouseover="showTip(event, 'fs25', 48)" class="i">fields&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 49)" onmouseover="showTip(event, 'fs22', 49)" class="i">fields</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 50)" onmouseover="showTip(event, 'fs26', 50)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 51)" onmouseover="showTip(event, 'fs27', 51)" class="f">map</span> (<span onmouseout="hideTip(event, 'fs10', 52)" onmouseover="showTip(event, 'fs10', 52)" class="f">sw</span><span class="o">&lt;</span>_<span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs11', 53)" onmouseover="showTip(event, 'fs11', 53)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs12', 54)" onmouseover="showTip(event, 'fs12', 54)" class="i">n2</span>) 
    <span onmouseout="hideTip(event, 'fs23', 55)" onmouseover="showTip(event, 'fs23', 55)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 56)" onmouseover="showTip(event, 'fs28', 56)" class="f">MakeRecord</span>(<span onmouseout="hideTip(event, 'fs14', 57)" onmouseover="showTip(event, 'fs14', 57)" class="i">typ</span>, <span onmouseout="hideTip(event, 'fs25', 58)" onmouseover="showTip(event, 'fs25', 58)" class="i">fields&#39;</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">a</span>
  <span class="c">// Dtto for unions and tuples</span>
  <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs20', 59)" onmouseover="showTip(event, 'fs20', 59)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 60)" onmouseover="showTip(event, 'fs29', 60)" class="f">IsUnion</span>(<span onmouseout="hideTip(event, 'fs14', 61)" onmouseover="showTip(event, 'fs14', 61)" class="i">typ</span>) <span class="k">then</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 62)" onmouseover="showTip(event, 'fs30', 62)" class="i">case</span>, <span onmouseout="hideTip(event, 'fs22', 63)" onmouseover="showTip(event, 'fs22', 63)" class="i">fields</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 64)" onmouseover="showTip(event, 'fs23', 64)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 65)" onmouseover="showTip(event, 'fs31', 65)" class="f">GetUnionFields</span>(<span onmouseout="hideTip(event, 'fs13', 66)" onmouseover="showTip(event, 'fs13', 66)" class="i">any</span>, <span onmouseout="hideTip(event, 'fs14', 67)" onmouseover="showTip(event, 'fs14', 67)" class="i">typ</span>)
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 68)" onmouseover="showTip(event, 'fs25', 68)" class="i">fields&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 69)" onmouseover="showTip(event, 'fs22', 69)" class="i">fields</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 70)" onmouseover="showTip(event, 'fs26', 70)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 71)" onmouseover="showTip(event, 'fs27', 71)" class="f">map</span> (<span onmouseout="hideTip(event, 'fs10', 72)" onmouseover="showTip(event, 'fs10', 72)" class="f">sw</span><span class="o">&lt;</span>_<span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs11', 73)" onmouseover="showTip(event, 'fs11', 73)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs12', 74)" onmouseover="showTip(event, 'fs12', 74)" class="i">n2</span>)
    <span onmouseout="hideTip(event, 'fs23', 75)" onmouseover="showTip(event, 'fs23', 75)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 76)" onmouseover="showTip(event, 'fs32', 76)" class="f">MakeUnion</span>(<span onmouseout="hideTip(event, 'fs30', 77)" onmouseover="showTip(event, 'fs30', 77)" class="i">case</span>, <span onmouseout="hideTip(event, 'fs25', 78)" onmouseover="showTip(event, 'fs25', 78)" class="i">fields&#39;</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">a</span>
  <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs20', 79)" onmouseover="showTip(event, 'fs20', 79)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 80)" onmouseover="showTip(event, 'fs33', 80)" class="f">IsTuple</span>(<span onmouseout="hideTip(event, 'fs14', 81)" onmouseover="showTip(event, 'fs14', 81)" class="i">typ</span>) <span class="k">then</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 82)" onmouseover="showTip(event, 'fs22', 82)" class="i">fields</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 83)" onmouseover="showTip(event, 'fs23', 83)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 84)" onmouseover="showTip(event, 'fs34', 84)" class="f">GetTupleFields</span>(<span onmouseout="hideTip(event, 'fs13', 85)" onmouseover="showTip(event, 'fs13', 85)" class="i">any</span>)
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 86)" onmouseover="showTip(event, 'fs25', 86)" class="i">fields&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 87)" onmouseover="showTip(event, 'fs22', 87)" class="i">fields</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 88)" onmouseover="showTip(event, 'fs26', 88)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 89)" onmouseover="showTip(event, 'fs27', 89)" class="f">map</span> (<span onmouseout="hideTip(event, 'fs10', 90)" onmouseover="showTip(event, 'fs10', 90)" class="f">sw</span><span class="o">&lt;</span>_<span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs11', 91)" onmouseover="showTip(event, 'fs11', 91)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs12', 92)" onmouseover="showTip(event, 'fs12', 92)" class="i">n2</span>)
    <span onmouseout="hideTip(event, 'fs23', 93)" onmouseover="showTip(event, 'fs23', 93)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 94)" onmouseover="showTip(event, 'fs35', 94)" class="f">MakeTuple</span>(<span onmouseout="hideTip(event, 'fs25', 95)" onmouseover="showTip(event, 'fs25', 95)" class="i">fields&#39;</span>, <span onmouseout="hideTip(event, 'fs14', 96)" onmouseover="showTip(event, 'fs14', 96)" class="i">typ</span>) <span class="o">:?&gt;</span> <span class="o">&#39;</span><span class="i">a</span>
  <span class="c">// Not sure what to do when the value is a function (?)</span>
  <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs20', 97)" onmouseover="showTip(event, 'fs20', 97)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 98)" onmouseover="showTip(event, 'fs36', 98)" class="f">IsFunction</span>(<span onmouseout="hideTip(event, 'fs14', 99)" onmouseover="showTip(event, 'fs14', 99)" class="i">typ</span>) <span class="k">then</span>
    <span onmouseout="hideTip(event, 'fs37', 100)" onmouseover="showTip(event, 'fs37', 100)" class="f">failwith</span> <span class="s">&quot;Function values are not supported&quot;</span>
  <span class="c">// If it is a primitive type, just return the original</span>
  <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs14', 101)" onmouseover="showTip(event, 'fs14', 101)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 102)" onmouseover="showTip(event, 'fs38', 102)" class="i">IsValueType</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs14', 103)" onmouseover="showTip(event, 'fs14', 103)" class="i">typ</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 104)" onmouseover="showTip(event, 'fs16', 104)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs39', 105)" onmouseover="showTip(event, 'fs39', 105)" class="t">string</span><span class="o">&gt;</span> <span class="k">then</span> 
    <span onmouseout="hideTip(event, 'fs13', 106)" onmouseover="showTip(event, 'fs13', 106)" class="i">any</span>
  <span class="c">// This also does not support classes (and types defined</span>
  <span class="c">// in .NET libraries), which would make it uglier</span>
  <span class="k">else</span>
    <span onmouseout="hideTip(event, 'fs40', 107)" onmouseover="showTip(event, 'fs40', 107)" class="f">failwithf</span> <span class="s">&quot;.NET types are not supported </span><span class="pf">%A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs14', 108)" onmouseover="showTip(event, 'fs14', 108)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs41', 109)" onmouseover="showTip(event, 'fs41', 109)" class="i">Name</span>


<span class="c">// Sample representation of expressions using F# record &amp; union</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs42', 110)" onmouseover="showTip(event, 'fs42', 110)" class="t">BinaryInfo</span> <span class="o">=</span> 
  { <span onmouseout="hideTip(event, 'fs43', 111)" onmouseover="showTip(event, 'fs43', 111)" class="i">Op</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs39', 112)" onmouseover="showTip(event, 'fs39', 112)" class="t">string</span>
    <span onmouseout="hideTip(event, 'fs44', 113)" onmouseover="showTip(event, 'fs44', 113)" class="i">Left</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs45', 114)" onmouseover="showTip(event, 'fs45', 114)" class="t">Expr</span> 
    <span onmouseout="hideTip(event, 'fs46', 115)" onmouseover="showTip(event, 'fs46', 115)" class="i">Right</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs45', 116)" onmouseover="showTip(event, 'fs45', 116)" class="t">Expr</span> }

<span class="k">and</span> <span onmouseout="hideTip(event, 'fs45', 117)" onmouseover="showTip(event, 'fs45', 117)" class="t">Expr</span> <span class="o">=</span>
  | <span onmouseout="hideTip(event, 'fs47', 118)" onmouseover="showTip(event, 'fs47', 118)" class="p">Var</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs1', 119)" onmouseover="showTip(event, 'fs1', 119)" class="t">Name</span>
  | <span onmouseout="hideTip(event, 'fs48', 120)" onmouseover="showTip(event, 'fs48', 120)" class="p">Binary</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs42', 121)" onmouseover="showTip(event, 'fs42', 121)" class="t">BinaryInfo</span>

<span class="c">// If we replace &#39;n1&#39; with &#39;n2&#39; in &#39;sample1&#39; then we</span>
<span class="c">// should get a value that will be equal to &#39;sample2&#39;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs49', 122)" onmouseover="showTip(event, 'fs49', 122)" class="i">sample1</span> <span class="o">=</span>
  (<span onmouseout="hideTip(event, 'fs48', 123)" onmouseover="showTip(event, 'fs48', 123)" class="p">Binary</span> { <span class="i">Op</span> <span class="o">=</span> <span class="s">&quot;+&quot;</span>; <span class="i">Left</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 124)" onmouseover="showTip(event, 'fs47', 124)" class="p">Var</span> <span onmouseout="hideTip(event, 'fs5', 125)" onmouseover="showTip(event, 'fs5', 125)" class="i">n1</span>; <span class="i">Right</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 126)" onmouseover="showTip(event, 'fs47', 126)" class="p">Var</span> <span onmouseout="hideTip(event, 'fs5', 127)" onmouseover="showTip(event, 'fs5', 127)" class="i">n1</span> })
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs50', 128)" onmouseover="showTip(event, 'fs50', 128)" class="i">sample2</span> <span class="o">=</span>
  (<span onmouseout="hideTip(event, 'fs48', 129)" onmouseover="showTip(event, 'fs48', 129)" class="p">Binary</span> { <span class="i">Op</span> <span class="o">=</span> <span class="s">&quot;+&quot;</span>; <span class="i">Left</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 130)" onmouseover="showTip(event, 'fs47', 130)" class="p">Var</span> <span onmouseout="hideTip(event, 'fs6', 131)" onmouseover="showTip(event, 'fs6', 131)" class="i">n2</span>; <span class="i">Right</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 132)" onmouseover="showTip(event, 'fs47', 132)" class="p">Var</span> <span onmouseout="hideTip(event, 'fs6', 133)" onmouseover="showTip(event, 'fs6', 133)" class="i">n2</span> })

<span onmouseout="hideTip(event, 'fs10', 134)" onmouseover="showTip(event, 'fs10', 134)" class="f">sw</span> <span onmouseout="hideTip(event, 'fs5', 135)" onmouseover="showTip(event, 'fs5', 135)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs6', 136)" onmouseover="showTip(event, 'fs6', 136)" class="i">n2</span> <span onmouseout="hideTip(event, 'fs49', 137)" onmouseover="showTip(event, 'fs49', 137)" class="i">sample1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs49', 138)" onmouseover="showTip(event, 'fs49', 138)" class="i">sample1</span> <span class="c">// false </span>
<span onmouseout="hideTip(event, 'fs10', 139)" onmouseover="showTip(event, 'fs10', 139)" class="f">sw</span> <span onmouseout="hideTip(event, 'fs5', 140)" onmouseover="showTip(event, 'fs5', 140)" class="i">n1</span> <span onmouseout="hideTip(event, 'fs6', 141)" onmouseover="showTip(event, 'fs6', 141)" class="i">n2</span> <span onmouseout="hideTip(event, 'fs49', 142)" onmouseover="showTip(event, 'fs49', 142)" class="i">sample1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs50', 143)" onmouseover="showTip(event, 'fs50', 143)" class="i">sample2</span> <span class="c">// true</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />type Name =<br />&#160;&#160;new : unit -&gt; Name<br /><br />Full name: Script.Name<br /><br />--------------------<br />new : unit -&gt; Name</div>
<div class="tip" id="fs2">val eq : n1:&#39;a -&gt; n2:&#39;a -&gt; bool (requires equality)<br /><br />Full name: Script.eq</div>
<div class="tip" id="fs3">val n1 : &#39;a (requires equality)</div>
<div class="tip" id="fs4">val n2 : &#39;a (requires equality)</div>
<div class="tip" id="fs5">val n1 : Name<br /><br />Full name: Script.n1</div>
<div class="tip" id="fs6">val n2 : Name<br /><br />Full name: Script.n2</div>
<div class="tip" id="fs7">namespace Microsoft</div>
<div class="tip" id="fs8">namespace Microsoft.FSharp</div>
<div class="tip" id="fs9">namespace Microsoft.FSharp.Reflection</div>
<div class="tip" id="fs10">val sw : n1:Name -&gt; n2:Name -&gt; any:&#39;a -&gt; &#39;a<br /><br />Full name: Script.sw</div>
<div class="tip" id="fs11">val n1 : Name</div>
<div class="tip" id="fs12">val n2 : Name</div>
<div class="tip" id="fs13">val any : &#39;a</div>
<div class="tip" id="fs14">val typ : System.Type</div>
<div class="tip" id="fs15">System.Object.GetType() : System.Type</div>
<div class="tip" id="fs16">val typeof&lt;&#39;T&gt; : System.Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs17">val asName : Name</div>
<div class="tip" id="fs18">val unbox : value:obj -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.unbox</div>
<div class="tip" id="fs19">val box : value:&#39;T -&gt; obj<br /><br />Full name: Microsoft.FSharp.Core.Operators.box</div>
<div class="tip" id="fs20">type FSharpType =<br />&#160;&#160;static member GetExceptionFields : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetFunctionElements : functionType:Type -&gt; Type * Type<br />&#160;&#160;static member GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetTupleElements : tupleType:Type -&gt; Type []<br />&#160;&#160;static member GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []<br />&#160;&#160;static member IsExceptionRepresentation : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsFunction : typ:Type -&gt; bool<br />&#160;&#160;static member IsModule : typ:Type -&gt; bool<br />&#160;&#160;static member IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsTuple : typ:Type -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpType</div>
<div class="tip" id="fs21">static member FSharpType.IsRecord : typ:System.Type * ?allowAccessToPrivateRepresentation:bool -&gt; bool<br />static member FSharpType.IsRecord : typ:System.Type * ?bindingFlags:System.Reflection.BindingFlags -&gt; bool</div>
<div class="tip" id="fs22">val fields : obj []</div>
<div class="tip" id="fs23">type FSharpValue =<br />&#160;&#160;static member GetExceptionFields : exn:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetRecordField : record:obj * info:PropertyInfo -&gt; obj<br />&#160;&#160;static member GetRecordFields : record:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetTupleField : tuple:obj * index:int -&gt; obj<br />&#160;&#160;static member GetTupleFields : tuple:obj -&gt; obj []<br />&#160;&#160;static member GetUnionFields : value:obj * unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo * obj []<br />&#160;&#160;static member MakeFunction : functionType:Type * implementation:(obj -&gt; obj) -&gt; obj<br />&#160;&#160;static member MakeRecord : recordType:Type * values:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;static member MakeTuple : tupleElements:obj [] * tupleType:Type -&gt; obj<br />&#160;&#160;static member MakeUnion : unionCase:UnionCaseInfo * args:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpValue</div>
<div class="tip" id="fs24">static member FSharpValue.GetRecordFields : record:obj * ?allowAccessToPrivateRepresentation:bool -&gt; obj []<br />static member FSharpValue.GetRecordFields : record:obj * ?bindingFlags:System.Reflection.BindingFlags -&gt; obj []</div>
<div class="tip" id="fs25">val fields&#39; : obj []</div>
<div class="tip" id="fs26">module Array<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs27">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; array:&#39;T [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.map</div>
<div class="tip" id="fs28">static member FSharpValue.MakeRecord : recordType:System.Type * values:obj [] * ?allowAccessToPrivateRepresentation:bool -&gt; obj<br />static member FSharpValue.MakeRecord : recordType:System.Type * values:obj [] * ?bindingFlags:System.Reflection.BindingFlags -&gt; obj</div>
<div class="tip" id="fs29">static member FSharpType.IsUnion : typ:System.Type * ?allowAccessToPrivateRepresentation:bool -&gt; bool<br />static member FSharpType.IsUnion : typ:System.Type * ?bindingFlags:System.Reflection.BindingFlags -&gt; bool</div>
<div class="tip" id="fs30">val case : UnionCaseInfo</div>
<div class="tip" id="fs31">static member FSharpValue.GetUnionFields : value:obj * unionType:System.Type * ?allowAccessToPrivateRepresentation:bool -&gt; UnionCaseInfo * obj []<br />static member FSharpValue.GetUnionFields : value:obj * unionType:System.Type * ?bindingFlags:System.Reflection.BindingFlags -&gt; UnionCaseInfo * obj []</div>
<div class="tip" id="fs32">static member FSharpValue.MakeUnion : unionCase:UnionCaseInfo * args:obj [] * ?allowAccessToPrivateRepresentation:bool -&gt; obj<br />static member FSharpValue.MakeUnion : unionCase:UnionCaseInfo * args:obj [] * ?bindingFlags:System.Reflection.BindingFlags -&gt; obj</div>
<div class="tip" id="fs33">static member FSharpType.IsTuple : typ:System.Type -&gt; bool</div>
<div class="tip" id="fs34">static member FSharpValue.GetTupleFields : tuple:obj -&gt; obj []</div>
<div class="tip" id="fs35">static member FSharpValue.MakeTuple : tupleElements:obj [] * tupleType:System.Type -&gt; obj</div>
<div class="tip" id="fs36">static member FSharpType.IsFunction : typ:System.Type -&gt; bool</div>
<div class="tip" id="fs37">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs38">property System.Type.IsValueType: bool</div>
<div class="tip" id="fs39">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs40">val failwithf : format:Printf.StringFormat&lt;&#39;T,&#39;Result&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.failwithf</div>
<div class="tip" id="fs41">property System.Reflection.MemberInfo.Name: string</div>
<div class="tip" id="fs42">type BinaryInfo =<br />&#160;&#160;{Op: string;<br />&#160;&#160;&#160;Left: Expr;<br />&#160;&#160;&#160;Right: Expr;}<br /><br />Full name: Script.BinaryInfo</div>
<div class="tip" id="fs43">BinaryInfo.Op: string</div>
<div class="tip" id="fs44">BinaryInfo.Left: Expr</div>
<div class="tip" id="fs45">type Expr =<br />&#160;&#160;| Var of Name<br />&#160;&#160;| Binary of BinaryInfo<br /><br />Full name: Script.Expr</div>
<div class="tip" id="fs46">BinaryInfo.Right: Expr</div>
<div class="tip" id="fs47">union case Expr.Var: Name -&gt; Expr</div>
<div class="tip" id="fs48">union case Expr.Binary: BinaryInfo -&gt; Expr</div>
<div class="tip" id="fs49">val sample1 : Expr<br /><br />Full name: Script.sample1</div>
<div class="tip" id="fs50">val sample2 : Expr<br /><br />Full name: Script.sample2</div>

