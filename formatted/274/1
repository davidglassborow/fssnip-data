<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">Linq</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="t">Seq</span> <span class="o">=</span>

    <span class="c">/// Partition into groups linearly by predicate (drops the partition element)</span>
    <span class="c">/// ex. partitionLinear (fun x -&gt; x = 1) [2; 3; 4; 5; 1; 2; 3; 4; 5]</span>
    <span class="c">/// val it : seq&lt;int list&gt; = seq [[2; 3; 4; 5]; [2; 3; 4; 5]]</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="f">partitionLinear</span> (<span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="f">func</span> <span class="o">:</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">bool</span>) (<span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">sequence</span> <span class="o">:</span> _ <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="t">seq</span>) <span class="o">:</span> _ <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="t">list</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="t">seq</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs8', 12)" onmouseover="showTip(event, 'fs8', 12)" class="i">seq</span> {
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="i">en</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 14)" onmouseover="showTip(event, 'fs7', 14)" class="i">sequence</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="f">GetEnumerator</span> ()
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="v">more</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="f">ref</span> <span class="k">true</span>
            <span class="k">while</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs12', 18)" onmouseover="showTip(event, 'fs12', 18)" class="v">more</span> <span class="k">do</span>
                <span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="v">wasGood</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 20)" onmouseover="showTip(event, 'fs13', 20)" class="f">ref</span> <span class="k">true</span>
                <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 21)" onmouseover="showTip(event, 'fs15', 21)" class="i">sublist</span> <span class="o">=</span> 
                    [
                        <span class="k">while</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs14', 22)" onmouseover="showTip(event, 'fs14', 22)" class="v">wasGood</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs10', 23)" onmouseover="showTip(event, 'fs10', 23)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="f">MoveNext</span>() <span class="k">do</span>
                            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="f">not</span> (<span onmouseout="hideTip(event, 'fs5', 26)" onmouseover="showTip(event, 'fs5', 26)" class="f">func</span> <span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 28)" onmouseover="showTip(event, 'fs18', 28)" class="i">Current</span>) <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs10', 29)" onmouseover="showTip(event, 'fs10', 29)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 30)" onmouseover="showTip(event, 'fs18', 30)" class="i">Current</span>
                            <span class="k">else</span> <span onmouseout="hideTip(event, 'fs14', 31)" onmouseover="showTip(event, 'fs14', 31)" class="v">wasGood</span> <span class="o">:=</span> <span class="k">false</span>
                    ]
                <span class="k">if</span> <span onmouseout="hideTip(event, 'fs19', 32)" onmouseover="showTip(event, 'fs19', 32)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 33)" onmouseover="showTip(event, 'fs20', 33)" class="f">isEmpty</span> <span onmouseout="hideTip(event, 'fs15', 34)" onmouseover="showTip(event, 'fs15', 34)" class="i">sublist</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs12', 35)" onmouseover="showTip(event, 'fs12', 35)" class="v">more</span> <span class="o">:=</span> <span class="k">false</span>
                <span class="k">else</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs15', 36)" onmouseover="showTip(event, 'fs15', 36)" class="i">sublist</span>
        }

    <span class="c">/// Partition into groups linearly by predicate (partition token inclusive)</span>
    <span class="c">/// ex. partitionLinearInclusive (fun x -&gt; x = 1) [2; 3; 4; 5; 1; 2; 3; 4; 5]</span>
    <span class="c">/// val it : seq&lt;int list&gt; = seq [[2; 3; 4; 5; 1]; [2; 3; 4; 5]]</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 37)" onmouseover="showTip(event, 'fs21', 37)" class="f">partitionLinearInclusive</span> (<span onmouseout="hideTip(event, 'fs5', 38)" onmouseover="showTip(event, 'fs5', 38)" class="f">func</span> <span class="o">:</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs6', 39)" onmouseover="showTip(event, 'fs6', 39)" class="t">bool</span>) (<span onmouseout="hideTip(event, 'fs7', 40)" onmouseover="showTip(event, 'fs7', 40)" class="i">sequence</span> <span class="o">:</span> _ <span onmouseout="hideTip(event, 'fs8', 41)" onmouseover="showTip(event, 'fs8', 41)" class="t">seq</span>) <span class="o">:</span> _ <span onmouseout="hideTip(event, 'fs9', 42)" onmouseover="showTip(event, 'fs9', 42)" class="t">list</span> <span onmouseout="hideTip(event, 'fs8', 43)" onmouseover="showTip(event, 'fs8', 43)" class="t">seq</span> <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs8', 44)" onmouseover="showTip(event, 'fs8', 44)" class="i">seq</span> {
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 45)" onmouseover="showTip(event, 'fs10', 45)" class="i">en</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 46)" onmouseover="showTip(event, 'fs7', 46)" class="i">sequence</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 47)" onmouseover="showTip(event, 'fs11', 47)" class="f">GetEnumerator</span> ()
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 48)" onmouseover="showTip(event, 'fs12', 48)" class="v">more</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 49)" onmouseover="showTip(event, 'fs13', 49)" class="f">ref</span> <span class="k">true</span>
            <span class="k">while</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs12', 50)" onmouseover="showTip(event, 'fs12', 50)" class="v">more</span> <span class="k">do</span>
                <span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 51)" onmouseover="showTip(event, 'fs14', 51)" class="v">wasGood</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 52)" onmouseover="showTip(event, 'fs13', 52)" class="f">ref</span> <span class="k">true</span>
                <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 53)" onmouseover="showTip(event, 'fs15', 53)" class="i">sublist</span> <span class="o">=</span> 
                    [
                        <span class="k">while</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs14', 54)" onmouseover="showTip(event, 'fs14', 54)" class="v">wasGood</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs10', 55)" onmouseover="showTip(event, 'fs10', 55)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 56)" onmouseover="showTip(event, 'fs16', 56)" class="f">MoveNext</span>() <span class="k">do</span>
                            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs5', 57)" onmouseover="showTip(event, 'fs5', 57)" class="f">func</span> <span onmouseout="hideTip(event, 'fs10', 58)" onmouseover="showTip(event, 'fs10', 58)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 59)" onmouseover="showTip(event, 'fs18', 59)" class="i">Current</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs14', 60)" onmouseover="showTip(event, 'fs14', 60)" class="v">wasGood</span> <span class="o">:=</span> <span class="k">false</span>
                            <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs10', 61)" onmouseover="showTip(event, 'fs10', 61)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 62)" onmouseover="showTip(event, 'fs18', 62)" class="i">Current</span>
                    ]
                <span class="k">if</span> <span onmouseout="hideTip(event, 'fs19', 63)" onmouseover="showTip(event, 'fs19', 63)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 64)" onmouseover="showTip(event, 'fs20', 64)" class="f">isEmpty</span> <span onmouseout="hideTip(event, 'fs15', 65)" onmouseover="showTip(event, 'fs15', 65)" class="i">sublist</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs12', 66)" onmouseover="showTip(event, 'fs12', 66)" class="v">more</span> <span class="o">:=</span> <span class="k">false</span>
                <span class="k">else</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs15', 67)" onmouseover="showTip(event, 'fs15', 67)" class="i">sublist</span>
        }
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Linq</div>
<div class="tip" id="fs3">Multiple items<br />module Seq<br /><br />from Script<br /><br />--------------------<br />module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs4">val partitionLinear : func:(&#39;a -&gt; bool) -&gt; sequence:seq&lt;&#39;a&gt; -&gt; seq&lt;&#39;a list&gt;<br /><br />Full name: Script.Seq.partitionLinear<br /><em><br /><br />&#160;Partition into groups linearly by predicate (drops the partition element)<br />&#160;ex. partitionLinear (fun x -&gt; x = 1) [2; 3; 4; 5; 1; 2; 3; 4; 5]<br />&#160;val it : seq&lt;int list&gt; = seq [[2; 3; 4; 5]; [2; 3; 4; 5]]</em></div>
<div class="tip" id="fs5">val func : (&#39;a -&gt; bool)</div>
<div class="tip" id="fs6">type bool = Boolean<br /><br />Full name: Microsoft.FSharp.Core.bool</div>
<div class="tip" id="fs7">val sequence : seq&lt;&#39;a&gt;</div>
<div class="tip" id="fs8">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs9">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs10">val en : Collections.Generic.IEnumerator&lt;&#39;a&gt;</div>
<div class="tip" id="fs11">Collections.Generic.IEnumerable.GetEnumerator() : Collections.Generic.IEnumerator&lt;&#39;a&gt;</div>
<div class="tip" id="fs12">val more : bool ref</div>
<div class="tip" id="fs13">Multiple items<br />val ref : value:&#39;T -&gt; &#39;T ref<br /><br />Full name: Microsoft.FSharp.Core.Operators.ref<br /><br />--------------------<br />type &#39;T ref = Ref&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.ref&lt;_&gt;</div>
<div class="tip" id="fs14">val wasGood : bool ref</div>
<div class="tip" id="fs15">val sublist : &#39;a list</div>
<div class="tip" id="fs16">Collections.IEnumerator.MoveNext() : bool</div>
<div class="tip" id="fs17">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs18">property Collections.Generic.IEnumerator.Current: &#39;a</div>
<div class="tip" id="fs19">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs20">val isEmpty : list:&#39;T list -&gt; bool<br /><br />Full name: Microsoft.FSharp.Collections.List.isEmpty</div>
<div class="tip" id="fs21">val partitionLinearInclusive : func:(&#39;a -&gt; bool) -&gt; sequence:seq&lt;&#39;a&gt; -&gt; seq&lt;&#39;a list&gt;<br /><br />Full name: Script.Seq.partitionLinearInclusive<br /><em><br /><br />&#160;Partition into groups linearly by predicate (partition token inclusive)<br />&#160;ex. partitionLinearInclusive (fun x -&gt; x = 1) [2; 3; 4; 5; 1; 2; 3; 4; 5]<br />&#160;val it : seq&lt;int list&gt; = seq [[2; 3; 4; 5; 1]; [2; 3; 4; 5]]</em></div>

