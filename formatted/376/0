<h2><a name="Implementation" class="anchor" href="#Implementation">Implementation</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">Agent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">MailboxProcessor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>

<span class="c">/// Wrapper for the standard F# agent (MailboxProcessor) that</span>
<span class="c">/// supports stopping of the agent&#39;s body using the IDisposable </span>
<span class="c">/// interface (the type automatically creates a cancellation token)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">DisposableAgent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">private</span> (<span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">mbox</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 5)" onmouseover="showTip(event, 'fs1', 5)" class="t">Agent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">cts</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">CancellationTokenSource</span>) <span class="o">=</span> 

  <span class="c">/// Start a new disposable agent using the specified body function</span>
  <span class="c">/// (the method creates a new cancellation token for the agent)</span>
  <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">Start</span>(<span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="f">f</span>) <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="i">cts</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="t">CancellationTokenSource</span>()
    <span class="k">new</span> <span onmouseout="hideTip(event, 'fs3', 12)" onmouseover="showTip(event, 'fs3', 12)" class="t">DisposableAgent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs1', 13)" onmouseover="showTip(event, 'fs1', 13)" class="t">Agent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span><span class="o">.</span><span class="f">Start</span>(<span onmouseout="hideTip(event, 'fs8', 14)" onmouseover="showTip(event, 'fs8', 14)" class="f">f</span>, <span class="i">cancellationToken</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="i">cts</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="i">Token</span>), <span onmouseout="hideTip(event, 'fs5', 17)" onmouseover="showTip(event, 'fs5', 17)" class="i">cts</span>)
  
  <span class="c">/// Returns the number of unprocessed messages in the message queue of the agent.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="i">CurrentQueueLength</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 20)" onmouseover="showTip(event, 'fs4', 20)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 21)" onmouseover="showTip(event, 'fs12', 21)" class="i">CurrentQueueLength</span>
  <span class="c">/// Occurs when the execution of the agent results in an exception.</span>
  [&lt;<span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="t">CLIEvent</span>&gt;]
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 23)" onmouseover="showTip(event, 'fs10', 23)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="f">Error</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 25)" onmouseover="showTip(event, 'fs4', 25)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="f">Error</span>
  <span class="c">/// Waits for a message. This will consume the first message in arrival order.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 27)" onmouseover="showTip(event, 'fs10', 27)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 28)" onmouseover="showTip(event, 'fs16', 28)" class="f">Receive</span>(<span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="i">timeout</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 30)" onmouseover="showTip(event, 'fs4', 30)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 31)" onmouseover="showTip(event, 'fs18', 31)" class="f">Receive</span>(<span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 32)" onmouseover="showTip(event, 'fs17', 32)" class="i">timeout</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="i">timeout</span>)
  <span class="c">/// Scans for a message by looking through messages in arrival order until scanner </span>
  <span class="c">/// returns a Some value. Other messages remain in the queue.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 34)" onmouseover="showTip(event, 'fs10', 34)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="f">Scan</span>(<span onmouseout="hideTip(event, 'fs20', 36)" onmouseover="showTip(event, 'fs20', 36)" class="f">scanner</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 37)" onmouseover="showTip(event, 'fs17', 37)" class="i">timeout</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 38)" onmouseover="showTip(event, 'fs4', 38)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 39)" onmouseover="showTip(event, 'fs21', 39)" class="f">Scan</span>(<span onmouseout="hideTip(event, 'fs20', 40)" onmouseover="showTip(event, 'fs20', 40)" class="f">scanner</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 41)" onmouseover="showTip(event, 'fs17', 41)" class="i">timeout</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 42)" onmouseover="showTip(event, 'fs17', 42)" class="i">timeout</span>)
  <span class="c">/// Like PostAndReply, but returns None if no reply within the timeout period.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 43)" onmouseover="showTip(event, 'fs10', 43)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 44)" onmouseover="showTip(event, 'fs22', 44)" class="f">TryPostAndReply</span>(<span onmouseout="hideTip(event, 'fs23', 45)" onmouseover="showTip(event, 'fs23', 45)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 46)" onmouseover="showTip(event, 'fs17', 46)" class="i">timeout</span>) <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs4', 47)" onmouseover="showTip(event, 'fs4', 47)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 48)" onmouseover="showTip(event, 'fs24', 48)" class="f">TryPostAndReply</span>(<span onmouseout="hideTip(event, 'fs23', 49)" onmouseover="showTip(event, 'fs23', 49)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 50)" onmouseover="showTip(event, 'fs17', 50)" class="i">timeout</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 51)" onmouseover="showTip(event, 'fs17', 51)" class="i">timeout</span>)
  <span class="c">/// Waits for a message. This will consume the first message in arrival order.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 52)" onmouseover="showTip(event, 'fs10', 52)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs25', 53)" onmouseover="showTip(event, 'fs25', 53)" class="f">TryReceive</span>(<span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 54)" onmouseover="showTip(event, 'fs17', 54)" class="i">timeout</span>) <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs4', 55)" onmouseover="showTip(event, 'fs4', 55)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 56)" onmouseover="showTip(event, 'fs26', 56)" class="f">TryReceive</span>(<span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 57)" onmouseover="showTip(event, 'fs17', 57)" class="i">timeout</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 58)" onmouseover="showTip(event, 'fs17', 58)" class="i">timeout</span>)
  <span class="c">/// Scans for a message by looking through messages in arrival order until scanner</span>
  <span class="c">/// returns a Some value. Other messages remain in the queue.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 59)" onmouseover="showTip(event, 'fs10', 59)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 60)" onmouseover="showTip(event, 'fs27', 60)" class="f">TryScan</span>(<span onmouseout="hideTip(event, 'fs20', 61)" onmouseover="showTip(event, 'fs20', 61)" class="f">scanner</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 62)" onmouseover="showTip(event, 'fs17', 62)" class="i">timeout</span>) <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs4', 63)" onmouseover="showTip(event, 'fs4', 63)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 64)" onmouseover="showTip(event, 'fs28', 64)" class="f">TryScan</span>(<span onmouseout="hideTip(event, 'fs20', 65)" onmouseover="showTip(event, 'fs20', 65)" class="f">scanner</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 66)" onmouseover="showTip(event, 'fs17', 66)" class="i">timeout</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 67)" onmouseover="showTip(event, 'fs17', 67)" class="i">timeout</span>)
  <span class="c">/// Posts a message to the message queue of the MailboxProcessor, asynchronously.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 68)" onmouseover="showTip(event, 'fs10', 68)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 69)" onmouseover="showTip(event, 'fs29', 69)" class="f">Post</span>(<span onmouseout="hideTip(event, 'fs30', 70)" onmouseover="showTip(event, 'fs30', 70)" class="i">m</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 71)" onmouseover="showTip(event, 'fs4', 71)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 72)" onmouseover="showTip(event, 'fs31', 72)" class="f">Post</span>(<span onmouseout="hideTip(event, 'fs30', 73)" onmouseover="showTip(event, 'fs30', 73)" class="i">m</span>)
  <span class="c">/// Posts a message to an agent and await a reply on the channel, synchronously.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 74)" onmouseover="showTip(event, 'fs10', 74)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 75)" onmouseover="showTip(event, 'fs32', 75)" class="f">PostAndReply</span>(<span onmouseout="hideTip(event, 'fs23', 76)" onmouseover="showTip(event, 'fs23', 76)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 77)" onmouseover="showTip(event, 'fs17', 77)" class="i">timeout</span>) <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs4', 78)" onmouseover="showTip(event, 'fs4', 78)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 79)" onmouseover="showTip(event, 'fs33', 79)" class="f">PostAndReply</span>(<span onmouseout="hideTip(event, 'fs23', 80)" onmouseover="showTip(event, 'fs23', 80)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 81)" onmouseover="showTip(event, 'fs17', 81)" class="i">timeout</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 82)" onmouseover="showTip(event, 'fs17', 82)" class="i">timeout</span>)
  <span class="c">/// Like PostAndAsyncReply, but returns None if no reply within the timeout period.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 83)" onmouseover="showTip(event, 'fs10', 83)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 84)" onmouseover="showTip(event, 'fs34', 84)" class="f">PostAndTryAsyncReply</span>(<span onmouseout="hideTip(event, 'fs23', 85)" onmouseover="showTip(event, 'fs23', 85)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 86)" onmouseover="showTip(event, 'fs17', 86)" class="i">timeout</span>) <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs4', 87)" onmouseover="showTip(event, 'fs4', 87)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 88)" onmouseover="showTip(event, 'fs35', 88)" class="f">PostAndTryAsyncReply</span>(<span onmouseout="hideTip(event, 'fs23', 89)" onmouseover="showTip(event, 'fs23', 89)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 90)" onmouseover="showTip(event, 'fs17', 90)" class="i">timeout</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 91)" onmouseover="showTip(event, 'fs17', 91)" class="i">timeout</span>)
  <span class="c">/// Posts a message to an agent and await a reply on the channel, asynchronously.</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 92)" onmouseover="showTip(event, 'fs10', 92)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 93)" onmouseover="showTip(event, 'fs36', 93)" class="f">PostAndAsyncReply</span>(<span onmouseout="hideTip(event, 'fs23', 94)" onmouseover="showTip(event, 'fs23', 94)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 95)" onmouseover="showTip(event, 'fs17', 95)" class="i">timeout</span>) <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs4', 96)" onmouseover="showTip(event, 'fs4', 96)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 97)" onmouseover="showTip(event, 'fs37', 97)" class="f">PostAndAsyncReply</span>(<span onmouseout="hideTip(event, 'fs23', 98)" onmouseover="showTip(event, 'fs23', 98)" class="f">buildMessage</span>, <span class="o">?</span><span onmouseout="hideTip(event, 'fs17', 99)" onmouseover="showTip(event, 'fs17', 99)" class="i">timeout</span><span class="o">=</span><span onmouseout="hideTip(event, 'fs17', 100)" onmouseover="showTip(event, 'fs17', 100)" class="i">timeout</span>)

  <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs38', 101)" onmouseover="showTip(event, 'fs38', 101)" class="t">IDisposable</span> <span class="k">with</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs10', 102)" onmouseover="showTip(event, 'fs10', 102)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 103)" onmouseover="showTip(event, 'fs39', 103)" class="f">Dispose</span>() <span class="o">=</span> 
      (<span onmouseout="hideTip(event, 'fs4', 104)" onmouseover="showTip(event, 'fs4', 104)" class="i">mbox</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs38', 105)" onmouseover="showTip(event, 'fs38', 105)" class="t">IDisposable</span>)<span class="o">.</span><span class="f">Dispose</span>()
      <span onmouseout="hideTip(event, 'fs5', 106)" onmouseover="showTip(event, 'fs5', 106)" class="i">cts</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 107)" onmouseover="showTip(event, 'fs40', 107)" class="f">Cancel</span>()
</code></pre></td>
</tr>
</table>
<h2><a name="Sample-usage" class="anchor" href="#Sample-usage">Sample usage</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 108)" onmouseover="showTip(event, 'fs41', 108)" class="i">op</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs42', 109)" onmouseover="showTip(event, 'fs42', 109)" class="i">async</span> {
  <span class="c">// Create a local agent that is disposed when the </span>
  <span class="c">// workflow completes (using the &#39;use&#39; construct)</span>
  <span class="k">use</span> <span onmouseout="hideTip(event, 'fs43', 110)" onmouseover="showTip(event, 'fs43', 110)" class="i">agent</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs44', 111)" onmouseover="showTip(event, 'fs44', 111)" class="t">DisposableAgent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 112)" onmouseover="showTip(event, 'fs45', 112)" class="f">Start</span>(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs46', 113)" onmouseover="showTip(event, 'fs46', 113)" class="i">agent</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs42', 114)" onmouseover="showTip(event, 'fs42', 114)" class="i">async</span> { 
    <span class="k">try</span> 
      <span class="k">while</span> <span class="k">true</span> <span class="k">do</span>
        <span class="c">// Wait for a message - note that we use timeout</span>
        <span class="c">// to allow cancellation (when the operation completes)</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs47', 115)" onmouseover="showTip(event, 'fs47', 115)" class="i">msg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs46', 116)" onmouseover="showTip(event, 'fs46', 116)" class="i">agent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 117)" onmouseover="showTip(event, 'fs26', 117)" class="f">TryReceive</span>(<span class="n">1000</span>)
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs47', 118)" onmouseover="showTip(event, 'fs47', 118)" class="i">msg</span> <span class="k">with</span> 
        | <span onmouseout="hideTip(event, 'fs48', 119)" onmouseover="showTip(event, 'fs48', 119)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs49', 120)" onmouseover="showTip(event, 'fs49', 120)" class="i">n</span>, <span onmouseout="hideTip(event, 'fs50', 121)" onmouseover="showTip(event, 'fs50', 121)" class="i">reply</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs51', 122)" onmouseover="showTip(event, 'fs51', 122)" class="t">AsyncReplyChannel</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs52', 123)" onmouseover="showTip(event, 'fs52', 123)" class="t">unit</span><span class="o">&gt;</span>) <span class="k">-&gt;</span>
            <span class="c">// Print number and reply to the sender</span>
            <span onmouseout="hideTip(event, 'fs53', 124)" onmouseover="showTip(event, 'fs53', 124)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%d</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs49', 125)" onmouseover="showTip(event, 'fs49', 125)" class="i">n</span>
            <span onmouseout="hideTip(event, 'fs50', 126)" onmouseover="showTip(event, 'fs50', 126)" class="i">reply</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 127)" onmouseover="showTip(event, 'fs54', 127)" class="f">Reply</span>(())
        | _ <span class="k">-&gt;</span> ()
    <span class="k">finally</span> 
      <span class="c">// Called when the agent is disposed</span>
      <span onmouseout="hideTip(event, 'fs53', 128)" onmouseover="showTip(event, 'fs53', 128)" class="f">printfn</span> <span class="s">&quot;agent completed&quot;</span> })
  
  <span class="c">// Do some processing using the agent...</span>
  <span class="k">for</span> <span onmouseout="hideTip(event, 'fs55', 129)" onmouseover="showTip(event, 'fs55', 129)" class="i">i</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">10</span> <span class="k">do</span> 
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs43', 130)" onmouseover="showTip(event, 'fs43', 130)" class="i">agent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 131)" onmouseover="showTip(event, 'fs56', 131)" class="f">PostAndAsyncReply</span>(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs57', 132)" onmouseover="showTip(event, 'fs57', 132)" class="i">r</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs55', 133)" onmouseover="showTip(event, 'fs55', 133)" class="i">i</span>, <span onmouseout="hideTip(event, 'fs57', 134)" onmouseover="showTip(event, 'fs57', 134)" class="i">r</span>) 
  <span onmouseout="hideTip(event, 'fs53', 135)" onmouseover="showTip(event, 'fs53', 135)" class="f">printfn</span> <span class="s">&quot;workflow completed&quot;</span> }

<span onmouseout="hideTip(event, 'fs58', 136)" onmouseover="showTip(event, 'fs58', 136)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs59', 137)" onmouseover="showTip(event, 'fs59', 137)" class="f">Start</span>(<span onmouseout="hideTip(event, 'fs41', 138)" onmouseover="showTip(event, 'fs41', 138)" class="i">op</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">type Agent&lt;&#39;T&gt; = MailboxProcessor&lt;&#39;T&gt;<br /><br />Full name: Script.Agent&lt;_&gt;</div>
<div class="tip" id="fs2">Multiple items<br />type MailboxProcessor&lt;&#39;Msg&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;new : body:(MailboxProcessor&lt;&#39;Msg&gt; -&gt; Async&lt;unit&gt;) * ?cancellationToken:CancellationToken -&gt; MailboxProcessor&lt;&#39;Msg&gt;<br />&#160;&#160;member Post : message:&#39;Msg -&gt; unit<br />&#160;&#160;member PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply&gt;<br />&#160;&#160;member PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply<br />&#160;&#160;member PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply option&gt;<br />&#160;&#160;member Receive : ?timeout:int -&gt; Async&lt;&#39;Msg&gt;<br />&#160;&#160;member Scan : scanner:(&#39;Msg -&gt; Async&lt;&#39;T&gt; option) * ?timeout:int -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Start : unit -&gt; unit<br />&#160;&#160;member TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply option<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Control.MailboxProcessor&lt;_&gt;<br /><br />--------------------<br />new : body:(MailboxProcessor&lt;&#39;Msg&gt; -&gt; Async&lt;unit&gt;) * ?cancellationToken:CancellationToken -&gt; MailboxProcessor&lt;&#39;Msg&gt;</div>
<div class="tip" id="fs3">Multiple items<br />type DisposableAgent&lt;&#39;T&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;private new : mbox:Agent&lt;&#39;T&gt; * cts:CancellationTokenSource -&gt; DisposableAgent&lt;&#39;T&gt;<br />&#160;&#160;member Post : m:&#39;T -&gt; unit<br />&#160;&#160;member PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a<br />&#160;&#160;member PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a option&gt;<br />&#160;&#160;member Receive : ?timeout:int -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Scan : scanner:(&#39;T -&gt; Async&lt;&#39;a&gt; option) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a option<br />&#160;&#160;member TryReceive : ?timeout:int -&gt; Async&lt;&#39;T option&gt;<br />&#160;&#160;...<br /><br />Full name: Script.DisposableAgent&lt;_&gt;<br /><em><br /><br />&#160;Wrapper for the standard F# agent (MailboxProcessor) that<br />&#160;supports stopping of the agent&#39;s body using the IDisposable <br />&#160;interface (the type automatically creates a cancellation token)</em><br /><br />--------------------<br />private new : mbox:Agent&lt;&#39;T&gt; * cts:CancellationTokenSource -&gt; DisposableAgent&lt;&#39;T&gt;</div>
<div class="tip" id="fs4">val mbox : Agent&lt;&#39;T&gt;</div>
<div class="tip" id="fs5">val cts : CancellationTokenSource</div>
<div class="tip" id="fs6">Multiple items<br />type CancellationTokenSource =<br />&#160;&#160;new : unit -&gt; CancellationTokenSource<br />&#160;&#160;member Cancel : unit -&gt; unit + 1 overload<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member IsCancellationRequested : bool<br />&#160;&#160;member Token : CancellationToken<br />&#160;&#160;static member CreateLinkedTokenSource : [&lt;ParamArray&gt;] tokens:CancellationToken[] -&gt; CancellationTokenSource + 1 overload<br /><br />Full name: System.Threading.CancellationTokenSource<br /><br />--------------------<br />CancellationTokenSource() : unit</div>
<div class="tip" id="fs7">static member DisposableAgent.Start : f:(MailboxProcessor&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;) -&gt; DisposableAgent&lt;&#39;T&gt;<br /><br />Full name: Script.DisposableAgent`1.Start<br /><em><br /><br />&#160;Start a new disposable agent using the specified body function<br />&#160;(the method creates a new cancellation token for the agent)</em></div>
<div class="tip" id="fs8">val f : (MailboxProcessor&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;)</div>
<div class="tip" id="fs9">property CancellationTokenSource.Token: CancellationToken</div>
<div class="tip" id="fs10">val x : DisposableAgent&lt;&#39;T&gt;</div>
<div class="tip" id="fs11">member DisposableAgent.CurrentQueueLength : int<br /><br />Full name: Script.DisposableAgent`1.CurrentQueueLength<br /><em><br /><br />&#160;Returns the number of unprocessed messages in the message queue of the agent.</em></div>
<div class="tip" id="fs12">property MailboxProcessor.CurrentQueueLength: int</div>
<div class="tip" id="fs13">Multiple items<br />type CLIEventAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; CLIEventAttribute<br /><br />Full name: Microsoft.FSharp.Core.CLIEventAttribute<br /><br />--------------------<br />new : unit -&gt; CLIEventAttribute</div>
<div class="tip" id="fs14">member DisposableAgent.Error : IEvent&lt;Handler&lt;Exception&gt;,Exception&gt;<br /><br />Full name: Script.DisposableAgent`1.Error<br /><em><br /><br />&#160;Occurs when the execution of the agent results in an exception.</em></div>
<div class="tip" id="fs15">event MailboxProcessor.Error: IEvent&lt;Handler&lt;Exception&gt;,Exception&gt;</div>
<div class="tip" id="fs16">member DisposableAgent.Receive : ?timeout:int -&gt; Async&lt;&#39;T&gt;<br /><br />Full name: Script.DisposableAgent`1.Receive<br /><em><br /><br />&#160;Waits for a message. This will consume the first message in arrival order.</em></div>
<div class="tip" id="fs17">val timeout : int option</div>
<div class="tip" id="fs18">member MailboxProcessor.Receive : ?timeout:int -&gt; Async&lt;&#39;Msg&gt;</div>
<div class="tip" id="fs19">member DisposableAgent.Scan : scanner:(&#39;T -&gt; Async&lt;&#39;a&gt; option) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br /><br />Full name: Script.DisposableAgent`1.Scan<br /><em><br /><br />&#160;Scans for a message by looking through messages in arrival order until scanner <br />&#160;returns a Some value. Other messages remain in the queue.</em></div>
<div class="tip" id="fs20">val scanner : (&#39;T -&gt; Async&lt;&#39;a&gt; option)</div>
<div class="tip" id="fs21">member MailboxProcessor.Scan : scanner:(&#39;Msg -&gt; Async&lt;&#39;T&gt; option) * ?timeout:int -&gt; Async&lt;&#39;T&gt;</div>
<div class="tip" id="fs22">member DisposableAgent.TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a option<br /><br />Full name: Script.DisposableAgent`1.TryPostAndReply<br /><em><br /><br />&#160;Like PostAndReply, but returns None if no reply within the timeout period.</em></div>
<div class="tip" id="fs23">val buildMessage : (AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T)</div>
<div class="tip" id="fs24">member MailboxProcessor.TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply option</div>
<div class="tip" id="fs25">member DisposableAgent.TryReceive : ?timeout:int -&gt; Async&lt;&#39;T option&gt;<br /><br />Full name: Script.DisposableAgent`1.TryReceive<br /><em><br /><br />&#160;Waits for a message. This will consume the first message in arrival order.</em></div>
<div class="tip" id="fs26">member MailboxProcessor.TryReceive : ?timeout:int -&gt; Async&lt;&#39;Msg option&gt;</div>
<div class="tip" id="fs27">member DisposableAgent.TryScan : scanner:(&#39;T -&gt; Async&lt;&#39;a&gt; option) * ?timeout:int -&gt; Async&lt;&#39;a option&gt;<br /><br />Full name: Script.DisposableAgent`1.TryScan<br /><em><br /><br />&#160;Scans for a message by looking through messages in arrival order until scanner<br />&#160;returns a Some value. Other messages remain in the queue.</em></div>
<div class="tip" id="fs28">member MailboxProcessor.TryScan : scanner:(&#39;Msg -&gt; Async&lt;&#39;T&gt; option) * ?timeout:int -&gt; Async&lt;&#39;T option&gt;</div>
<div class="tip" id="fs29">member DisposableAgent.Post : m:&#39;T -&gt; unit<br /><br />Full name: Script.DisposableAgent`1.Post<br /><em><br /><br />&#160;Posts a message to the message queue of the MailboxProcessor, asynchronously.</em></div>
<div class="tip" id="fs30">val m : &#39;T</div>
<div class="tip" id="fs31">member MailboxProcessor.Post : message:&#39;Msg -&gt; unit</div>
<div class="tip" id="fs32">member DisposableAgent.PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a<br /><br />Full name: Script.DisposableAgent`1.PostAndReply<br /><em><br /><br />&#160;Posts a message to an agent and await a reply on the channel, synchronously.</em></div>
<div class="tip" id="fs33">member MailboxProcessor.PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply</div>
<div class="tip" id="fs34">member DisposableAgent.PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a option&gt;<br /><br />Full name: Script.DisposableAgent`1.PostAndTryAsyncReply<br /><em><br /><br />&#160;Like PostAndAsyncReply, but returns None if no reply within the timeout period.</em></div>
<div class="tip" id="fs35">member MailboxProcessor.PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply option&gt;</div>
<div class="tip" id="fs36">member DisposableAgent.PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br /><br />Full name: Script.DisposableAgent`1.PostAndAsyncReply<br /><em><br /><br />&#160;Posts a message to an agent and await a reply on the channel, asynchronously.</em></div>
<div class="tip" id="fs37">member MailboxProcessor.PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply&gt;</div>
<div class="tip" id="fs38">type IDisposable =<br />&#160;&#160;member Dispose : unit -&gt; unit<br /><br />Full name: System.IDisposable</div>
<div class="tip" id="fs39">override DisposableAgent.Dispose : unit -&gt; unit<br /><br />Full name: Script.DisposableAgent`1.Dispose</div>
<div class="tip" id="fs40">CancellationTokenSource.Cancel() : unit<br />CancellationTokenSource.Cancel(throwOnFirstException: bool) : unit</div>
<div class="tip" id="fs41">val op : Async&lt;unit&gt;<br /><br />Full name: Script.op</div>
<div class="tip" id="fs42">val async : AsyncBuilder<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.async</div>
<div class="tip" id="fs43">val agent : DisposableAgent&lt;int * AsyncReplyChannel&lt;unit&gt;&gt;</div>
<div class="tip" id="fs44">type DisposableAgent&lt;&#39;T&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;private new : mbox:Agent&lt;&#39;T&gt; * cts:CancellationTokenSource -&gt; DisposableAgent&lt;&#39;T&gt;<br />&#160;&#160;member Post : m:&#39;T -&gt; unit<br />&#160;&#160;member PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a<br />&#160;&#160;member PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a option&gt;<br />&#160;&#160;member Receive : ?timeout:int -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Scan : scanner:(&#39;T -&gt; Async&lt;&#39;a&gt; option) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a option<br />&#160;&#160;member TryReceive : ?timeout:int -&gt; Async&lt;&#39;T option&gt;<br />&#160;&#160;...<br /><br />Full name: Script.DisposableAgent&lt;_&gt;<br /><em><br /><br />&#160;Wrapper for the standard F# agent (MailboxProcessor) that<br />&#160;supports stopping of the agent&#39;s body using the IDisposable <br />&#160;interface (the type automatically creates a cancellation token)</em></div>
<div class="tip" id="fs45">static member DisposableAgent.Start : f:(MailboxProcessor&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;) -&gt; DisposableAgent&lt;&#39;T&gt;<br /><em><br /><br />&#160;Start a new disposable agent using the specified body function<br />&#160;(the method creates a new cancellation token for the agent)</em></div>
<div class="tip" id="fs46">val agent : MailboxProcessor&lt;int * AsyncReplyChannel&lt;unit&gt;&gt;</div>
<div class="tip" id="fs47">val msg : (int * AsyncReplyChannel&lt;unit&gt;) option</div>
<div class="tip" id="fs48">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs49">val n : int</div>
<div class="tip" id="fs50">val reply : AsyncReplyChannel&lt;unit&gt;</div>
<div class="tip" id="fs51">type AsyncReplyChannel&lt;&#39;Reply&gt;<br />member Reply : value:&#39;Reply -&gt; unit<br /><br />Full name: Microsoft.FSharp.Control.AsyncReplyChannel&lt;_&gt;</div>
<div class="tip" id="fs52">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs53">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs54">member AsyncReplyChannel.Reply : value:&#39;Reply -&gt; unit</div>
<div class="tip" id="fs55">val i : int</div>
<div class="tip" id="fs56">member DisposableAgent.PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br /><em><br /><br />&#160;Posts a message to an agent and await a reply on the channel, asynchronously.</em></div>
<div class="tip" id="fs57">val r : AsyncReplyChannel&lt;unit&gt;</div>
<div class="tip" id="fs58">Multiple items<br />type Async<br />static member AsBeginEnd : computation:(&#39;Arg -&gt; Async&lt;&#39;T&gt;) -&gt; (&#39;Arg * AsyncCallback * obj -&gt; IAsyncResult) * (IAsyncResult -&gt; &#39;T) * (IAsyncResult -&gt; unit)<br />static member AwaitEvent : event:IEvent&lt;&#39;Del,&#39;T&gt; * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt; (requires delegate and &#39;Del :&gt; Delegate)<br />static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member AwaitTask : task:Task&lt;&#39;T&gt; -&gt; Async&lt;&#39;T&gt;<br />static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member CancelDefaultToken : unit -&gt; unit<br />static member Catch : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;Choice&lt;&#39;T,exn&gt;&gt;<br />static member FromBeginEnd : beginAction:(AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg:&#39;Arg1 * beginAction:(&#39;Arg1 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * beginAction:(&#39;Arg1 * &#39;Arg2 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * arg3:&#39;Arg3 * beginAction:(&#39;Arg1 * &#39;Arg2 * &#39;Arg3 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromContinuations : callback:((&#39;T -&gt; unit) * (exn -&gt; unit) * (OperationCanceledException -&gt; unit) -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member Ignore : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;<br />static member OnCancel : interruption:(unit -&gt; unit) -&gt; Async&lt;IDisposable&gt;<br />static member Parallel : computations:seq&lt;Async&lt;&#39;T&gt;&gt; -&gt; Async&lt;&#39;T []&gt;<br />static member RunSynchronously : computation:Async&lt;&#39;T&gt; * ?timeout:int * ?cancellationToken:CancellationToken -&gt; &#39;T<br />static member Sleep : millisecondsDueTime:int -&gt; Async&lt;unit&gt;<br />static member Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&gt; Task&lt;&#39;T&gt;<br />static member StartChild : computation:Async&lt;&#39;T&gt; * ?millisecondsTimeout:int -&gt; Async&lt;Async&lt;&#39;T&gt;&gt;<br />static member StartChildAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions -&gt; Async&lt;Task&lt;&#39;T&gt;&gt;<br />static member StartImmediate : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartWithContinuations : computation:Async&lt;&#39;T&gt; * continuation:(&#39;T -&gt; unit) * exceptionContinuation:(exn -&gt; unit) * cancellationContinuation:(OperationCanceledException -&gt; unit) * ?cancellationToken:CancellationToken -&gt; unit<br />static member SwitchToContext : syncContext:SynchronizationContext -&gt; Async&lt;unit&gt;<br />static member SwitchToNewThread : unit -&gt; Async&lt;unit&gt;<br />static member SwitchToThreadPool : unit -&gt; Async&lt;unit&gt;<br />static member TryCancelled : computation:Async&lt;&#39;T&gt; * compensation:(OperationCanceledException -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member CancellationToken : Async&lt;CancellationToken&gt;<br />static member DefaultCancellationToken : CancellationToken<br /><br />Full name: Microsoft.FSharp.Control.Async<br /><br />--------------------<br />type Async&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Async&lt;_&gt;</div>
<div class="tip" id="fs59">static member Async.Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit</div>

