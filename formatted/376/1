<h2><a name="Implementation" class="anchor" href="#Implementation">Implementation</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">Agent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">MailboxProcessor</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>

<span class="c">/// Wrapper for the standard F# agent (MailboxProcessor) that</span>
<span class="c">/// supports stopping of the agent&#39;s body using the IDisposable </span>
<span class="c">/// interface (the type automatically creates a cancellation token)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">DisposableAgent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">private</span> (<span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">mbox</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 5)" onmouseover="showTip(event, 'fs1', 5)" class="t">Agent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">cts</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">CancellationTokenSource</span>) <span class="o">=</span> 

  <span class="c">/// Start a new disposable agent using the specified body function</span>
  <span class="c">/// (the method creates a new cancellation token for the agent)</span>
  <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">Start</span>(<span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="f">f</span>) <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="i">cts</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="t">CancellationTokenSource</span>()
    <span class="k">new</span> <span onmouseout="hideTip(event, 'fs3', 12)" onmouseover="showTip(event, 'fs3', 12)" class="t">DisposableAgent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs1', 13)" onmouseover="showTip(event, 'fs1', 13)" class="t">Agent</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span><span class="o">.</span><span class="f">Start</span>(<span onmouseout="hideTip(event, 'fs8', 14)" onmouseover="showTip(event, 'fs8', 14)" class="f">f</span>, <span class="i">cancellationToken</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="i">cts</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="i">Token</span>), <span onmouseout="hideTip(event, 'fs5', 17)" onmouseover="showTip(event, 'fs5', 17)" class="i">cts</span>)

  <span id="fst10" onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18, document.getElementById('fst10'))" class="omitted">(Boilerplate code that wraps standard methods of Agent)</span>

  <span class="c">// Disposes the agent and cancels the body</span>
  <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="t">IDisposable</span> <span class="k">with</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="f">Dispose</span>() <span class="o">=</span> 
      (<span onmouseout="hideTip(event, 'fs4', 22)" onmouseover="showTip(event, 'fs4', 22)" class="i">mbox</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs11', 23)" onmouseover="showTip(event, 'fs11', 23)" class="t">IDisposable</span>)<span class="o">.</span><span class="f">Dispose</span>()
      <span onmouseout="hideTip(event, 'fs5', 24)" onmouseover="showTip(event, 'fs5', 24)" class="i">cts</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="f">Cancel</span>()
</code></pre></td>
</tr>
</table>
<h2><a name="Sample-usage" class="anchor" href="#Sample-usage">Sample usage</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="i">op</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 27)" onmouseover="showTip(event, 'fs16', 27)" class="i">async</span> {
  <span class="c">// Create a local agent that is disposed when the </span>
  <span class="c">// workflow completes (using the &#39;use&#39; construct)</span>
  <span class="k">use</span> <span onmouseout="hideTip(event, 'fs17', 28)" onmouseover="showTip(event, 'fs17', 28)" class="i">agent</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 29)" onmouseover="showTip(event, 'fs18', 29)" class="t">DisposableAgent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 30)" onmouseover="showTip(event, 'fs19', 30)" class="f">Start</span>(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="i">agent</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs16', 32)" onmouseover="showTip(event, 'fs16', 32)" class="i">async</span> { 
    <span class="k">try</span> 
      <span class="k">while</span> <span class="k">true</span> <span class="k">do</span>
        <span class="c">// Wait for a message - note that we use timeout</span>
        <span class="c">// to allow cancellation (when the operation completes)</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs21', 33)" onmouseover="showTip(event, 'fs21', 33)" class="i">msg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 34)" onmouseover="showTip(event, 'fs20', 34)" class="i">agent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 35)" onmouseover="showTip(event, 'fs22', 35)" class="f">TryReceive</span>(<span class="n">1000</span>)
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs21', 36)" onmouseover="showTip(event, 'fs21', 36)" class="i">msg</span> <span class="k">with</span> 
        | <span onmouseout="hideTip(event, 'fs23', 37)" onmouseover="showTip(event, 'fs23', 37)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs24', 38)" onmouseover="showTip(event, 'fs24', 38)" class="i">n</span>, <span onmouseout="hideTip(event, 'fs25', 39)" onmouseover="showTip(event, 'fs25', 39)" class="i">reply</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs26', 40)" onmouseover="showTip(event, 'fs26', 40)" class="t">AsyncReplyChannel</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs27', 41)" onmouseover="showTip(event, 'fs27', 41)" class="t">unit</span><span class="o">&gt;</span>) <span class="k">-&gt;</span>
            <span class="c">// Print number and reply to the sender</span>
            <span onmouseout="hideTip(event, 'fs28', 42)" onmouseover="showTip(event, 'fs28', 42)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%d</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs24', 43)" onmouseover="showTip(event, 'fs24', 43)" class="i">n</span>
            <span onmouseout="hideTip(event, 'fs25', 44)" onmouseover="showTip(event, 'fs25', 44)" class="i">reply</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 45)" onmouseover="showTip(event, 'fs29', 45)" class="f">Reply</span>(())
        | _ <span class="k">-&gt;</span> ()
    <span class="k">finally</span> 
      <span class="c">// Called when the agent is disposed</span>
      <span onmouseout="hideTip(event, 'fs28', 46)" onmouseover="showTip(event, 'fs28', 46)" class="f">printfn</span> <span class="s">&quot;agent completed&quot;</span> })
  
  <span class="c">// Do some processing using the agent...</span>
  <span class="k">for</span> <span onmouseout="hideTip(event, 'fs30', 47)" onmouseover="showTip(event, 'fs30', 47)" class="i">i</span> <span class="k">in</span> <span class="n">0</span> <span class="o">..</span> <span class="n">10</span> <span class="k">do</span> 
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs17', 48)" onmouseover="showTip(event, 'fs17', 48)" class="i">agent</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 49)" onmouseover="showTip(event, 'fs31', 49)" class="f">PostAndAsyncReply</span>(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs32', 50)" onmouseover="showTip(event, 'fs32', 50)" class="i">r</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs30', 51)" onmouseover="showTip(event, 'fs30', 51)" class="i">i</span>, <span onmouseout="hideTip(event, 'fs32', 52)" onmouseover="showTip(event, 'fs32', 52)" class="i">r</span>) 
  <span onmouseout="hideTip(event, 'fs28', 53)" onmouseover="showTip(event, 'fs28', 53)" class="f">printfn</span> <span class="s">&quot;workflow completed&quot;</span> }

<span onmouseout="hideTip(event, 'fs33', 54)" onmouseover="showTip(event, 'fs33', 54)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 55)" onmouseover="showTip(event, 'fs34', 55)" class="f">Start</span>(<span onmouseout="hideTip(event, 'fs15', 56)" onmouseover="showTip(event, 'fs15', 56)" class="i">op</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">type Agent&lt;&#39;T&gt; = MailboxProcessor&lt;&#39;T&gt;<br /><br />Full name: Script.Agent&lt;_&gt;</div>
<div class="tip" id="fs2">Multiple items<br />type MailboxProcessor&lt;&#39;Msg&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;new : body:(MailboxProcessor&lt;&#39;Msg&gt; -&gt; Async&lt;unit&gt;) * ?cancellationToken:CancellationToken -&gt; MailboxProcessor&lt;&#39;Msg&gt;<br />&#160;&#160;member Post : message:&#39;Msg -&gt; unit<br />&#160;&#160;member PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply&gt;<br />&#160;&#160;member PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply<br />&#160;&#160;member PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply option&gt;<br />&#160;&#160;member Receive : ?timeout:int -&gt; Async&lt;&#39;Msg&gt;<br />&#160;&#160;member Scan : scanner:(&#39;Msg -&gt; Async&lt;&#39;T&gt; option) * ?timeout:int -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Start : unit -&gt; unit<br />&#160;&#160;member TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply option<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Control.MailboxProcessor&lt;_&gt;<br /><br />--------------------<br />new : body:(MailboxProcessor&lt;&#39;Msg&gt; -&gt; Async&lt;unit&gt;) * ?cancellationToken:CancellationToken -&gt; MailboxProcessor&lt;&#39;Msg&gt;</div>
<div class="tip" id="fs3">Multiple items<br />type DisposableAgent&lt;&#39;T&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;private new : mbox:Agent&lt;&#39;T&gt; * cts:CancellationTokenSource -&gt; DisposableAgent&lt;&#39;T&gt;<br />&#160;&#160;member Post : m:&#39;T -&gt; unit<br />&#160;&#160;member PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a<br />&#160;&#160;member PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a option&gt;<br />&#160;&#160;member Receive : ?timeout:int -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Scan : scanner:(&#39;T -&gt; Async&lt;&#39;a&gt; option) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a option<br />&#160;&#160;member TryReceive : ?timeout:int -&gt; Async&lt;&#39;T option&gt;<br />&#160;&#160;...<br /><br />Full name: Script.DisposableAgent&lt;_&gt;<br /><em><br /><br />&#160;Wrapper for the standard F# agent (MailboxProcessor) that<br />&#160;supports stopping of the agent&#39;s body using the IDisposable <br />&#160;interface (the type automatically creates a cancellation token)</em><br /><br />--------------------<br />private new : mbox:Agent&lt;&#39;T&gt; * cts:CancellationTokenSource -&gt; DisposableAgent&lt;&#39;T&gt;</div>
<div class="tip" id="fs4">val mbox : Agent&lt;&#39;T&gt;</div>
<div class="tip" id="fs5">val cts : CancellationTokenSource</div>
<div class="tip" id="fs6">Multiple items<br />type CancellationTokenSource =<br />&#160;&#160;new : unit -&gt; CancellationTokenSource<br />&#160;&#160;member Cancel : unit -&gt; unit + 1 overload<br />&#160;&#160;member Dispose : unit -&gt; unit<br />&#160;&#160;member IsCancellationRequested : bool<br />&#160;&#160;member Token : CancellationToken<br />&#160;&#160;static member CreateLinkedTokenSource : [&lt;ParamArray&gt;] tokens:CancellationToken[] -&gt; CancellationTokenSource + 1 overload<br /><br />Full name: System.Threading.CancellationTokenSource<br /><br />--------------------<br />CancellationTokenSource() : unit</div>
<div class="tip" id="fs7">static member DisposableAgent.Start : f:(MailboxProcessor&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;) -&gt; DisposableAgent&lt;&#39;T&gt;<br /><br />Full name: Script.DisposableAgent`1.Start<br /><em><br /><br />&#160;Start a new disposable agent using the specified body function<br />&#160;(the method creates a new cancellation token for the agent)</em></div>
<div class="tip" id="fs8">val f : (MailboxProcessor&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;)</div>
<div class="tip" id="fs9">property CancellationTokenSource.Token: CancellationToken</div>
<div class="tip" id="fs10">/// Returns the number of unprocessed messages in the message queue of the agent.<br />&#160;&#160;member x.CurrentQueueLength = mbox.CurrentQueueLength<br />&#160;&#160;/// Occurs when the execution of the agent results in an exception.<br />&#160;&#160;[&lt;CLIEvent&gt;]<br />&#160;&#160;member x.Error = mbox.Error<br />&#160;&#160;/// Waits for a message. This will consume the first message in arrival order.<br />&#160;&#160;member x.Receive(?timeout) = mbox.Receive(?timeout = timeout)<br />&#160;&#160;/// Scans for a message by looking through messages in arrival order until scanner <br />&#160;&#160;/// returns a Some value. Other messages remain in the queue.<br />&#160;&#160;member x.Scan(scanner, ?timeout) = mbox.Scan(scanner, ?timeout = timeout)<br />&#160;&#160;/// Like PostAndReply, but returns None if no reply within the timeout period.<br />&#160;&#160;member x.TryPostAndReply(buildMessage, ?timeout) = <br />&#160;&#160;&#160;&#160;mbox.TryPostAndReply(buildMessage, ?timeout = timeout)<br />&#160;&#160;/// Waits for a message. This will consume the first message in arrival order.<br />&#160;&#160;member x.TryReceive(?timeout) = <br />&#160;&#160;&#160;&#160;mbox.TryReceive(?timeout = timeout)<br />&#160;&#160;/// Scans for a message by looking through messages in arrival order until scanner<br />&#160;&#160;/// returns a Some value. Other messages remain in the queue.<br />&#160;&#160;member x.TryScan(scanner, ?timeout) = <br />&#160;&#160;&#160;&#160;mbox.TryScan(scanner, ?timeout = timeout)<br />&#160;&#160;/// Posts a message to the message queue of the MailboxProcessor, asynchronously.<br />&#160;&#160;member x.Post(m) = mbox.Post(m)<br />&#160;&#160;/// Posts a message to an agent and await a reply on the channel, synchronously.<br />&#160;&#160;member x.PostAndReply(buildMessage, ?timeout) = <br />&#160;&#160;&#160;&#160;mbox.PostAndReply(buildMessage, ?timeout = timeout)<br />&#160;&#160;/// Like PostAndAsyncReply, but returns None if no reply within the timeout period.<br />&#160;&#160;member x.PostAndTryAsyncReply(buildMessage, ?timeout) = <br />&#160;&#160;&#160;&#160;mbox.PostAndTryAsyncReply(buildMessage, ?timeout = timeout)<br />&#160;&#160;/// Posts a message to an agent and await a reply on the channel, asynchronously.<br />&#160;&#160;member x.PostAndAsyncReply(buildMessage, ?timeout) = <br />&#160;&#160;&#160;&#160;mbox.PostAndAsyncReply(buildMessage, ?timeout=timeout)</div>
<div class="tip" id="fs11">type IDisposable =<br />&#160;&#160;member Dispose : unit -&gt; unit<br /><br />Full name: System.IDisposable</div>
<div class="tip" id="fs12">val x : DisposableAgent&lt;&#39;T&gt;</div>
<div class="tip" id="fs13">override DisposableAgent.Dispose : unit -&gt; unit<br /><br />Full name: Script.DisposableAgent`1.Dispose</div>
<div class="tip" id="fs14">CancellationTokenSource.Cancel() : unit<br />CancellationTokenSource.Cancel(throwOnFirstException: bool) : unit</div>
<div class="tip" id="fs15">val op : Async&lt;unit&gt;<br /><br />Full name: Script.op</div>
<div class="tip" id="fs16">val async : AsyncBuilder<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.async</div>
<div class="tip" id="fs17">val agent : DisposableAgent&lt;int * AsyncReplyChannel&lt;unit&gt;&gt;</div>
<div class="tip" id="fs18">type DisposableAgent&lt;&#39;T&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;private new : mbox:Agent&lt;&#39;T&gt; * cts:CancellationTokenSource -&gt; DisposableAgent&lt;&#39;T&gt;<br />&#160;&#160;member Post : m:&#39;T -&gt; unit<br />&#160;&#160;member PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a<br />&#160;&#160;member PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a option&gt;<br />&#160;&#160;member Receive : ?timeout:int -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Scan : scanner:(&#39;T -&gt; Async&lt;&#39;a&gt; option) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br />&#160;&#160;member TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; &#39;a option<br />&#160;&#160;member TryReceive : ?timeout:int -&gt; Async&lt;&#39;T option&gt;<br />&#160;&#160;...<br /><br />Full name: Script.DisposableAgent&lt;_&gt;<br /><em><br /><br />&#160;Wrapper for the standard F# agent (MailboxProcessor) that<br />&#160;supports stopping of the agent&#39;s body using the IDisposable <br />&#160;interface (the type automatically creates a cancellation token)</em></div>
<div class="tip" id="fs19">static member DisposableAgent.Start : f:(MailboxProcessor&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;) -&gt; DisposableAgent&lt;&#39;T&gt;<br /><em><br /><br />&#160;Start a new disposable agent using the specified body function<br />&#160;(the method creates a new cancellation token for the agent)</em></div>
<div class="tip" id="fs20">val agent : MailboxProcessor&lt;int * AsyncReplyChannel&lt;unit&gt;&gt;</div>
<div class="tip" id="fs21">val msg : (int * AsyncReplyChannel&lt;unit&gt;) option</div>
<div class="tip" id="fs22">member MailboxProcessor.TryReceive : ?timeout:int -&gt; Async&lt;&#39;Msg option&gt;</div>
<div class="tip" id="fs23">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs24">val n : int</div>
<div class="tip" id="fs25">val reply : AsyncReplyChannel&lt;unit&gt;</div>
<div class="tip" id="fs26">type AsyncReplyChannel&lt;&#39;Reply&gt;<br />member Reply : value:&#39;Reply -&gt; unit<br /><br />Full name: Microsoft.FSharp.Control.AsyncReplyChannel&lt;_&gt;</div>
<div class="tip" id="fs27">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs28">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs29">member AsyncReplyChannel.Reply : value:&#39;Reply -&gt; unit</div>
<div class="tip" id="fs30">val i : int</div>
<div class="tip" id="fs31">member DisposableAgent.PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;a&gt; -&gt; &#39;T) * ?timeout:int -&gt; Async&lt;&#39;a&gt;<br /><em><br /><br />&#160;Posts a message to an agent and await a reply on the channel, asynchronously.</em></div>
<div class="tip" id="fs32">val r : AsyncReplyChannel&lt;unit&gt;</div>
<div class="tip" id="fs33">Multiple items<br />type Async<br />static member AsBeginEnd : computation:(&#39;Arg -&gt; Async&lt;&#39;T&gt;) -&gt; (&#39;Arg * AsyncCallback * obj -&gt; IAsyncResult) * (IAsyncResult -&gt; &#39;T) * (IAsyncResult -&gt; unit)<br />static member AwaitEvent : event:IEvent&lt;&#39;Del,&#39;T&gt; * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt; (requires delegate and &#39;Del :&gt; Delegate)<br />static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member AwaitTask : task:Task&lt;&#39;T&gt; -&gt; Async&lt;&#39;T&gt;<br />static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member CancelDefaultToken : unit -&gt; unit<br />static member Catch : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;Choice&lt;&#39;T,exn&gt;&gt;<br />static member FromBeginEnd : beginAction:(AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg:&#39;Arg1 * beginAction:(&#39;Arg1 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * beginAction:(&#39;Arg1 * &#39;Arg2 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * arg3:&#39;Arg3 * beginAction:(&#39;Arg1 * &#39;Arg2 * &#39;Arg3 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromContinuations : callback:((&#39;T -&gt; unit) * (exn -&gt; unit) * (OperationCanceledException -&gt; unit) -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member Ignore : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;<br />static member OnCancel : interruption:(unit -&gt; unit) -&gt; Async&lt;IDisposable&gt;<br />static member Parallel : computations:seq&lt;Async&lt;&#39;T&gt;&gt; -&gt; Async&lt;&#39;T []&gt;<br />static member RunSynchronously : computation:Async&lt;&#39;T&gt; * ?timeout:int * ?cancellationToken:CancellationToken -&gt; &#39;T<br />static member Sleep : millisecondsDueTime:int -&gt; Async&lt;unit&gt;<br />static member Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&gt; Task&lt;&#39;T&gt;<br />static member StartChild : computation:Async&lt;&#39;T&gt; * ?millisecondsTimeout:int -&gt; Async&lt;Async&lt;&#39;T&gt;&gt;<br />static member StartChildAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions -&gt; Async&lt;Task&lt;&#39;T&gt;&gt;<br />static member StartImmediate : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartWithContinuations : computation:Async&lt;&#39;T&gt; * continuation:(&#39;T -&gt; unit) * exceptionContinuation:(exn -&gt; unit) * cancellationContinuation:(OperationCanceledException -&gt; unit) * ?cancellationToken:CancellationToken -&gt; unit<br />static member SwitchToContext : syncContext:SynchronizationContext -&gt; Async&lt;unit&gt;<br />static member SwitchToNewThread : unit -&gt; Async&lt;unit&gt;<br />static member SwitchToThreadPool : unit -&gt; Async&lt;unit&gt;<br />static member TryCancelled : computation:Async&lt;&#39;T&gt; * compensation:(OperationCanceledException -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member CancellationToken : Async&lt;CancellationToken&gt;<br />static member DefaultCancellationToken : CancellationToken<br /><br />Full name: Microsoft.FSharp.Control.Async<br /><br />--------------------<br />type Async&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Async&lt;_&gt;</div>
<div class="tip" id="fs34">static member Async.Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit</div>

