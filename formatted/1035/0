<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">namespace</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Numerics</span>

[&lt;<span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">AutoOpen</span>&gt;]
<span class="k">module</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">DivRem</span> <span class="o">=</span>
    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">DivRem</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="p">DivRem</span> <span class="k">with</span>
        <span class="k">static</span> <span class="k">member</span> (<span class="o">/%</span>) (<span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">x</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">int32</span>,  <span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="p">DivRem</span>) <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs1', 11)" onmouseover="showTip(event, 'fs1', 11)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="t">Math</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="f">DivRem</span>(<span onmouseout="hideTip(event, 'fs6', 14)" onmouseover="showTip(event, 'fs6', 14)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs8', 15)" onmouseover="showTip(event, 'fs8', 15)" class="i">y</span>)
        <span class="k">static</span> <span class="k">member</span> (<span class="o">/%</span>) (<span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="i">x</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 17)" onmouseover="showTip(event, 'fs12', 17)" class="t">int64</span>,  <span onmouseout="hideTip(event, 'fs5', 18)" onmouseover="showTip(event, 'fs5', 18)" class="p">DivRem</span>) <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs1', 20)" onmouseover="showTip(event, 'fs1', 20)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 21)" onmouseover="showTip(event, 'fs9', 21)" class="t">Math</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 22)" onmouseover="showTip(event, 'fs10', 22)" class="f">DivRem</span>(<span onmouseout="hideTip(event, 'fs11', 23)" onmouseover="showTip(event, 'fs11', 23)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs13', 24)" onmouseover="showTip(event, 'fs13', 24)" class="i">y</span>)
        <span class="k">static</span> <span class="k">member</span> (<span class="o">/%</span>) (<span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="i">x</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="t">bigint</span>, <span onmouseout="hideTip(event, 'fs5', 27)" onmouseover="showTip(event, 'fs5', 27)" class="p">DivRem</span>) <span class="o">=</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs16', 28)" onmouseover="showTip(event, 'fs16', 28)" class="i">y</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="t">BigInteger</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 30)" onmouseover="showTip(event, 'fs18', 30)" class="f">DivRem</span>(<span onmouseout="hideTip(event, 'fs14', 31)" onmouseover="showTip(event, 'fs14', 31)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs16', 32)" onmouseover="showTip(event, 'fs16', 32)" class="i">y</span>)

    <span class="k">let</span> <span class="k">inline</span> (<span class="o">/%</span>) <span onmouseout="hideTip(event, 'fs19', 33)" onmouseover="showTip(event, 'fs19', 33)" class="i">x</span> <span onmouseout="hideTip(event, 'fs20', 34)" onmouseover="showTip(event, 'fs20', 34)" class="i">y</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="i">x</span> <span class="o">/%</span> <span onmouseout="hideTip(event, 'fs5', 36)" onmouseover="showTip(event, 'fs5', 36)" class="p">DivRem</span>) <span onmouseout="hideTip(event, 'fs20', 37)" onmouseover="showTip(event, 'fs20', 37)" class="i">y</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Numerics</div>
<div class="tip" id="fs3">Multiple items<br />type AutoOpenAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; AutoOpenAttribute<br />&#160;&#160;new : path:string -&gt; AutoOpenAttribute<br />&#160;&#160;member Path : string<br /><br />Full name: Microsoft.FSharp.Core.AutoOpenAttribute<br /><br />--------------------<br />new : unit -&gt; AutoOpenAttribute<br />new : path:string -&gt; AutoOpenAttribute</div>
<div class="tip" id="fs4">Multiple items<br />union case DivRem.DivRem: DivRem<br /><br />--------------------<br />module DivRem<br /><br />from System.Numerics<br /><br />--------------------<br />type DivRem =<br />&#160;&#160;| DivRem<br />&#160;&#160;static member ( /% ) : x:int32 * DivRem:DivRem -&gt; (int -&gt; int * int)<br />&#160;&#160;static member ( /% ) : x:int64 * DivRem:DivRem -&gt; (int64 -&gt; int64 * int64)<br />&#160;&#160;static member ( /% ) : x:bigint * DivRem:DivRem -&gt; (BigInteger -&gt; BigInteger * BigInteger)<br /><br />Full name: System.Numerics.DivRem.DivRem</div>
<div class="tip" id="fs5">Multiple items<br />union case DivRem.DivRem: DivRem<br /><br />--------------------<br />type DivRem =<br />&#160;&#160;| DivRem<br />&#160;&#160;static member ( /% ) : x:int32 * DivRem:DivRem -&gt; (int -&gt; int * int)<br />&#160;&#160;static member ( /% ) : x:int64 * DivRem:DivRem -&gt; (int64 -&gt; int64 * int64)<br />&#160;&#160;static member ( /% ) : x:bigint * DivRem:DivRem -&gt; (BigInteger -&gt; BigInteger * BigInteger)<br /><br />Full name: System.Numerics.DivRem.DivRem</div>
<div class="tip" id="fs6">val x : int32</div>
<div class="tip" id="fs7">Multiple items<br />val int32 : value:&#39;T -&gt; int32 (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int32<br /><br />--------------------<br />type int32 = Int32<br /><br />Full name: Microsoft.FSharp.Core.int32</div>
<div class="tip" id="fs8">val y : int</div>
<div class="tip" id="fs9">type Math =<br />&#160;&#160;static val PI : float<br />&#160;&#160;static val E : float<br />&#160;&#160;static member Abs : value:sbyte -&gt; sbyte + 6 overloads<br />&#160;&#160;static member Acos : d:float -&gt; float<br />&#160;&#160;static member Asin : d:float -&gt; float<br />&#160;&#160;static member Atan : d:float -&gt; float<br />&#160;&#160;static member Atan2 : y:float * x:float -&gt; float<br />&#160;&#160;static member BigMul : a:int * b:int -&gt; int64<br />&#160;&#160;static member Ceiling : d:decimal -&gt; decimal + 1 overload<br />&#160;&#160;static member Cos : d:float -&gt; float<br />&#160;&#160;...<br /><br />Full name: System.Math</div>
<div class="tip" id="fs10">Math.DivRem(a: int64, b: int64, result: byref&lt;int64&gt;) : int64<br />Math.DivRem(a: int, b: int, result: byref&lt;int&gt;) : int</div>
<div class="tip" id="fs11">val x : int64</div>
<div class="tip" id="fs12">Multiple items<br />val int64 : value:&#39;T -&gt; int64 (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int64<br /><br />--------------------<br />type int64 = Int64<br /><br />Full name: Microsoft.FSharp.Core.int64<br /><br />--------------------<br />type int64&lt;&#39;Measure&gt; = int64<br /><br />Full name: Microsoft.FSharp.Core.int64&lt;_&gt;</div>
<div class="tip" id="fs13">val y : int64</div>
<div class="tip" id="fs14">val x : bigint</div>
<div class="tip" id="fs15">type bigint = BigInteger<br /><br />Full name: Microsoft.FSharp.Core.bigint</div>
<div class="tip" id="fs16">val y : BigInteger</div>
<div class="tip" id="fs17">Multiple items<br />type BigInteger =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;new : value:int -&gt; BigInteger + 7 overloads<br />&#160;&#160;&#160;&#160;member CompareTo : other:int64 -&gt; int + 3 overloads<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 3 overloads<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member IsEven : bool<br />&#160;&#160;&#160;&#160;member IsOne : bool<br />&#160;&#160;&#160;&#160;member IsPowerOfTwo : bool<br />&#160;&#160;&#160;&#160;member IsZero : bool<br />&#160;&#160;&#160;&#160;member Sign : int<br />&#160;&#160;&#160;&#160;member ToByteArray : unit -&gt; byte[]<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Numerics.BigInteger<br /><br />--------------------<br />BigInteger()<br />BigInteger(value: int) : unit<br />BigInteger(value: uint32) : unit<br />BigInteger(value: int64) : unit<br />BigInteger(value: uint64) : unit<br />BigInteger(value: float32) : unit<br />BigInteger(value: float) : unit<br />BigInteger(value: decimal) : unit<br />BigInteger(value: byte []) : unit</div>
<div class="tip" id="fs18">BigInteger.DivRem(dividend: BigInteger, divisor: BigInteger, remainder: byref&lt;BigInteger&gt;) : BigInteger</div>
<div class="tip" id="fs19">val x : &#39;a (requires member ( /% ))</div>
<div class="tip" id="fs20">val y : &#39;b</div>

