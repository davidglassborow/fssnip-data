<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">module</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">LanguageCombinator</span>

<span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">FParsec</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">System</span>

<span class="k">exception</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">Error</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">string</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">Op</span> <span class="o">=</span> 
    | <span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="p">Plus</span>
    | <span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="p">Minus</span>
        
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="t">Ast</span> <span class="o">=</span>     
    | <span onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10)" class="p">Statement</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="t">Ast</span>    
    | <span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="p">Expression</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="t">Ex</span>    
    | <span onmouseout="hideTip(event, 'fs13', 14)" onmouseover="showTip(event, 'fs13', 14)" class="p">Scope</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="t">Ast</span> <span onmouseout="hideTip(event, 'fs14', 16)" onmouseover="showTip(event, 'fs14', 16)" class="t">list</span>
    | <span onmouseout="hideTip(event, 'fs15', 17)" onmouseover="showTip(event, 'fs15', 17)" class="p">Function</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs16', 18)" onmouseover="showTip(event, 'fs16', 18)" class="t">Argument</span> <span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="t">list</span> <span onmouseout="hideTip(event, 'fs17', 20)" onmouseover="showTip(event, 'fs17', 20)" class="t">option</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs9', 21)" onmouseover="showTip(event, 'fs9', 21)" class="t">Ast</span> <span onmouseout="hideTip(event, 'fs14', 22)" onmouseover="showTip(event, 'fs14', 22)" class="t">list</span> <span onmouseout="hideTip(event, 'fs17', 23)" onmouseover="showTip(event, 'fs17', 23)" class="t">option</span>
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="t">Ex</span> <span class="o">=</span>
    | <span onmouseout="hideTip(event, 'fs18', 25)" onmouseover="showTip(event, 'fs18', 25)" class="p">Single</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs9', 26)" onmouseover="showTip(event, 'fs9', 26)" class="t">Ast</span>
    | <span onmouseout="hideTip(event, 'fs19', 27)" onmouseover="showTip(event, 'fs19', 27)" class="p">Full</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs12', 28)" onmouseover="showTip(event, 'fs12', 28)" class="t">Ex</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs6', 29)" onmouseover="showTip(event, 'fs6', 29)" class="t">Op</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs12', 30)" onmouseover="showTip(event, 'fs12', 30)" class="t">Ex</span>
    | <span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="p">Float</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs21', 32)" onmouseover="showTip(event, 'fs21', 32)" class="t">float</span>
    | <span onmouseout="hideTip(event, 'fs22', 33)" onmouseover="showTip(event, 'fs22', 33)" class="p">Int</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs23', 34)" onmouseover="showTip(event, 'fs23', 34)" class="t">int</span>
    | <span onmouseout="hideTip(event, 'fs24', 35)" onmouseover="showTip(event, 'fs24', 35)" class="p">Literal</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs5', 36)" onmouseover="showTip(event, 'fs5', 36)" class="t">string</span>
    | <span onmouseout="hideTip(event, 'fs25', 37)" onmouseover="showTip(event, 'fs25', 37)" class="p">Variable</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs5', 38)" onmouseover="showTip(event, 'fs5', 38)" class="t">string</span>
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs16', 39)" onmouseover="showTip(event, 'fs16', 39)" class="t">Argument</span> <span class="o">=</span> 
    | <span onmouseout="hideTip(event, 'fs26', 40)" onmouseover="showTip(event, 'fs26', 40)" class="p">Element</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs12', 41)" onmouseover="showTip(event, 'fs12', 41)" class="t">Ex</span>

<span class="c">(* Literals *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 42)" onmouseover="showTip(event, 'fs27', 42)" class="f">quote</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 43)" onmouseover="showTip(event, 'fs28', 43)" class="f">pstring</span> <span class="s">&quot;</span><span class="e">\&quot;</span><span class="s">&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 44)" onmouseover="showTip(event, 'fs29', 44)" class="f">literal</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 45)" onmouseover="showTip(event, 'fs27', 45)" class="f">quote</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">.</span> <span onmouseout="hideTip(event, 'fs30', 46)" onmouseover="showTip(event, 'fs30', 46)" class="f">manyCharsTill</span> <span onmouseout="hideTip(event, 'fs31', 47)" onmouseover="showTip(event, 'fs31', 47)" class="f">anyChar</span> <span onmouseout="hideTip(event, 'fs27', 48)" onmouseover="showTip(event, 'fs27', 48)" class="f">quote</span> <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs24', 49)" onmouseover="showTip(event, 'fs24', 49)" class="p">Literal</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 50)" onmouseover="showTip(event, 'fs32', 50)" class="f">floatNum</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs33', 51)" onmouseover="showTip(event, 'fs33', 51)" class="f">pfloat</span> <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs20', 52)" onmouseover="showTip(event, 'fs20', 52)" class="p">Float</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 53)" onmouseover="showTip(event, 'fs34', 53)" class="f">intNum</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs35', 54)" onmouseover="showTip(event, 'fs35', 54)" class="f">pint32</span> <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs22', 55)" onmouseover="showTip(event, 'fs22', 55)" class="p">Int</span>

<span class="c">(* Variables *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 56)" onmouseover="showTip(event, 'fs36', 56)" class="f">variable</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 57)" onmouseover="showTip(event, 'fs37', 57)" class="f">many1Chars</span> (<span onmouseout="hideTip(event, 'fs38', 58)" onmouseover="showTip(event, 'fs38', 58)" class="f">satisfy</span> <span onmouseout="hideTip(event, 'fs39', 59)" onmouseover="showTip(event, 'fs39', 59)" class="f">isAsciiLetter</span>) <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs25', 60)" onmouseover="showTip(event, 'fs25', 60)" class="p">Variable</span>

<span class="c">(* Operators *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 61)" onmouseover="showTip(event, 'fs40', 61)" class="f">plus</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 62)" onmouseover="showTip(event, 'fs28', 62)" class="f">pstring</span> <span class="s">&quot;+&quot;</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">%</span> <span onmouseout="hideTip(event, 'fs7', 63)" onmouseover="showTip(event, 'fs7', 63)" class="p">Plus</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 64)" onmouseover="showTip(event, 'fs41', 64)" class="f">minus</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 65)" onmouseover="showTip(event, 'fs28', 65)" class="f">pstring</span> <span class="s">&quot;-&quot;</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">%</span> <span onmouseout="hideTip(event, 'fs8', 66)" onmouseover="showTip(event, 'fs8', 66)" class="p">Minus</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 67)" onmouseover="showTip(event, 'fs42', 67)" class="f">op</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs43', 68)" onmouseover="showTip(event, 'fs43', 68)" class="f">spaces</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">.</span> <span onmouseout="hideTip(event, 'fs44', 69)" onmouseover="showTip(event, 'fs44', 69)" class="f">choice</span>[<span onmouseout="hideTip(event, 'fs40', 70)" onmouseover="showTip(event, 'fs40', 70)" class="f">plus</span>;<span onmouseout="hideTip(event, 'fs41', 71)" onmouseover="showTip(event, 'fs41', 71)" class="f">minus</span>]

<span class="c">(* expressions *)</span>

<span class="c">// create a forward reference </span>
<span class="c">// the expr is what we&#39;ll use in our parser combinators</span>
<span class="c">// the exprImpl we&#39;ll populate iwth all the recursive options later</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 72)" onmouseover="showTip(event, 'fs45', 72)" class="f">expr</span>, <span onmouseout="hideTip(event, 'fs46', 73)" onmouseover="showTip(event, 'fs46', 73)" class="v">exprImpl</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 74)" onmouseover="showTip(event, 'fs47', 74)" class="f">createParserForwardedToRef</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 75)" onmouseover="showTip(event, 'fs48', 75)" class="f">expression1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs43', 76)" onmouseover="showTip(event, 'fs43', 76)" class="f">spaces</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">?</span> <span onmouseout="hideTip(event, 'fs44', 77)" onmouseover="showTip(event, 'fs44', 77)" class="f">choice</span>[<span onmouseout="hideTip(event, 'fs32', 78)" onmouseover="showTip(event, 'fs32', 78)" class="f">floatNum</span>;<span onmouseout="hideTip(event, 'fs34', 79)" onmouseover="showTip(event, 'fs34', 79)" class="f">intNum</span>;<span onmouseout="hideTip(event, 'fs29', 80)" onmouseover="showTip(event, 'fs29', 80)" class="f">literal</span>;<span onmouseout="hideTip(event, 'fs36', 81)" onmouseover="showTip(event, 'fs36', 81)" class="f">variable</span>] 

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs49', 82)" onmouseover="showTip(event, 'fs49', 82)" class="f">between</span> <span onmouseout="hideTip(event, 'fs50', 83)" onmouseover="showTip(event, 'fs50', 83)" class="i">a</span> <span onmouseout="hideTip(event, 'fs51', 84)" onmouseover="showTip(event, 'fs51', 84)" class="i">b</span> <span onmouseout="hideTip(event, 'fs52', 85)" onmouseover="showTip(event, 'fs52', 85)" class="f">p</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs28', 86)" onmouseover="showTip(event, 'fs28', 86)" class="f">pstring</span> <span onmouseout="hideTip(event, 'fs50', 87)" onmouseover="showTip(event, 'fs50', 87)" class="i">a</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">.</span> <span onmouseout="hideTip(event, 'fs52', 88)" onmouseover="showTip(event, 'fs52', 88)" class="f">p</span> <span class="o">.</span><span class="o">&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs28', 89)" onmouseover="showTip(event, 'fs28', 89)" class="f">pstring</span> <span onmouseout="hideTip(event, 'fs51', 90)" onmouseover="showTip(event, 'fs51', 90)" class="i">b</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs53', 91)" onmouseover="showTip(event, 'fs53', 91)" class="f">bracketExpression</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs45', 92)" onmouseover="showTip(event, 'fs45', 92)" class="f">expr</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs49', 93)" onmouseover="showTip(event, 'fs49', 93)" class="f">between</span> <span class="s">&quot;(&quot;</span> <span class="s">&quot;)&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs54', 94)" onmouseover="showTip(event, 'fs54', 94)" class="f">lhExpression</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs44', 95)" onmouseover="showTip(event, 'fs44', 95)" class="f">choice</span>[<span onmouseout="hideTip(event, 'fs48', 96)" onmouseover="showTip(event, 'fs48', 96)" class="f">expression1</span>; <span onmouseout="hideTip(event, 'fs53', 97)" onmouseover="showTip(event, 'fs53', 97)" class="f">bracketExpression</span>]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 98)" onmouseover="showTip(event, 'fs55', 98)" class="f">expressionOpration</span> <span class="o">=</span>  <span onmouseout="hideTip(event, 'fs54', 99)" onmouseover="showTip(event, 'fs54', 99)" class="f">lhExpression</span>                           <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">=?</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs56', 100)" onmouseover="showTip(event, 'fs56', 100)" class="i">operandL</span> <span class="k">-&gt;</span>
                          <span onmouseout="hideTip(event, 'fs42', 101)" onmouseover="showTip(event, 'fs42', 101)" class="f">op</span>                                     <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">=?</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs57', 102)" onmouseover="showTip(event, 'fs57', 102)" class="i">operator</span> <span class="k">-&gt;</span>
                          <span onmouseout="hideTip(event, 'fs44', 103)" onmouseover="showTip(event, 'fs44', 103)" class="f">choice</span>[<span onmouseout="hideTip(event, 'fs45', 104)" onmouseover="showTip(event, 'fs45', 104)" class="f">expr</span>;<span onmouseout="hideTip(event, 'fs53', 105)" onmouseover="showTip(event, 'fs53', 105)" class="f">bracketExpression</span>]         <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">=?</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs58', 106)" onmouseover="showTip(event, 'fs58', 106)" class="i">operandR</span> <span class="k">-&gt;</span>
                          <span onmouseout="hideTip(event, 'fs59', 107)" onmouseover="showTip(event, 'fs59', 107)" class="f">preturn</span> (<span onmouseout="hideTip(event, 'fs56', 108)" onmouseover="showTip(event, 'fs56', 108)" class="i">operandL</span>, <span onmouseout="hideTip(event, 'fs57', 109)" onmouseover="showTip(event, 'fs57', 109)" class="i">operator</span>, <span onmouseout="hideTip(event, 'fs58', 110)" onmouseover="showTip(event, 'fs58', 110)" class="i">operandR</span>) <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs19', 111)" onmouseover="showTip(event, 'fs19', 111)" class="p">Full</span> 

<span class="k">do</span> <span onmouseout="hideTip(event, 'fs46', 112)" onmouseover="showTip(event, 'fs46', 112)" class="v">exprImpl</span> <span class="o">:=</span> <span onmouseout="hideTip(event, 'fs43', 113)" onmouseover="showTip(event, 'fs43', 113)" class="f">spaces</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">.</span> <span onmouseout="hideTip(event, 'fs44', 114)" onmouseover="showTip(event, 'fs44', 114)" class="f">choice</span>[<span onmouseout="hideTip(event, 'fs60', 115)" onmouseover="showTip(event, 'fs60', 115)" class="f">attempt</span> <span onmouseout="hideTip(event, 'fs55', 116)" onmouseover="showTip(event, 'fs55', 116)" class="f">expressionOpration</span> <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs60', 117)" onmouseover="showTip(event, 'fs60', 117)" class="f">attempt</span> <span onmouseout="hideTip(event, 'fs53', 118)" onmouseover="showTip(event, 'fs53', 118)" class="f">bracketExpression</span> <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs48', 119)" onmouseover="showTip(event, 'fs48', 119)" class="f">expression1</span> ]

<span class="c">(* Statements *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs61', 120)" onmouseover="showTip(event, 'fs61', 120)" class="f">funcInners</span>, <span onmouseout="hideTip(event, 'fs62', 121)" onmouseover="showTip(event, 'fs62', 121)" class="v">funcInnersImpl</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs47', 122)" onmouseover="showTip(event, 'fs47', 122)" class="f">createParserForwardedToRef</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 123)" onmouseover="showTip(event, 'fs63', 123)" class="f">statement</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs45', 124)" onmouseover="showTip(event, 'fs45', 124)" class="f">expr</span> <span class="o">.</span><span class="o">&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs28', 125)" onmouseover="showTip(event, 'fs28', 125)" class="f">pstring</span> <span class="s">&quot;;&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 126)" onmouseover="showTip(event, 'fs64', 126)" class="f">statements</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs65', 127)" onmouseover="showTip(event, 'fs65', 127)" class="f">many1</span> (<span onmouseout="hideTip(event, 'fs43', 128)" onmouseover="showTip(event, 'fs43', 128)" class="f">spaces</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">?</span> <span onmouseout="hideTip(event, 'fs63', 129)" onmouseover="showTip(event, 'fs63', 129)" class="f">statement</span><span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs11', 130)" onmouseover="showTip(event, 'fs11', 130)" class="p">Expression</span>)

<span class="c">(* Functions *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs66', 131)" onmouseover="showTip(event, 'fs66', 131)" class="f">arguments</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs67', 132)" onmouseover="showTip(event, 'fs67', 132)" class="f">sepEndBy1</span> (<span onmouseout="hideTip(event, 'fs45', 133)" onmouseover="showTip(event, 'fs45', 133)" class="f">expr</span> <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs26', 134)" onmouseover="showTip(event, 'fs26', 134)" class="p">Element</span>) (<span onmouseout="hideTip(event, 'fs28', 135)" onmouseover="showTip(event, 'fs28', 135)" class="f">pstring</span> <span class="s">&quot;,&quot;</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs49', 136)" onmouseover="showTip(event, 'fs49', 136)" class="f">between</span> <span class="s">&quot;(&quot;</span> <span class="s">&quot;)&quot;</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs68', 137)" onmouseover="showTip(event, 'fs68', 137)" class="f">func</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs69', 138)" onmouseover="showTip(event, 'fs69', 138)" class="i">parse</span> {
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs70', 139)" onmouseover="showTip(event, 'fs70', 139)" class="f">skipStringCI</span> <span class="s">&quot;func&quot;</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs43', 140)" onmouseover="showTip(event, 'fs43', 140)" class="f">spaces</span>
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs71', 141)" onmouseover="showTip(event, 'fs71', 141)" class="i">arguments</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs72', 142)" onmouseover="showTip(event, 'fs72', 142)" class="f">opt</span> <span onmouseout="hideTip(event, 'fs71', 143)" onmouseover="showTip(event, 'fs71', 143)" class="f">arguments</span> 
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs70', 144)" onmouseover="showTip(event, 'fs70', 144)" class="f">skipStringCI</span> <span class="s">&quot;-&gt;&quot;</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs43', 145)" onmouseover="showTip(event, 'fs43', 145)" class="f">spaces</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs70', 146)" onmouseover="showTip(event, 'fs70', 146)" class="f">skipStringCI</span> <span class="s">&quot;{&quot;</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs43', 147)" onmouseover="showTip(event, 'fs43', 147)" class="f">spaces</span>
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs73', 148)" onmouseover="showTip(event, 'fs73', 148)" class="i">text</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs72', 149)" onmouseover="showTip(event, 'fs72', 149)" class="f">opt</span> <span onmouseout="hideTip(event, 'fs61', 150)" onmouseover="showTip(event, 'fs61', 150)" class="f">funcInners</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs43', 151)" onmouseover="showTip(event, 'fs43', 151)" class="f">spaces</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs70', 152)" onmouseover="showTip(event, 'fs70', 152)" class="f">skipStringCI</span> <span class="s">&quot;}&quot;</span>    
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs43', 153)" onmouseover="showTip(event, 'fs43', 153)" class="f">spaces</span>
    <span class="k">return</span> <span onmouseout="hideTip(event, 'fs15', 154)" onmouseover="showTip(event, 'fs15', 154)" class="p">Function</span>(<span onmouseout="hideTip(event, 'fs71', 155)" onmouseover="showTip(event, 'fs71', 155)" class="i">arguments</span>, <span onmouseout="hideTip(event, 'fs73', 156)" onmouseover="showTip(event, 'fs73', 156)" class="i">text</span>)
}

<span class="k">do</span> <span onmouseout="hideTip(event, 'fs62', 157)" onmouseover="showTip(event, 'fs62', 157)" class="v">funcInnersImpl</span> <span class="o">:=</span> <span onmouseout="hideTip(event, 'fs65', 158)" onmouseover="showTip(event, 'fs65', 158)" class="f">many1</span> (<span onmouseout="hideTip(event, 'fs43', 159)" onmouseover="showTip(event, 'fs43', 159)" class="f">spaces</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">?</span> <span onmouseout="hideTip(event, 'fs44', 160)" onmouseover="showTip(event, 'fs44', 160)" class="f">choice</span> [<span onmouseout="hideTip(event, 'fs68', 161)" onmouseover="showTip(event, 'fs68', 161)" class="f">func</span>; <span onmouseout="hideTip(event, 'fs63', 162)" onmouseover="showTip(event, 'fs63', 162)" class="f">statement</span> <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs11', 163)" onmouseover="showTip(event, 'fs11', 163)" class="p">Expression</span>])

<span class="c">(* Program lines *)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs74', 164)" onmouseover="showTip(event, 'fs74', 164)" class="f">programLines</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs43', 165)" onmouseover="showTip(event, 'fs43', 165)" class="f">spaces</span> <span class="o">&gt;</span><span class="o">&gt;</span><span class="o">.</span> <span onmouseout="hideTip(event, 'fs44', 166)" onmouseover="showTip(event, 'fs44', 166)" class="f">choice</span>[
                                        <span onmouseout="hideTip(event, 'fs68', 167)" onmouseover="showTip(event, 'fs68', 167)" class="f">func</span>;
                                        <span onmouseout="hideTip(event, 'fs64', 168)" onmouseover="showTip(event, 'fs64', 168)" class="f">statements</span> <span class="o">|&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs13', 169)" onmouseover="showTip(event, 'fs13', 169)" class="p">Scope</span>
                                    ]

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs75', 170)" onmouseover="showTip(event, 'fs75', 170)" class="f">program</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs76', 171)" onmouseover="showTip(event, 'fs76', 171)" class="f">many</span> <span onmouseout="hideTip(event, 'fs74', 172)" onmouseover="showTip(event, 'fs74', 172)" class="f">programLines</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs77', 173)" onmouseover="showTip(event, 'fs77', 173)" class="f">test</span> <span onmouseout="hideTip(event, 'fs78', 174)" onmouseover="showTip(event, 'fs78', 174)" class="i">input</span> <span class="o">=</span> <span class="k">match</span> <span onmouseout="hideTip(event, 'fs79', 175)" onmouseover="showTip(event, 'fs79', 175)" class="f">run</span> (<span onmouseout="hideTip(event, 'fs75', 176)" onmouseover="showTip(event, 'fs75', 176)" class="f">program</span> <span class="o">.</span><span class="o">&gt;&gt;</span> <span onmouseout="hideTip(event, 'fs80', 177)" onmouseover="showTip(event, 'fs80', 177)" class="f">eof</span>) <span onmouseout="hideTip(event, 'fs78', 178)" onmouseover="showTip(event, 'fs78', 178)" class="i">input</span> <span class="k">with</span>
                    | <span onmouseout="hideTip(event, 'fs81', 179)" onmouseover="showTip(event, 'fs81', 179)" class="p">Success</span>(<span onmouseout="hideTip(event, 'fs82', 180)" onmouseover="showTip(event, 'fs82', 180)" class="i">r</span>,_,_) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs82', 181)" onmouseover="showTip(event, 'fs82', 181)" class="i">r</span>
                    | <span onmouseout="hideTip(event, 'fs83', 182)" onmouseover="showTip(event, 'fs83', 182)" class="p">Failure</span>(<span onmouseout="hideTip(event, 'fs84', 183)" onmouseover="showTip(event, 'fs84', 183)" class="i">r</span>,_,_) <span class="k">-&gt;</span> 
                            <span onmouseout="hideTip(event, 'fs85', 184)" onmouseover="showTip(event, 'fs85', 184)" class="t">Console</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs86', 185)" onmouseover="showTip(event, 'fs86', 185)" class="f">WriteLine</span> <span onmouseout="hideTip(event, 'fs84', 186)" onmouseover="showTip(event, 'fs84', 186)" class="i">r</span>
                            <span onmouseout="hideTip(event, 'fs87', 187)" onmouseover="showTip(event, 'fs87', 187)" class="f">raise</span> (<span onmouseout="hideTip(event, 'fs4', 188)" onmouseover="showTip(event, 'fs4', 188)" class="t">Error</span>(<span onmouseout="hideTip(event, 'fs84', 189)" onmouseover="showTip(event, 'fs84', 189)" class="i">r</span>))
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">module LanguageCombinator</div>
<div class="tip" id="fs2">namespace FParsec</div>
<div class="tip" id="fs3">namespace System</div>
<div class="tip" id="fs4">Multiple items<br />exception Error of string<br /><br />Full name: LanguageCombinator.Error<br /><br />--------------------<br />module Error<br /><br />from FParsec</div>
<div class="tip" id="fs5">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs6">type Op =<br />&#160;&#160;| Plus<br />&#160;&#160;| Minus<br /><br />Full name: LanguageCombinator.Op</div>
<div class="tip" id="fs7">union case Op.Plus: Op</div>
<div class="tip" id="fs8">union case Op.Minus: Op</div>
<div class="tip" id="fs9">type Ast =<br />&#160;&#160;| Statement of Ast<br />&#160;&#160;| Expression of Ex<br />&#160;&#160;| Scope of Ast list<br />&#160;&#160;| Function of Argument list option * Ast list option<br /><br />Full name: LanguageCombinator.Ast</div>
<div class="tip" id="fs10">union case Ast.Statement: Ast -&gt; Ast</div>
<div class="tip" id="fs11">union case Ast.Expression: Ex -&gt; Ast</div>
<div class="tip" id="fs12">type Ex =<br />&#160;&#160;| Single of Ast<br />&#160;&#160;| Full of Ex * Op * Ex<br />&#160;&#160;| Float of float<br />&#160;&#160;| Int of int<br />&#160;&#160;| Literal of string<br />&#160;&#160;| Variable of string<br /><br />Full name: LanguageCombinator.Ex</div>
<div class="tip" id="fs13">union case Ast.Scope: Ast list -&gt; Ast</div>
<div class="tip" id="fs14">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs15">union case Ast.Function: Argument list option * Ast list option -&gt; Ast</div>
<div class="tip" id="fs16">type Argument = | Element of Ex<br /><br />Full name: LanguageCombinator.Argument</div>
<div class="tip" id="fs17">type &#39;T option = Option&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.option&lt;_&gt;</div>
<div class="tip" id="fs18">Multiple items<br />union case Ex.Single: Ast -&gt; Ex<br /><br />--------------------<br />type Single =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 3 overloads<br />&#160;&#160;&#160;&#160;static val MinValue : float32<br />&#160;&#160;&#160;&#160;static val Epsilon : float32<br />&#160;&#160;&#160;&#160;static val MaxValue : float32<br />&#160;&#160;&#160;&#160;static val PositiveInfinity : float32<br />&#160;&#160;&#160;&#160;static val NegativeInfinity : float32<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Single</div>
<div class="tip" id="fs19">union case Ex.Full: Ex * Op * Ex -&gt; Ex</div>
<div class="tip" id="fs20">union case Ex.Float: float -&gt; Ex</div>
<div class="tip" id="fs21">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.float<br /><br />--------------------<br />type float = Double<br /><br />Full name: Microsoft.FSharp.Core.float<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float<br /><br />Full name: Microsoft.FSharp.Core.float&lt;_&gt;</div>
<div class="tip" id="fs22">union case Ex.Int: int -&gt; Ex</div>
<div class="tip" id="fs23">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs24">Multiple items<br />union case Ex.Literal: string -&gt; Ex<br /><br />--------------------<br />type LiteralAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; LiteralAttribute<br /><br />Full name: Microsoft.FSharp.Core.LiteralAttribute<br /><br />--------------------<br />new : unit -&gt; LiteralAttribute</div>
<div class="tip" id="fs25">union case Ex.Variable: string -&gt; Ex</div>
<div class="tip" id="fs26">union case Argument.Element: Ex -&gt; Argument</div>
<div class="tip" id="fs27">val quote : Parser&lt;string,unit&gt;<br /><br />Full name: LanguageCombinator.quote</div>
<div class="tip" id="fs28">val pstring : string -&gt; Parser&lt;string,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.pstring</div>
<div class="tip" id="fs29">val literal : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.literal</div>
<div class="tip" id="fs30">val manyCharsTill : Parser&lt;char,&#39;u&gt; -&gt; Parser&lt;&#39;b,&#39;u&gt; -&gt; Parser&lt;string,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.manyCharsTill</div>
<div class="tip" id="fs31">val anyChar : Parser&lt;char,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.anyChar</div>
<div class="tip" id="fs32">val floatNum : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.floatNum</div>
<div class="tip" id="fs33">val pfloat : Parser&lt;float,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.pfloat</div>
<div class="tip" id="fs34">val intNum : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.intNum</div>
<div class="tip" id="fs35">val pint32 : Parser&lt;int32,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.pint32</div>
<div class="tip" id="fs36">val variable : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.variable</div>
<div class="tip" id="fs37">val many1Chars : Parser&lt;char,&#39;u&gt; -&gt; Parser&lt;string,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.many1Chars</div>
<div class="tip" id="fs38">val satisfy : (char -&gt; bool) -&gt; Parser&lt;char,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.satisfy</div>
<div class="tip" id="fs39">val isAsciiLetter : char -&gt; bool<br /><br />Full name: FParsec.CharParsers.isAsciiLetter</div>
<div class="tip" id="fs40">val plus : Parser&lt;Op,unit&gt;<br /><br />Full name: LanguageCombinator.plus</div>
<div class="tip" id="fs41">val minus : Parser&lt;Op,unit&gt;<br /><br />Full name: LanguageCombinator.minus</div>
<div class="tip" id="fs42">val op : Parser&lt;Op,unit&gt;<br /><br />Full name: LanguageCombinator.op</div>
<div class="tip" id="fs43">val spaces : Parser&lt;unit,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.spaces</div>
<div class="tip" id="fs44">val choice : seq&lt;Parser&lt;&#39;a,&#39;u&gt;&gt; -&gt; Parser&lt;&#39;a,&#39;u&gt;<br /><br />Full name: FParsec.Primitives.choice</div>
<div class="tip" id="fs45">val expr : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.expr</div>
<div class="tip" id="fs46">val exprImpl : Parser&lt;Ex,unit&gt; ref<br /><br />Full name: LanguageCombinator.exprImpl</div>
<div class="tip" id="fs47">val createParserForwardedToRef : unit -&gt; Parser&lt;&#39;a,&#39;u&gt; * Parser&lt;&#39;a,&#39;u&gt; ref<br /><br />Full name: FParsec.Primitives.createParserForwardedToRef</div>
<div class="tip" id="fs48">val expression1 : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.expression1</div>
<div class="tip" id="fs49">val between : a:string -&gt; b:string -&gt; p:Parser&lt;&#39;a,&#39;b&gt; -&gt; Parser&lt;&#39;a,&#39;b&gt;<br /><br />Full name: LanguageCombinator.between</div>
<div class="tip" id="fs50">val a : string</div>
<div class="tip" id="fs51">val b : string</div>
<div class="tip" id="fs52">val p : Parser&lt;&#39;a,&#39;b&gt;</div>
<div class="tip" id="fs53">val bracketExpression : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.bracketExpression</div>
<div class="tip" id="fs54">val lhExpression : (CharStream&lt;unit&gt; -&gt; Reply&lt;Ex&gt;)<br /><br />Full name: LanguageCombinator.lhExpression</div>
<div class="tip" id="fs55">val expressionOpration : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.expressionOpration</div>
<div class="tip" id="fs56">val operandL : Ex</div>
<div class="tip" id="fs57">val operator : Op</div>
<div class="tip" id="fs58">val operandR : Ex</div>
<div class="tip" id="fs59">val preturn : &#39;a -&gt; Parser&lt;&#39;a,&#39;u&gt;<br /><br />Full name: FParsec.Primitives.preturn</div>
<div class="tip" id="fs60">val attempt : Parser&lt;&#39;a,&#39;u&gt; -&gt; Parser&lt;&#39;a,&#39;u&gt;<br /><br />Full name: FParsec.Primitives.attempt</div>
<div class="tip" id="fs61">val funcInners : Parser&lt;Ast list,unit&gt;<br /><br />Full name: LanguageCombinator.funcInners</div>
<div class="tip" id="fs62">val funcInnersImpl : Parser&lt;Ast list,unit&gt; ref<br /><br />Full name: LanguageCombinator.funcInnersImpl</div>
<div class="tip" id="fs63">val statement : Parser&lt;Ex,unit&gt;<br /><br />Full name: LanguageCombinator.statement</div>
<div class="tip" id="fs64">val statements : Parser&lt;Ast list,unit&gt;<br /><br />Full name: LanguageCombinator.statements</div>
<div class="tip" id="fs65">val many1 : Parser&lt;&#39;a,&#39;u&gt; -&gt; Parser&lt;&#39;a list,&#39;u&gt;<br /><br />Full name: FParsec.Primitives.many1</div>
<div class="tip" id="fs66">val arguments : Parser&lt;Argument list,unit&gt;<br /><br />Full name: LanguageCombinator.arguments</div>
<div class="tip" id="fs67">val sepEndBy1 : Parser&lt;&#39;a,&#39;u&gt; -&gt; Parser&lt;&#39;b,&#39;u&gt; -&gt; Parser&lt;&#39;a list,&#39;u&gt;<br /><br />Full name: FParsec.Primitives.sepEndBy1</div>
<div class="tip" id="fs68">val func : Parser&lt;Ast,unit&gt;<br /><br />Full name: LanguageCombinator.func</div>
<div class="tip" id="fs69">val parse : ParserCombinator<br /><br />Full name: FParsec.Primitives.parse</div>
<div class="tip" id="fs70">val skipStringCI : string -&gt; Parser&lt;unit,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.skipStringCI</div>
<div class="tip" id="fs71">val arguments : Argument list option</div>
<div class="tip" id="fs72">val opt : Parser&lt;&#39;a,&#39;u&gt; -&gt; Parser&lt;&#39;a option,&#39;u&gt;<br /><br />Full name: FParsec.Primitives.opt</div>
<div class="tip" id="fs73">val text : Ast list option</div>
<div class="tip" id="fs74">val programLines : Parser&lt;Ast,unit&gt;<br /><br />Full name: LanguageCombinator.programLines</div>
<div class="tip" id="fs75">val program : Parser&lt;Ast list,unit&gt;<br /><br />Full name: LanguageCombinator.program</div>
<div class="tip" id="fs76">val many : Parser&lt;&#39;a,&#39;u&gt; -&gt; Parser&lt;&#39;a list,&#39;u&gt;<br /><br />Full name: FParsec.Primitives.many</div>
<div class="tip" id="fs77">val test : input:string -&gt; Ast list<br /><br />Full name: LanguageCombinator.test</div>
<div class="tip" id="fs78">val input : string</div>
<div class="tip" id="fs79">val run : Parser&lt;&#39;Result,unit&gt; -&gt; string -&gt; ParserResult&lt;&#39;Result,unit&gt;<br /><br />Full name: FParsec.CharParsers.run</div>
<div class="tip" id="fs80">val eof : Parser&lt;unit,&#39;u&gt;<br /><br />Full name: FParsec.CharParsers.eof</div>
<div class="tip" id="fs81">union case ParserResult.Success: &#39;Result * &#39;UserState * Position -&gt; ParserResult&lt;&#39;Result,&#39;UserState&gt;</div>
<div class="tip" id="fs82">val r : Ast list</div>
<div class="tip" id="fs83">union case ParserResult.Failure: string * ParserError * &#39;UserState -&gt; ParserResult&lt;&#39;Result,&#39;UserState&gt;</div>
<div class="tip" id="fs84">val r : string</div>
<div class="tip" id="fs85">type Console =<br />&#160;&#160;static member BackgroundColor : ConsoleColor with get, set<br />&#160;&#160;static member Beep : unit -&gt; unit + 1 overload<br />&#160;&#160;static member BufferHeight : int with get, set<br />&#160;&#160;static member BufferWidth : int with get, set<br />&#160;&#160;static member CapsLock : bool<br />&#160;&#160;static member Clear : unit -&gt; unit<br />&#160;&#160;static member CursorLeft : int with get, set<br />&#160;&#160;static member CursorSize : int with get, set<br />&#160;&#160;static member CursorTop : int with get, set<br />&#160;&#160;static member CursorVisible : bool with get, set<br />&#160;&#160;...<br /><br />Full name: System.Console</div>
<div class="tip" id="fs86">Console.WriteLine() : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: string) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: obj) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: uint64) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: int64) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: uint32) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: int) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: float32) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: float) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Console.WriteLine(value: decimal) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>
<div class="tip" id="fs87">val raise : exn:Exception -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.raise</div>

