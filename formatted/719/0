<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//-----------------------------------------------------</span>
<span class="c">//First example:</span>

<span class="k">module</span> <span class="t">NumericLiteralN</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">FromZero</span>() <span class="o">=</span> <span class="s">&quot;&quot;</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">FromOne</span>() <span class="o">=</span> <span class="s">&quot;n&quot;</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">FromInt32</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">String</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">replicate</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">x</span> <span class="s">&quot;n&quot;</span>

<span class="c">// Calls FromOne():</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">x1</span> <span class="o">=</span> <span class="n">1N</span> 
<span class="c">// val x1 : string = &quot;n&quot;</span>

<span class="c">// Calls FromInt32(7):</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">x2</span> <span class="o">=</span> <span class="n">7N</span>
<span class="c">// val x1 : string = &quot;nnnnnnn&quot;</span>

<span class="c">//Calls operator (+) on strings.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="i">x3</span> <span class="o">=</span> <span class="n">2N</span> <span class="o">+</span> <span class="n">3N</span>
<span class="c">// val x3 : string = &quot;nnnnn&quot;</span>


<span class="c">//-----------------------------------------------------</span>
<span class="c">//Second example:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="t">MyExpression</span> <span class="o">=</span>
| <span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="p">Const</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="t">int</span>
| <span onmouseout="hideTip(event, 'fs13', 14)" onmouseover="showTip(event, 'fs13', 14)" class="p">Plus</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="t">MyExpression</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="t">MyExpression</span>
| <span onmouseout="hideTip(event, 'fs14', 17)" onmouseover="showTip(event, 'fs14', 17)" class="p">Mult</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="t">MyExpression</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs10', 19)" onmouseover="showTip(event, 'fs10', 19)" class="t">MyExpression</span>
<span class="k">with</span> 
    <span class="k">static</span> <span class="k">member</span> (<span class="o">+</span>) (<span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs16', 21)" onmouseover="showTip(event, 'fs16', 21)" class="i">y</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="p">Plus</span>(<span onmouseout="hideTip(event, 'fs15', 23)" onmouseover="showTip(event, 'fs15', 23)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="i">y</span>)
    <span class="k">static</span> <span class="k">member</span> <span class="o">(*)</span> (<span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs16', 26)" onmouseover="showTip(event, 'fs16', 26)" class="i">y</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 27)" onmouseover="showTip(event, 'fs14', 27)" class="p">Mult</span>(<span onmouseout="hideTip(event, 'fs15', 28)" onmouseover="showTip(event, 'fs15', 28)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs16', 29)" onmouseover="showTip(event, 'fs16', 29)" class="i">y</span>)

<span class="k">module</span> <span class="t">NumericLiteralZ</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 30)" onmouseover="showTip(event, 'fs17', 30)" class="f">FromZero</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 31)" onmouseover="showTip(event, 'fs11', 31)" class="p">Const</span> <span class="n">0</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 32)" onmouseover="showTip(event, 'fs18', 32)" class="f">FromOne</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 33)" onmouseover="showTip(event, 'fs11', 33)" class="p">Const</span> <span class="n">1</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 34)" onmouseover="showTip(event, 'fs19', 34)" class="f">FromInt32</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 35)" onmouseover="showTip(event, 'fs11', 35)" class="p">Const</span>

<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs20', 36)" onmouseover="showTip(event, 'fs20', 36)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs21', 37)" onmouseover="showTip(event, 'fs21', 37)" class="i">tree</span> <span class="o">=</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs21', 38)" onmouseover="showTip(event, 'fs21', 38)" class="i">tree</span> <span class="k">with</span>
    | <span onmouseout="hideTip(event, 'fs13', 39)" onmouseover="showTip(event, 'fs13', 39)" class="p">Plus</span> (<span onmouseout="hideTip(event, 'fs15', 40)" onmouseover="showTip(event, 'fs15', 40)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs16', 41)" onmouseover="showTip(event, 'fs16', 41)" class="i">y</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 42)" onmouseover="showTip(event, 'fs20', 42)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs15', 43)" onmouseover="showTip(event, 'fs15', 43)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs20', 44)" onmouseover="showTip(event, 'fs20', 44)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs16', 45)" onmouseover="showTip(event, 'fs16', 45)" class="i">y</span>
    | <span onmouseout="hideTip(event, 'fs14', 46)" onmouseover="showTip(event, 'fs14', 46)" class="p">Mult</span> (<span onmouseout="hideTip(event, 'fs15', 47)" onmouseover="showTip(event, 'fs15', 47)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs16', 48)" onmouseover="showTip(event, 'fs16', 48)" class="i">y</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 49)" onmouseover="showTip(event, 'fs20', 49)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs15', 50)" onmouseover="showTip(event, 'fs15', 50)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs20', 51)" onmouseover="showTip(event, 'fs20', 51)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs16', 52)" onmouseover="showTip(event, 'fs16', 52)" class="i">y</span>
    | <span onmouseout="hideTip(event, 'fs11', 53)" onmouseover="showTip(event, 'fs11', 53)" class="p">Const</span> <span onmouseout="hideTip(event, 'fs4', 54)" onmouseover="showTip(event, 'fs4', 54)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs4', 55)" onmouseover="showTip(event, 'fs4', 55)" class="i">x</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 56)" onmouseover="showTip(event, 'fs22', 56)" class="i">expression</span> <span class="o">=</span> <span class="n">3Z</span> <span class="o">+</span> (<span class="n">4Z</span> <span class="o">*</span> <span class="n">5Z</span>)
<span class="c">// val expression : MyExpression = Plus (Const 3,Mult (Const 4,Const 5))</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 57)" onmouseover="showTip(event, 'fs23', 57)" class="i">res</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 58)" onmouseover="showTip(event, 'fs20', 58)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs22', 59)" onmouseover="showTip(event, 'fs22', 59)" class="i">expression</span>
<span class="c">// val res : int = 23</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val FromZero : unit -&gt; string<br /><br />Full name: Script.NumericLiteralN.FromZero</div>
<div class="tip" id="fs2">val FromOne : unit -&gt; string<br /><br />Full name: Script.NumericLiteralN.FromOne</div>
<div class="tip" id="fs3">val FromInt32 : x:int -&gt; string<br /><br />Full name: Script.NumericLiteralN.FromInt32</div>
<div class="tip" id="fs4">val x : int</div>
<div class="tip" id="fs5">module String<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs6">val replicate : count:int -&gt; str:string -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.String.replicate</div>
<div class="tip" id="fs7">val x1 : string<br /><br />Full name: Script.x1</div>
<div class="tip" id="fs8">val x2 : string<br /><br />Full name: Script.x2</div>
<div class="tip" id="fs9">val x3 : string<br /><br />Full name: Script.x3</div>
<div class="tip" id="fs10">type MyExpression =<br />&#160;&#160;| Const of int<br />&#160;&#160;| Plus of MyExpression * MyExpression<br />&#160;&#160;| Mult of MyExpression * MyExpression<br />&#160;&#160;static member ( + ) : x:MyExpression * y:MyExpression -&gt; MyExpression<br />&#160;&#160;static member ( * ) : x:MyExpression * y:MyExpression -&gt; MyExpression<br /><br />Full name: Script.MyExpression</div>
<div class="tip" id="fs11">union case MyExpression.Const: int -&gt; MyExpression</div>
<div class="tip" id="fs12">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs13">union case MyExpression.Plus: MyExpression * MyExpression -&gt; MyExpression</div>
<div class="tip" id="fs14">union case MyExpression.Mult: MyExpression * MyExpression -&gt; MyExpression</div>
<div class="tip" id="fs15">val x : MyExpression</div>
<div class="tip" id="fs16">val y : MyExpression</div>
<div class="tip" id="fs17">val FromZero : unit -&gt; MyExpression<br /><br />Full name: Script.NumericLiteralZ.FromZero</div>
<div class="tip" id="fs18">val FromOne : unit -&gt; MyExpression<br /><br />Full name: Script.NumericLiteralZ.FromOne</div>
<div class="tip" id="fs19">val FromInt32 : arg0:int -&gt; MyExpression<br /><br />Full name: Script.NumericLiteralZ.FromInt32</div>
<div class="tip" id="fs20">val eval : tree:MyExpression -&gt; int<br /><br />Full name: Script.eval</div>
<div class="tip" id="fs21">val tree : MyExpression</div>
<div class="tip" id="fs22">val expression : MyExpression<br /><br />Full name: Script.expression</div>
<div class="tip" id="fs23">val res : int<br /><br />Full name: Script.res</div>

