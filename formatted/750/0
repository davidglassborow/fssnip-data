<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="i">Expressions</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">Quotations</span>

<span class="c">/// Translates simple F# quotation to LINQ expression</span>
<span class="c">/// (the function supports only variables, property getters,</span>
<span class="c">/// method calls and static method calls)</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">expr</span> <span class="o">=</span>
  <span class="k">match</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">expr</span> <span class="k">with</span>
  | <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="p">Var</span>(<span onmouseout="hideTip(event, 'fs11', 13)" onmouseover="showTip(event, 'fs11', 13)" class="i">var</span>) <span class="k">-&gt;</span>
      <span class="c">// Variable access</span>
      <span onmouseout="hideTip(event, 'fs12', 14)" onmouseover="showTip(event, 'fs12', 14)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 15)" onmouseover="showTip(event, 'fs13', 15)" class="f">Variable</span>(<span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="i">var</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 17)" onmouseover="showTip(event, 'fs14', 17)" class="i">Type</span>, <span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="i">var</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 19)" onmouseover="showTip(event, 'fs15', 19)" class="i">Name</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="t">Expression</span>
  | <span onmouseout="hideTip(event, 'fs9', 21)" onmouseover="showTip(event, 'fs9', 21)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 22)" onmouseover="showTip(event, 'fs16', 22)" class="p">PropertyGet</span>(<span onmouseout="hideTip(event, 'fs17', 23)" onmouseover="showTip(event, 'fs17', 23)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs18', 24)" onmouseover="showTip(event, 'fs18', 24)" class="i">inst</span>, <span onmouseout="hideTip(event, 'fs19', 25)" onmouseover="showTip(event, 'fs19', 25)" class="i">pi</span>, []) <span class="k">-&gt;</span>
      <span class="c">// Getter of an instance property</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 26)" onmouseover="showTip(event, 'fs20', 26)" class="i">instExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 27)" onmouseover="showTip(event, 'fs7', 27)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs18', 28)" onmouseover="showTip(event, 'fs18', 28)" class="i">inst</span>
      <span onmouseout="hideTip(event, 'fs12', 29)" onmouseover="showTip(event, 'fs12', 29)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 30)" onmouseover="showTip(event, 'fs21', 30)" class="f">Property</span>(<span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="i">instExpr</span>, <span onmouseout="hideTip(event, 'fs19', 32)" onmouseover="showTip(event, 'fs19', 32)" class="i">pi</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs12', 33)" onmouseover="showTip(event, 'fs12', 33)" class="t">Expression</span>
  | <span onmouseout="hideTip(event, 'fs9', 34)" onmouseover="showTip(event, 'fs9', 34)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 35)" onmouseover="showTip(event, 'fs22', 35)" class="p">Call</span>(<span onmouseout="hideTip(event, 'fs17', 36)" onmouseover="showTip(event, 'fs17', 36)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs18', 37)" onmouseover="showTip(event, 'fs18', 37)" class="i">inst</span>, <span onmouseout="hideTip(event, 'fs23', 38)" onmouseover="showTip(event, 'fs23', 38)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs24', 39)" onmouseover="showTip(event, 'fs24', 39)" class="i">args</span>) <span class="k">-&gt;</span>
      <span class="c">// Method call - translate instance &amp; arguments recursively</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 40)" onmouseover="showTip(event, 'fs25', 40)" class="i">argsExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs26', 41)" onmouseover="showTip(event, 'fs26', 41)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 42)" onmouseover="showTip(event, 'fs27', 42)" class="f">map</span> <span onmouseout="hideTip(event, 'fs7', 43)" onmouseover="showTip(event, 'fs7', 43)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="i">args</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 45)" onmouseover="showTip(event, 'fs20', 45)" class="i">instExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 46)" onmouseover="showTip(event, 'fs7', 46)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs18', 47)" onmouseover="showTip(event, 'fs18', 47)" class="i">inst</span>
      <span onmouseout="hideTip(event, 'fs12', 48)" onmouseover="showTip(event, 'fs12', 48)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 49)" onmouseover="showTip(event, 'fs28', 49)" class="f">Call</span>(<span onmouseout="hideTip(event, 'fs20', 50)" onmouseover="showTip(event, 'fs20', 50)" class="i">instExpr</span>, <span onmouseout="hideTip(event, 'fs23', 51)" onmouseover="showTip(event, 'fs23', 51)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs25', 52)" onmouseover="showTip(event, 'fs25', 52)" class="i">argsExpr</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs12', 53)" onmouseover="showTip(event, 'fs12', 53)" class="t">Expression</span>
  | <span onmouseout="hideTip(event, 'fs9', 54)" onmouseover="showTip(event, 'fs9', 54)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 55)" onmouseover="showTip(event, 'fs22', 55)" class="p">Call</span>(<span onmouseout="hideTip(event, 'fs29', 56)" onmouseover="showTip(event, 'fs29', 56)" class="p">None</span>, <span onmouseout="hideTip(event, 'fs23', 57)" onmouseover="showTip(event, 'fs23', 57)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs24', 58)" onmouseover="showTip(event, 'fs24', 58)" class="i">args</span>) <span class="k">-&gt;</span>
      <span class="c">// Static method call - no instance</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 59)" onmouseover="showTip(event, 'fs25', 59)" class="i">argsExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs26', 60)" onmouseover="showTip(event, 'fs26', 60)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 61)" onmouseover="showTip(event, 'fs27', 61)" class="f">map</span> <span onmouseout="hideTip(event, 'fs7', 62)" onmouseover="showTip(event, 'fs7', 62)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs24', 63)" onmouseover="showTip(event, 'fs24', 63)" class="i">args</span>
      <span onmouseout="hideTip(event, 'fs12', 64)" onmouseover="showTip(event, 'fs12', 64)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 65)" onmouseover="showTip(event, 'fs28', 65)" class="f">Call</span>(<span onmouseout="hideTip(event, 'fs23', 66)" onmouseover="showTip(event, 'fs23', 66)" class="i">mi</span>, <span onmouseout="hideTip(event, 'fs25', 67)" onmouseover="showTip(event, 'fs25', 67)" class="i">argsExpr</span>) <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs12', 68)" onmouseover="showTip(event, 'fs12', 68)" class="t">Expression</span>
  | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs30', 69)" onmouseover="showTip(event, 'fs30', 69)" class="f">failwith</span> <span class="s">&quot;not supported&quot;</span>

<span class="c">/// Translates a simple F# quotation to a lambda expression</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 70)" onmouseover="showTip(event, 'fs31', 70)" class="f">translateLambda</span> (<span onmouseout="hideTip(event, 'fs32', 71)" onmouseover="showTip(event, 'fs32', 71)" class="i">expr</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs33', 72)" onmouseover="showTip(event, 'fs33', 72)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>) <span class="o">=</span>
  <span class="k">match</span> <span onmouseout="hideTip(event, 'fs32', 73)" onmouseover="showTip(event, 'fs32', 73)" class="i">expr</span> <span class="k">with</span>
  | <span onmouseout="hideTip(event, 'fs9', 74)" onmouseover="showTip(event, 'fs9', 74)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 75)" onmouseover="showTip(event, 'fs34', 75)" class="p">Lambda</span>(<span onmouseout="hideTip(event, 'fs35', 76)" onmouseover="showTip(event, 'fs35', 76)" class="i">v</span>, <span onmouseout="hideTip(event, 'fs36', 77)" onmouseover="showTip(event, 'fs36', 77)" class="i">body</span>) <span class="k">-&gt;</span>
      <span class="c">// Build LINQ style lambda expression</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 78)" onmouseover="showTip(event, 'fs37', 78)" class="i">bodyExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 79)" onmouseover="showTip(event, 'fs7', 79)" class="f">translateSimpleExpr</span> <span onmouseout="hideTip(event, 'fs36', 80)" onmouseover="showTip(event, 'fs36', 80)" class="i">body</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 81)" onmouseover="showTip(event, 'fs38', 81)" class="i">paramExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 82)" onmouseover="showTip(event, 'fs12', 82)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 83)" onmouseover="showTip(event, 'fs39', 83)" class="f">Parameter</span>(<span onmouseout="hideTip(event, 'fs35', 84)" onmouseover="showTip(event, 'fs35', 84)" class="i">v</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 85)" onmouseover="showTip(event, 'fs14', 85)" class="i">Type</span>, <span onmouseout="hideTip(event, 'fs35', 86)" onmouseover="showTip(event, 'fs35', 86)" class="i">v</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 87)" onmouseover="showTip(event, 'fs15', 87)" class="i">Name</span>)
      <span onmouseout="hideTip(event, 'fs12', 88)" onmouseover="showTip(event, 'fs12', 88)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 89)" onmouseover="showTip(event, 'fs40', 89)" class="f">Lambda</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs41', 90)" onmouseover="showTip(event, 'fs41', 90)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>, <span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs38', 91)" onmouseover="showTip(event, 'fs38', 91)" class="i">paramExpr</span>)
  | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs30', 92)" onmouseover="showTip(event, 'fs30', 92)" class="f">failwith</span> <span class="s">&quot;not supported&quot;</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Linq</div>
<div class="tip" id="fs3">namespace System.Linq.Expressions</div>
<div class="tip" id="fs4">namespace Microsoft</div>
<div class="tip" id="fs5">namespace Microsoft.FSharp</div>
<div class="tip" id="fs6">namespace Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs7">val translateSimpleExpr : expr:Expr -&gt; Expression<br /><br />Full name: Script.translateSimpleExpr<br /><em><br /><br />&#160;Translates simple F# quotation to LINQ expression<br />&#160;(the function supports only variables, property getters,<br />&#160;method calls and static method calls)</em></div>
<div class="tip" id="fs8">val expr : Expr</div>
<div class="tip" id="fs9">module Patterns<br /><br />from Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs10">active recognizer Var: Expr -&gt; Var option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Var|_| )</div>
<div class="tip" id="fs11">val var : Var</div>
<div class="tip" id="fs12">Multiple items<br />type Expression =<br />&#160;&#160;member CanReduce : bool<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Reduce : unit -&gt; Expression<br />&#160;&#160;member ReduceAndCheck : unit -&gt; Expression<br />&#160;&#160;member ReduceExtensions : unit -&gt; Expression<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member Add : left:Expression * right:Expression -&gt; BinaryExpression + 1 overload<br />&#160;&#160;static member AddAssign : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;static member AddAssignChecked : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;...<br /><br />Full name: System.Linq.Expressions.Expression<br /><br />--------------------<br />type Expression&lt;&#39;TDelegate&gt; =<br />&#160;&#160;inherit LambdaExpression<br />&#160;&#160;member Compile : unit -&gt; &#39;TDelegate + 1 overload<br />&#160;&#160;member Update : body:Expression * parameters:IEnumerable&lt;ParameterExpression&gt; -&gt; Expression&lt;&#39;TDelegate&gt;<br /><br />Full name: System.Linq.Expressions.Expression&lt;_&gt;</div>
<div class="tip" id="fs13">Expression.Variable(type: Type) : ParameterExpression<br />Expression.Variable(type: Type, name: string) : ParameterExpression</div>
<div class="tip" id="fs14">property Var.Type: Type</div>
<div class="tip" id="fs15">property Var.Name: string</div>
<div class="tip" id="fs16">active recognizer PropertyGet: Expr -&gt; (Expr option * Reflection.PropertyInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |PropertyGet|_| )</div>
<div class="tip" id="fs17">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs18">val inst : Expr</div>
<div class="tip" id="fs19">val pi : Reflection.PropertyInfo</div>
<div class="tip" id="fs20">val instExpr : Expression</div>
<div class="tip" id="fs21">Expression.Property(expression: Expression, propertyAccessor: Reflection.MethodInfo) : MemberExpression<br />Expression.Property(expression: Expression, property: Reflection.PropertyInfo) : MemberExpression<br />Expression.Property(expression: Expression, propertyName: string) : MemberExpression<br />Expression.Property(expression: Expression, type: Type, propertyName: string) : MemberExpression<br />Expression.Property(instance: Expression, indexer: Reflection.PropertyInfo, arguments: Collections.Generic.IEnumerable&lt;Expression&gt;) : IndexExpression<br />Expression.Property(instance: Expression, indexer: Reflection.PropertyInfo, [&lt;ParamArray&gt;] arguments: Expression []) : IndexExpression<br />Expression.Property(instance: Expression, propertyName: string, [&lt;ParamArray&gt;] arguments: Expression []) : IndexExpression</div>
<div class="tip" id="fs22">active recognizer Call: Expr -&gt; (Expr option * Reflection.MethodInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Call|_| )</div>
<div class="tip" id="fs23">val mi : Reflection.MethodInfo</div>
<div class="tip" id="fs24">val args : Expr list</div>
<div class="tip" id="fs25">val argsExpr : seq&lt;Expression&gt;</div>
<div class="tip" id="fs26">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs27">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs28">Expression.Call(instance: Expression, method: Reflection.MethodInfo) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, arguments: Collections.Generic.IEnumerable&lt;Expression&gt;) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, arg0: Expression) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, method: Reflection.MethodInfo, arguments: Collections.Generic.IEnumerable&lt;Expression&gt;) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, method: Reflection.MethodInfo, [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(method: Reflection.MethodInfo, arg0: Expression, arg1: Expression) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(type: Type, methodName: string, typeArguments: Type [], [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, methodName: string, typeArguments: Type [], [&lt;ParamArray&gt;] arguments: Expression []) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Call(instance: Expression, method: Reflection.MethodInfo, arg0: Expression, arg1: Expression) : MethodCallExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>
<div class="tip" id="fs29">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs30">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs31">val translateLambda : expr:Expr&lt;(&#39;T -&gt; &#39;R)&gt; -&gt; Expression&lt;Func&lt;&#39;T,&#39;R&gt;&gt;<br /><br />Full name: Script.translateLambda<br /><em><br /><br />&#160;Translates a simple F# quotation to a lambda expression</em></div>
<div class="tip" id="fs32">val expr : Expr&lt;(&#39;T -&gt; &#39;R)&gt;</div>
<div class="tip" id="fs33">Multiple items<br />type Expr =<br />&#160;&#160;override Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetFreeVars : unit -&gt; seq&lt;Var&gt;<br />&#160;&#160;member Substitute : substitution:(Var -&gt; Expr option) -&gt; Expr<br />&#160;&#160;member ToString : full:bool -&gt; string<br />&#160;&#160;member CustomAttributes : Expr list<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member AddressOf : target:Expr -&gt; Expr<br />&#160;&#160;static member AddressSet : target:Expr * value:Expr -&gt; Expr<br />&#160;&#160;static member Application : functionExpr:Expr * argument:Expr -&gt; Expr<br />&#160;&#160;static member Applications : functionExpr:Expr * arguments:Expr list list -&gt; Expr<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Quotations.Expr<br /><br />--------------------<br />type Expr&lt;&#39;T&gt; =<br />&#160;&#160;inherit Expr<br />&#160;&#160;member Raw : Expr<br /><br />Full name: Microsoft.FSharp.Quotations.Expr&lt;_&gt;</div>
<div class="tip" id="fs34">active recognizer Lambda: Expr -&gt; (Var * Expr) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Lambda|_| )</div>
<div class="tip" id="fs35">val v : Var</div>
<div class="tip" id="fs36">val body : Expr</div>
<div class="tip" id="fs37">val bodyExpr : Expression</div>
<div class="tip" id="fs38">val paramExpr : ParameterExpression</div>
<div class="tip" id="fs39">Expression.Parameter(type: Type) : ParameterExpression<br />Expression.Parameter(type: Type, name: string) : ParameterExpression</div>
<div class="tip" id="fs40">Expression.Lambda(body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, name: string, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(delegateType: Type, body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(delegateType: Type, body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, tailCall: bool, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, tailCall: bool, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, name: string, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>
<div class="tip" id="fs41">Multiple items<br />type Func&lt;&#39;TResult&gt; =<br />&#160;&#160;delegate of unit -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;T16,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 * &#39;T16 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;</div>

