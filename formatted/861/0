<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
<span class="l">81: </span>
<span class="l">82: </span>
<span class="l">83: </span>
<span class="l">84: </span>
<span class="l">85: </span>
<span class="l">86: </span>
<span class="l">87: </span>
<span class="l">88: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="prep">#r</span> <span class="s">&quot;nunit.framework.dll&quot;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span class="i">NUnit</span><span class="o">.</span><span class="i">Framework</span>

<span class="c">// ----------------------------------------------------------------------------</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">toString</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">chars</span> <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="t">String</span>(<span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">chars</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="f">ofList</span>)

<span class="c">// TODO: Read until the end of inline code</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="f">parseInlineBody</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">acc</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="i">chars</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="f">failwith</span> <span class="s">&quot;!&quot;</span>

<span class="c">// TODO: Match beginning and read until the end</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 13)" onmouseover="showTip(event, 'fs11', 13)" class="f">parseInline</span> <span onmouseout="hideTip(event, 'fs12', 14)" onmouseover="showTip(event, 'fs12', 14)" class="i">chars</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="f">failwith</span> <span class="s">&quot;!&quot;</span>

<span class="c">// ----------------------------------------------------------------------------</span>

<span class="c">// Definition of markdown span element</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="t">MarkdownSpan</span> <span class="o">=</span>
  | <span onmouseout="hideTip(event, 'fs14', 17)" onmouseover="showTip(event, 'fs14', 17)" class="p">Literal</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs15', 18)" onmouseover="showTip(event, 'fs15', 18)" class="t">string</span>
  | <span onmouseout="hideTip(event, 'fs16', 19)" onmouseover="showTip(event, 'fs16', 19)" class="p">InlineCode</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="t">string</span>

<span class="c">// Parse spans of the input</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs17', 21)" onmouseover="showTip(event, 'fs17', 21)" class="f">parseSpans</span> <span onmouseout="hideTip(event, 'fs18', 22)" onmouseover="showTip(event, 'fs18', 22)" class="i">acc</span> <span onmouseout="hideTip(event, 'fs19', 23)" onmouseover="showTip(event, 'fs19', 23)" class="i">chars</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 24)" onmouseover="showTip(event, 'fs20', 24)" class="i">seq</span> {
  <span class="c">// emit literal if we skipped some characters</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 25)" onmouseover="showTip(event, 'fs21', 25)" class="f">emitLiteral</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 26)" onmouseover="showTip(event, 'fs20', 26)" class="i">seq</span> {
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs18', 27)" onmouseover="showTip(event, 'fs18', 27)" class="i">acc</span> <span class="o">&lt;&gt;</span> [] <span class="k">then</span> 
      <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs18', 28)" onmouseover="showTip(event, 'fs18', 28)" class="i">acc</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 29)" onmouseover="showTip(event, 'fs22', 29)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 30)" onmouseover="showTip(event, 'fs23', 30)" class="f">rev</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs2', 31)" onmouseover="showTip(event, 'fs2', 31)" class="f">toString</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs14', 32)" onmouseover="showTip(event, 'fs14', 32)" class="p">Literal</span> }

  <span class="c">// try parsing inline</span>
  <span class="k">match</span> <span onmouseout="hideTip(event, 'fs11', 33)" onmouseover="showTip(event, 'fs11', 33)" class="f">parseInline</span> <span onmouseout="hideTip(event, 'fs19', 34)" onmouseover="showTip(event, 'fs19', 34)" class="i">chars</span>, <span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="i">chars</span> <span class="k">with</span>
  | <span onmouseout="hideTip(event, 'fs24', 36)" onmouseover="showTip(event, 'fs24', 36)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs25', 37)" onmouseover="showTip(event, 'fs25', 37)" class="i">body</span>, <span onmouseout="hideTip(event, 'fs26', 38)" onmouseover="showTip(event, 'fs26', 38)" class="i">chars</span>), _ <span class="k">-&gt;</span>
      <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs21', 39)" onmouseover="showTip(event, 'fs21', 39)" class="f">emitLiteral</span> ()
      <span class="c">// TODO: Produce single &#39;InlineCode&#39; element</span>
      <span class="c">// TODO: Continue recursively</span>
  | _, <span onmouseout="hideTip(event, 'fs27', 40)" onmouseover="showTip(event, 'fs27', 40)" class="i">c</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs19', 41)" onmouseover="showTip(event, 'fs19', 41)" class="i">chars</span> <span class="k">-&gt;</span>
      <span class="c">// TODO: Add &#39;c&#39; to unconsumed characters</span>
      <span class="c">// and continue recursively</span>
  | _, [] <span class="k">-&gt;</span>
      <span class="c">// Finished, emit the remaining unprocessed characters</span>
      <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs21', 42)" onmouseover="showTip(event, 'fs21', 42)" class="i">emitLiteral</span> () }

<span class="c">// ----------------------------------------------------------------------------</span>

[&lt;<span class="i">TestFixture</span>&gt;]
<span class="k">module</span> <span onmouseout="hideTip(event, 'fs28', 43)" onmouseover="showTip(event, 'fs28', 43)" class="t">Tests</span> <span class="o">=</span> 

  <span class="c">// parseInlineBody</span>

  [&lt;<span class="i">Test</span>&gt;]
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 44)" onmouseover="showTip(event, 'fs29', 44)" class="f">``End of inline is found``</span> () <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 45)" onmouseover="showTip(event, 'fs30', 45)" class="i">res</span> <span class="o">=</span> <span class="s">&quot;aa`bb&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 46)" onmouseover="showTip(event, 'fs22', 46)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 47)" onmouseover="showTip(event, 'fs31', 47)" class="f">ofSeq</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs7', 48)" onmouseover="showTip(event, 'fs7', 48)" class="f">parseInlineBody</span> []
    <span class="i">Assert</span><span class="o">.</span><span class="i">That</span>((<span onmouseout="hideTip(event, 'fs30', 49)" onmouseover="showTip(event, 'fs30', 49)" class="i">res</span> <span class="o">=</span> ([<span class="s">&#39;a&#39;</span>; <span class="s">&#39;a&#39;</span>], [<span class="s">&#39;b&#39;</span>; <span class="s">&#39;b&#39;</span>])))

  [&lt;<span class="i">Test</span>&gt;]
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 50)" onmouseover="showTip(event, 'fs32', 50)" class="f">``All input is consumed``</span> () <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 51)" onmouseover="showTip(event, 'fs30', 51)" class="i">res</span> <span class="o">=</span> <span class="s">&quot;aa&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 52)" onmouseover="showTip(event, 'fs22', 52)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 53)" onmouseover="showTip(event, 'fs31', 53)" class="f">ofSeq</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs7', 54)" onmouseover="showTip(event, 'fs7', 54)" class="f">parseInlineBody</span> []
    <span class="i">Assert</span><span class="o">.</span><span class="i">That</span>((<span onmouseout="hideTip(event, 'fs30', 55)" onmouseover="showTip(event, 'fs30', 55)" class="i">res</span> <span class="o">=</span> ([<span class="s">&#39;a&#39;</span>; <span class="s">&#39;a&#39;</span>], [])))

  <span class="c">// parseInline</span>

  [&lt;<span class="i">Test</span>&gt;]
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 56)" onmouseover="showTip(event, 'fs33', 56)" class="f">``Needs backtick``</span> () <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 57)" onmouseover="showTip(event, 'fs30', 57)" class="i">res</span> <span class="o">=</span> <span class="s">&quot;aa&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 58)" onmouseover="showTip(event, 'fs22', 58)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 59)" onmouseover="showTip(event, 'fs31', 59)" class="f">ofSeq</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs11', 60)" onmouseover="showTip(event, 'fs11', 60)" class="f">parseInline</span>
    <span class="i">Assert</span><span class="o">.</span><span class="i">That</span>((<span onmouseout="hideTip(event, 'fs30', 61)" onmouseover="showTip(event, 'fs30', 61)" class="i">res</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs34', 62)" onmouseover="showTip(event, 'fs34', 62)" class="i">None</span>))

  [&lt;<span class="i">Test</span>&gt;]
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 63)" onmouseover="showTip(event, 'fs35', 63)" class="f">``Finds inline code``</span> () <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 64)" onmouseover="showTip(event, 'fs30', 64)" class="i">res</span> <span class="o">=</span> <span class="s">&quot;`aa`bb&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 65)" onmouseover="showTip(event, 'fs22', 65)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 66)" onmouseover="showTip(event, 'fs31', 66)" class="f">ofSeq</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs11', 67)" onmouseover="showTip(event, 'fs11', 67)" class="f">parseInline</span>
    <span class="i">Assert</span><span class="o">.</span><span class="i">That</span>((<span onmouseout="hideTip(event, 'fs30', 68)" onmouseover="showTip(event, 'fs30', 68)" class="i">res</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 69)" onmouseover="showTip(event, 'fs24', 69)" class="i">Some</span> ([<span class="s">&#39;a&#39;</span>; <span class="s">&#39;a&#39;</span>], [<span class="s">&#39;b&#39;</span>; <span class="s">&#39;b&#39;</span>])))

  <span class="c">// parseSpans</span>

  [&lt;<span class="i">Test</span>&gt;]
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 70)" onmouseover="showTip(event, 'fs36', 70)" class="f">``Parse two inline snippets``</span> () <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 71)" onmouseover="showTip(event, 'fs37', 71)" class="i">res</span> <span class="o">=</span> <span class="s">&quot;`a` `c`&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 72)" onmouseover="showTip(event, 'fs22', 72)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 73)" onmouseover="showTip(event, 'fs31', 73)" class="f">ofSeq</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs17', 74)" onmouseover="showTip(event, 'fs17', 74)" class="f">parseSpans</span> [] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs22', 75)" onmouseover="showTip(event, 'fs22', 75)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 76)" onmouseover="showTip(event, 'fs31', 76)" class="f">ofSeq</span>
    <span class="i">Assert</span><span class="o">.</span><span class="i">That</span>((<span onmouseout="hideTip(event, 'fs37', 77)" onmouseover="showTip(event, 'fs37', 77)" class="i">res</span> <span class="o">=</span> [<span onmouseout="hideTip(event, 'fs16', 78)" onmouseover="showTip(event, 'fs16', 78)" class="i">InlineCode</span> <span class="s">&quot;a&quot;</span>; <span onmouseout="hideTip(event, 'fs14', 79)" onmouseover="showTip(event, 'fs14', 79)" class="i">Literal</span> <span class="s">&quot; &quot;</span>; <span onmouseout="hideTip(event, 'fs16', 80)" onmouseover="showTip(event, 'fs16', 80)" class="i">InlineCode</span> <span class="s">&quot;c&quot;</span>]))

<span class="c">// ----------------------------------------------------------------------------</span>

  <span class="k">do</span> 
    <span onmouseout="hideTip(event, 'fs29', 81)" onmouseover="showTip(event, 'fs29', 81)" class="f">``End of inline is found``</span>()
    <span onmouseout="hideTip(event, 'fs32', 82)" onmouseover="showTip(event, 'fs32', 82)" class="f">``All input is consumed``</span>()
    <span onmouseout="hideTip(event, 'fs33', 83)" onmouseover="showTip(event, 'fs33', 83)" class="f">``Needs backtick``</span> ()
    <span onmouseout="hideTip(event, 'fs35', 84)" onmouseover="showTip(event, 'fs35', 84)" class="f">``Finds inline code``</span> ()
    <span onmouseout="hideTip(event, 'fs36', 85)" onmouseover="showTip(event, 'fs36', 85)" class="f">``Parse two inline snippets``</span> ()
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">val toString : chars:char list -&gt; String<br /><br />Full name: Script.toString</div>
<div class="tip" id="fs3">val chars : char list</div>
<div class="tip" id="fs4">Multiple items<br />type String =<br />&#160;&#160;new : value:char -&gt; string + 7 overloads<br />&#160;&#160;member Chars : int -&gt; char<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;member Contains : value:string -&gt; bool<br />&#160;&#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&gt; unit<br />&#160;&#160;member EndsWith : value:string -&gt; bool + 2 overloads<br />&#160;&#160;member Equals : obj:obj -&gt; bool + 2 overloads<br />&#160;&#160;member GetEnumerator : unit -&gt; CharEnumerator<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;...<br /><br />Full name: System.String<br /><br />--------------------<br />String(value: nativeptr&lt;char&gt;) : unit<br />String(value: nativeptr&lt;sbyte&gt;) : unit<br />String(value: char []) : unit<br />String(c: char, count: int) : unit<br />String(value: nativeptr&lt;char&gt;, startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int) : unit<br />String(value: char [], startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int, enc: Text.Encoding) : unit</div>
<div class="tip" id="fs5">type Array =<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CopyTo : array:Array * index:int -&gt; unit + 1 overload<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator<br />&#160;&#160;member GetLength : dimension:int -&gt; int<br />&#160;&#160;member GetLongLength : dimension:int -&gt; int64<br />&#160;&#160;member GetLowerBound : dimension:int -&gt; int<br />&#160;&#160;member GetUpperBound : dimension:int -&gt; int<br />&#160;&#160;member GetValue : [&lt;ParamArray&gt;] indices:int[] -&gt; obj + 7 overloads<br />&#160;&#160;member Initialize : unit -&gt; unit<br />&#160;&#160;member IsFixedSize : bool<br />&#160;&#160;...<br /><br />Full name: System.Array</div>
<div class="tip" id="fs6">val ofList : list:&#39;T list -&gt; &#39;T []<br /><br />Full name: Microsoft.FSharp.Collections.Array.ofList</div>
<div class="tip" id="fs7">val parseInlineBody : acc:&#39;a -&gt; chars:&#39;b -&gt; &#39;c<br /><br />Full name: Script.parseInlineBody</div>
<div class="tip" id="fs8">val acc : &#39;a</div>
<div class="tip" id="fs9">val chars : &#39;b</div>
<div class="tip" id="fs10">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs11">val parseInline : chars:&#39;a -&gt; &#39;b<br /><br />Full name: Script.parseInline</div>
<div class="tip" id="fs12">val chars : &#39;a</div>
<div class="tip" id="fs13">type MarkdownSpan =<br />&#160;&#160;| Literal of string<br />&#160;&#160;| InlineCode of string<br /><br />Full name: Script.MarkdownSpan</div>
<div class="tip" id="fs14">Multiple items<br />union case MarkdownSpan.Literal: string -&gt; MarkdownSpan<br /><br />--------------------<br />type LiteralAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; LiteralAttribute<br /><br />Full name: Microsoft.FSharp.Core.LiteralAttribute<br /><br />--------------------<br />new : unit -&gt; LiteralAttribute</div>
<div class="tip" id="fs15">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs16">union case MarkdownSpan.InlineCode: string -&gt; MarkdownSpan</div>
<div class="tip" id="fs17">val parseSpans : acc:char list -&gt; chars:&#39;a list -&gt; seq&lt;MarkdownSpan&gt;<br /><br />Full name: Script.parseSpans</div>
<div class="tip" id="fs18">val acc : char list</div>
<div class="tip" id="fs19">val chars : &#39;a list</div>
<div class="tip" id="fs20">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs21">val emitLiteral : (unit -&gt; seq&lt;MarkdownSpan&gt;)</div>
<div class="tip" id="fs22">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs23">val rev : list:&#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.rev</div>
<div class="tip" id="fs24">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs25">val body : obj</div>
<div class="tip" id="fs26">val chars : obj</div>
<div class="tip" id="fs27">val c : &#39;a</div>
<div class="tip" id="fs28">module Tests<br /><br />from Script</div>
<div class="tip" id="fs29">val ( End of inline is found ) : unit -&gt; &#39;a<br /><br />Full name: Script.Tests.( End of inline is found )</div>
<div class="tip" id="fs30">val res : obj</div>
<div class="tip" id="fs31">val ofSeq : source:seq&lt;&#39;T&gt; -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.ofSeq</div>
<div class="tip" id="fs32">val ( All input is consumed ) : unit -&gt; &#39;a<br /><br />Full name: Script.Tests.( All input is consumed )</div>
<div class="tip" id="fs33">val ( Needs backtick ) : unit -&gt; &#39;a<br /><br />Full name: Script.Tests.( Needs backtick )</div>
<div class="tip" id="fs34">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs35">val ( Finds inline code ) : unit -&gt; &#39;a<br /><br />Full name: Script.Tests.( Finds inline code )</div>
<div class="tip" id="fs36">val ( Parse two inline snippets ) : unit -&gt; &#39;a<br /><br />Full name: Script.Tests.( Parse two inline snippets )</div>
<div class="tip" id="fs37">val res : MarkdownSpan list</div>

