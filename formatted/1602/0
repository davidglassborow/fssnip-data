<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// ============================================================================</span>
<span class="c">// PART 2: Tuples and functions</span>
<span class="c">// ============================================================================</span>

<span class="c">// Some setup for the scripts below - this can be ignored :-)</span>
<span class="k">let</span> <span class="i">__</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">failwith</span> <span class="s">&quot;!&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">a</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">b</span> <span class="o">=</span> <span class="k">if</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="f">not</span> (<span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">b</span>) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="f">failwith</span> <span class="s">&quot;Failed!&quot;</span>

<span class="k">open</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">System</span>

<span class="c">// ----------------------------------------------------------------------------</span>
<span class="c">// WALKTHROUGH: Tuples and functions taking tuples</span>
<span class="c">// ----------------------------------------------------------------------------</span>

<span class="c">// Tuple is a simple type that groups two or more values of possibly</span>
<span class="c">// different types. The following sample uses tuples to represent people - </span>
<span class="c">// note that the parentheses are optional.</span>
<span class="c">//</span>
<span class="c">// When decomposing tuple, you can write *pattern* that consists of new</span>
<span class="c">// variables, to be used for individual components of the tuple.</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="i">person1</span> <span class="o">=</span> (<span class="s">&quot;Ludwig&quot;</span>, <span class="n">56</span>)
  <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">name1</span>, <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="i">age1</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">person1</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="i">person2</span> <span class="o">=</span> <span class="s">&quot;Ludwig&quot;</span>, <span class="s">&quot;Wittgenstein&quot;</span>, <span class="n">56</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="i">name2</span>, <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="i">surname2</span>, <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="i">age2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="i">person2</span>

  <span onmouseout="hideTip(event, 'fs2', 19)" onmouseover="showTip(event, 'fs2', 19)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs8', 20)" onmouseover="showTip(event, 'fs8', 20)" class="i">name1</span> <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="i">__</span> 
  <span onmouseout="hideTip(event, 'fs2', 22)" onmouseover="showTip(event, 'fs2', 22)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs12', 23)" onmouseover="showTip(event, 'fs12', 23)" class="i">surname2</span> <span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="i">__</span>

<span class="c">// F# also provides two simple functions for working with two-element tuples</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="i">person</span> <span class="o">=</span> <span class="s">&quot;Ludwig&quot;</span>, <span class="n">56</span>
  <span onmouseout="hideTip(event, 'fs2', 26)" onmouseover="showTip(event, 'fs2', 26)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs16', 27)" onmouseover="showTip(event, 'fs16', 27)" class="f">fst</span> <span onmouseout="hideTip(event, 'fs15', 28)" onmouseover="showTip(event, 'fs15', 28)" class="i">person</span>) <span onmouseout="hideTip(event, 'fs14', 29)" onmouseover="showTip(event, 'fs14', 29)" class="i">__</span>
  <span onmouseout="hideTip(event, 'fs2', 30)" onmouseover="showTip(event, 'fs2', 30)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs17', 31)" onmouseover="showTip(event, 'fs17', 31)" class="f">snd</span> <span onmouseout="hideTip(event, 'fs15', 32)" onmouseover="showTip(event, 'fs15', 32)" class="i">person</span>) <span onmouseout="hideTip(event, 'fs14', 33)" onmouseover="showTip(event, 'fs14', 33)" class="i">__</span>


<span class="c">// Tuples can be useful when you want to return mutliple values as the result </span>
<span class="c">// of a function - for example name and age. The following snippet also </span>
<span class="c">// shows how to use the &#39;if .. then .. else&#39; construct in F#</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="f">getPerson</span> <span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="i">job</span> <span class="o">=</span> 
  <span class="k">if</span> <span onmouseout="hideTip(event, 'fs19', 36)" onmouseover="showTip(event, 'fs19', 36)" class="i">job</span> <span class="o">=</span> <span class="s">&quot;philosopher&quot;</span> <span class="k">then</span> (<span class="s">&quot;Ludwig&quot;</span>, <span class="n">56</span>)
  <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs19', 37)" onmouseover="showTip(event, 'fs19', 37)" class="i">job</span> <span class="o">=</span> <span class="s">&quot;scientist&quot;</span> <span class="k">then</span> (<span class="s">&quot;Albert&quot;</span>, <span class="n">66</span>)
  <span class="k">else</span> (<span class="s">&quot;Someone&quot;</span>, <span class="n">10</span>)

<span onmouseout="hideTip(event, 'fs2', 38)" onmouseover="showTip(event, 'fs2', 38)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs16', 39)" onmouseover="showTip(event, 'fs16', 39)" class="f">fst</span> (<span onmouseout="hideTip(event, 'fs18', 40)" onmouseover="showTip(event, 'fs18', 40)" class="f">getPerson</span> <span class="s">&quot;scientist&quot;</span>)) <span onmouseout="hideTip(event, 'fs14', 41)" onmouseover="showTip(event, 'fs14', 41)" class="i">__</span>
<span onmouseout="hideTip(event, 'fs2', 42)" onmouseover="showTip(event, 'fs2', 42)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs17', 43)" onmouseover="showTip(event, 'fs17', 43)" class="f">snd</span> (<span onmouseout="hideTip(event, 'fs18', 44)" onmouseover="showTip(event, 'fs18', 44)" class="f">getPerson</span> <span class="s">&quot;scientist&quot;</span>)) <span onmouseout="hideTip(event, 'fs14', 45)" onmouseover="showTip(event, 'fs14', 45)" class="i">__</span>

<span class="c">// F# uses &quot;structural equality&quot; which means that tuples containing the</span>
<span class="c">// same values are treated as equal. For example, try the following:</span>
<span onmouseout="hideTip(event, 'fs2', 46)" onmouseover="showTip(event, 'fs2', 46)" class="f">shouldEqual</span> (<span class="s">&quot;Joe&quot;</span>, <span class="n">13</span>) (<span class="s">&quot;Joe&quot;</span>, <span class="n">13</span>)
<span onmouseout="hideTip(event, 'fs2', 47)" onmouseover="showTip(event, 'fs2', 47)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs18', 48)" onmouseover="showTip(event, 'fs18', 48)" class="f">getPerson</span> <span class="s">&quot;philosopher&quot;</span>) <span onmouseout="hideTip(event, 'fs14', 49)" onmouseover="showTip(event, 'fs14', 49)" class="i">__</span>


<span class="c">// When writing functions that take tuples as arguments, the tuple is just</span>
<span class="c">// a single parameter, so you can take e.g. &#39;person&#39; and then decompose it</span>
<span class="c">// into two values. However, you can write the same thing more compactly</span>
<span class="c">// by using the pattern directly in the argument of the function. The following</span>
<span class="c">// two functions are the same:</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs20', 50)" onmouseover="showTip(event, 'fs20', 50)" class="f">addYear1</span> <span onmouseout="hideTip(event, 'fs21', 51)" onmouseover="showTip(event, 'fs21', 51)" class="i">person</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 52)" onmouseover="showTip(event, 'fs22', 52)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs23', 53)" onmouseover="showTip(event, 'fs23', 53)" class="i">age</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs21', 54)" onmouseover="showTip(event, 'fs21', 54)" class="i">person</span>
    <span onmouseout="hideTip(event, 'fs22', 55)" onmouseover="showTip(event, 'fs22', 55)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs23', 56)" onmouseover="showTip(event, 'fs23', 56)" class="i">age</span> <span class="o">+</span> <span class="n">1</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 57)" onmouseover="showTip(event, 'fs24', 57)" class="f">addYear2</span> (<span onmouseout="hideTip(event, 'fs22', 58)" onmouseover="showTip(event, 'fs22', 58)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs23', 59)" onmouseover="showTip(event, 'fs23', 59)" class="i">age</span>) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs22', 60)" onmouseover="showTip(event, 'fs22', 60)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs23', 61)" onmouseover="showTip(event, 'fs23', 61)" class="i">age</span> <span class="o">+</span> <span class="n">1</span>

  <span onmouseout="hideTip(event, 'fs2', 62)" onmouseover="showTip(event, 'fs2', 62)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs20', 63)" onmouseover="showTip(event, 'fs20', 63)" class="f">addYear1</span> (<span onmouseout="hideTip(event, 'fs18', 64)" onmouseover="showTip(event, 'fs18', 64)" class="f">getPerson</span> <span class="s">&quot;scientist&quot;</span>)) <span onmouseout="hideTip(event, 'fs14', 65)" onmouseover="showTip(event, 'fs14', 65)" class="i">__</span>
  <span onmouseout="hideTip(event, 'fs2', 66)" onmouseover="showTip(event, 'fs2', 66)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs24', 67)" onmouseover="showTip(event, 'fs24', 67)" class="f">addYear2</span> (<span onmouseout="hideTip(event, 'fs18', 68)" onmouseover="showTip(event, 'fs18', 68)" class="f">getPerson</span> <span class="s">&quot;philosopher&quot;</span>)) <span onmouseout="hideTip(event, 'fs14', 69)" onmouseover="showTip(event, 'fs14', 69)" class="i">__</span>

<span class="c">// In some cases, you may need to provide type annotation to specify the </span>
<span class="c">// type explicitly. For example, when you want to call a .NET member, </span>
<span class="c">// the F# compiler needs to know the type (so that it can check whether the</span>
<span class="c">// member exists). You can annotate single variables or composed patterns.</span>
<span class="k">do</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 70)" onmouseover="showTip(event, 'fs25', 70)" class="f">getLength</span> (<span onmouseout="hideTip(event, 'fs26', 71)" onmouseover="showTip(event, 'fs26', 71)" class="i">name</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs27', 72)" onmouseover="showTip(event, 'fs27', 72)" class="t">string</span>) <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs26', 73)" onmouseover="showTip(event, 'fs26', 73)" class="i">name</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 74)" onmouseover="showTip(event, 'fs28', 74)" class="i">Length</span>

  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 75)" onmouseover="showTip(event, 'fs29', 75)" class="f">getNameLength</span> ((<span onmouseout="hideTip(event, 'fs26', 76)" onmouseover="showTip(event, 'fs26', 76)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs23', 77)" onmouseover="showTip(event, 'fs23', 77)" class="i">age</span>)<span class="o">:</span><span onmouseout="hideTip(event, 'fs27', 78)" onmouseover="showTip(event, 'fs27', 78)" class="t">string</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs30', 79)" onmouseover="showTip(event, 'fs30', 79)" class="t">int</span>) <span class="o">=</span> 
    <span class="i">name</span><span class="o">.</span><span class="i">Length</span>

  <span onmouseout="hideTip(event, 'fs2', 80)" onmouseover="showTip(event, 'fs2', 80)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs25', 81)" onmouseover="showTip(event, 'fs25', 81)" class="f">getLength</span> <span class="s">&quot;Ludwig&quot;</span>) <span onmouseout="hideTip(event, 'fs14', 82)" onmouseover="showTip(event, 'fs14', 82)" class="i">__</span>
  <span onmouseout="hideTip(event, 'fs2', 83)" onmouseover="showTip(event, 'fs2', 83)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs29', 84)" onmouseover="showTip(event, 'fs29', 84)" class="f">getNameLength</span> (<span onmouseout="hideTip(event, 'fs18', 85)" onmouseover="showTip(event, 'fs18', 85)" class="f">getPerson</span> <span class="s">&quot;philosopher&quot;</span>)) <span onmouseout="hideTip(event, 'fs14', 86)" onmouseover="showTip(event, 'fs14', 86)" class="i">__</span>

<span class="c">// ============================================================================</span>
<span class="c">// TASK #2: Validating inputs</span>
<span class="c">// ============================================================================</span>

<span class="c">// In this task, we want to write a simple validator which tests whether a</span>
<span class="c">// name and age represents a valid person. A valid person details:</span>
<span class="c">//</span>
<span class="c">//  - Have age between 0 and 150 (inclusive)</span>
<span class="c">//  - Start with an upper-case letter </span>
<span class="c">//  - Contains a space &amp; letter after space is upper case</span>
<span class="c">//</span>
<span class="c">// You&#39;ll need &quot;str.[index]&quot; to access character at a given index, </span>
<span class="c">// &quot;Char.IsUpper&quot; to check whether character is upper case and string </span>
<span class="c">// operations including &quot;str.IndexOf&quot; and &quot;str.Contains&quot;.</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 87)" onmouseover="showTip(event, 'fs31', 87)" class="f">validAge</span> <span onmouseout="hideTip(event, 'fs32', 88)" onmouseover="showTip(event, 'fs32', 88)" class="i">person</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 89)" onmouseover="showTip(event, 'fs14', 89)" class="i">__</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 90)" onmouseover="showTip(event, 'fs33', 90)" class="f">validName</span> <span onmouseout="hideTip(event, 'fs32', 91)" onmouseover="showTip(event, 'fs32', 91)" class="i">person</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 92)" onmouseover="showTip(event, 'fs14', 92)" class="i">__</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 93)" onmouseover="showTip(event, 'fs34', 93)" class="f">validPerson</span> <span onmouseout="hideTip(event, 'fs32', 94)" onmouseover="showTip(event, 'fs32', 94)" class="i">person</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs31', 95)" onmouseover="showTip(event, 'fs31', 95)" class="f">validAge</span> <span onmouseout="hideTip(event, 'fs32', 96)" onmouseover="showTip(event, 'fs32', 96)" class="i">person</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs33', 97)" onmouseover="showTip(event, 'fs33', 97)" class="f">validName</span> <span onmouseout="hideTip(event, 'fs32', 98)" onmouseover="showTip(event, 'fs32', 98)" class="i">person</span>

<span onmouseout="hideTip(event, 'fs2', 99)" onmouseover="showTip(event, 'fs2', 99)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs34', 100)" onmouseover="showTip(event, 'fs34', 100)" class="f">validPerson</span> (<span class="s">&quot;Tomas Petricek&quot;</span>, <span class="n">42</span>)) <span class="k">true</span>
<span onmouseout="hideTip(event, 'fs2', 101)" onmouseover="showTip(event, 'fs2', 101)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs34', 102)" onmouseover="showTip(event, 'fs34', 102)" class="f">validPerson</span> (<span class="s">&quot;Tomas Petricek&quot;</span>, <span class="n">242</span>)) <span class="k">false</span>
<span onmouseout="hideTip(event, 'fs2', 103)" onmouseover="showTip(event, 'fs2', 103)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs34', 104)" onmouseover="showTip(event, 'fs34', 104)" class="f">validPerson</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="n">42</span>)) <span class="k">false</span>
<span onmouseout="hideTip(event, 'fs2', 105)" onmouseover="showTip(event, 'fs2', 105)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs34', 106)" onmouseover="showTip(event, 'fs34', 106)" class="f">validPerson</span> (<span class="s">&quot;Tomas petricek&quot;</span>, <span class="n">42</span>)) <span class="k">false</span>
<span onmouseout="hideTip(event, 'fs2', 107)" onmouseover="showTip(event, 'fs2', 107)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs34', 108)" onmouseover="showTip(event, 'fs34', 108)" class="f">validPerson</span> (<span class="s">&quot;tomas Petricek&quot;</span>, <span class="n">42</span>)) <span class="k">false</span>

<span class="c">// ----------------------------------------------------------------------------</span>
<span class="c">// WALKTHROUGH: Using functions as arguments</span>
<span class="c">// ----------------------------------------------------------------------------</span>

<span class="c">// In F#, it is really easy to create a function that takes other</span>
<span class="c">// function as an argument. Functions are just simple values that can</span>
<span class="c">// be passed around in the usual way. The following function takes </span>
<span class="c">// &#39;f&#39; and applies it to the age of a person</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs35', 109)" onmouseover="showTip(event, 'fs35', 109)" class="f">transformAge</span> <span onmouseout="hideTip(event, 'fs36', 110)" onmouseover="showTip(event, 'fs36', 110)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs37', 111)" onmouseover="showTip(event, 'fs37', 111)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs38', 112)" onmouseover="showTip(event, 'fs38', 112)" class="i">age</span>) <span class="o">=</span> 
  (<span onmouseout="hideTip(event, 'fs37', 113)" onmouseover="showTip(event, 'fs37', 113)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs36', 114)" onmouseover="showTip(event, 'fs36', 114)" class="f">f</span> <span onmouseout="hideTip(event, 'fs38', 115)" onmouseover="showTip(event, 'fs38', 115)" class="i">age</span>)

<span class="c">// Functions that increment/decrement age</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 116)" onmouseover="showTip(event, 'fs39', 116)" class="f">increment</span> <span onmouseout="hideTip(event, 'fs40', 117)" onmouseover="showTip(event, 'fs40', 117)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs40', 118)" onmouseover="showTip(event, 'fs40', 118)" class="i">a</span> <span class="o">+</span> <span class="n">1</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 119)" onmouseover="showTip(event, 'fs41', 119)" class="f">decrement</span> <span onmouseout="hideTip(event, 'fs40', 120)" onmouseover="showTip(event, 'fs40', 120)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs40', 121)" onmouseover="showTip(event, 'fs40', 121)" class="i">a</span> <span class="o">-</span> <span class="n">1</span>

<span class="c">// Implement a function that caps the age to 0 when it is </span>
<span class="c">// smaller than 0; and to 150 if it is greater than that.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 122)" onmouseover="showTip(event, 'fs42', 122)" class="f">cap</span> <span onmouseout="hideTip(event, 'fs43', 123)" onmouseover="showTip(event, 'fs43', 123)" class="i">a</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs14', 124)" onmouseover="showTip(event, 'fs14', 124)" class="i">__</span>

<span onmouseout="hideTip(event, 'fs2', 125)" onmouseover="showTip(event, 'fs2', 125)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs35', 126)" onmouseover="showTip(event, 'fs35', 126)" class="f">transformAge</span> <span onmouseout="hideTip(event, 'fs39', 127)" onmouseover="showTip(event, 'fs39', 127)" class="f">increment</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="n">42</span>)) <span onmouseout="hideTip(event, 'fs14', 128)" onmouseover="showTip(event, 'fs14', 128)" class="i">__</span>
<span onmouseout="hideTip(event, 'fs2', 129)" onmouseover="showTip(event, 'fs2', 129)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs35', 130)" onmouseover="showTip(event, 'fs35', 130)" class="f">transformAge</span> <span onmouseout="hideTip(event, 'fs41', 131)" onmouseover="showTip(event, 'fs41', 131)" class="f">decrement</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="n">42</span>)) <span onmouseout="hideTip(event, 'fs14', 132)" onmouseover="showTip(event, 'fs14', 132)" class="i">__</span>
<span onmouseout="hideTip(event, 'fs2', 133)" onmouseover="showTip(event, 'fs2', 133)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs35', 134)" onmouseover="showTip(event, 'fs35', 134)" class="f">transformAge</span> <span onmouseout="hideTip(event, 'fs42', 135)" onmouseover="showTip(event, 'fs42', 135)" class="f">cap</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="o">-</span><span class="n">1</span>)) (<span class="s">&quot;Tomas&quot;</span>, <span class="n">0</span>)
<span onmouseout="hideTip(event, 'fs2', 136)" onmouseover="showTip(event, 'fs2', 136)" class="f">shouldEqual</span> (<span onmouseout="hideTip(event, 'fs35', 137)" onmouseover="showTip(event, 'fs35', 137)" class="f">transformAge</span> <span onmouseout="hideTip(event, 'fs42', 138)" onmouseover="showTip(event, 'fs42', 138)" class="f">cap</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="n">420</span>)) (<span class="s">&quot;Tomas&quot;</span>, <span class="n">150</span>)

<span class="c">// When calling functions with multiple parameters, it is convenient</span>
<span class="c">// to use the &#39;|&gt;&#39; operator. The operator takes the value on the left</span>
<span class="c">// and passes it as a parameter to the function on the right:</span>

(<span class="s">&quot;Tomas&quot;</span>, <span class="n">40</span>)
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs35', 139)" onmouseover="showTip(event, 'fs35', 139)" class="f">transformAge</span> <span onmouseout="hideTip(event, 'fs39', 140)" onmouseover="showTip(event, 'fs39', 140)" class="f">increment</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs35', 141)" onmouseover="showTip(event, 'fs35', 141)" class="f">transformAge</span> <span onmouseout="hideTip(event, 'fs39', 142)" onmouseover="showTip(event, 'fs39', 142)" class="f">increment</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs2', 143)" onmouseover="showTip(event, 'fs2', 143)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs14', 144)" onmouseover="showTip(event, 'fs14', 144)" class="i">__</span>

<span class="c">// The previous example specified functions (to be used as parameters)</span>
<span class="c">// explicitly using named functions. You can write the same functions</span>
<span class="c">// inline using the lambda function syntax and the &#39;fun&#39; keyword.</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs44', 145)" onmouseover="showTip(event, 'fs44', 145)" class="i">r1</span> <span class="o">=</span> 
  (<span class="s">&quot;Tomas&quot;</span>, <span class="n">42</span>) 
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs35', 146)" onmouseover="showTip(event, 'fs35', 146)" class="f">transformAge</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs40', 147)" onmouseover="showTip(event, 'fs40', 147)" class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs40', 148)" onmouseover="showTip(event, 'fs40', 148)" class="i">a</span> <span class="o">+</span> <span class="n">2</span>) 

<span onmouseout="hideTip(event, 'fs2', 149)" onmouseover="showTip(event, 'fs2', 149)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs44', 150)" onmouseover="showTip(event, 'fs44', 150)" class="i">r1</span> <span onmouseout="hideTip(event, 'fs14', 151)" onmouseover="showTip(event, 'fs14', 151)" class="i">__</span> 

<span class="c">// Lambda functions can contain multi-line code. It just needs to start</span>
<span class="c">// on a new line and be indented further than the previous line</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 152)" onmouseover="showTip(event, 'fs45', 152)" class="i">r2</span> <span class="o">=</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="n">42</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs35', 153)" onmouseover="showTip(event, 'fs35', 153)" class="f">transformAge</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs40', 154)" onmouseover="showTip(event, 'fs40', 154)" class="i">a</span> <span class="k">-&gt;</span> 
  <span onmouseout="hideTip(event, 'fs46', 155)" onmouseover="showTip(event, 'fs46', 155)" class="f">printfn</span> <span class="s">&quot;Processing person with age: </span><span class="pf">%d</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs40', 156)" onmouseover="showTip(event, 'fs40', 156)" class="i">a</span>
  <span onmouseout="hideTip(event, 'fs40', 157)" onmouseover="showTip(event, 'fs40', 157)" class="i">a</span> <span class="o">+</span> <span class="n">2</span>) 

<span onmouseout="hideTip(event, 'fs2', 158)" onmouseover="showTip(event, 'fs2', 158)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs45', 159)" onmouseover="showTip(event, 'fs45', 159)" class="i">r2</span> <span onmouseout="hideTip(event, 'fs14', 160)" onmouseover="showTip(event, 'fs14', 160)" class="i">__</span>

<span class="c">// Rewrite the &#39;cap&#39; function from a previous example as an inline lambda</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs47', 161)" onmouseover="showTip(event, 'fs47', 161)" class="i">r4</span> <span class="o">=</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="o">-</span><span class="n">1</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs14', 162)" onmouseover="showTip(event, 'fs14', 162)" class="i">__</span>

<span onmouseout="hideTip(event, 'fs2', 163)" onmouseover="showTip(event, 'fs2', 163)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs47', 164)" onmouseover="showTip(event, 'fs47', 164)" class="i">r4</span> (<span class="s">&quot;Tomas&quot;</span>, <span class="n">0</span>)

<span class="c">// ============================================================================</span>
<span class="c">// TASK #3: Using functions as arguments</span>
<span class="c">// ============================================================================</span>

<span class="c">// The &#39;transformAge&#39; function applies the specified function to the </span>
<span class="c">// age (second elemnet of the tuple). Implement a similar function that</span>
<span class="c">// transforms the name of a tuple and use it to turn name into upper case.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 165)" onmouseover="showTip(event, 'fs48', 165)" class="f">transformName</span> <span onmouseout="hideTip(event, 'fs49', 166)" onmouseover="showTip(event, 'fs49', 166)" class="i">f</span> (<span onmouseout="hideTip(event, 'fs50', 167)" onmouseover="showTip(event, 'fs50', 167)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs51', 168)" onmouseover="showTip(event, 'fs51', 168)" class="i">age</span>) <span class="o">=</span>
  <span onmouseout="hideTip(event, 'fs14', 169)" onmouseover="showTip(event, 'fs14', 169)" class="i">__</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs52', 170)" onmouseover="showTip(event, 'fs52', 170)" class="i">r5</span> <span class="o">=</span> 
  (<span class="s">&quot;Tomas&quot;</span>, <span class="n">42</span>) 
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs48', 171)" onmouseover="showTip(event, 'fs48', 171)" class="f">transformName</span> (<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs53', 172)" onmouseover="showTip(event, 'fs53', 172)" class="i">n</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs27', 173)" onmouseover="showTip(event, 'fs27', 173)" class="t">string</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs53', 174)" onmouseover="showTip(event, 'fs53', 174)" class="i">n</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 175)" onmouseover="showTip(event, 'fs54', 175)" class="f">ToUpper</span>())

<span onmouseout="hideTip(event, 'fs2', 176)" onmouseover="showTip(event, 'fs2', 176)" class="f">shouldEqual</span> <span onmouseout="hideTip(event, 'fs52', 177)" onmouseover="showTip(event, 'fs52', 177)" class="i">r5</span> (<span class="s">&quot;TOMAS&quot;</span>, <span class="n">42</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs2">val shouldEqual : a:&#39;a -&gt; b:&#39;a -&gt; unit (requires equality)<br /><br />Full name: Script.shouldEqual</div>
<div class="tip" id="fs3">val a : &#39;a (requires equality)</div>
<div class="tip" id="fs4">val b : &#39;a (requires equality)</div>
<div class="tip" id="fs5">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs6">namespace System</div>
<div class="tip" id="fs7">val person1 : string * int</div>
<div class="tip" id="fs8">val name1 : string</div>
<div class="tip" id="fs9">val age1 : int</div>
<div class="tip" id="fs10">val person2 : string * string * int</div>
<div class="tip" id="fs11">val name2 : string</div>
<div class="tip" id="fs12">val surname2 : string</div>
<div class="tip" id="fs13">val age2 : int</div>
<div class="tip" id="fs14">val __&lt;&#39;T&gt; : &#39;T<br /><br />Full name: Script.__</div>
<div class="tip" id="fs15">val person : string * int</div>
<div class="tip" id="fs16">val fst : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T1<br /><br />Full name: Microsoft.FSharp.Core.Operators.fst</div>
<div class="tip" id="fs17">val snd : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T2<br /><br />Full name: Microsoft.FSharp.Core.Operators.snd</div>
<div class="tip" id="fs18">val getPerson : job:string -&gt; string * int<br /><br />Full name: Script.getPerson</div>
<div class="tip" id="fs19">val job : string</div>
<div class="tip" id="fs20">val addYear1 : (&#39;a * int -&gt; &#39;a * int)</div>
<div class="tip" id="fs21">val person : &#39;a * int</div>
<div class="tip" id="fs22">val name : &#39;a</div>
<div class="tip" id="fs23">val age : int</div>
<div class="tip" id="fs24">val addYear2 : (&#39;a * int -&gt; &#39;a * int)</div>
<div class="tip" id="fs25">val getLength : (string -&gt; int)</div>
<div class="tip" id="fs26">val name : string</div>
<div class="tip" id="fs27">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs28">property String.Length: int</div>
<div class="tip" id="fs29">val getNameLength : (string * int -&gt; int)</div>
<div class="tip" id="fs30">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs31">val validAge : person:&#39;a -&gt; &#39;b<br /><br />Full name: Script.validAge</div>
<div class="tip" id="fs32">val person : &#39;a</div>
<div class="tip" id="fs33">val validName : person:&#39;a -&gt; &#39;b<br /><br />Full name: Script.validName</div>
<div class="tip" id="fs34">val validPerson : person:&#39;a -&gt; bool<br /><br />Full name: Script.validPerson</div>
<div class="tip" id="fs35">val transformAge : f:(&#39;a -&gt; &#39;b) -&gt; name:&#39;c * age:&#39;a -&gt; &#39;c * &#39;b<br /><br />Full name: Script.transformAge</div>
<div class="tip" id="fs36">val f : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs37">val name : &#39;c</div>
<div class="tip" id="fs38">val age : &#39;a</div>
<div class="tip" id="fs39">val increment : a:int -&gt; int<br /><br />Full name: Script.increment</div>
<div class="tip" id="fs40">val a : int</div>
<div class="tip" id="fs41">val decrement : a:int -&gt; int<br /><br />Full name: Script.decrement</div>
<div class="tip" id="fs42">val cap : a:&#39;a -&gt; &#39;b<br /><br />Full name: Script.cap</div>
<div class="tip" id="fs43">val a : &#39;a</div>
<div class="tip" id="fs44">val r1 : string * int<br /><br />Full name: Script.r1</div>
<div class="tip" id="fs45">val r2 : string * int<br /><br />Full name: Script.r2</div>
<div class="tip" id="fs46">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs47">val r4 : string * int<br /><br />Full name: Script.r4</div>
<div class="tip" id="fs48">val transformName : f:&#39;a -&gt; name:&#39;b * age:&#39;c -&gt; &#39;d<br /><br />Full name: Script.transformName</div>
<div class="tip" id="fs49">val f : &#39;a</div>
<div class="tip" id="fs50">val name : &#39;b</div>
<div class="tip" id="fs51">val age : &#39;c</div>
<div class="tip" id="fs52">val r5 : string * int<br /><br />Full name: Script.r5</div>
<div class="tip" id="fs53">val n : string</div>
<div class="tip" id="fs54">String.ToUpper() : string<br />String.ToUpper(culture: Globalization.CultureInfo) : string</div>

