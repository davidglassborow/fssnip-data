<h2><a name="Ninety-Nine-F-Problems-Problems-61-69-Binary-trees" class="anchor" href="#Ninety-Nine-F-Problems-Problems-61-69-Binary-trees">Ninety-Nine F# Problems - Problems 61 - 69 - Binary trees</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// These are F# solutions of Ninety-Nine Haskell Problems </span>
<span class="c">/// (http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems), </span>
<span class="c">/// which are themselves translations of Ninety-Nine Lisp Problems</span>
<span class="c">/// (http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html)</span>
<span class="c">/// and Ninety-Nine Prolog Problems</span>
<span class="c">/// (https://sites.google.com/site/prologsite/prolog-problems).</span>
<span class="c">///</span>
<span class="c">/// If you would like to contribute a solution or fix any bugs, send </span>
<span class="c">/// an email to paks at kitiara dot org with the subject &quot;99 F# problems&quot;. </span>
<span class="c">/// I&#39;ll try to update the problem as soon as possible.</span>
<span class="c">///</span>
<span class="c">/// The problems have different levels of difficulty. Those marked with a single asterisk (*) </span>
<span class="c">/// are easy. If you have successfully solved the preceeding problems you should be able to </span>
<span class="c">/// solve them within a few (say 15) minutes. Problems marked with two asterisks (**) are of </span>
<span class="c">/// intermediate difficulty. If you are a skilled F# programmer it shouldn&#39;t take you more than </span>
<span class="c">/// 30-90 minutes to solve them. Problems marked with three asterisks (***) are more difficult. </span>
<span class="c">/// You may need more time (i.e. a few hours or more) to find a good solution</span>
<span class="c">///</span>
<span class="c">/// Though the problems number from 1 to 99, there are some gaps and some additions marked with </span>
<span class="c">/// letters. There are actually only 88 problems.</span>
<span class="c">///</span>
<span class="c">///</span>
<span class="c">/// Binary trees </span>
<span class="c">/// </span>
<span class="c">/// As defined in problem 54A. </span>

<span class="k">type</span> <span class="o">&#39;</span><span class="i">a</span> <span class="t">Tree</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="p">Empty</span> | <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="p">Branch</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">a</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">Tree</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="t">Tree</span>

<span class="c">/// </span>
<span class="c">/// An example tree: </span>
<span class="c">/// </span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="i">tree4</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 6)" onmouseover="showTip(event, 'fs2', 6)" class="p">Branch</span> (<span class="n">1</span>, <span onmouseout="hideTip(event, 'fs2', 7)" onmouseover="showTip(event, 'fs2', 7)" class="p">Branch</span> (<span class="n">2</span>, <span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs2', 9)" onmouseover="showTip(event, 'fs2', 9)" class="p">Branch</span> (<span class="n">4</span>, <span onmouseout="hideTip(event, 'fs1', 10)" onmouseover="showTip(event, 'fs1', 10)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 11)" onmouseover="showTip(event, 'fs1', 11)" class="p">Empty</span>)),
                       <span onmouseout="hideTip(event, 'fs2', 12)" onmouseover="showTip(event, 'fs2', 12)" class="p">Branch</span> (<span class="n">2</span>, <span onmouseout="hideTip(event, 'fs1', 13)" onmouseover="showTip(event, 'fs1', 13)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 14)" onmouseover="showTip(event, 'fs1', 14)" class="p">Empty</span>))
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-61-Count-the-leaves-of-a-binary-tree" class="anchor" href="#Problem-61-Count-the-leaves-of-a-binary-tree">(*) Problem 61 : Count the leaves of a binary tree</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// A leaf is a node with no successors. Write a predicate count_leaves/2 to count them.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// % count_leaves(T,N) :- the binary tree T has N leaves</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; countLeaves tree4</span>
<span class="c">/// val it : int = 2</span>

<span id="fst5" onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15, document.getElementById('fst5'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-62-Collect-the-internal-nodes-of-a-binary-tree-in-a-list" class="anchor" href="#Problem-62-Collect-the-internal-nodes-of-a-binary-tree-in-a-list">(*) Problem 62 : Collect the internal nodes of a binary tree in a list</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// An internal node of a binary tree has either one or two non-empty successors. Write a </span>
<span class="c">/// predicate internals/2 to collect them in a list.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// % internals(T,S) :- S is the list of internal nodes of the binary tree T.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt;internals tree4;;</span>
<span class="c">/// val it : int list = [1; 2]</span>

<span id="fst6" onmouseout="hideTip(event, 'fs6', 16)" onmouseover="showTip(event, 'fs6', 16, document.getElementById('fst6'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-62B-Collect-the-nodes-at-a-given-level-in-a-list" class="anchor" href="#Problem-62B-Collect-the-nodes-at-a-given-level-in-a-list">(*) Problem 62B : Collect the nodes at a given level in a list</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// A node of a binary tree is at level N if the path from the root to the node has </span>
<span class="c">/// length N-1. The root node is at level 1. Write a predicate atlevel/3 to collect </span>
<span class="c">/// all nodes at a given level in a list.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// % atlevel(T,L,S) :- S is the list of nodes of the binary tree T at level L</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt;atLevel tree4 2;;</span>
<span class="c">/// val it : int list = [2,2]</span>

<span id="fst7" onmouseout="hideTip(event, 'fs7', 17)" onmouseover="showTip(event, 'fs7', 17, document.getElementById('fst7'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-63-Construct-a-complete-binary-tree" class="anchor" href="#Problem-63-Construct-a-complete-binary-tree">(<em></em>) Problem 63 : Construct a complete binary tree</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// A complete binary tree with height H is defined as follows: </span>
<span class="c">/// • The levels 1,2,3,...,H-1 contain the maximum number of nodes (i.e 2**(i-1) at the </span>
<span class="c">///   level i)</span>
<span class="c">/// • In level H, which may contain less than the maximum possible number of nodes, </span>
<span class="c">///   all the nodes are &quot;left-adjusted&quot;. This means that in a levelorder tree traversal all </span>
<span class="c">///   internal nodes come first, the leaves come second, and empty successors (the </span>
<span class="c">///   nil&#39;s which are not really nodes!) come last.</span>
<span class="c">///  </span>
<span class="c">/// Particularly, complete binary trees are used as data structures (or addressing </span>
<span class="c">/// schemes) for heaps.</span>
<span class="c">///  </span>
<span class="c">/// We can assign an address number to each node in a complete binary tree by </span>
<span class="c">/// enumerating the nodes in level-order, starting at the root with number 1. For every </span>
<span class="c">/// node X with address A the following property holds: The address of X&#39;s left and right </span>
<span class="c">/// successors are 2*A and 2*A+1, respectively, if they exist. This fact can be used to </span>
<span class="c">/// elegantly construct a complete binary tree structure.</span>
<span class="c">///  </span>
<span class="c">/// Write a predicate complete_binary_tree/2. </span>
<span class="c">/// </span>
<span class="c">/// Example: </span>
<span class="c">/// % complete_binary_tree(N,T) :- T is a complete binary tree with N nodes.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; completeBinaryTree 4</span>
<span class="c">/// Branch (&#39;x&#39;, Branch (&#39;x&#39;, Branch (&#39;x&#39;, Empty, Empty), Empty), </span>
<span class="c">///                                             Branch (&#39;x&#39;, Empty, Empty))</span>
<span class="c">///  </span>
<span class="c">/// &gt; isCompleteBinaryTree &lt;|  Branch (&#39;x&#39;, Branch (&#39;x&#39;, Empty, Empty), </span>
<span class="c">///                                                    Branch (&#39;x&#39;, Empty, Empty))</span>
<span class="c">/// val it : bool = true</span>

<span id="fst8" onmouseout="hideTip(event, 'fs8', 18)" onmouseover="showTip(event, 'fs8', 18, document.getElementById('fst8'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-64-Layout-a-binary-tree-1" class="anchor" href="#Problem-64-Layout-a-binary-tree-1">(<em></em>) Problem 64 : Layout a binary tree (1)</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Given a binary tree as the usual Prolog term t(X,L,R) (or nil). As a preparation for </span>
<span class="c">/// drawing the tree, a layout algorithm is required to determine the position of each </span>
<span class="c">/// node in a rectangular grid. Several layout methods are conceivable, one of them is </span>
<span class="c">/// shown in the illustration below:</span>
<span class="c">///</span>
<span class="c">///     1  2  3  4  5  6  7  8  9  10  11  12</span>
<span class="c">/// </span>
<span class="c">/// 1                       (n)</span>
<span class="c">///                       /             \</span>
<span class="c">/// 2                 (k)                  (u)</span>
<span class="c">///             /        \           /</span>
<span class="c">/// 3     (c)            (m)   (p)</span>
<span class="c">///      /     \                    \</span>
<span class="c">/// 4  (a)         (h)                 (s)</span>
<span class="c">///               /                   /</span>
<span class="c">/// 5           (g)                (q)</span>
<span class="c">///            /</span>
<span class="c">/// 6        (e)</span>
<span class="c">/// </span>
<span class="c">/// In this layout strategy, the position of a node v is obtained by the following two rules:</span>
<span class="c">/// • x(v) is equal to the position of the node v in the inorder sequence </span>
<span class="c">/// • y(v) is equal to the depth of the node v in the tree </span>
<span class="c">/// </span>
<span class="c">/// Write a function to annotate each node of the tree with a position, where (1,1) in the </span>
<span class="c">/// top left corner or the rectangle bounding the drawn tree.</span>
<span class="c">///  </span>
<span class="c">/// Here is the example tree from the above illustration: </span>
<span class="c">/// </span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 19)" onmouseover="showTip(event, 'fs9', 19)" class="i">tree64</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 20)" onmouseover="showTip(event, 'fs2', 20)" class="p">Branch</span> (<span class="s">&#39;n&#39;</span>,
                <span onmouseout="hideTip(event, 'fs2', 21)" onmouseover="showTip(event, 'fs2', 21)" class="p">Branch</span> (<span class="s">&#39;k&#39;</span>,
                        <span onmouseout="hideTip(event, 'fs2', 22)" onmouseover="showTip(event, 'fs2', 22)" class="p">Branch</span> (<span class="s">&#39;c&#39;</span>,
                                <span onmouseout="hideTip(event, 'fs2', 23)" onmouseover="showTip(event, 'fs2', 23)" class="p">Branch</span> (<span class="s">&#39;a&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 24)" onmouseover="showTip(event, 'fs1', 24)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 25)" onmouseover="showTip(event, 'fs1', 25)" class="p">Empty</span>),
                                <span onmouseout="hideTip(event, 'fs2', 26)" onmouseover="showTip(event, 'fs2', 26)" class="p">Branch</span> (<span class="s">&#39;h&#39;</span>,
                                        <span onmouseout="hideTip(event, 'fs2', 27)" onmouseover="showTip(event, 'fs2', 27)" class="p">Branch</span> (<span class="s">&#39;g&#39;</span>,
                                                <span onmouseout="hideTip(event, 'fs2', 28)" onmouseover="showTip(event, 'fs2', 28)" class="p">Branch</span> (<span class="s">&#39;e&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 29)" onmouseover="showTip(event, 'fs1', 29)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 30)" onmouseover="showTip(event, 'fs1', 30)" class="p">Empty</span>),
                                                <span onmouseout="hideTip(event, 'fs1', 31)" onmouseover="showTip(event, 'fs1', 31)" class="p">Empty</span>),
                                        <span onmouseout="hideTip(event, 'fs1', 32)" onmouseover="showTip(event, 'fs1', 32)" class="p">Empty</span>)
                                ),
                        <span onmouseout="hideTip(event, 'fs2', 33)" onmouseover="showTip(event, 'fs2', 33)" class="p">Branch</span> (<span class="s">&#39;m&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 34)" onmouseover="showTip(event, 'fs1', 34)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 35)" onmouseover="showTip(event, 'fs1', 35)" class="p">Empty</span>)),
                <span onmouseout="hideTip(event, 'fs2', 36)" onmouseover="showTip(event, 'fs2', 36)" class="p">Branch</span> (<span class="s">&#39;u&#39;</span>,
                        <span onmouseout="hideTip(event, 'fs2', 37)" onmouseover="showTip(event, 'fs2', 37)" class="p">Branch</span> (<span class="s">&#39;p&#39;</span>,
                                <span onmouseout="hideTip(event, 'fs1', 38)" onmouseover="showTip(event, 'fs1', 38)" class="p">Empty</span>,
                                <span onmouseout="hideTip(event, 'fs2', 39)" onmouseover="showTip(event, 'fs2', 39)" class="p">Branch</span> (<span class="s">&#39;s&#39;</span>,
                                        <span onmouseout="hideTip(event, 'fs2', 40)" onmouseover="showTip(event, 'fs2', 40)" class="p">Branch</span> (<span class="s">&#39;q&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 41)" onmouseover="showTip(event, 'fs1', 41)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 42)" onmouseover="showTip(event, 'fs1', 42)" class="p">Empty</span>),
                                        <span onmouseout="hideTip(event, 'fs1', 43)" onmouseover="showTip(event, 'fs1', 43)" class="p">Empty</span>)
                                ),
                        <span onmouseout="hideTip(event, 'fs1', 44)" onmouseover="showTip(event, 'fs1', 44)" class="p">Empty</span>
                ))
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; layout tree64;;</span>
<span class="c">/// val it : (char * (int * int)) Tree =</span>
<span class="c">///   Branch</span>
<span class="c">///     ((&#39;n&#39;, (8, 1)),</span>
<span class="c">///      Branch</span>
<span class="c">///        ((&#39;k&#39;, (6, 2)),</span>
<span class="c">///         Branch</span>
<span class="c">///           ((&#39;c&#39;, (2, 3)),Branch ((&#39;a&#39;, (1, 4)),Empty,Empty),</span>
<span class="c">///            Branch</span>
<span class="c">///              ((&#39;h&#39;, (5, 4)),</span>
<span class="c">///               Branch ((&#39;g&#39;, (4, 5)),Branch ((&#39;e&#39;, (3, 6)),Empty,Empty),Empty),</span>
<span class="c">///               Empty)),Branch ((&#39;m&#39;, (7, 3)),Empty,Empty)),</span>
<span class="c">///      Branch</span>
<span class="c">///        ((&#39;u&#39;, (12, 2)),</span>
<span class="c">///         Branch</span>
<span class="c">///           ((&#39;p&#39;, (9, 3)),Empty,</span>
<span class="c">///            Branch ((&#39;s&#39;, (11, 4)),Branch ((&#39;q&#39;, (10, 5)),Empty,Empty),Empty)),</span>
<span class="c">///         Empty))</span>

<span id="fst10" onmouseout="hideTip(event, 'fs10', 45)" onmouseover="showTip(event, 'fs10', 45, document.getElementById('fst10'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-65-Layout-a-binary-tree-2" class="anchor" href="#Problem-65-Layout-a-binary-tree-2">(<em></em>) Problem 65 : Layout a binary tree (2)</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// An alternative layout method is depicted in the illustration below: </span>
<span class="c">/// </span>
<span class="c">///     1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23</span>
<span class="c">/// </span>
<span class="c">/// 1                                                  (n)</span>
<span class="c">///                                        /                               \</span>
<span class="c">/// 2                     (k)                                                          (u) </span>
<span class="c">///                  /            \                                              /</span>
<span class="c">/// 3        (c)                       (m)                             (p)</span>
<span class="c">///       /       \                                                         \</span>
<span class="c">/// 4  (a)         (e)                                                         (q)</span>
<span class="c">///               /   \</span>
<span class="c">/// 5          (d)    (g)</span>
<span class="c">/// </span>
<span class="c">/// Find out the rules and write the corresponding function. Hint: On a given level, the </span>
<span class="c">/// horizontal distance between neighboring nodes is constant.</span>
<span class="c">///  </span>
<span class="c">/// Use the same conventions as in problem P64 and test your function in an appropriate way.</span>
<span class="c">///  </span>
<span class="c">/// Here is the example tree from the above illustration: </span>
<span class="c">/// </span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 46)" onmouseover="showTip(event, 'fs11', 46)" class="i">tree65</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 47)" onmouseover="showTip(event, 'fs2', 47)" class="p">Branch</span> (<span class="s">&#39;n&#39;</span>,
                <span onmouseout="hideTip(event, 'fs2', 48)" onmouseover="showTip(event, 'fs2', 48)" class="p">Branch</span> (<span class="s">&#39;k&#39;</span>,
                        <span onmouseout="hideTip(event, 'fs2', 49)" onmouseover="showTip(event, 'fs2', 49)" class="p">Branch</span> (<span class="s">&#39;c&#39;</span>,
                                <span onmouseout="hideTip(event, 'fs2', 50)" onmouseover="showTip(event, 'fs2', 50)" class="p">Branch</span> (<span class="s">&#39;a&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 51)" onmouseover="showTip(event, 'fs1', 51)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 52)" onmouseover="showTip(event, 'fs1', 52)" class="p">Empty</span>),
                                <span onmouseout="hideTip(event, 'fs2', 53)" onmouseover="showTip(event, 'fs2', 53)" class="p">Branch</span> (<span class="s">&#39;e&#39;</span>,
                                        <span onmouseout="hideTip(event, 'fs2', 54)" onmouseover="showTip(event, 'fs2', 54)" class="p">Branch</span> (<span class="s">&#39;d&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 55)" onmouseover="showTip(event, 'fs1', 55)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 56)" onmouseover="showTip(event, 'fs1', 56)" class="p">Empty</span>),
                                        <span onmouseout="hideTip(event, 'fs2', 57)" onmouseover="showTip(event, 'fs2', 57)" class="p">Branch</span> (<span class="s">&#39;g&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 58)" onmouseover="showTip(event, 'fs1', 58)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 59)" onmouseover="showTip(event, 'fs1', 59)" class="p">Empty</span>))
                                ),
                        <span onmouseout="hideTip(event, 'fs2', 60)" onmouseover="showTip(event, 'fs2', 60)" class="p">Branch</span> (<span class="s">&#39;m&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 61)" onmouseover="showTip(event, 'fs1', 61)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 62)" onmouseover="showTip(event, 'fs1', 62)" class="p">Empty</span>)),
                <span onmouseout="hideTip(event, 'fs2', 63)" onmouseover="showTip(event, 'fs2', 63)" class="p">Branch</span> (<span class="s">&#39;u&#39;</span>,
                        <span onmouseout="hideTip(event, 'fs2', 64)" onmouseover="showTip(event, 'fs2', 64)" class="p">Branch</span> (<span class="s">&#39;p&#39;</span>,
                                <span onmouseout="hideTip(event, 'fs1', 65)" onmouseover="showTip(event, 'fs1', 65)" class="p">Empty</span>,
                                <span onmouseout="hideTip(event, 'fs2', 66)" onmouseover="showTip(event, 'fs2', 66)" class="p">Branch</span> (<span class="s">&#39;q&#39;</span>, <span onmouseout="hideTip(event, 'fs1', 67)" onmouseover="showTip(event, 'fs1', 67)" class="p">Empty</span>, <span onmouseout="hideTip(event, 'fs1', 68)" onmouseover="showTip(event, 'fs1', 68)" class="p">Empty</span>)),
                        <span onmouseout="hideTip(event, 'fs1', 69)" onmouseover="showTip(event, 'fs1', 69)" class="p">Empty</span>)) 
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; layout65 tree65;;</span>
<span class="c">/// val it : (char * (int * int)) Tree =</span>
<span class="c">///   Branch</span>
<span class="c">///     ((&#39;n&#39;, (15, 1)),</span>
<span class="c">///      Branch</span>
<span class="c">///        ((&#39;k&#39;, (7, 2)),</span>
<span class="c">///         Branch</span>
<span class="c">///           ((&#39;c&#39;, (3, 3)),Branch ((&#39;a&#39;, (1, 4)),Empty,Empty),</span>
<span class="c">///            Branch</span>
<span class="c">///              ((&#39;e&#39;, (5, 4)),Branch ((&#39;d&#39;, (4, 5)),Empty,Empty),</span>
<span class="c">///               Branch ((&#39;g&#39;, (6, 5)),Empty,Empty))),</span>
<span class="c">///         Branch ((&#39;m&#39;, (11, 3)),Empty,Empty)),</span>
<span class="c">///      Branch</span>
<span class="c">///        ((&#39;u&#39;, (23, 2)),</span>
<span class="c">///         Branch ((&#39;p&#39;, (19, 3)),Empty,Branch ((&#39;q&#39;, (21, 4)),Empty,Empty)),</span>
<span class="c">///         Empty))</span>

<span id="fst12" onmouseout="hideTip(event, 'fs12', 70)" onmouseover="showTip(event, 'fs12', 70, document.getElementById('fst12'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-66-Layout-a-binary-tree-3" class="anchor" href="#Problem-66-Layout-a-binary-tree-3">(<em></em>*) Problem 66 : Layout a binary tree (3)</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Yet another layout strategy is shown in the illustration below: </span>
<span class="c">/// </span>
<span class="c">///     1  2  3  4  5  6  7  </span>
<span class="c">/// </span>
<span class="c">/// 1              (n) </span>
<span class="c">///              /     \</span>
<span class="c">/// 2        (k)         (u)</span>
<span class="c">///         /   \       /</span>
<span class="c">/// 3     (c)   (m)   (p)</span>
<span class="c">///       /  \          \    </span>
<span class="c">/// 4  (a)   (e)         (q)</span>
<span class="c">///          /   \</span>
<span class="c">/// 5     (d)    (g)</span>
<span class="c">///</span>
<span class="c">/// The method yields a very compact layout while maintaining a certain symmetry in </span>
<span class="c">/// every node. Find out the rules and write the corresponding Prolog predicate. Hint:</span>
<span class="c">/// Consider the horizontal distance between a node and its successor nodes. How tight </span>
<span class="c">/// can you pack together two subtrees to construct the combined binary tree?</span>
<span class="c">///  </span>
<span class="c">/// Use the same conventions as in problem P64 and P65 and test your predicate in an </span>
<span class="c">/// appropriate way. Note: This is a difficult problem. Don&#39;t give up too early!</span>
<span class="c">///  </span>
<span class="c">/// Which layout do you like most? </span>
<span class="c">/// </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; layout66 tree65;;</span>
<span class="c">/// val it : (char * (int * int)) Tree =</span>
<span class="c">///   Branch</span>
<span class="c">///     ((&#39;n&#39;, (5, 1)),</span>
<span class="c">///      Branch</span>
<span class="c">///        ((&#39;k&#39;, (3, 2)),</span>
<span class="c">///         Branch</span>
<span class="c">///           ((&#39;c&#39;, (2, 3)),Branch ((&#39;a&#39;, (1, 4)),Empty,Empty),</span>
<span class="c">///            Branch</span>
<span class="c">///              ((&#39;e&#39;, (3, 4)),Branch ((&#39;d&#39;, (2, 5)),Empty,Empty),</span>
<span class="c">///               Branch ((&#39;g&#39;, (4, 5)),Empty,Empty))),</span>
<span class="c">///         Branch ((&#39;m&#39;, (4, 3)),Empty,Empty)),</span>
<span class="c">///      Branch</span>
<span class="c">///        ((&#39;u&#39;, (7, 2)),</span>
<span class="c">///         Branch ((&#39;p&#39;, (6, 3)),Empty,Branch ((&#39;q&#39;, (7, 4)),Empty,Empty)),Empty))</span>

<span id="fst13" onmouseout="hideTip(event, 'fs13', 71)" onmouseover="showTip(event, 'fs13', 71, document.getElementById('fst13'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-67-A-string-representation-of-binary-trees" class="anchor" href="#Problem-67-A-string-representation-of-binary-trees">(<em></em>) Problem 67 : A string representation of binary trees</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Somebody represents binary trees as strings of the following type:</span>
<span class="c">/// </span>
<span class="c">/// a(b(d,e),c(,f(g,))) </span>
<span class="c">///</span>
<span class="c">/// a) Write a Prolog predicate which generates this string representation, if the tree is </span>
<span class="c">/// given as usual (as nil or t(X,L,R) term). Then write a predicate which does this </span>
<span class="c">/// inverse; i.e. given the string representation, construct the tree in the usual form. </span>
<span class="c">/// Finally, combine the two predicates in a single predicate tree_string/2 which can be </span>
<span class="c">/// used in both directions.</span>
<span class="c">///  </span>
<span class="c">/// Example in Prolog </span>
<span class="c">/// ?- tree_to_string(t(x,t(y,nil,nil),t(a,nil,t(b,nil,nil))),S).</span>
<span class="c">/// S = &#39;x(y,a(,b))&#39;</span>
<span class="c">/// ?- string_to_tree(&#39;x(y,a(,b))&#39;,T).</span>
<span class="c">/// T = t(x, t(y, nil, nil), t(a, nil, t(b, nil, nil)))</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; stringToTree &quot;x(y,a(,b))&quot;;;</span>
<span class="c">/// val it : string Tree =</span>
<span class="c">///   Branch</span>
<span class="c">///     (&quot;x&quot;,Branch (&quot;y&quot;,Empty,Empty),Branch (&quot;a&quot;,Empty,Branch (&quot;b&quot;,Empty,Empty)))</span>
<span class="c">/// &gt; &quot;a(b(d,e),c(,f(g,)))&quot; |&gt; stringToTree |&gt; treeToString = &quot;a(b(d,e),c(,f(g,)))&quot;;;</span>
<span class="c">/// val it : bool = true</span>

<span id="fst14" onmouseout="hideTip(event, 'fs14', 72)" onmouseover="showTip(event, 'fs14', 72, document.getElementById('fst14'))" class="omitted">(Solution 1)</span>

<span id="fst15" onmouseout="hideTip(event, 'fs15', 73)" onmouseover="showTip(event, 'fs15', 73, document.getElementById('fst15'))" class="omitted">(Solution 2)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-68-Preorder-and-inorder-sequences-of-binary-trees" class="anchor" href="#Problem-68-Preorder-and-inorder-sequences-of-binary-trees">(<em></em>) Problem 68 : Preorder and inorder sequences of binary trees</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Preorder and inorder sequences of binary trees. We consider binary trees with </span>
<span class="c">/// nodes that are identified by single lower-case letters, as in the example of problem </span>
<span class="c">/// P67.</span>
<span class="c">///  </span>
<span class="c">/// a) Write predicates preorder/2 and inorder/2 that construct the preorder and inorder </span>
<span class="c">/// sequence of a given binary tree, respectively. The results should be atoms, e.g. </span>
<span class="c">/// &#39;abdecfg&#39; for the preorder sequence of the example in problem P67.</span>
<span class="c">///  </span>
<span class="c">/// b) Can you use preorder/2 from problem part a) in the reverse direction; i.e. given a </span>
<span class="c">/// preorder sequence, construct a corresponding tree? If not, make the necessary </span>
<span class="c">/// arrangements.</span>
<span class="c">///  </span>
<span class="c">/// c) If both the preorder sequence and the inorder sequence of the nodes of a binary </span>
<span class="c">/// tree are given, then the tree is determined unambiguously. Write a predicate </span>
<span class="c">/// pre_in_tree/3 that does the job.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// Main&gt; let { Just t = stringToTree &quot;a(b(d,e),c(,f(g,)))&quot; ;</span>
<span class="c">///             po = treeToPreorder t ;</span>
<span class="c">///             io = treeToInorder t } in preInTree po io &gt;&gt;= print</span>
<span class="c">/// Branch &#39;a&#39; (Branch &#39;b&#39; (Branch &#39;d&#39; Empty Empty) (Branch &#39;e&#39; Empty Empty)) </span>

<span id="fst16" onmouseout="hideTip(event, 'fs16', 74)" onmouseover="showTip(event, 'fs16', 74, document.getElementById('fst16'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-69-Dotstring-representation-of-binary-trees" class="anchor" href="#Problem-69-Dotstring-representation-of-binary-trees">(<em></em>) Problem 69 : Dotstring representation of binary trees.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// We consider again binary trees with nodes that are identified by single lower-case </span>
<span class="c">/// letters, as in the example of problem P67. Such a tree can be represented by the </span>
<span class="c">/// preorder sequence of its nodes in which dots (.) are inserted where an empty </span>
<span class="c">/// subtree (nil) is encountered during the tree traversal. For example, the tree shown in </span>
<span class="c">/// problem P67 is represented as &#39;abd..e..c.fg...&#39;. First, try to establish a syntax (BNF or </span>
<span class="c">/// syntax diagrams) and then write a predicate tree_dotstring/2 which does the </span>
<span class="c">/// conversion in both directions. Use difference lists.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; dotString2Tree  &quot;abd..e..c.fg...&quot;;;</span>
<span class="c">/// val it : char Tree =</span>
<span class="c">///   Branch</span>
<span class="c">///     (&#39;a&#39;,Branch (&#39;b&#39;,Branch (&#39;d&#39;,Empty,Empty),Branch (&#39;e&#39;,Empty,Empty)),</span>
<span class="c">///      Branch (&#39;c&#39;,Empty,Branch (&#39;f&#39;,Branch (&#39;g&#39;,Empty,Empty),Empty)))</span>
<span class="c">/// </span>
<span class="c">/// &gt; tree2Dotstring it;;</span>
<span class="c">/// val it : string = &quot;abd..e..c.fg...&quot; </span>

<span id="fst17" onmouseout="hideTip(event, 'fs17', 75)" onmouseover="showTip(event, 'fs17', 75, document.getElementById('fst17'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">union case Tree.Empty: &#39;a Tree</div>
<div class="tip" id="fs2">union case Tree.Branch: &#39;a * &#39;a Tree * &#39;a Tree -&gt; &#39;a Tree</div>
<div class="tip" id="fs3">type &#39;a Tree =<br />&#160;&#160;| Empty<br />&#160;&#160;| Branch of &#39;a * &#39;a Tree * &#39;a Tree<br /><br />Full name: Script.Tree&lt;_&gt;<br /><em><br /><br />&#160;These are F# solutions of Ninety-Nine Haskell Problems <br />&#160;(http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems), <br />&#160;which are themselves translations of Ninety-Nine Lisp Problems<br />&#160;(http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html)<br />&#160;and Ninety-Nine Prolog Problems<br />&#160;(https://sites.google.com/site/prologsite/prolog-problems).<br /><br />&#160;If you would like to contribute a solution or fix any bugs, send <br />&#160;an email to paks at kitiara dot org with the subject &quot;99 F# problems&quot;. <br />&#160;I&#39;ll try to update the problem as soon as possible.<br /><br />&#160;The problems have different levels of difficulty. Those marked with a single asterisk (*) <br />&#160;are easy. If you have successfully solved the preceeding problems you should be able to <br />&#160;solve them within a few (say 15) minutes. Problems marked with two asterisks (**) are of <br />&#160;intermediate difficulty. If you are a skilled F# programmer it shouldn&#39;t take you more than <br />&#160;30-90 minutes to solve them. Problems marked with three asterisks (***) are more difficult. <br />&#160;You may need more time (i.e. a few hours or more) to find a good solution<br /><br />&#160;Though the problems number from 1 to 99, there are some gaps and some additions marked with <br />&#160;letters. There are actually only 88 problems.<br /><br /><br />&#160;Binary trees <br />&#160;<br />&#160;As defined in problem 54A. </em></div>
<div class="tip" id="fs4">val tree4 : int Tree<br /><br />Full name: Script.tree4<br /><em><br /><br />&#160;<br />&#160;An example tree: <br />&#160;</em></div>
<div class="tip" id="fs5">let foldTree branchF emptyV t =<br />&#160;&#160;&#160;&#160;let rec loop t cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match t with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont emptyV<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(x,left,right) -&gt; loop left  (fun lacc -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop right (fun racc -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cont (branchF x lacc racc)))<br />&#160;&#160;&#160;&#160;loop t id<br /><br />let countLeaves tree = tree |&gt; foldTree (fun _ lc rc -&gt; 1 + lc + rc) 0</div>
<div class="tip" id="fs6">// using foldTree from problem 61<br />let insternals tree = tree |&gt; foldTree (fun x (lc,lt) (rc,rt) -&gt; if lt || rt  then ([x] @ lc @ rc ,true) else ([], true)) ([],false) |&gt; fst</div>
<div class="tip" id="fs7">let atLevel tree level = <br />&#160;&#160;&#160;&#160;let rec loop l tree cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont []<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(x, lt , rt) -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if l = level then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cont [x]<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop (l + 1) lt (fun lacc -&gt; loop (l + 1) rt (fun racc -&gt; cont &lt;| lacc @ racc))<br />&#160;&#160;&#160;&#160;loop 1 tree id</div>
<div class="tip" id="fs8">let completeBinaryTree n = <br />&#160;&#160;&#160;&#160;let rec loop l cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if l &lt;= n then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop (2*l) (fun lt -&gt; loop (2*l+1) (fun rt -&gt; cont &lt;| Branch (&#39;x&#39;, lt, rt)))<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cont Empty<br />&#160;&#160;&#160;&#160;loop 1 id<br /><br />let isCompleteBinaryTree tree =<br />&#160;&#160;&#160;&#160;let rec loop level tree cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont ([], 0)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(_, lt, rt) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop (2*level) lt (fun (ll,lc) -&gt; loop (2*level+1) rt (fun (rl, rc) -&gt; cont &lt;| ([level] @ ll @ rl, 1 + lc + rc)))<br />&#160;&#160;&#160;&#160;let levels, nodes = loop 1 tree (fun (ls,ns) -&gt; List.sort ls, ns)<br />&#160;&#160;&#160;&#160;levels |&gt; Seq.zip (seq { 1 .. nodes }) |&gt; Seq.forall(fun (a,b) -&gt; a = b)</div>
<div class="tip" id="fs9">val tree64 : char Tree<br /><br />Full name: Script.tree64<br /><em><br /><br />&#160;Given a binary tree as the usual Prolog term t(X,L,R) (or nil). As a preparation for <br />&#160;drawing the tree, a layout algorithm is required to determine the position of each <br />&#160;node in a rectangular grid. Several layout methods are conceivable, one of them is <br />&#160;shown in the illustration below:<br /><br />&#160;&#160;&#160;&#160;&#160;1  2  3  4  5  6  7  8  9  10  11  12<br />&#160;<br />&#160;1                       (n)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/             \<br />&#160;2                 (k)                  (u)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/        \           /<br />&#160;3     (c)            (m)   (p)<br />&#160;&#160;&#160;&#160;&#160;&#160;/     \                    \<br />&#160;4  (a)         (h)                 (s)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/                   /<br />&#160;5           (g)                (q)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/<br />&#160;6        (e)<br />&#160;<br />&#160;In this layout strategy, the position of a node v is obtained by the following two rules:<br />&#160;• x(v) is equal to the position of the node v in the inorder sequence <br />&#160;• y(v) is equal to the depth of the node v in the tree <br />&#160;<br />&#160;Write a function to annotate each node of the tree with a position, where (1,1) in the <br />&#160;top left corner or the rectangle bounding the drawn tree.<br />&#160;&#160;<br />&#160;Here is the example tree from the above illustration: <br />&#160;</em></div>
<div class="tip" id="fs10">let layout tree =<br />&#160;&#160;&#160;&#160;let next x = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch (_, _ , Branch ((_,(x,_)), _, _)) -&gt; x + 1<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch ((_,(x,_)), _, _) -&gt; x + 1<br />&#160;&#160;&#160;&#160;let rec loop x y tree cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont Empty<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(a, lt, rt) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop x (y+1) lt (fun lt&#39; -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x&#39; = next x lt&#39;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop (x&#39;+ 1) (y+1) rt (fun rt&#39; -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cont &lt;| Branch((a,(x&#39;,y)), lt&#39;, rt&#39;)))<br />&#160;&#160;&#160;&#160;loop 1 1 tree id</div>
<div class="tip" id="fs11">val tree65 : char Tree<br /><br />Full name: Script.tree65<br /><em><br /><br />&#160;An alternative layout method is depicted in the illustration below: <br />&#160;<br />&#160;&#160;&#160;&#160;&#160;1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23<br />&#160;<br />&#160;1                                                  (n)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/                               \<br />&#160;2                     (k)                                                          (u) <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/            \                                              /<br />&#160;3        (c)                       (m)                             (p)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;/       \                                                         \<br />&#160;4  (a)         (e)                                                         (q)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/   \<br />&#160;5          (d)    (g)<br />&#160;<br />&#160;Find out the rules and write the corresponding function. Hint: On a given level, the <br />&#160;horizontal distance between neighboring nodes is constant.<br />&#160;&#160;<br />&#160;Use the same conventions as in problem P64 and test your function in an appropriate way.<br />&#160;&#160;<br />&#160;Here is the example tree from the above illustration: <br />&#160;</em></div>
<div class="tip" id="fs12">let height tree = tree |&gt; foldTree (fun _ lacc racc -&gt; 1 + max lacc racc) 0<br /><br />let layout65 tree =<br />&#160;&#160;&#160;&#160;let separation = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let depth = height tree<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fun level -&gt; (pown 2 &lt;|  depth - level + 1) / 2<br />&#160;&#160;&#160;&#160;let rec loop x y tree cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont Empty<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(a, lt, rt) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sep = separation (y+1)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop (x - sep) (y+1) lt (fun lt&#39; -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop (x + sep) (y+1) rt (fun rt&#39; -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cont &lt;| Branch((a,(x, y)), lt&#39;, rt&#39;)))<br />&#160;&#160;&#160;&#160;loop (separation 1 - 1) 1 tree id</div>
<div class="tip" id="fs13">let layout66 tree = <br />&#160;&#160;&#160;&#160;// This functions places the tree on a grid with the root node on (0,1)<br />&#160;&#160;&#160;&#160;let rec helper gs x y tree = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let guards gs = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let children = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(_, l, r) -&gt; [r; l]<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; []<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;List.collect children gs<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let isNotGuarded x = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch((_,(x&#39;, _)), _, _)::_ -&gt; x &gt; x&#39;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _ -&gt; true<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rec placeNode gs a x y radius l r =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match helper gs (x + radius) (y + 1) r with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| None -&gt; placeNode gs a (x + 1) y (radius + 1) l r // increase the radius<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some r&#39; -&gt; Some &lt;| Branch ((a,(x,y)), l, r&#39;)<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; Some Empty<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(a, l, r) when isNotGuarded x gs -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;helper (guards gs) (x - 1) (y + 1) l <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; Option.bind(fun l&#39; -&gt; placeNode (l&#39; :: guards gs) a x y 1 l&#39; r)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _ -&gt; None<br /><br />&#160;&#160;&#160;&#160;// find the X coordinate of the farthest node to the left<br />&#160;&#160;&#160;&#160;let rec findX = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch((_,(x,_)), Empty , _) -&gt; x <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(_, l , _) -&gt; findX l<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; 0<br /><br />&#160;&#160;&#160;&#160;let tree&#39; = helper [] 0 1 tree |&gt; Option.get<br />&#160;&#160;&#160;&#160;let minX = -1 + findX tree&#39;<br /><br />&#160;&#160;&#160;&#160;// translate the tree so that the farthest node to the left is on the 1st column.<br />&#160;&#160;&#160;&#160;foldTree (fun (a,(x,y)) lacc racc -&gt; Branch((a,(x-minX,y)), lacc, racc) ) Empty tree&#39;</div>
<div class="tip" id="fs14">let treeToString tree = <br />&#160;&#160;&#160;&#160;let rec loop t cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match t with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont &quot;&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(x, Empty, Empty) -&gt; cont &lt;| x.ToString()<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(x, lt, rt) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop lt &lt;| fun lstr -&gt; loop rt &lt;| fun rstr -&gt; cont &lt;| x.ToString() + &quot;(&quot; + lstr + &quot;,&quot; + rstr + &quot;)&quot;<br />&#160;&#160;&#160;&#160;loop tree id</div>
<div class="tip" id="fs15">// using foldTree<br />let treeToString&#39; tree = tree |&gt; foldTree (fun x lstr rstr -&gt; if lstr = &quot;&quot; &amp;&amp; rstr = &quot;&quot; then x.ToString() else x.ToString() + &quot;(&quot; + lstr + &quot;,&quot; + rstr + &quot;)&quot;) &quot;&quot;<br /><br />let stringToTree str = <br />&#160;&#160;&#160;&#160;let chars = str |&gt; List.ofSeq<br />&#160;&#160;&#160;&#160;let getNodeValue xs =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rec loop (acc : System.Text.StringBuilder) = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; (acc.ToString(), [])<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (&#39;,&#39;::xs) as rest -&gt; acc.ToString(), rest<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (&#39;(&#39;::xs) as rest -&gt; acc.ToString(), rest<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (&#39;)&#39;::xs) as rest-&gt; acc.ToString(), rest<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| x::xs -&gt; loop (acc.Append(x)) xs<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop (new System.Text.StringBuilder()) xs<br />&#160;&#160;&#160;&#160;let leaf a = Branch(a, Empty, Empty)<br />&#160;&#160;&#160;&#160;let rec loop chars cont = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match chars with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; cont (Empty, [])<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (x::_) as xs -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let value, rest = getNodeValue xs<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match rest with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#39;(&#39;::&#39;,&#39;::rs -&gt; if value = &quot;&quot; then cont (Empty, rs) else loop rs &lt;| fun (rt,rs) -&gt; cont (Branch(value, Empty, rt),rs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#39;(&#39;::rs -&gt; loop rs &lt;| fun (lt,rs) -&gt; loop rs &lt;| fun (rt,rs) -&gt; cont (Branch(value, lt, rt), rs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#39;,&#39;::rs -&gt; if value = &quot;&quot; then loop rs cont else cont (leaf value, rs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _::rs -&gt; cont  &lt;| if value = &quot;&quot; then Empty, rs else leaf value ,rs<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; cont &lt;| (leaf value, [])<br />&#160;&#160;&#160;&#160;loop chars fst</div>
<div class="tip" id="fs16">let inOrder tree = <br />&#160;&#160;&#160;&#160;let rec loop tree cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont &quot;&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(x, lt, rt) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop lt &lt;| fun l -&gt; loop rt &lt;| fun r -&gt; cont &lt;| l + x.ToString() + r<br /><br />&#160;&#160;&#160;&#160;loop tree id<br /><br />let preOrder tree = <br />&#160;&#160;&#160;&#160;let rec loop tree cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Empty -&gt; cont &quot;&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Branch(x, lt, rt) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loop lt &lt;| fun l -&gt; loop rt &lt;| fun r -&gt; cont &lt;| x.ToString() + l + r<br /><br />&#160;&#160;&#160;&#160;loop tree id<br /><br />// using foldTree<br />let inOrder&#39; t   = foldTree (fun x l r acc -&gt; l (x.ToString() + (r acc))) id t &quot;&quot;<br />let preOrder&#39; t  = foldTree (fun x l r acc -&gt; x.ToString() + l (r acc))   id t &quot;&quot;<br /><br />let stringToTree&#39; preO inO = <br />&#160;&#160;&#160;&#160;let split (str : string) char = let arr = str.Split([|char|]) in if arr.Length = 1 then &quot;&quot;,&quot;&quot; else arr.[0], arr.[1]<br />&#160;&#160;&#160;&#160;let leaf x = Branch(x, Empty, Empty)<br />&#160;&#160;&#160;&#160;let rec loop xss cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match xss with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [], _ -&gt; cont (Empty, [])<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| x::xs, inO -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match split inO x with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &quot;&quot;, &quot;&quot; -&gt; cont ((leaf x), xs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| inOl,  &quot;&quot; -&gt; loop (xs,inOl) &lt;| fun (l, xs) -&gt; cont (Branch(x, l, Empty), xs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &quot;&quot;, inOr -&gt; loop (xs, inOr) &lt;| fun (r, xs) -&gt; cont (Branch(x, Empty, r), xs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| inOl, inOr -&gt; loop (xs,inOl) &lt;| fun (l, xs) -&gt; loop (xs, inOr) &lt;| fun (r,xs) -&gt; cont (Branch(x, l, r), xs)<br />&#160;&#160;&#160;&#160;loop ((preO |&gt; List.ofSeq), inO) fst</div>
<div class="tip" id="fs17">// using foldTree<br />let tree2DotString t  = foldTree (fun x l r acc -&gt; x.ToString() + l (r acc)) (fun acc -&gt; &quot;.&quot; + acc) t &quot;&quot;<br /><br />let dotString2Tree str = <br />&#160;&#160;&#160;&#160;let chars = str |&gt; List.ofSeq<br />&#160;&#160;&#160;&#160;let rec loop chars cont =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match chars with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; failwith &quot;the string is not well formed&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#39;.&#39;::xs -&gt; cont (Empty, xs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| x::xs -&gt; loop xs &lt;| fun (l,xs) -&gt; loop xs &lt;| fun (r,xs) -&gt; cont (Branch(x, l , r), xs)<br />&#160;&#160;&#160;&#160;loop chars fst</div>

