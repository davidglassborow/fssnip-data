<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span id="fst1" onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1, document.getElementById('fst1'))" class="omitted">boyer-moore.c</span>
<span class="k">module</span> <span class="i">native</span> <span class="o">=</span> 
  <span class="k">module</span> <span class="i">string_search</span> <span class="o">=</span> 
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Text</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 4)" onmouseover="showTip(event, 'fs2', 4)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="i">Runtime</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">InteropServices</span>
    
    [&lt;<span class="i">DllImport</span>(<span class="s">@&quot;boyermoore.dll&quot;</span>, <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">EntryPoint</span><span class="o">=</span><span class="s">&quot;boyerMoore&quot;</span>, <span class="i">CharSet</span> <span class="o">=</span> <span class="i">CharSet</span><span class="o">.</span><span class="i">Ansi</span>)&gt;]
    <span class="k">extern</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">nativeint</span> <span class="i">boyerMoore</span>(<span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="i">nativeint</span> <span class="i">data</span>, <span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="i">nativeint</span> <span class="i">search</span>)
    
    <span class="k">let</span> <span class="i">alloc_a</span> (<span class="i">data</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">string</span>) <span class="o">=</span> 
      <span class="k">let</span> <span class="i">strbuf</span> <span class="o">=</span> <span class="i">Encoding</span><span class="o">.</span><span class="i">UTF8</span><span class="o">.</span><span class="i">GetBytes</span> <span class="i">data</span>
      <span class="k">let</span> <span class="i">buffer</span> <span class="o">=</span> <span class="i">Marshal</span><span class="o">.</span><span class="i">AllocHGlobal</span>(<span class="i">strbuf</span><span class="o">.</span><span class="i">Length</span> <span class="o">+</span> <span class="n">1</span>)
      <span class="i">Marshal</span><span class="o">.</span><span class="i">Copy</span>(<span class="i">strbuf</span>, <span class="n">0</span>, <span class="i">buffer</span>, <span class="i">strbuf</span><span class="o">.</span><span class="i">Length</span>)
      <span class="i">Marshal</span><span class="o">.</span><span class="i">WriteByte</span>( <span class="i">buffer</span> <span class="o">+</span> (<span onmouseout="hideTip(event, 'fs7', 12)" onmouseover="showTip(event, 'fs7', 12)" class="i">nativeint</span> <span class="i">strbuf</span><span class="o">.</span><span class="i">Length</span>), <span class="n">0uy</span>)
      <span class="i">buffer</span>

    <span class="k">let</span> <span class="i">bMoore</span> <span class="i">data</span> <span class="i">search</span> <span class="o">=</span>
      <span class="k">let</span> <span class="i">d</span>,<span class="i">s</span> <span class="o">=</span> <span class="i">alloc_a</span> <span class="o">&lt;|</span> <span class="i">data</span>, <span class="i">alloc_a</span> <span class="o">&lt;|</span> <span class="i">search</span>
      <span class="k">let</span> <span class="i">x</span> <span class="o">=</span> <span class="i">Marshal</span><span class="o">.</span><span class="i">PtrToStringAnsi</span>(<span class="i">boyerMoore</span>(<span class="i">d</span>,<span class="i">s</span>) )
      <span class="i">Marshal</span><span class="o">.</span><span class="i">FreeHGlobal</span> <span class="i">d</span>
      <span class="i">Marshal</span><span class="o">.</span><span class="i">FreeHGlobal</span> <span class="i">s</span> 
      <span class="i">x</span>
    
<span class="i">native</span><span class="o">.</span><span class="i">string_search</span><span class="o">.</span><span class="i">bMoore</span> <span class="s">&quot;aaaabouaaa384982n chwercoiewar45u0943 twert3aaaaaaMarabou t9034u5t09t8493t43vkdsropgb&quot;</span> <span class="s">&quot;Marabou&quot;</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">/*<br />&#160;&#160;&#160;&#160;Simple implementation of the fast Boyer-Moore string search algorithm.<br /><br />&#160;&#160;&#160;&#160;By X-Calibre, 2002<br />&#160;&#160;&#160;&#160;<br />&#160;&#160;&#160;&#160;- slight modifications by davidk (main removed, cdecl added, casting for return types)<br />*/<br /><br /># &lt;stdio.h&gt;<br /># &lt;stdlib.h&gt;<br /># &lt;string.h&gt;<br /># &lt;windows.h&gt;<br /># &lt;strsafe.h&gt;<br /><br /># EXTERN_DLL_EXPORT extern &quot;C&quot; __declspec(dllexport) <br /><br />char *BoyerMoore( unsigned char *data, unsigned int dataLength, unsigned char *string, unsigned int strLength ) {<br />&#160;&#160;&#160;&#160;unsigned int skipTable[256], i;<br />&#160;&#160;&#160;&#160;unsigned char *search;<br />&#160;&#160;&#160;&#160;register unsigned char lastChar;<br /><br />&#160;&#160;&#160;&#160;if (strLength == 0)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;<br /><br />&#160;&#160;&#160;&#160;// Initialize skip lookup table<br />&#160;&#160;&#160;&#160;for (i = 0; i &lt; 256; i++)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;skipTable[i] = strLength;<br /><br />&#160;&#160;&#160;&#160;search = string;<br /><br />&#160;&#160;&#160;&#160;// Decrease strLength here to make it an index<br />&#160;&#160;&#160;&#160;i = --strLength;<br /><br />&#160;&#160;&#160;&#160;do<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;skipTable[*search++] = i;<br />&#160;&#160;&#160;&#160;} while (i--);<br /><br />&#160;&#160;&#160;&#160;lastChar = *--search;<br /><br />&#160;&#160;&#160;&#160;// Start searching, position pointer at possible end of string.<br />&#160;&#160;&#160;&#160;search = data + strLength;<br />&#160;&#160;&#160;&#160;dataLength -= strLength+(strLength-1);<br /><br />&#160;&#160;&#160;&#160;while ((int)dataLength &gt; 0 )<br />&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unsigned int skip;<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;skip = skipTable[*search];<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;search += skip;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataLength -= skip;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;skip = skipTable[*search];<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;search += skip;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataLength -= skip;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;skip = skipTable[*search];<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (*search != lastChar) /*if (skip &gt; 0)*/<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Character does not match, realign string and try again<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;search += skip;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataLength -= skip;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// We had a match, we could be at the end of the string<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i = strLength;<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Have we found the entire string?<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (i-- == 0)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return (char * )search;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} while (*--search == string[i]);<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Skip past the part of the string that we scanned already<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;search += (strLength - i + 1);<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dataLength--;<br />&#160;&#160;&#160;&#160;}<br /><br />&#160;&#160;&#160;&#160;// We reached the end of the data, and didn&#39;t find the string<br />&#160;&#160;&#160;&#160;return NULL;<br />}<br /><br />EXTERN_DLL_EXPORT<br />char *boyerMoore(unsigned char *data, unsigned char *search) {<br /><br />&#160;&#160;&#160;&#160;char *str = BoyerMoore( data, strlen((const char *)data), search, strlen((const char *)search) );<br /><br />&#160;&#160;&#160;&#160;if (str == NULL)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;return &quot;String not found&quot;;<br />&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;return str;<br /><br />&#160;&#160;&#160;&#160;return &quot;&quot;;<br />}</div>
<div class="tip" id="fs2">namespace System</div>
<div class="tip" id="fs3">namespace System.Text</div>
<div class="tip" id="fs4">namespace System.Runtime</div>
<div class="tip" id="fs5">namespace System.Runtime.InteropServices</div>
<div class="tip" id="fs6">Multiple items<br />type EntryPointAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; EntryPointAttribute<br /><br />Full name: Microsoft.FSharp.Core.EntryPointAttribute<br /><br />--------------------<br />new : unit -&gt; EntryPointAttribute</div>
<div class="tip" id="fs7">Multiple items<br />val nativeint : value:&#39;T -&gt; nativeint (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.nativeint<br /><br />--------------------<br />type nativeint = System.IntPtr<br /><br />Full name: Microsoft.FSharp.Core.nativeint</div>
<div class="tip" id="fs8">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>

