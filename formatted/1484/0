<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">(* Define a OptionalBuilder, which allows the convenient use of computation expressions to work on Option types. *)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">OptionalBuilder</span>() <span class="o">=</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">Bind</span>(<span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">value</span>, <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="f">func</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="i">value</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">Option</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">map</span>(<span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="f">func</span>)
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs2', 10)" onmouseover="showTip(event, 'fs2', 10)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="f">Return</span>(<span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="i">value</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="i">value</span>)
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs2', 15)" onmouseover="showTip(event, 'fs2', 15)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="f">Zero</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="p">Some</span> ()
    
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 18)" onmouseover="showTip(event, 'fs12', 18)" class="i">optional</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 19)" onmouseover="showTip(event, 'fs1', 19)" class="t">OptionalBuilder</span>()

<span class="c">(* Define an active pattern to wrap reference types in Option *)</span>
<span class="k">let</span> (|<span class="p">Optional</span>|) <span onmouseout="hideTip(event, 'fs13', 20)" onmouseover="showTip(event, 'fs13', 20)" class="i">value</span> <span class="o">=</span> <span class="k">if</span> <span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">value</span> <span class="o">=</span> <span class="k">null</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs14', 22)" onmouseover="showTip(event, 'fs14', 22)" class="p">None</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs10', 23)" onmouseover="showTip(event, 'fs10', 23)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs13', 24)" onmouseover="showTip(event, 'fs13', 24)" class="i">value</span>)

<span class="c">(* Define a type that can be called from C# without needing to wrap in Option first. *)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="t">Foo</span>() <span class="o">=</span>
    <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs16', 26)" onmouseover="showTip(event, 'fs16', 26)" class="f">Bar</span>(<span onmouseout="hideTip(event, 'fs17', 27)" onmouseover="showTip(event, 'fs17', 27)" class="p">Optional</span> <span onmouseout="hideTip(event, 'fs18', 28)" onmouseover="showTip(event, 'fs18', 28)" class="i">value</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs12', 29)" onmouseover="showTip(event, 'fs12', 29)" class="i">optional</span> {
            <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs19', 30)" onmouseover="showTip(event, 'fs19', 30)" class="i">message</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 31)" onmouseover="showTip(event, 'fs18', 31)" class="i">value</span>
            <span onmouseout="hideTip(event, 'fs20', 32)" onmouseover="showTip(event, 'fs20', 32)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs19', 33)" onmouseover="showTip(event, 'fs19', 33)" class="i">message</span>
        }

<span class="c">(* Example usage *)</span>
<span onmouseout="hideTip(event, 'fs15', 34)" onmouseover="showTip(event, 'fs15', 34)" class="t">Foo</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 35)" onmouseover="showTip(event, 'fs21', 35)" class="f">Bar</span>(<span class="s">&quot;Hello, world!&quot;</span>) <span class="c">//Prints, &quot;Hello, world!&quot;</span>
<span onmouseout="hideTip(event, 'fs15', 36)" onmouseover="showTip(event, 'fs15', 36)" class="t">Foo</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 37)" onmouseover="showTip(event, 'fs21', 37)" class="f">Bar</span>(<span class="k">null</span>) <span class="c">//Does nothing</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />type OptionalBuilder =<br />&#160;&#160;new : unit -&gt; OptionalBuilder<br />&#160;&#160;member Bind : value:&#39;b option * func:(&#39;b -&gt; &#39;c) -&gt; &#39;c option<br />&#160;&#160;member Return : value:&#39;a -&gt; &#39;a option<br />&#160;&#160;member Zero : unit -&gt; unit option<br /><br />Full name: Script.OptionalBuilder<br /><br />--------------------<br />new : unit -&gt; OptionalBuilder</div>
<div class="tip" id="fs2">val this : OptionalBuilder</div>
<div class="tip" id="fs3">member OptionalBuilder.Bind : value:&#39;b option * func:(&#39;b -&gt; &#39;c) -&gt; &#39;c option<br /><br />Full name: Script.OptionalBuilder.Bind</div>
<div class="tip" id="fs4">val value : &#39;b option</div>
<div class="tip" id="fs5">val func : (&#39;b -&gt; &#39;c)</div>
<div class="tip" id="fs6">module Option<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs7">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; option:&#39;T option -&gt; &#39;U option<br /><br />Full name: Microsoft.FSharp.Core.Option.map</div>
<div class="tip" id="fs8">member OptionalBuilder.Return : value:&#39;a -&gt; &#39;a option<br /><br />Full name: Script.OptionalBuilder.Return</div>
<div class="tip" id="fs9">val value : &#39;a</div>
<div class="tip" id="fs10">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs11">member OptionalBuilder.Zero : unit -&gt; unit option<br /><br />Full name: Script.OptionalBuilder.Zero</div>
<div class="tip" id="fs12">val optional : OptionalBuilder<br /><br />Full name: Script.optional</div>
<div class="tip" id="fs13">val value : &#39;a (requires equality and &#39;a : null)</div>
<div class="tip" id="fs14">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs15">Multiple items<br />type Foo =<br />&#160;&#160;new : unit -&gt; Foo<br />&#160;&#160;static member Bar : string -&gt; unit option option<br /><br />Full name: Script.Foo<br /><br />--------------------<br />new : unit -&gt; Foo</div>
<div class="tip" id="fs16">static member Foo.Bar : string -&gt; unit option option<br /><br />Full name: Script.Foo.Bar</div>
<div class="tip" id="fs17">active recognizer Optional: &#39;a -&gt; &#39;a option<br /><br />Full name: Script.( |Optional| )</div>
<div class="tip" id="fs18">val value : string option</div>
<div class="tip" id="fs19">val message : string</div>
<div class="tip" id="fs20">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs21">static member Foo.Bar : string -&gt; unit option option</div>

