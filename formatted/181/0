<h2><a name="Implementing-dynamic-operator" class="anchor" href="#Implementing-dynamic-operator">Implementing dynamic operator</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
<span class="l">78: </span>
<span class="l">79: </span>
<span class="l">80: </span>
<span class="l">81: </span>
<span class="l">82: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">Reflection</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">Reflection</span>

<span class="c">// Various flags that specify what members can be called </span>
<span class="c">// NOTE: Remove &#39;BindingFlags.NonPublic&#39; if you want a version</span>
<span class="c">// that can call only public methods of classes</span>
<span class="k">let</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">staticFlags</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">BindingFlags</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">NonPublic</span> <span class="o">|||</span> <span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="t">BindingFlags</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="i">Public</span> <span class="o">|||</span> <span onmouseout="hideTip(event, 'fs7', 12)" onmouseover="showTip(event, 'fs7', 12)" class="t">BindingFlags</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="i">Static</span> 
<span class="k">let</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="i">instanceFlags</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="t">BindingFlags</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="i">NonPublic</span> <span class="o">|||</span> <span onmouseout="hideTip(event, 'fs7', 17)" onmouseover="showTip(event, 'fs7', 17)" class="t">BindingFlags</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 18)" onmouseover="showTip(event, 'fs9', 18)" class="i">Public</span> <span class="o">|||</span> <span onmouseout="hideTip(event, 'fs7', 19)" onmouseover="showTip(event, 'fs7', 19)" class="t">BindingFlags</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="i">Instance</span>
<span class="k">let</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">ctorFlags</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 22)" onmouseover="showTip(event, 'fs11', 22)" class="i">instanceFlags</span>
<span class="k">let</span> <span class="k">inline</span> <span class="k">private</span> <span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="f">asMethodBase</span>(<span onmouseout="hideTip(event, 'fs15', 24)" onmouseover="showTip(event, 'fs15', 24)" class="i">a</span><span class="o">:</span>#<span onmouseout="hideTip(event, 'fs16', 25)" onmouseover="showTip(event, 'fs16', 25)" class="t">MethodBase</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="i">a</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs16', 27)" onmouseover="showTip(event, 'fs16', 27)" class="t">MethodBase</span>

<span class="c">// The operator takes just instance and a name. Depending on how it is used</span>
<span class="c">// it either calls method (when &#39;R is function) or accesses a property</span>
<span class="k">let</span> (<span class="o">?</span>) (<span onmouseout="hideTip(event, 'fs17', 28)" onmouseover="showTip(event, 'fs17', 28)" class="i">o</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs18', 29)" onmouseover="showTip(event, 'fs18', 29)" class="t">obj</span>) <span onmouseout="hideTip(event, 'fs19', 30)" onmouseover="showTip(event, 'fs19', 30)" class="i">name</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">R</span> <span class="o">=</span>
  <span class="c">// The return type is a function, which means that we want to invoke a method</span>
  <span class="k">if</span> <span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 32)" onmouseover="showTip(event, 'fs21', 32)" class="f">IsFunction</span>(<span onmouseout="hideTip(event, 'fs22', 33)" onmouseover="showTip(event, 'fs22', 33)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>) <span class="k">then</span>

    <span class="c">// Get arguments (from a tuple) and their types</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 34)" onmouseover="showTip(event, 'fs23', 34)" class="i">argType</span>, <span onmouseout="hideTip(event, 'fs24', 35)" onmouseover="showTip(event, 'fs24', 35)" class="i">resType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 36)" onmouseover="showTip(event, 'fs20', 36)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs25', 37)" onmouseover="showTip(event, 'fs25', 37)" class="f">GetFunctionElements</span>(<span onmouseout="hideTip(event, 'fs22', 38)" onmouseover="showTip(event, 'fs22', 38)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>)
    <span class="c">// Construct an F# function as the result (and cast it to the</span>
    <span class="c">// expected function type specified by &#39;R)</span>
    <span onmouseout="hideTip(event, 'fs26', 39)" onmouseover="showTip(event, 'fs26', 39)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 40)" onmouseover="showTip(event, 'fs27', 40)" class="f">MakeFunction</span>(<span onmouseout="hideTip(event, 'fs22', 41)" onmouseover="showTip(event, 'fs22', 41)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>, <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs28', 42)" onmouseover="showTip(event, 'fs28', 42)" class="i">args</span> <span class="k">-&gt;</span>
      
      <span class="c">// We treat elements of a tuple passed as argument as a list of arguments</span>
      <span class="c">// When the &#39;o&#39; object is &#39;System.Type&#39;, we call static methods</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 43)" onmouseover="showTip(event, 'fs29', 43)" class="i">methods</span>, <span onmouseout="hideTip(event, 'fs30', 44)" onmouseover="showTip(event, 'fs30', 44)" class="i">instance</span>, <span onmouseout="hideTip(event, 'fs31', 45)" onmouseover="showTip(event, 'fs31', 45)" class="i">args</span> <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 46)" onmouseover="showTip(event, 'fs31', 46)" class="i">args</span> <span class="o">=</span> 
          <span class="c">// If argument is unit, we treat it as no arguments,</span>
          <span class="c">// if it is not a tuple, we create singleton array,</span>
          <span class="c">// otherwise we get all elements of the tuple</span>
          <span class="k">if</span> <span onmouseout="hideTip(event, 'fs23', 47)" onmouseover="showTip(event, 'fs23', 47)" class="i">argType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 48)" onmouseover="showTip(event, 'fs22', 48)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs32', 49)" onmouseover="showTip(event, 'fs32', 49)" class="t">unit</span><span class="o">&gt;</span> <span class="k">then</span> [| |]
          <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs33', 50)" onmouseover="showTip(event, 'fs33', 50)" class="f">not</span>(<span onmouseout="hideTip(event, 'fs20', 51)" onmouseover="showTip(event, 'fs20', 51)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 52)" onmouseover="showTip(event, 'fs34', 52)" class="f">IsTuple</span>(<span onmouseout="hideTip(event, 'fs23', 53)" onmouseover="showTip(event, 'fs23', 53)" class="i">argType</span>)) <span class="k">then</span> [| <span onmouseout="hideTip(event, 'fs31', 54)" onmouseover="showTip(event, 'fs31', 54)" class="i">args</span> |]
          <span class="k">else</span> <span onmouseout="hideTip(event, 'fs26', 55)" onmouseover="showTip(event, 'fs26', 55)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 56)" onmouseover="showTip(event, 'fs35', 56)" class="f">GetTupleFields</span>(<span onmouseout="hideTip(event, 'fs31', 57)" onmouseover="showTip(event, 'fs31', 57)" class="i">args</span>)

        <span class="c">// Static member call (on value of type System.Type)?</span>
        <span class="k">if</span> (<span onmouseout="hideTip(event, 'fs22', 58)" onmouseover="showTip(event, 'fs22', 58)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs1', 59)" onmouseover="showTip(event, 'fs1', 59)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 60)" onmouseover="showTip(event, 'fs36', 60)" class="t">Type</span><span class="o">&gt;</span>)<span class="o">.</span><span class="f">IsAssignableFrom</span>(<span onmouseout="hideTip(event, 'fs17', 61)" onmouseover="showTip(event, 'fs17', 61)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 62)" onmouseover="showTip(event, 'fs37', 62)" class="f">GetType</span>()) <span class="k">then</span> 
          <span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 63)" onmouseover="showTip(event, 'fs29', 63)" class="i">methods</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs38', 64)" onmouseover="showTip(event, 'fs38', 64)" class="f">unbox</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs36', 65)" onmouseover="showTip(event, 'fs36', 65)" class="t">Type</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs17', 66)" onmouseover="showTip(event, 'fs17', 66)" class="i">o</span>)<span class="o">.</span><span class="f">GetMethods</span>(<span onmouseout="hideTip(event, 'fs6', 67)" onmouseover="showTip(event, 'fs6', 67)" class="i">staticFlags</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs39', 68)" onmouseover="showTip(event, 'fs39', 68)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 69)" onmouseover="showTip(event, 'fs40', 69)" class="f">map</span> <span onmouseout="hideTip(event, 'fs14', 70)" onmouseover="showTip(event, 'fs14', 70)" class="f">asMethodBase</span>
          <span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 71)" onmouseover="showTip(event, 'fs41', 71)" class="i">ctors</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs38', 72)" onmouseover="showTip(event, 'fs38', 72)" class="f">unbox</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs36', 73)" onmouseover="showTip(event, 'fs36', 73)" class="t">Type</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs17', 74)" onmouseover="showTip(event, 'fs17', 74)" class="i">o</span>)<span class="o">.</span><span class="f">GetConstructors</span>(<span onmouseout="hideTip(event, 'fs13', 75)" onmouseover="showTip(event, 'fs13', 75)" class="i">ctorFlags</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs39', 76)" onmouseover="showTip(event, 'fs39', 76)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 77)" onmouseover="showTip(event, 'fs40', 77)" class="f">map</span> <span onmouseout="hideTip(event, 'fs14', 78)" onmouseover="showTip(event, 'fs14', 78)" class="f">asMethodBase</span>
          <span onmouseout="hideTip(event, 'fs39', 79)" onmouseover="showTip(event, 'fs39', 79)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs42', 80)" onmouseover="showTip(event, 'fs42', 80)" class="f">concat</span> [ <span onmouseout="hideTip(event, 'fs29', 81)" onmouseover="showTip(event, 'fs29', 81)" class="i">methods</span>; <span onmouseout="hideTip(event, 'fs41', 82)" onmouseover="showTip(event, 'fs41', 82)" class="i">ctors</span> ], <span class="k">null</span>, <span onmouseout="hideTip(event, 'fs31', 83)" onmouseover="showTip(event, 'fs31', 83)" class="i">args</span>
        <span class="k">else</span> 
          <span onmouseout="hideTip(event, 'fs17', 84)" onmouseover="showTip(event, 'fs17', 84)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 85)" onmouseover="showTip(event, 'fs37', 85)" class="f">GetType</span>()<span class="o">.</span><span class="f">GetMethods</span>(<span onmouseout="hideTip(event, 'fs11', 86)" onmouseover="showTip(event, 'fs11', 86)" class="i">instanceFlags</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs39', 87)" onmouseover="showTip(event, 'fs39', 87)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 88)" onmouseover="showTip(event, 'fs40', 88)" class="f">map</span> <span onmouseout="hideTip(event, 'fs14', 89)" onmouseover="showTip(event, 'fs14', 89)" class="f">asMethodBase</span>, <span onmouseout="hideTip(event, 'fs17', 90)" onmouseover="showTip(event, 'fs17', 90)" class="i">o</span>, <span onmouseout="hideTip(event, 'fs31', 91)" onmouseover="showTip(event, 'fs31', 91)" class="i">args</span>
        
      <span class="c">// A simple overload resolution based on the name and the number of parameters only</span>
      <span class="c">// TODO: This doesn&#39;t correctly handle multiple overloads with same parameter count</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 92)" onmouseover="showTip(event, 'fs43', 92)" class="i">methods</span> <span class="o">=</span> 
        [ <span class="k">for</span> <span onmouseout="hideTip(event, 'fs44', 93)" onmouseover="showTip(event, 'fs44', 93)" class="i">m</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs29', 94)" onmouseover="showTip(event, 'fs29', 94)" class="i">methods</span> <span class="k">do</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs44', 95)" onmouseover="showTip(event, 'fs44', 95)" class="i">m</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 96)" onmouseover="showTip(event, 'fs45', 96)" class="i">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 97)" onmouseover="showTip(event, 'fs19', 97)" class="i">name</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs44', 98)" onmouseover="showTip(event, 'fs44', 98)" class="i">m</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs46', 99)" onmouseover="showTip(event, 'fs46', 99)" class="f">GetParameters</span>()<span class="o">.</span><span class="i">Length</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs31', 100)" onmouseover="showTip(event, 'fs31', 100)" class="i">args</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 101)" onmouseover="showTip(event, 'fs47', 101)" class="i">Length</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs44', 102)" onmouseover="showTip(event, 'fs44', 102)" class="i">m</span> ]
        
      <span class="c">// If we find suitable method or constructor to call, do it!</span>
      <span class="k">match</span> <span onmouseout="hideTip(event, 'fs43', 103)" onmouseover="showTip(event, 'fs43', 103)" class="i">methods</span> <span class="k">with</span> 
      | [] <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs48', 104)" onmouseover="showTip(event, 'fs48', 104)" class="f">failwithf</span> <span class="s">&quot;No method &#39;</span><span class="pf">%s</span><span class="s">&#39; with </span><span class="pf">%d</span><span class="s"> arguments found&quot;</span> <span onmouseout="hideTip(event, 'fs19', 105)" onmouseover="showTip(event, 'fs19', 105)" class="i">name</span> <span onmouseout="hideTip(event, 'fs31', 106)" onmouseover="showTip(event, 'fs31', 106)" class="i">args</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 107)" onmouseover="showTip(event, 'fs47', 107)" class="i">Length</span>
      | _<span class="o">::</span>_<span class="o">::</span>_ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs48', 108)" onmouseover="showTip(event, 'fs48', 108)" class="f">failwithf</span> <span class="s">&quot;Multiple methods &#39;</span><span class="pf">%s</span><span class="s">&#39; with </span><span class="pf">%d</span><span class="s"> arguments found&quot;</span> <span onmouseout="hideTip(event, 'fs19', 109)" onmouseover="showTip(event, 'fs19', 109)" class="i">name</span> <span onmouseout="hideTip(event, 'fs31', 110)" onmouseover="showTip(event, 'fs31', 110)" class="i">args</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 111)" onmouseover="showTip(event, 'fs47', 111)" class="i">Length</span>
      | [<span class="o">:?</span> <span onmouseout="hideTip(event, 'fs49', 112)" onmouseover="showTip(event, 'fs49', 112)" class="t">ConstructorInfo</span> <span class="k">as</span> <span onmouseout="hideTip(event, 'fs50', 113)" onmouseover="showTip(event, 'fs50', 113)" class="i">c</span>] <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs50', 114)" onmouseover="showTip(event, 'fs50', 114)" class="i">c</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs51', 115)" onmouseover="showTip(event, 'fs51', 115)" class="f">Invoke</span>(<span onmouseout="hideTip(event, 'fs31', 116)" onmouseover="showTip(event, 'fs31', 116)" class="i">args</span>)
      | [ <span onmouseout="hideTip(event, 'fs44', 117)" onmouseover="showTip(event, 'fs44', 117)" class="i">m</span> ] <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs44', 118)" onmouseover="showTip(event, 'fs44', 118)" class="i">m</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 119)" onmouseover="showTip(event, 'fs52', 119)" class="f">Invoke</span>(<span onmouseout="hideTip(event, 'fs30', 120)" onmouseover="showTip(event, 'fs30', 120)" class="i">instance</span>, <span onmouseout="hideTip(event, 'fs31', 121)" onmouseover="showTip(event, 'fs31', 121)" class="i">args</span>) ) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs38', 122)" onmouseover="showTip(event, 'fs38', 122)" class="f">unbox</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>

  <span class="k">else</span>
    <span class="c">// The result type is not an F# function, so we&#39;re getting a property</span>
    <span class="c">// When the &#39;o&#39; object is &#39;System.Type&#39;, we access static properties</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs53', 123)" onmouseover="showTip(event, 'fs53', 123)" class="i">typ</span>, <span onmouseout="hideTip(event, 'fs54', 124)" onmouseover="showTip(event, 'fs54', 124)" class="i">flags</span>, <span onmouseout="hideTip(event, 'fs30', 125)" onmouseover="showTip(event, 'fs30', 125)" class="i">instance</span> <span class="o">=</span> 
      <span class="k">if</span> (<span onmouseout="hideTip(event, 'fs22', 126)" onmouseover="showTip(event, 'fs22', 126)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs1', 127)" onmouseover="showTip(event, 'fs1', 127)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 128)" onmouseover="showTip(event, 'fs36', 128)" class="t">Type</span><span class="o">&gt;</span>)<span class="o">.</span><span class="f">IsAssignableFrom</span>(<span onmouseout="hideTip(event, 'fs17', 129)" onmouseover="showTip(event, 'fs17', 129)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 130)" onmouseover="showTip(event, 'fs37', 130)" class="f">GetType</span>()) 
        <span class="k">then</span> <span onmouseout="hideTip(event, 'fs38', 131)" onmouseover="showTip(event, 'fs38', 131)" class="f">unbox</span> <span onmouseout="hideTip(event, 'fs17', 132)" onmouseover="showTip(event, 'fs17', 132)" class="i">o</span>, <span onmouseout="hideTip(event, 'fs6', 133)" onmouseover="showTip(event, 'fs6', 133)" class="i">staticFlags</span>, <span class="k">null</span>
        <span class="k">else</span> <span onmouseout="hideTip(event, 'fs17', 134)" onmouseover="showTip(event, 'fs17', 134)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 135)" onmouseover="showTip(event, 'fs37', 135)" class="f">GetType</span>(), <span onmouseout="hideTip(event, 'fs11', 136)" onmouseover="showTip(event, 'fs11', 136)" class="i">instanceFlags</span>, <span onmouseout="hideTip(event, 'fs17', 137)" onmouseover="showTip(event, 'fs17', 137)" class="i">o</span>
      
    <span class="c">// Find a property that we can call and get the value</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 138)" onmouseover="showTip(event, 'fs55', 138)" class="i">prop</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs53', 139)" onmouseover="showTip(event, 'fs53', 139)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 140)" onmouseover="showTip(event, 'fs56', 140)" class="f">GetProperty</span>(<span onmouseout="hideTip(event, 'fs19', 141)" onmouseover="showTip(event, 'fs19', 141)" class="i">name</span>, <span onmouseout="hideTip(event, 'fs54', 142)" onmouseover="showTip(event, 'fs54', 142)" class="i">flags</span>)
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs55', 143)" onmouseover="showTip(event, 'fs55', 143)" class="i">prop</span> <span class="o">=</span> <span class="k">null</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs30', 144)" onmouseover="showTip(event, 'fs30', 144)" class="i">instance</span> <span class="o">=</span> <span class="k">null</span> <span class="k">then</span> 
      <span class="c">// The syntax can be also used to access nested types of a type</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 145)" onmouseover="showTip(event, 'fs57', 145)" class="i">nested</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs53', 146)" onmouseover="showTip(event, 'fs53', 146)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs58', 147)" onmouseover="showTip(event, 'fs58', 147)" class="i">Assembly</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs59', 148)" onmouseover="showTip(event, 'fs59', 148)" class="f">GetType</span>(<span onmouseout="hideTip(event, 'fs53', 149)" onmouseover="showTip(event, 'fs53', 149)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs60', 150)" onmouseover="showTip(event, 'fs60', 150)" class="i">FullName</span> <span class="o">+</span> <span class="s">&quot;+&quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs19', 151)" onmouseover="showTip(event, 'fs19', 151)" class="i">name</span>)
      <span class="c">// Return nested type if we found one</span>
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs57', 152)" onmouseover="showTip(event, 'fs57', 152)" class="i">nested</span> <span class="o">=</span> <span class="k">null</span> <span class="k">then</span> 
        <span onmouseout="hideTip(event, 'fs48', 153)" onmouseover="showTip(event, 'fs48', 153)" class="f">failwithf</span> <span class="s">&quot;Property or nested type &#39;</span><span class="pf">%s</span><span class="s">&#39; not found in &#39;</span><span class="pf">%s</span><span class="s">&#39;.&quot;</span> <span onmouseout="hideTip(event, 'fs19', 154)" onmouseover="showTip(event, 'fs19', 154)" class="i">name</span> <span onmouseout="hideTip(event, 'fs53', 155)" onmouseover="showTip(event, 'fs53', 155)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 156)" onmouseover="showTip(event, 'fs45', 156)" class="i">Name</span> 
      <span class="k">elif</span> <span onmouseout="hideTip(event, 'fs33', 157)" onmouseover="showTip(event, 'fs33', 157)" class="f">not</span> ((<span onmouseout="hideTip(event, 'fs22', 158)" onmouseover="showTip(event, 'fs22', 158)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>)<span class="o">.</span><span class="f">IsAssignableFrom</span>(<span onmouseout="hideTip(event, 'fs22', 159)" onmouseover="showTip(event, 'fs22', 159)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs1', 160)" onmouseover="showTip(event, 'fs1', 160)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 161)" onmouseover="showTip(event, 'fs36', 161)" class="t">Type</span><span class="o">&gt;</span>)) <span class="k">then</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs61', 162)" onmouseover="showTip(event, 'fs61', 162)" class="i">rname</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs22', 163)" onmouseover="showTip(event, 'fs22', 163)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span><span class="o">.</span><span class="i">Name</span>)
        <span onmouseout="hideTip(event, 'fs48', 164)" onmouseover="showTip(event, 'fs48', 164)" class="f">failwithf</span> <span class="s">&quot;Cannot return nested type &#39;</span><span class="pf">%s</span><span class="s">&#39; as a type &#39;</span><span class="pf">%s</span><span class="s">&#39;.&quot;</span> <span onmouseout="hideTip(event, 'fs57', 165)" onmouseover="showTip(event, 'fs57', 165)" class="i">nested</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 166)" onmouseover="showTip(event, 'fs45', 166)" class="i">Name</span> <span onmouseout="hideTip(event, 'fs61', 167)" onmouseover="showTip(event, 'fs61', 167)" class="i">rname</span>
      <span class="k">else</span> <span onmouseout="hideTip(event, 'fs57', 168)" onmouseover="showTip(event, 'fs57', 168)" class="i">nested</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 169)" onmouseover="showTip(event, 'fs62', 169)" class="f">box</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs38', 170)" onmouseover="showTip(event, 'fs38', 170)" class="f">unbox</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>
    <span class="k">else</span>
      <span class="c">// Call property and return result if we found some</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs63', 171)" onmouseover="showTip(event, 'fs63', 171)" class="i">meth</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs55', 172)" onmouseover="showTip(event, 'fs55', 172)" class="i">prop</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs64', 173)" onmouseover="showTip(event, 'fs64', 173)" class="f">GetGetMethod</span>(<span class="k">true</span>)
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs55', 174)" onmouseover="showTip(event, 'fs55', 174)" class="i">prop</span> <span class="o">=</span> <span class="k">null</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs48', 175)" onmouseover="showTip(event, 'fs48', 175)" class="f">failwithf</span> <span class="s">&quot;Property &#39;</span><span class="pf">%s</span><span class="s">&#39; found, but doesn&#39;t have &#39;get&#39; method.&quot;</span> <span onmouseout="hideTip(event, 'fs19', 176)" onmouseover="showTip(event, 'fs19', 176)" class="i">name</span>
      <span class="k">try</span> <span onmouseout="hideTip(event, 'fs63', 177)" onmouseover="showTip(event, 'fs63', 177)" class="i">meth</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 178)" onmouseover="showTip(event, 'fs52', 178)" class="f">Invoke</span>(<span onmouseout="hideTip(event, 'fs30', 179)" onmouseover="showTip(event, 'fs30', 179)" class="i">instance</span>, [| |]) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs38', 180)" onmouseover="showTip(event, 'fs38', 180)" class="f">unbox</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">R</span><span class="o">&gt;</span>
      <span class="k">with</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs48', 181)" onmouseover="showTip(event, 'fs48', 181)" class="f">failwithf</span> <span class="s">&quot;Failed to get value of &#39;</span><span class="pf">%s</span><span class="s">&#39; property (of type &#39;</span><span class="pf">%s</span><span class="s">&#39;)&quot;</span> <span onmouseout="hideTip(event, 'fs19', 182)" onmouseover="showTip(event, 'fs19', 182)" class="i">name</span> <span onmouseout="hideTip(event, 'fs53', 183)" onmouseover="showTip(event, 'fs53', 183)" class="i">typ</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 184)" onmouseover="showTip(event, 'fs45', 184)" class="i">Name</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Example-of-using-the-operator" class="anchor" href="#Example-of-using-the-operator">Example of using the operator</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Create type that provides access to some types</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs65', 185)" onmouseover="showTip(event, 'fs65', 185)" class="f">Mscorlib</span> <span class="k">private</span> () <span class="o">=</span>
  <span class="k">static</span> <span class="k">let</span> <span onmouseout="hideTip(event, 'fs66', 186)" onmouseover="showTip(event, 'fs66', 186)" class="i">asm</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs67', 187)" onmouseover="showTip(event, 'fs67', 187)" class="t">Assembly</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs68', 188)" onmouseover="showTip(event, 'fs68', 188)" class="f">Load</span>(<span class="s">&quot;mscorlib&quot;</span>)
  <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs69', 189)" onmouseover="showTip(event, 'fs69', 189)" class="i">Random</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs66', 190)" onmouseover="showTip(event, 'fs66', 190)" class="i">asm</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs59', 191)" onmouseover="showTip(event, 'fs59', 191)" class="f">GetType</span>(<span class="s">&quot;System.Random&quot;</span>)
  <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs70', 192)" onmouseover="showTip(event, 'fs70', 192)" class="i">Console</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs66', 193)" onmouseover="showTip(event, 'fs66', 193)" class="i">asm</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs59', 194)" onmouseover="showTip(event, 'fs59', 194)" class="f">GetType</span>(<span class="s">&quot;System.Console&quot;</span>)

<span class="c">// Dynamically invoke constructor with seed=1</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 195)" onmouseover="showTip(event, 'fs71', 195)" class="i">rnd</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs18', 196)" onmouseover="showTip(event, 'fs18', 196)" class="t">obj</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs72', 197)" onmouseover="showTip(event, 'fs72', 197)" class="t">Mscorlib</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs73', 198)" onmouseover="showTip(event, 'fs73', 198)" class="i">Random</span><span class="o">?</span><span class="i">``.ctor``</span>(<span class="n">1</span>)
<span class="c">// Invoke method without argument</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs74', 199)" onmouseover="showTip(event, 'fs74', 199)" class="i">resf</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs75', 200)" onmouseover="showTip(event, 'fs75', 200)" class="t">float</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs71', 201)" onmouseover="showTip(event, 'fs71', 201)" class="i">rnd</span><span class="o">?</span><span class="i">NextDouble</span>()
<span class="c">// Invoke method with argument</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs76', 202)" onmouseover="showTip(event, 'fs76', 202)" class="i">resi</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs77', 203)" onmouseover="showTip(event, 'fs77', 203)" class="t">int</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs71', 204)" onmouseover="showTip(event, 'fs71', 204)" class="i">rnd</span><span class="o">?</span><span class="i">Next</span>(<span class="n">10</span>)

<span class="c">// Dynamically get value of a static property </span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 205)" onmouseover="showTip(event, 'fs78', 205)" class="i">bg</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs79', 206)" onmouseover="showTip(event, 'fs79', 206)" class="t">ConsoleColor</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs72', 207)" onmouseover="showTip(event, 'fs72', 207)" class="t">Mscorlib</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs80', 208)" onmouseover="showTip(event, 'fs80', 208)" class="i">Console</span><span class="o">?</span><span class="i">BackgroundColor</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Reflection</div>
<div class="tip" id="fs3">namespace Microsoft</div>
<div class="tip" id="fs4">namespace Microsoft.FSharp</div>
<div class="tip" id="fs5">namespace Microsoft.FSharp.Reflection</div>
<div class="tip" id="fs6">val private staticFlags : BindingFlags<br /><br />Full name: Script.staticFlags</div>
<div class="tip" id="fs7">type BindingFlags =<br />&#160;&#160;| Default = 0<br />&#160;&#160;| IgnoreCase = 1<br />&#160;&#160;| DeclaredOnly = 2<br />&#160;&#160;| Instance = 4<br />&#160;&#160;| Static = 8<br />&#160;&#160;| Public = 16<br />&#160;&#160;| NonPublic = 32<br />&#160;&#160;| FlattenHierarchy = 64<br />&#160;&#160;| InvokeMethod = 256<br />&#160;&#160;| CreateInstance = 512<br />&#160;&#160;...<br /><br />Full name: System.Reflection.BindingFlags</div>
<div class="tip" id="fs8">field BindingFlags.NonPublic = 32</div>
<div class="tip" id="fs9">field BindingFlags.Public = 16</div>
<div class="tip" id="fs10">field BindingFlags.Static = 8</div>
<div class="tip" id="fs11">val private instanceFlags : BindingFlags<br /><br />Full name: Script.instanceFlags</div>
<div class="tip" id="fs12">field BindingFlags.Instance = 4</div>
<div class="tip" id="fs13">val private ctorFlags : BindingFlags<br /><br />Full name: Script.ctorFlags</div>
<div class="tip" id="fs14">val private asMethodBase : a:#MethodBase -&gt; MethodBase<br /><br />Full name: Script.asMethodBase</div>
<div class="tip" id="fs15">val a : #MethodBase</div>
<div class="tip" id="fs16">type MethodBase =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Attributes : MethodAttributes<br />&#160;&#160;member CallingConvention : CallingConventions<br />&#160;&#160;member ContainsGenericParameters : bool<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetGenericArguments : unit -&gt; Type[]<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetMethodBody : unit -&gt; MethodBody<br />&#160;&#160;member GetMethodImplementationFlags : unit -&gt; MethodImplAttributes<br />&#160;&#160;member GetParameters : unit -&gt; ParameterInfo[]<br />&#160;&#160;member Invoke : obj:obj * parameters:obj[] -&gt; obj + 1 overload<br />&#160;&#160;...<br /><br />Full name: System.Reflection.MethodBase</div>
<div class="tip" id="fs17">val o : obj</div>
<div class="tip" id="fs18">type obj = Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs19">val name : string</div>
<div class="tip" id="fs20">type FSharpType =<br />&#160;&#160;static member GetExceptionFields : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetFunctionElements : functionType:Type -&gt; Type * Type<br />&#160;&#160;static member GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetTupleElements : tupleType:Type -&gt; Type []<br />&#160;&#160;static member GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []<br />&#160;&#160;static member IsExceptionRepresentation : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsFunction : typ:Type -&gt; bool<br />&#160;&#160;static member IsModule : typ:Type -&gt; bool<br />&#160;&#160;static member IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsTuple : typ:Type -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpType</div>
<div class="tip" id="fs21">static member FSharpType.IsFunction : typ:Type -&gt; bool</div>
<div class="tip" id="fs22">val typeof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs23">val argType : Type</div>
<div class="tip" id="fs24">val resType : Type</div>
<div class="tip" id="fs25">static member FSharpType.GetFunctionElements : functionType:Type -&gt; Type * Type</div>
<div class="tip" id="fs26">type FSharpValue =<br />&#160;&#160;static member GetExceptionFields : exn:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetRecordField : record:obj * info:PropertyInfo -&gt; obj<br />&#160;&#160;static member GetRecordFields : record:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetTupleField : tuple:obj * index:int -&gt; obj<br />&#160;&#160;static member GetTupleFields : tuple:obj -&gt; obj []<br />&#160;&#160;static member GetUnionFields : value:obj * unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo * obj []<br />&#160;&#160;static member MakeFunction : functionType:Type * implementation:(obj -&gt; obj) -&gt; obj<br />&#160;&#160;static member MakeRecord : recordType:Type * values:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;static member MakeTuple : tupleElements:obj [] * tupleType:Type -&gt; obj<br />&#160;&#160;static member MakeUnion : unionCase:UnionCaseInfo * args:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpValue</div>
<div class="tip" id="fs27">static member FSharpValue.MakeFunction : functionType:Type * implementation:(obj -&gt; obj) -&gt; obj</div>
<div class="tip" id="fs28">val args : obj</div>
<div class="tip" id="fs29">val methods : MethodBase []</div>
<div class="tip" id="fs30">val instance : obj</div>
<div class="tip" id="fs31">val args : obj []</div>
<div class="tip" id="fs32">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs33">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs34">static member FSharpType.IsTuple : typ:Type -&gt; bool</div>
<div class="tip" id="fs35">static member FSharpValue.GetTupleFields : tuple:obj -&gt; obj []</div>
<div class="tip" id="fs36">type Type =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Assembly : Assembly<br />&#160;&#160;member AssemblyQualifiedName : string<br />&#160;&#160;member Attributes : TypeAttributes<br />&#160;&#160;member BaseType : Type<br />&#160;&#160;member ContainsGenericParameters : bool<br />&#160;&#160;member DeclaringMethod : MethodBase<br />&#160;&#160;member DeclaringType : Type<br />&#160;&#160;member Equals : o:obj -&gt; bool + 1 overload<br />&#160;&#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&gt; Type[]<br />&#160;&#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&gt; MemberInfo[]<br />&#160;&#160;...<br /><br />Full name: System.Type</div>
<div class="tip" id="fs37">Object.GetType() : Type</div>
<div class="tip" id="fs38">val unbox : value:obj -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.unbox</div>
<div class="tip" id="fs39">type Array =<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CopyTo : array:Array * index:int -&gt; unit + 1 overload<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator<br />&#160;&#160;member GetLength : dimension:int -&gt; int<br />&#160;&#160;member GetLongLength : dimension:int -&gt; int64<br />&#160;&#160;member GetLowerBound : dimension:int -&gt; int<br />&#160;&#160;member GetUpperBound : dimension:int -&gt; int<br />&#160;&#160;member GetValue : [&lt;ParamArray&gt;] indices:int[] -&gt; obj + 7 overloads<br />&#160;&#160;member Initialize : unit -&gt; unit<br />&#160;&#160;member IsFixedSize : bool<br />&#160;&#160;...<br /><br />Full name: System.Array</div>
<div class="tip" id="fs40">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; array:&#39;T [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.map</div>
<div class="tip" id="fs41">val ctors : MethodBase []</div>
<div class="tip" id="fs42">val concat : arrays:seq&lt;&#39;T []&gt; -&gt; &#39;T []<br /><br />Full name: Microsoft.FSharp.Collections.Array.concat</div>
<div class="tip" id="fs43">val methods : MethodBase list</div>
<div class="tip" id="fs44">val m : MethodBase</div>
<div class="tip" id="fs45">property MemberInfo.Name: string</div>
<div class="tip" id="fs46">MethodBase.GetParameters() : ParameterInfo []</div>
<div class="tip" id="fs47">property Array.Length: int</div>
<div class="tip" id="fs48">val failwithf : format:Printf.StringFormat&lt;&#39;T,&#39;Result&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.failwithf</div>
<div class="tip" id="fs49">type ConstructorInfo =<br />&#160;&#160;inherit MethodBase<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member Invoke : parameters:obj[] -&gt; obj + 1 overload<br />&#160;&#160;member MemberType : MemberTypes<br />&#160;&#160;static val ConstructorName : string<br />&#160;&#160;static val TypeConstructorName : string<br /><br />Full name: System.Reflection.ConstructorInfo</div>
<div class="tip" id="fs50">val c : ConstructorInfo</div>
<div class="tip" id="fs51">ConstructorInfo.Invoke(parameters: obj []) : obj<br />MethodBase.Invoke(obj: obj, parameters: obj []) : obj<br />ConstructorInfo.Invoke(invokeAttr: BindingFlags, binder: Binder, parameters: obj [], culture: Globalization.CultureInfo) : obj<br />MethodBase.Invoke(obj: obj, invokeAttr: BindingFlags, binder: Binder, parameters: obj [], culture: Globalization.CultureInfo) : obj</div>
<div class="tip" id="fs52">MethodBase.Invoke(obj: obj, parameters: obj []) : obj<br />MethodBase.Invoke(obj: obj, invokeAttr: BindingFlags, binder: Binder, parameters: obj [], culture: Globalization.CultureInfo) : obj</div>
<div class="tip" id="fs53">val typ : Type</div>
<div class="tip" id="fs54">val flags : BindingFlags</div>
<div class="tip" id="fs55">val prop : PropertyInfo</div>
<div class="tip" id="fs56">Type.GetProperty(name: string) : PropertyInfo<br />Type.GetProperty(name: string, returnType: Type) : PropertyInfo<br />Type.GetProperty(name: string, types: Type []) : PropertyInfo<br />Type.GetProperty(name: string, bindingAttr: BindingFlags) : PropertyInfo<br />Type.GetProperty(name: string, returnType: Type, types: Type []) : PropertyInfo<br />Type.GetProperty(name: string, returnType: Type, types: Type [], modifiers: ParameterModifier []) : PropertyInfo<br />Type.GetProperty(name: string, bindingAttr: BindingFlags, binder: Binder, returnType: Type, types: Type [], modifiers: ParameterModifier []) : PropertyInfo</div>
<div class="tip" id="fs57">val nested : Type</div>
<div class="tip" id="fs58">property Type.Assembly: Assembly</div>
<div class="tip" id="fs59">Object.GetType() : Type<br />Assembly.GetType(name: string) : Type<br />Assembly.GetType(name: string, throwOnError: bool) : Type<br />Assembly.GetType(name: string, throwOnError: bool, ignoreCase: bool) : Type</div>
<div class="tip" id="fs60">property Type.FullName: string</div>
<div class="tip" id="fs61">val rname : string</div>
<div class="tip" id="fs62">val box : value:&#39;T -&gt; obj<br /><br />Full name: Microsoft.FSharp.Core.Operators.box</div>
<div class="tip" id="fs63">val meth : MethodInfo</div>
<div class="tip" id="fs64">PropertyInfo.GetGetMethod() : MethodInfo<br />PropertyInfo.GetGetMethod(nonPublic: bool) : MethodInfo</div>
<div class="tip" id="fs65">Multiple items<br />type Mscorlib =<br />&#160;&#160;private new : unit -&gt; Mscorlib<br />&#160;&#160;static member Console : Type<br />&#160;&#160;static member Random : Type<br /><br />Full name: Script.Mscorlib<br /><br />--------------------<br />private new : unit -&gt; Mscorlib</div>
<div class="tip" id="fs66">val asm : Assembly</div>
<div class="tip" id="fs67">type Assembly =<br />&#160;&#160;member CodeBase : string<br />&#160;&#160;member CreateInstance : typeName:string -&gt; obj + 2 overloads<br />&#160;&#160;member EntryPoint : MethodInfo<br />&#160;&#160;member Equals : o:obj -&gt; bool<br />&#160;&#160;member EscapedCodeBase : string<br />&#160;&#160;member Evidence : Evidence<br />&#160;&#160;member FullName : string<br />&#160;&#160;member GetCustomAttributes : inherit:bool -&gt; obj[] + 1 overload<br />&#160;&#160;member GetCustomAttributesData : unit -&gt; IList&lt;CustomAttributeData&gt;<br />&#160;&#160;member GetExportedTypes : unit -&gt; Type[]<br />&#160;&#160;...<br /><br />Full name: System.Reflection.Assembly</div>
<div class="tip" id="fs68">Assembly.Load(rawAssembly: byte []) : Assembly<br />Assembly.Load(assemblyRef: AssemblyName) : Assembly<br />Assembly.Load(assemblyString: string) : Assembly<br />Assembly.Load(rawAssembly: byte [], rawSymbolStore: byte []) : Assembly<br />Assembly.Load(rawAssembly: byte [], rawSymbolStore: byte [], securityContextSource: Security.SecurityContextSource) : Assembly</div>
<div class="tip" id="fs69">Multiple items<br />static member Mscorlib.Random : Type<br /><br />Full name: Script.Mscorlib.Random<br /><br />--------------------<br />type Random =<br />&#160;&#160;new : unit -&gt; Random + 1 overload<br />&#160;&#160;member Next : unit -&gt; int + 2 overloads<br />&#160;&#160;member NextBytes : buffer:byte[] -&gt; unit<br />&#160;&#160;member NextDouble : unit -&gt; float<br /><br />Full name: System.Random<br /><br />--------------------<br />Random() : unit<br />Random(Seed: int) : unit</div>
<div class="tip" id="fs70">Multiple items<br />static member Mscorlib.Console : Type<br /><br />Full name: Script.Mscorlib.Console<br /><br />--------------------<br />type Console =<br />&#160;&#160;static member BackgroundColor : ConsoleColor with get, set<br />&#160;&#160;static member Beep : unit -&gt; unit + 1 overload<br />&#160;&#160;static member BufferHeight : int with get, set<br />&#160;&#160;static member BufferWidth : int with get, set<br />&#160;&#160;static member CapsLock : bool<br />&#160;&#160;static member Clear : unit -&gt; unit<br />&#160;&#160;static member CursorLeft : int with get, set<br />&#160;&#160;static member CursorSize : int with get, set<br />&#160;&#160;static member CursorTop : int with get, set<br />&#160;&#160;static member CursorVisible : bool with get, set<br />&#160;&#160;...<br /><br />Full name: System.Console</div>
<div class="tip" id="fs71">val rnd : obj<br /><br />Full name: Script.rnd</div>
<div class="tip" id="fs72">type Mscorlib =<br />&#160;&#160;private new : unit -&gt; Mscorlib<br />&#160;&#160;static member Console : Type<br />&#160;&#160;static member Random : Type<br /><br />Full name: Script.Mscorlib</div>
<div class="tip" id="fs73">property Mscorlib.Random: Type</div>
<div class="tip" id="fs74">val resf : float<br /><br />Full name: Script.resf</div>
<div class="tip" id="fs75">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.float<br /><br />--------------------<br />type float = Double<br /><br />Full name: Microsoft.FSharp.Core.float<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float<br /><br />Full name: Microsoft.FSharp.Core.float&lt;_&gt;</div>
<div class="tip" id="fs76">val resi : int<br /><br />Full name: Script.resi</div>
<div class="tip" id="fs77">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs78">val bg : ConsoleColor<br /><br />Full name: Script.bg</div>
<div class="tip" id="fs79">type ConsoleColor =<br />&#160;&#160;| Black = 0<br />&#160;&#160;| DarkBlue = 1<br />&#160;&#160;| DarkGreen = 2<br />&#160;&#160;| DarkCyan = 3<br />&#160;&#160;| DarkRed = 4<br />&#160;&#160;| DarkMagenta = 5<br />&#160;&#160;| DarkYellow = 6<br />&#160;&#160;| Gray = 7<br />&#160;&#160;| DarkGray = 8<br />&#160;&#160;| Blue = 9<br />&#160;&#160;...<br /><br />Full name: System.ConsoleColor</div>
<div class="tip" id="fs80">property Mscorlib.Console: Type</div>

