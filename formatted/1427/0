<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="prep">#r</span> <span class="s">&quot;System.Data.Linq&quot;</span> 

<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 2)" onmouseover="showTip(event, 'fs1', 2)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">Reflection</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="i">ComponentModel</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="i">Expressions</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">Reflection</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="i">Quotations</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="t">FSharpType</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="f">IsOption</span> (<span onmouseout="hideTip(event, 'fs12', 17)" onmouseover="showTip(event, 'fs12', 17)" class="i">stype</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs1', 18)" onmouseover="showTip(event, 'fs1', 18)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="t">Type</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="i">stype</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="i">Name</span> <span class="o">=</span> <span class="s">&quot;FSharpOption`1&quot;</span>

<span class="k">module</span> <span onmouseout="hideTip(event, 'fs15', 22)" onmouseover="showTip(event, 'fs15', 22)" class="t">RecordCloning</span> <span class="o">=</span> 
    <span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="f">application</span> <span onmouseout="hideTip(event, 'fs17', 24)" onmouseover="showTip(event, 'fs17', 24)" class="i">prms</span> <span onmouseout="hideTip(event, 'fs18', 25)" onmouseover="showTip(event, 'fs18', 25)" class="i">expr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 26)" onmouseover="showTip(event, 'fs19', 26)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 27)" onmouseover="showTip(event, 'fs20', 27)" class="f">Application</span>(<span onmouseout="hideTip(event, 'fs18', 28)" onmouseover="showTip(event, 'fs18', 28)" class="i">expr</span>, <span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="i">prms</span>)
    <span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs21', 30)" onmouseover="showTip(event, 'fs21', 30)" class="f">coerse</span> <span onmouseout="hideTip(event, 'fs22', 31)" onmouseover="showTip(event, 'fs22', 31)" class="i">typ</span> <span onmouseout="hideTip(event, 'fs18', 32)" onmouseover="showTip(event, 'fs18', 32)" class="i">expr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 33)" onmouseover="showTip(event, 'fs19', 33)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 34)" onmouseover="showTip(event, 'fs23', 34)" class="f">Coerce</span>(<span onmouseout="hideTip(event, 'fs18', 35)" onmouseover="showTip(event, 'fs18', 35)" class="i">expr</span>, <span onmouseout="hideTip(event, 'fs22', 36)" onmouseover="showTip(event, 'fs22', 36)" class="i">typ</span>)
    <span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs24', 37)" onmouseover="showTip(event, 'fs24', 37)" class="f">newrec</span> <span onmouseout="hideTip(event, 'fs22', 38)" onmouseover="showTip(event, 'fs22', 38)" class="i">typ</span> <span onmouseout="hideTip(event, 'fs25', 39)" onmouseover="showTip(event, 'fs25', 39)" class="i">args</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 40)" onmouseover="showTip(event, 'fs19', 40)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 41)" onmouseover="showTip(event, 'fs26', 41)" class="f">NewRecord</span>(<span onmouseout="hideTip(event, 'fs22', 42)" onmouseover="showTip(event, 'fs22', 42)" class="i">typ</span>, <span onmouseout="hideTip(event, 'fs25', 43)" onmouseover="showTip(event, 'fs25', 43)" class="i">args</span>)

    <span class="k">let</span> (|<span class="p">IsMapType</span>|_|) (<span onmouseout="hideTip(event, 'fs27', 44)" onmouseover="showTip(event, 'fs27', 44)" class="i">t</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs13', 45)" onmouseover="showTip(event, 'fs13', 45)" class="t">Type</span>) <span class="o">=</span> 
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs27', 46)" onmouseover="showTip(event, 'fs27', 46)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 47)" onmouseover="showTip(event, 'fs28', 47)" class="i">IsGenericType</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs27', 48)" onmouseover="showTip(event, 'fs27', 48)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 49)" onmouseover="showTip(event, 'fs29', 49)" class="f">GetGenericTypeDefinition</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs30', 50)" onmouseover="showTip(event, 'fs30', 50)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs31', 51)" onmouseover="showTip(event, 'fs31', 51)" class="t">Map</span><span class="o">&lt;</span>_,_<span class="o">&gt;</span><span class="o">&gt;</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs32', 52)" onmouseover="showTip(event, 'fs32', 52)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs27', 53)" onmouseover="showTip(event, 'fs27', 53)" class="i">t</span>
        <span class="k">else</span> <span onmouseout="hideTip(event, 'fs33', 54)" onmouseover="showTip(event, 'fs33', 54)" class="p">None</span>    

    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs34', 55)" onmouseover="showTip(event, 'fs34', 55)" class="f">copyThing</span> (<span onmouseout="hideTip(event, 'fs35', 56)" onmouseover="showTip(event, 'fs35', 56)" class="i">mtype</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs13', 57)" onmouseover="showTip(event, 'fs13', 57)" class="t">Type</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs19', 58)" onmouseover="showTip(event, 'fs19', 58)" class="t">Expr</span> <span class="o">=</span> 
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs35', 59)" onmouseover="showTip(event, 'fs35', 59)" class="i">mtype</span> <span class="k">with</span> 
        | _ <span class="k">when</span> <span onmouseout="hideTip(event, 'fs36', 60)" onmouseover="showTip(event, 'fs36', 60)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 61)" onmouseover="showTip(event, 'fs37', 61)" class="f">IsRecord</span> <span onmouseout="hideTip(event, 'fs35', 62)" onmouseover="showTip(event, 'fs35', 62)" class="i">mtype</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs38', 63)" onmouseover="showTip(event, 'fs38', 63)" class="f">genRecordCopier</span> <span onmouseout="hideTip(event, 'fs35', 64)" onmouseover="showTip(event, 'fs35', 64)" class="i">mtype</span>
        | _ <span class="k">when</span> <span onmouseout="hideTip(event, 'fs36', 65)" onmouseover="showTip(event, 'fs36', 65)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 66)" onmouseover="showTip(event, 'fs39', 66)" class="f">IsUnion</span> <span onmouseout="hideTip(event, 'fs35', 67)" onmouseover="showTip(event, 'fs35', 67)" class="i">mtype</span>  <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs40', 68)" onmouseover="showTip(event, 'fs40', 68)" class="f">genUnionCopier</span> <span onmouseout="hideTip(event, 'fs35', 69)" onmouseover="showTip(event, 'fs35', 69)" class="i">mtype</span> 
        | _ <span class="k">when</span> <span onmouseout="hideTip(event, 'fs35', 70)" onmouseover="showTip(event, 'fs35', 70)" class="i">mtype</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs41', 71)" onmouseover="showTip(event, 'fs41', 71)" class="i">IsValueType</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs35', 72)" onmouseover="showTip(event, 'fs35', 72)" class="i">mtype</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs42', 73)" onmouseover="showTip(event, 'fs42', 73)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs43', 74)" onmouseover="showTip(event, 'fs43', 74)" class="t">String</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs44', 75)" onmouseover="showTip(event, 'fs44', 75)" class="f">getIdFunc</span> <span onmouseout="hideTip(event, 'fs35', 76)" onmouseover="showTip(event, 'fs35', 76)" class="i">mtype</span>
        | _ <span class="k">when</span> <span onmouseout="hideTip(event, 'fs35', 77)" onmouseover="showTip(event, 'fs35', 77)" class="i">mtype</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs45', 78)" onmouseover="showTip(event, 'fs45', 78)" class="i">IsArray</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs46', 79)" onmouseover="showTip(event, 'fs46', 79)" class="f">genArrayCopier</span> <span onmouseout="hideTip(event, 'fs35', 80)" onmouseover="showTip(event, 'fs35', 80)" class="i">mtype</span>
        | <span onmouseout="hideTip(event, 'fs47', 81)" onmouseover="showTip(event, 'fs47', 81)" class="p">IsMapType</span> <span onmouseout="hideTip(event, 'fs27', 82)" onmouseover="showTip(event, 'fs27', 82)" class="i">t</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs44', 83)" onmouseover="showTip(event, 'fs44', 83)" class="f">getIdFunc</span> <span onmouseout="hideTip(event, 'fs35', 84)" onmouseover="showTip(event, 'fs35', 84)" class="i">mtype</span>
        | _ <span class="k">when</span> <span onmouseout="hideTip(event, 'fs35', 85)" onmouseover="showTip(event, 'fs35', 85)" class="i">mtype</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs42', 86)" onmouseover="showTip(event, 'fs42', 86)" class="i">typeof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs1', 87)" onmouseover="showTip(event, 'fs1', 87)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs48', 88)" onmouseover="showTip(event, 'fs48', 88)" class="t">Object</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs44', 89)" onmouseover="showTip(event, 'fs44', 89)" class="f">getIdFunc</span> <span onmouseout="hideTip(event, 'fs35', 90)" onmouseover="showTip(event, 'fs35', 90)" class="i">mtype</span>
        | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs49', 91)" onmouseover="showTip(event, 'fs49', 91)" class="f">failwithf</span> <span class="s">&quot;Unexpected Type: </span><span class="pf">%s</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs35', 92)" onmouseover="showTip(event, 'fs35', 92)" class="i">mtype</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs50', 93)" onmouseover="showTip(event, 'fs50', 93)" class="f">ToString</span>())

    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs51', 94)" onmouseover="showTip(event, 'fs51', 94)" class="i">X</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs52', 95)" onmouseover="showTip(event, 'fs52', 95)" class="t">Unchecked</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs53', 96)" onmouseover="showTip(event, 'fs53', 96)" class="i">defaultof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>

    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs54', 97)" onmouseover="showTip(event, 'fs54', 97)" class="f">getMethod</span> <span class="o">=</span> 
        <span class="k">function</span>
        | <span onmouseout="hideTip(event, 'fs55', 98)" onmouseover="showTip(event, 'fs55', 98)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 99)" onmouseover="showTip(event, 'fs56', 99)" class="p">Call</span> (_, <span onmouseout="hideTip(event, 'fs57', 100)" onmouseover="showTip(event, 'fs57', 100)" class="i">m</span>, _) <span class="k">when</span> <span onmouseout="hideTip(event, 'fs57', 101)" onmouseover="showTip(event, 'fs57', 101)" class="i">m</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs58', 102)" onmouseover="showTip(event, 'fs58', 102)" class="i">IsGenericMethod</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs57', 103)" onmouseover="showTip(event, 'fs57', 103)" class="i">m</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs59', 104)" onmouseover="showTip(event, 'fs59', 104)" class="f">GetGenericMethodDefinition</span>()
        | <span onmouseout="hideTip(event, 'fs55', 105)" onmouseover="showTip(event, 'fs55', 105)" class="t">Patterns</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 106)" onmouseover="showTip(event, 'fs56', 106)" class="p">Call</span> (_, <span onmouseout="hideTip(event, 'fs57', 107)" onmouseover="showTip(event, 'fs57', 107)" class="i">m</span>, _) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs57', 108)" onmouseover="showTip(event, 'fs57', 108)" class="i">m</span>
        | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs60', 109)" onmouseover="showTip(event, 'fs60', 109)" class="f">failwith</span> <span class="s">&quot;Incorrect getMethod Pattern&quot;</span>

    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs44', 110)" onmouseover="showTip(event, 'fs44', 110)" class="f">getIdFunc</span> <span onmouseout="hideTip(event, 'fs61', 111)" onmouseover="showTip(event, 'fs61', 111)" class="i">itype</span> <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 112)" onmouseover="showTip(event, 'fs62', 112)" class="i">arg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs63', 113)" onmouseover="showTip(event, 'fs63', 113)" class="t">Var</span>(<span class="s">&quot;x&quot;</span>, <span onmouseout="hideTip(event, 'fs61', 114)" onmouseover="showTip(event, 'fs61', 114)" class="i">itype</span>, <span class="k">false</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 115)" onmouseover="showTip(event, 'fs64', 115)" class="i">argExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 116)" onmouseover="showTip(event, 'fs19', 116)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 117)" onmouseover="showTip(event, 'fs65', 117)" class="f">Var</span>(<span onmouseout="hideTip(event, 'fs62', 118)" onmouseover="showTip(event, 'fs62', 118)" class="i">arg</span>)        
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs66', 119)" onmouseover="showTip(event, 'fs66', 119)" class="i">func</span> <span class="o">=</span> 
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 120)" onmouseover="showTip(event, 'fs57', 120)" class="i">m</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs54', 121)" onmouseover="showTip(event, 'fs54', 121)" class="f">getMethod</span> &lt;@ <span onmouseout="hideTip(event, 'fs67', 122)" onmouseover="showTip(event, 'fs67', 122)" class="f">id</span> <span onmouseout="hideTip(event, 'fs51', 123)" onmouseover="showTip(event, 'fs51', 123)" class="i">X</span> @&gt;)<span class="o">.</span><span class="f">MakeGenericMethod</span>([|<span onmouseout="hideTip(event, 'fs61', 124)" onmouseover="showTip(event, 'fs61', 124)" class="i">itype</span>|])
            <span onmouseout="hideTip(event, 'fs19', 125)" onmouseover="showTip(event, 'fs19', 125)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs68', 126)" onmouseover="showTip(event, 'fs68', 126)" class="f">Call</span>(<span onmouseout="hideTip(event, 'fs57', 127)" onmouseover="showTip(event, 'fs57', 127)" class="i">m</span>, [<span onmouseout="hideTip(event, 'fs64', 128)" onmouseover="showTip(event, 'fs64', 128)" class="i">argExpr</span>])
        <span onmouseout="hideTip(event, 'fs19', 129)" onmouseover="showTip(event, 'fs19', 129)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 130)" onmouseover="showTip(event, 'fs69', 130)" class="f">Lambda</span>(<span onmouseout="hideTip(event, 'fs62', 131)" onmouseover="showTip(event, 'fs62', 131)" class="i">arg</span>, <span onmouseout="hideTip(event, 'fs66', 132)" onmouseover="showTip(event, 'fs66', 132)" class="i">func</span>)

    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs38', 133)" onmouseover="showTip(event, 'fs38', 133)" class="f">genRecordCopier</span> (<span onmouseout="hideTip(event, 'fs70', 134)" onmouseover="showTip(event, 'fs70', 134)" class="i">rtype</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs13', 135)" onmouseover="showTip(event, 'fs13', 135)" class="t">Type</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs19', 136)" onmouseover="showTip(event, 'fs19', 136)" class="t">Expr</span> <span class="o">=</span>         
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 137)" onmouseover="showTip(event, 'fs62', 137)" class="i">arg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs63', 138)" onmouseover="showTip(event, 'fs63', 138)" class="t">Var</span>(<span class="s">&quot;x&quot;</span>, <span onmouseout="hideTip(event, 'fs70', 139)" onmouseover="showTip(event, 'fs70', 139)" class="i">rtype</span>, <span class="k">false</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 140)" onmouseover="showTip(event, 'fs64', 140)" class="i">argExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 141)" onmouseover="showTip(event, 'fs19', 141)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 142)" onmouseover="showTip(event, 'fs65', 142)" class="f">Var</span>(<span onmouseout="hideTip(event, 'fs62', 143)" onmouseover="showTip(event, 'fs62', 143)" class="i">arg</span>) 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 144)" onmouseover="showTip(event, 'fs71', 144)" class="i">newrec</span> <span class="o">=</span>            
            <span onmouseout="hideTip(event, 'fs36', 145)" onmouseover="showTip(event, 'fs36', 145)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs72', 146)" onmouseover="showTip(event, 'fs72', 146)" class="f">GetRecordFields</span>(<span onmouseout="hideTip(event, 'fs70', 147)" onmouseover="showTip(event, 'fs70', 147)" class="i">rtype</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs73', 148)" onmouseover="showTip(event, 'fs73', 148)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs74', 149)" onmouseover="showTip(event, 'fs74', 149)" class="f">toList</span>
            <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs75', 150)" onmouseover="showTip(event, 'fs75', 150)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs76', 151)" onmouseover="showTip(event, 'fs76', 151)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs77', 152)" onmouseover="showTip(event, 'fs77', 152)" class="i">field</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs78', 153)" onmouseover="showTip(event, 'fs78', 153)" class="f">genFieldCopy</span> <span onmouseout="hideTip(event, 'fs64', 154)" onmouseover="showTip(event, 'fs64', 154)" class="i">argExpr</span> <span onmouseout="hideTip(event, 'fs77', 155)" onmouseover="showTip(event, 'fs77', 155)" class="i">field</span>)
            <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs24', 156)" onmouseover="showTip(event, 'fs24', 156)" class="f">newrec</span> <span onmouseout="hideTip(event, 'fs70', 157)" onmouseover="showTip(event, 'fs70', 157)" class="i">rtype</span>
        <span onmouseout="hideTip(event, 'fs19', 158)" onmouseover="showTip(event, 'fs19', 158)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 159)" onmouseover="showTip(event, 'fs69', 159)" class="f">Lambda</span>(<span onmouseout="hideTip(event, 'fs62', 160)" onmouseover="showTip(event, 'fs62', 160)" class="i">arg</span>, <span onmouseout="hideTip(event, 'fs71', 161)" onmouseover="showTip(event, 'fs71', 161)" class="i">newrec</span>)

    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs78', 162)" onmouseover="showTip(event, 'fs78', 162)" class="f">genFieldCopy</span> <span onmouseout="hideTip(event, 'fs64', 163)" onmouseover="showTip(event, 'fs64', 163)" class="i">argExpr</span> (<span onmouseout="hideTip(event, 'fs77', 164)" onmouseover="showTip(event, 'fs77', 164)" class="i">field</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs79', 165)" onmouseover="showTip(event, 'fs79', 165)" class="t">PropertyInfo</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs19', 166)" onmouseover="showTip(event, 'fs19', 166)" class="t">Expr</span> <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs80', 167)" onmouseover="showTip(event, 'fs80', 167)" class="i">pval</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 168)" onmouseover="showTip(event, 'fs19', 168)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs81', 169)" onmouseover="showTip(event, 'fs81', 169)" class="f">PropertyGet</span>(<span onmouseout="hideTip(event, 'fs64', 170)" onmouseover="showTip(event, 'fs64', 170)" class="i">argExpr</span>, <span onmouseout="hideTip(event, 'fs77', 171)" onmouseover="showTip(event, 'fs77', 171)" class="i">field</span>) 
        <span onmouseout="hideTip(event, 'fs34', 172)" onmouseover="showTip(event, 'fs34', 172)" class="f">copyThing</span> <span onmouseout="hideTip(event, 'fs77', 173)" onmouseover="showTip(event, 'fs77', 173)" class="i">field</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs82', 174)" onmouseover="showTip(event, 'fs82', 174)" class="i">PropertyType</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs16', 175)" onmouseover="showTip(event, 'fs16', 175)" class="f">application</span> <span onmouseout="hideTip(event, 'fs80', 176)" onmouseover="showTip(event, 'fs80', 176)" class="i">pval</span>
             
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs46', 177)" onmouseover="showTip(event, 'fs46', 177)" class="f">genArrayCopier</span> (<span onmouseout="hideTip(event, 'fs83', 178)" onmouseover="showTip(event, 'fs83', 178)" class="i">atype</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs13', 179)" onmouseover="showTip(event, 'fs13', 179)" class="t">Type</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs19', 180)" onmouseover="showTip(event, 'fs19', 180)" class="t">Expr</span> <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs84', 181)" onmouseover="showTip(event, 'fs84', 181)" class="i">etype</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs83', 182)" onmouseover="showTip(event, 'fs83', 182)" class="i">atype</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs85', 183)" onmouseover="showTip(event, 'fs85', 183)" class="f">GetElementType</span>()        
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs86', 184)" onmouseover="showTip(event, 'fs86', 184)" class="i">copyfun</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs34', 185)" onmouseover="showTip(event, 'fs34', 185)" class="f">copyThing</span> <span onmouseout="hideTip(event, 'fs84', 186)" onmouseover="showTip(event, 'fs84', 186)" class="i">etype</span>

        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 187)" onmouseover="showTip(event, 'fs62', 187)" class="i">arg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs63', 188)" onmouseover="showTip(event, 'fs63', 188)" class="t">Var</span>(<span class="s">&quot;arr&quot;</span>, <span onmouseout="hideTip(event, 'fs83', 189)" onmouseover="showTip(event, 'fs83', 189)" class="i">atype</span>, <span class="k">false</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 190)" onmouseover="showTip(event, 'fs64', 190)" class="i">argExpr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 191)" onmouseover="showTip(event, 'fs19', 191)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 192)" onmouseover="showTip(event, 'fs65', 192)" class="f">Var</span>(<span onmouseout="hideTip(event, 'fs62', 193)" onmouseover="showTip(event, 'fs62', 193)" class="i">arg</span>)
        
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs66', 194)" onmouseover="showTip(event, 'fs66', 194)" class="i">func</span> <span class="o">=</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 195)" onmouseover="showTip(event, 'fs57', 195)" class="i">m</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs54', 196)" onmouseover="showTip(event, 'fs54', 196)" class="f">getMethod</span> &lt;@ <span onmouseout="hideTip(event, 'fs73', 197)" onmouseover="showTip(event, 'fs73', 197)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs87', 198)" onmouseover="showTip(event, 'fs87', 198)" class="f">map</span> <span onmouseout="hideTip(event, 'fs51', 199)" onmouseover="showTip(event, 'fs51', 199)" class="i">X</span> <span onmouseout="hideTip(event, 'fs51', 200)" onmouseover="showTip(event, 'fs51', 200)" class="i">X</span> @&gt;)<span class="o">.</span><span class="f">MakeGenericMethod</span>([|<span onmouseout="hideTip(event, 'fs84', 201)" onmouseover="showTip(event, 'fs84', 201)" class="i">etype</span>; <span onmouseout="hideTip(event, 'fs84', 202)" onmouseover="showTip(event, 'fs84', 202)" class="i">etype</span>|])
            <span onmouseout="hideTip(event, 'fs19', 203)" onmouseover="showTip(event, 'fs19', 203)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs68', 204)" onmouseover="showTip(event, 'fs68', 204)" class="f">Call</span>(<span onmouseout="hideTip(event, 'fs57', 205)" onmouseover="showTip(event, 'fs57', 205)" class="i">m</span>, [<span onmouseout="hideTip(event, 'fs86', 206)" onmouseover="showTip(event, 'fs86', 206)" class="i">copyfun</span>; <span onmouseout="hideTip(event, 'fs64', 207)" onmouseover="showTip(event, 'fs64', 207)" class="i">argExpr</span>])

        <span onmouseout="hideTip(event, 'fs19', 208)" onmouseover="showTip(event, 'fs19', 208)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 209)" onmouseover="showTip(event, 'fs69', 209)" class="f">Lambda</span>(<span onmouseout="hideTip(event, 'fs62', 210)" onmouseover="showTip(event, 'fs62', 210)" class="i">arg</span>, <span onmouseout="hideTip(event, 'fs66', 211)" onmouseover="showTip(event, 'fs66', 211)" class="i">func</span>)

    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs40', 212)" onmouseover="showTip(event, 'fs40', 212)" class="f">genUnionCopier</span> (<span onmouseout="hideTip(event, 'fs88', 213)" onmouseover="showTip(event, 'fs88', 213)" class="i">utype</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs13', 214)" onmouseover="showTip(event, 'fs13', 214)" class="t">Type</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs19', 215)" onmouseover="showTip(event, 'fs19', 215)" class="t">Expr</span> <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs89', 216)" onmouseover="showTip(event, 'fs89', 216)" class="i">cases</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs36', 217)" onmouseover="showTip(event, 'fs36', 217)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs90', 218)" onmouseover="showTip(event, 'fs90', 218)" class="f">GetUnionCases</span> <span onmouseout="hideTip(event, 'fs88', 219)" onmouseover="showTip(event, 'fs88', 219)" class="i">utype</span>
        <span class="c">// if - union case - then - copy each field into new case - else - next case</span>

        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs62', 220)" onmouseover="showTip(event, 'fs62', 220)" class="i">arg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs63', 221)" onmouseover="showTip(event, 'fs63', 221)" class="t">Var</span>(<span class="s">&quot;x&quot;</span>, <span onmouseout="hideTip(event, 'fs88', 222)" onmouseover="showTip(event, 'fs88', 222)" class="i">utype</span>, <span class="k">false</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs91', 223)" onmouseover="showTip(event, 'fs91', 223)" class="i">useArg</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 224)" onmouseover="showTip(event, 'fs19', 224)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 225)" onmouseover="showTip(event, 'fs65', 225)" class="f">Var</span>(<span onmouseout="hideTip(event, 'fs62', 226)" onmouseover="showTip(event, 'fs62', 226)" class="i">arg</span>)

        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs92', 227)" onmouseover="showTip(event, 'fs92', 227)" class="f">genCaseTest</span> <span onmouseout="hideTip(event, 'fs93', 228)" onmouseover="showTip(event, 'fs93', 228)" class="i">case</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 229)" onmouseover="showTip(event, 'fs19', 229)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs94', 230)" onmouseover="showTip(event, 'fs94', 230)" class="f">UnionCaseTest</span> (<span onmouseout="hideTip(event, 'fs91', 231)" onmouseover="showTip(event, 'fs91', 231)" class="i">useArg</span>, <span onmouseout="hideTip(event, 'fs93', 232)" onmouseover="showTip(event, 'fs93', 232)" class="i">case</span>)
        
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs95', 233)" onmouseover="showTip(event, 'fs95', 233)" class="f">makeCopyCtor</span> (<span onmouseout="hideTip(event, 'fs96', 234)" onmouseover="showTip(event, 'fs96', 234)" class="i">ci</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs97', 235)" onmouseover="showTip(event, 'fs97', 235)" class="t">UnionCaseInfo</span>) <span class="o">=</span> 
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs98', 236)" onmouseover="showTip(event, 'fs98', 236)" class="i">copiedMembers</span> <span class="o">=</span> [ <span class="k">for</span> <span onmouseout="hideTip(event, 'fs77', 237)" onmouseover="showTip(event, 'fs77', 237)" class="i">field</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs96', 238)" onmouseover="showTip(event, 'fs96', 238)" class="i">ci</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs99', 239)" onmouseover="showTip(event, 'fs99', 239)" class="f">GetFields</span>() <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs78', 240)" onmouseover="showTip(event, 'fs78', 240)" class="f">genFieldCopy</span> <span onmouseout="hideTip(event, 'fs91', 241)" onmouseover="showTip(event, 'fs91', 241)" class="i">useArg</span> <span onmouseout="hideTip(event, 'fs77', 242)" onmouseover="showTip(event, 'fs77', 242)" class="i">field</span> ]
            <span onmouseout="hideTip(event, 'fs19', 243)" onmouseover="showTip(event, 'fs19', 243)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs100', 244)" onmouseover="showTip(event, 'fs100', 244)" class="f">NewUnionCase</span>(<span onmouseout="hideTip(event, 'fs96', 245)" onmouseover="showTip(event, 'fs96', 245)" class="i">ci</span>, <span onmouseout="hideTip(event, 'fs98', 246)" onmouseover="showTip(event, 'fs98', 246)" class="i">copiedMembers</span>)

        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs101', 247)" onmouseover="showTip(event, 'fs101', 247)" class="f">genIf</span> <span onmouseout="hideTip(event, 'fs102', 248)" onmouseover="showTip(event, 'fs102', 248)" class="i">ifCase</span> <span onmouseout="hideTip(event, 'fs103', 249)" onmouseover="showTip(event, 'fs103', 249)" class="i">thenCase</span> <span onmouseout="hideTip(event, 'fs104', 250)" onmouseover="showTip(event, 'fs104', 250)" class="i">elseCase</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 251)" onmouseover="showTip(event, 'fs19', 251)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs105', 252)" onmouseover="showTip(event, 'fs105', 252)" class="f">IfThenElse</span>(<span onmouseout="hideTip(event, 'fs102', 253)" onmouseover="showTip(event, 'fs102', 253)" class="i">ifCase</span>, <span onmouseout="hideTip(event, 'fs103', 254)" onmouseover="showTip(event, 'fs103', 254)" class="i">thenCase</span>, <span onmouseout="hideTip(event, 'fs104', 255)" onmouseover="showTip(event, 'fs104', 255)" class="i">elseCase</span>)

        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs106', 256)" onmouseover="showTip(event, 'fs106', 256)" class="f">typedFail</span> (<span onmouseout="hideTip(event, 'fs107', 257)" onmouseover="showTip(event, 'fs107', 257)" class="i">str</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs108', 258)" onmouseover="showTip(event, 'fs108', 258)" class="t">string</span>) <span class="o">=</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 259)" onmouseover="showTip(event, 'fs57', 259)" class="i">m</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs54', 260)" onmouseover="showTip(event, 'fs54', 260)" class="f">getMethod</span> &lt;@ <span onmouseout="hideTip(event, 'fs60', 261)" onmouseover="showTip(event, 'fs60', 261)" class="f">failwith</span> <span onmouseout="hideTip(event, 'fs107', 262)" onmouseover="showTip(event, 'fs107', 262)" class="i">str</span> @&gt;)<span class="o">.</span><span class="f">MakeGenericMethod</span>([|<span onmouseout="hideTip(event, 'fs88', 263)" onmouseover="showTip(event, 'fs88', 263)" class="i">utype</span>|])
            <span onmouseout="hideTip(event, 'fs19', 264)" onmouseover="showTip(event, 'fs19', 264)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs68', 265)" onmouseover="showTip(event, 'fs68', 265)" class="f">Call</span>(<span onmouseout="hideTip(event, 'fs57', 266)" onmouseover="showTip(event, 'fs57', 266)" class="i">m</span>, [ &lt;@ <span onmouseout="hideTip(event, 'fs107', 267)" onmouseover="showTip(event, 'fs107', 267)" class="i">str</span> @&gt; ])
                                                         
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs109', 268)" onmouseover="showTip(event, 'fs109', 268)" class="i">nestedIfs</span> <span class="o">=</span> 
            <span onmouseout="hideTip(event, 'fs89', 269)" onmouseover="showTip(event, 'fs89', 269)" class="i">cases</span>
            <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs73', 270)" onmouseover="showTip(event, 'fs73', 270)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs87', 271)" onmouseover="showTip(event, 'fs87', 271)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs93', 272)" onmouseover="showTip(event, 'fs93', 272)" class="i">case</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs101', 273)" onmouseover="showTip(event, 'fs101', 273)" class="f">genIf</span> (<span onmouseout="hideTip(event, 'fs92', 274)" onmouseover="showTip(event, 'fs92', 274)" class="f">genCaseTest</span> <span onmouseout="hideTip(event, 'fs93', 275)" onmouseover="showTip(event, 'fs93', 275)" class="i">case</span>) (<span onmouseout="hideTip(event, 'fs95', 276)" onmouseover="showTip(event, 'fs95', 276)" class="f">makeCopyCtor</span> <span onmouseout="hideTip(event, 'fs93', 277)" onmouseover="showTip(event, 'fs93', 277)" class="i">case</span>))
            <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs73', 278)" onmouseover="showTip(event, 'fs73', 278)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs110', 279)" onmouseover="showTip(event, 'fs110', 279)" class="f">foldBack</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs111', 280)" onmouseover="showTip(event, 'fs111', 280)" class="f">iff</span> <span onmouseout="hideTip(event, 'fs112', 281)" onmouseover="showTip(event, 'fs112', 281)" class="i">st</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs111', 282)" onmouseover="showTip(event, 'fs111', 282)" class="f">iff</span> <span onmouseout="hideTip(event, 'fs112', 283)" onmouseover="showTip(event, 'fs112', 283)" class="i">st</span>) <span class="o">&lt;|</span> (<span onmouseout="hideTip(event, 'fs106', 284)" onmouseover="showTip(event, 'fs106', 284)" class="f">typedFail</span> <span class="s">&quot;Unexpected Case in Union&quot;</span>)

        <span onmouseout="hideTip(event, 'fs19', 285)" onmouseover="showTip(event, 'fs19', 285)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 286)" onmouseover="showTip(event, 'fs69', 286)" class="f">Lambda</span>(<span onmouseout="hideTip(event, 'fs62', 287)" onmouseover="showTip(event, 'fs62', 287)" class="i">arg</span>, <span onmouseout="hideTip(event, 'fs109', 288)" onmouseover="showTip(event, 'fs109', 288)" class="i">nestedIfs</span>)
       
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs113', 289)" onmouseover="showTip(event, 'fs113', 289)" class="f">toLinq</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">I</span>,<span class="o">&#39;</span><span class="i">O</span><span class="o">&gt;</span> (<span onmouseout="hideTip(event, 'fs114', 290)" onmouseover="showTip(event, 'fs114', 290)" class="i">expr</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs19', 291)" onmouseover="showTip(event, 'fs19', 291)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">I</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">O</span><span class="o">&gt;</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs115', 292)" onmouseover="showTip(event, 'fs115', 292)" class="i">linq</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 293)" onmouseover="showTip(event, 'fs6', 293)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 294)" onmouseover="showTip(event, 'fs7', 294)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs116', 295)" onmouseover="showTip(event, 'fs116', 295)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs117', 296)" onmouseover="showTip(event, 'fs117', 296)" class="i">RuntimeHelpers</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs118', 297)" onmouseover="showTip(event, 'fs118', 297)" class="t">LeafExpressionConverter</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs119', 298)" onmouseover="showTip(event, 'fs119', 298)" class="f">QuotationToExpression</span> <span onmouseout="hideTip(event, 'fs114', 299)" onmouseover="showTip(event, 'fs114', 299)" class="i">expr</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs120', 300)" onmouseover="showTip(event, 'fs120', 300)" class="i">call</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs115', 301)" onmouseover="showTip(event, 'fs115', 301)" class="i">linq</span> <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs121', 302)" onmouseover="showTip(event, 'fs121', 302)" class="t">MethodCallExpression</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs122', 303)" onmouseover="showTip(event, 'fs122', 303)" class="i">lambda</span>  <span class="o">=</span> <span onmouseout="hideTip(event, 'fs120', 304)" onmouseover="showTip(event, 'fs120', 304)" class="i">call</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs123', 305)" onmouseover="showTip(event, 'fs123', 305)" class="i">Arguments</span><span class="o">.</span>[<span class="n">0</span>] <span class="o">:?&gt;</span> <span onmouseout="hideTip(event, 'fs124', 306)" onmouseover="showTip(event, 'fs124', 306)" class="t">LambdaExpression</span>
        <span onmouseout="hideTip(event, 'fs125', 307)" onmouseover="showTip(event, 'fs125', 307)" class="t">Expression</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs126', 308)" onmouseover="showTip(event, 'fs126', 308)" class="f">Lambda</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs127', 309)" onmouseover="showTip(event, 'fs127', 309)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">I</span>,<span class="o">&#39;</span><span class="i">O</span><span class="o">&gt;</span><span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs122', 310)" onmouseover="showTip(event, 'fs122', 310)" class="i">lambda</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs128', 311)" onmouseover="showTip(event, 'fs128', 311)" class="i">Body</span>, <span onmouseout="hideTip(event, 'fs122', 312)" onmouseover="showTip(event, 'fs122', 312)" class="i">lambda</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs129', 313)" onmouseover="showTip(event, 'fs129', 313)" class="i">Parameters</span>)

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs130', 314)" onmouseover="showTip(event, 'fs130', 314)" class="f">genrateRecordDeepCopyFunction</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> () <span class="o">:</span> (<span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">T</span>) <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 315)" onmouseover="showTip(event, 'fs18', 315)" class="i">expr</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 316)" onmouseover="showTip(event, 'fs38', 316)" class="f">genRecordCopier</span> <span onmouseout="hideTip(event, 'fs42', 317)" onmouseover="showTip(event, 'fs42', 317)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs131', 318)" onmouseover="showTip(event, 'fs131', 318)" class="i">castExpr</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs19', 319)" onmouseover="showTip(event, 'fs19', 319)" class="t">Expr</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 320)" onmouseover="showTip(event, 'fs18', 320)" class="i">expr</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs19', 321)" onmouseover="showTip(event, 'fs19', 321)" class="t">Expr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs132', 322)" onmouseover="showTip(event, 'fs132', 322)" class="f">Cast</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs133', 323)" onmouseover="showTip(event, 'fs133', 323)" class="i">compiledExpr</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs131', 324)" onmouseover="showTip(event, 'fs131', 324)" class="i">castExpr</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs113', 325)" onmouseover="showTip(event, 'fs113', 325)" class="f">toLinq</span>)<span class="o">.</span><span class="f">Compile</span>()
        <span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs134', 326)" onmouseover="showTip(event, 'fs134', 326)" class="i">v</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs133', 327)" onmouseover="showTip(event, 'fs133', 327)" class="i">compiledExpr</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs135', 328)" onmouseover="showTip(event, 'fs135', 328)" class="f">Invoke</span>(<span onmouseout="hideTip(event, 'fs134', 329)" onmouseover="showTip(event, 'fs134', 329)" class="i">v</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Reflection</div>
<div class="tip" id="fs3">namespace System.ComponentModel</div>
<div class="tip" id="fs4">namespace System.Linq</div>
<div class="tip" id="fs5">namespace System.Linq.Expressions</div>
<div class="tip" id="fs6">namespace Microsoft</div>
<div class="tip" id="fs7">namespace Microsoft.FSharp</div>
<div class="tip" id="fs8">namespace Microsoft.FSharp.Reflection</div>
<div class="tip" id="fs9">namespace Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs10">type FSharpType =<br />&#160;&#160;static member GetExceptionFields : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetFunctionElements : functionType:Type -&gt; Type * Type<br />&#160;&#160;static member GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetTupleElements : tupleType:Type -&gt; Type []<br />&#160;&#160;static member GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []<br />&#160;&#160;static member IsExceptionRepresentation : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsFunction : typ:Type -&gt; bool<br />&#160;&#160;static member IsModule : typ:Type -&gt; bool<br />&#160;&#160;static member IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsTuple : typ:Type -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpType</div>
<div class="tip" id="fs11">val IsOption : stype:Type -&gt; bool<br /><br />Full name: Script.FSharpType.IsOption</div>
<div class="tip" id="fs12">val stype : Type</div>
<div class="tip" id="fs13">type Type =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Assembly : Assembly<br />&#160;&#160;member AssemblyQualifiedName : string<br />&#160;&#160;member Attributes : TypeAttributes<br />&#160;&#160;member BaseType : Type<br />&#160;&#160;member ContainsGenericParameters : bool<br />&#160;&#160;member DeclaringMethod : MethodBase<br />&#160;&#160;member DeclaringType : Type<br />&#160;&#160;member Equals : o:obj -&gt; bool + 1 overload<br />&#160;&#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&gt; Type[]<br />&#160;&#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&gt; MemberInfo[]<br />&#160;&#160;...<br /><br />Full name: System.Type</div>
<div class="tip" id="fs14">property MemberInfo.Name: string</div>
<div class="tip" id="fs15">module RecordCloning<br /><br />from Script</div>
<div class="tip" id="fs16">val application : prms:Expr -&gt; expr:Expr -&gt; Expr<br /><br />Full name: Script.RecordCloning.application</div>
<div class="tip" id="fs17">val prms : Expr</div>
<div class="tip" id="fs18">val expr : Expr</div>
<div class="tip" id="fs19">Multiple items<br />type Expr =<br />&#160;&#160;override Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetFreeVars : unit -&gt; seq&lt;Var&gt;<br />&#160;&#160;member Substitute : substitution:(Var -&gt; Expr option) -&gt; Expr<br />&#160;&#160;member ToString : full:bool -&gt; string<br />&#160;&#160;member CustomAttributes : Expr list<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member AddressOf : target:Expr -&gt; Expr<br />&#160;&#160;static member AddressSet : target:Expr * value:Expr -&gt; Expr<br />&#160;&#160;static member Application : functionExpr:Expr * argument:Expr -&gt; Expr<br />&#160;&#160;static member Applications : functionExpr:Expr * arguments:Expr list list -&gt; Expr<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Quotations.Expr<br /><br />--------------------<br />type Expr&lt;&#39;T&gt; =<br />&#160;&#160;inherit Expr<br />&#160;&#160;member Raw : Expr<br /><br />Full name: Microsoft.FSharp.Quotations.Expr&lt;_&gt;</div>
<div class="tip" id="fs20">static member Expr.Application : functionExpr:Expr * argument:Expr -&gt; Expr</div>
<div class="tip" id="fs21">val coerse : typ:Type -&gt; expr:Expr -&gt; Expr<br /><br />Full name: Script.RecordCloning.coerse</div>
<div class="tip" id="fs22">val typ : Type</div>
<div class="tip" id="fs23">static member Expr.Coerce : source:Expr * target:Type -&gt; Expr</div>
<div class="tip" id="fs24">val newrec : typ:Type -&gt; args:Expr list -&gt; Expr<br /><br />Full name: Script.RecordCloning.newrec</div>
<div class="tip" id="fs25">val args : Expr list</div>
<div class="tip" id="fs26">static member Expr.NewRecord : recordType:Type * elements:Expr list -&gt; Expr</div>
<div class="tip" id="fs27">val t : Type</div>
<div class="tip" id="fs28">property Type.IsGenericType: bool</div>
<div class="tip" id="fs29">Type.GetGenericTypeDefinition() : Type</div>
<div class="tip" id="fs30">val typedefof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typedefof</div>
<div class="tip" id="fs31">Multiple items<br />module Map<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Map&lt;&#39;Key,&#39;Value (requires comparison)&gt; =<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface ICollection&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface IDictionary&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member Add : key:&#39;Key * value:&#39;Value -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member ContainsKey : key:&#39;Key -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member Remove : key:&#39;Key -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Map&lt;_,_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;</div>
<div class="tip" id="fs32">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs33">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs34">val copyThing : mtype:Type -&gt; Expr<br /><br />Full name: Script.RecordCloning.copyThing</div>
<div class="tip" id="fs35">val mtype : Type</div>
<div class="tip" id="fs36">Multiple items<br />module FSharpType<br /><br />from Script<br /><br />--------------------<br />type FSharpType =<br />&#160;&#160;static member GetExceptionFields : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetFunctionElements : functionType:Type -&gt; Type * Type<br />&#160;&#160;static member GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetTupleElements : tupleType:Type -&gt; Type []<br />&#160;&#160;static member GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []<br />&#160;&#160;static member IsExceptionRepresentation : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsFunction : typ:Type -&gt; bool<br />&#160;&#160;static member IsModule : typ:Type -&gt; bool<br />&#160;&#160;static member IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsTuple : typ:Type -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpType</div>
<div class="tip" id="fs37">static member FSharpType.IsRecord : typ:Type * ?allowAccessToPrivateRepresentation:bool -&gt; bool<br />static member FSharpType.IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool</div>
<div class="tip" id="fs38">val genRecordCopier : rtype:Type -&gt; Expr<br /><br />Full name: Script.RecordCloning.genRecordCopier</div>
<div class="tip" id="fs39">static member FSharpType.IsUnion : typ:Type * ?allowAccessToPrivateRepresentation:bool -&gt; bool<br />static member FSharpType.IsUnion : typ:Type * ?bindingFlags:BindingFlags -&gt; bool</div>
<div class="tip" id="fs40">val genUnionCopier : utype:Type -&gt; Expr<br /><br />Full name: Script.RecordCloning.genUnionCopier</div>
<div class="tip" id="fs41">property Type.IsValueType: bool</div>
<div class="tip" id="fs42">val typeof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs43">Multiple items<br />type String =<br />&#160;&#160;new : value:char -&gt; string + 7 overloads<br />&#160;&#160;member Chars : int -&gt; char<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;member Contains : value:string -&gt; bool<br />&#160;&#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&gt; unit<br />&#160;&#160;member EndsWith : value:string -&gt; bool + 2 overloads<br />&#160;&#160;member Equals : obj:obj -&gt; bool + 2 overloads<br />&#160;&#160;member GetEnumerator : unit -&gt; CharEnumerator<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;...<br /><br />Full name: System.String<br /><br />--------------------<br />String(value: nativeptr&lt;char&gt;) : unit<br />String(value: nativeptr&lt;sbyte&gt;) : unit<br />String(value: char []) : unit<br />String(c: char, count: int) : unit<br />String(value: nativeptr&lt;char&gt;, startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int) : unit<br />String(value: char [], startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int, enc: Text.Encoding) : unit</div>
<div class="tip" id="fs44">val getIdFunc : itype:Type -&gt; Expr<br /><br />Full name: Script.RecordCloning.getIdFunc</div>
<div class="tip" id="fs45">property Type.IsArray: bool</div>
<div class="tip" id="fs46">val genArrayCopier : atype:Type -&gt; Expr<br /><br />Full name: Script.RecordCloning.genArrayCopier</div>
<div class="tip" id="fs47">active recognizer IsMapType: Type -&gt; Type option<br /><br />Full name: Script.RecordCloning.( |IsMapType|_| )</div>
<div class="tip" id="fs48">Multiple items<br />type Object =<br />&#160;&#160;new : unit -&gt; obj<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetType : unit -&gt; Type<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;static member Equals : objA:obj * objB:obj -&gt; bool<br />&#160;&#160;static member ReferenceEquals : objA:obj * objB:obj -&gt; bool<br /><br />Full name: System.Object<br /><br />--------------------<br />Object() : unit</div>
<div class="tip" id="fs49">val failwithf : format:Printf.StringFormat&lt;&#39;T,&#39;Result&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.failwithf</div>
<div class="tip" id="fs50">Type.ToString() : string</div>
<div class="tip" id="fs51">val X : &#39;T<br /><br />Full name: Script.RecordCloning.X</div>
<div class="tip" id="fs52">module Unchecked<br /><br />from Microsoft.FSharp.Core.Operators</div>
<div class="tip" id="fs53">val defaultof&lt;&#39;T&gt; : &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.Unchecked.defaultof</div>
<div class="tip" id="fs54">val getMethod : _arg1:Expr -&gt; MethodInfo<br /><br />Full name: Script.RecordCloning.getMethod</div>
<div class="tip" id="fs55">module Patterns<br /><br />from Microsoft.FSharp.Quotations</div>
<div class="tip" id="fs56">active recognizer Call: Expr -&gt; (Expr option * MethodInfo * Expr list) option<br /><br />Full name: Microsoft.FSharp.Quotations.Patterns.( |Call|_| )</div>
<div class="tip" id="fs57">val m : MethodInfo</div>
<div class="tip" id="fs58">property MethodBase.IsGenericMethod: bool</div>
<div class="tip" id="fs59">MethodInfo.GetGenericMethodDefinition() : MethodInfo</div>
<div class="tip" id="fs60">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs61">val itype : Type</div>
<div class="tip" id="fs62">val arg : Var</div>
<div class="tip" id="fs63">Multiple items<br />type Var =<br />&#160;&#160;interface IComparable<br />&#160;&#160;new : name:string * typ:Type * ?isMutable:bool -&gt; Var<br />&#160;&#160;member IsMutable : bool<br />&#160;&#160;member Name : string<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member Global : name:string * typ:Type -&gt; Var<br /><br />Full name: Microsoft.FSharp.Quotations.Var<br /><br />--------------------<br />new : name:string * typ:Type * ?isMutable:bool -&gt; Var</div>
<div class="tip" id="fs64">val argExpr : Expr</div>
<div class="tip" id="fs65">static member Expr.Var : variable:Var -&gt; Expr</div>
<div class="tip" id="fs66">val func : Expr</div>
<div class="tip" id="fs67">val id : x:&#39;T -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.id</div>
<div class="tip" id="fs68">static member Expr.Call : methodInfo:MethodInfo * arguments:Expr list -&gt; Expr<br />static member Expr.Call : obj:Expr * methodInfo:MethodInfo * arguments:Expr list -&gt; Expr</div>
<div class="tip" id="fs69">static member Expr.Lambda : parameter:Var * body:Expr -&gt; Expr</div>
<div class="tip" id="fs70">val rtype : Type</div>
<div class="tip" id="fs71">val newrec : Expr</div>
<div class="tip" id="fs72">static member FSharpType.GetRecordFields : recordType:Type * ?allowAccessToPrivateRepresentation:bool -&gt; PropertyInfo []<br />static member FSharpType.GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []</div>
<div class="tip" id="fs73">type Array =<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CopyTo : array:Array * index:int -&gt; unit + 1 overload<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator<br />&#160;&#160;member GetLength : dimension:int -&gt; int<br />&#160;&#160;member GetLongLength : dimension:int -&gt; int64<br />&#160;&#160;member GetLowerBound : dimension:int -&gt; int<br />&#160;&#160;member GetUpperBound : dimension:int -&gt; int<br />&#160;&#160;member GetValue : [&lt;ParamArray&gt;] indices:int[] -&gt; obj + 7 overloads<br />&#160;&#160;member Initialize : unit -&gt; unit<br />&#160;&#160;member IsFixedSize : bool<br />&#160;&#160;...<br /><br />Full name: System.Array</div>
<div class="tip" id="fs74">val toList : array:&#39;T [] -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.Array.toList</div>
<div class="tip" id="fs75">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs76">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.map</div>
<div class="tip" id="fs77">val field : PropertyInfo</div>
<div class="tip" id="fs78">val genFieldCopy : argExpr:Expr -&gt; field:PropertyInfo -&gt; Expr<br /><br />Full name: Script.RecordCloning.genFieldCopy</div>
<div class="tip" id="fs79">type PropertyInfo =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Attributes : PropertyAttributes<br />&#160;&#160;member CanRead : bool<br />&#160;&#160;member CanWrite : bool<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetAccessors : unit -&gt; MethodInfo[] + 1 overload<br />&#160;&#160;member GetConstantValue : unit -&gt; obj<br />&#160;&#160;member GetGetMethod : unit -&gt; MethodInfo + 1 overload<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetIndexParameters : unit -&gt; ParameterInfo[]<br />&#160;&#160;member GetOptionalCustomModifiers : unit -&gt; Type[]<br />&#160;&#160;...<br /><br />Full name: System.Reflection.PropertyInfo</div>
<div class="tip" id="fs80">val pval : Expr</div>
<div class="tip" id="fs81">static member Expr.PropertyGet : property:PropertyInfo * ?indexerArgs:Expr list -&gt; Expr<br />static member Expr.PropertyGet : obj:Expr * property:PropertyInfo * ?indexerArgs:Expr list -&gt; Expr</div>
<div class="tip" id="fs82">property PropertyInfo.PropertyType: Type</div>
<div class="tip" id="fs83">val atype : Type</div>
<div class="tip" id="fs84">val etype : Type</div>
<div class="tip" id="fs85">Type.GetElementType() : Type</div>
<div class="tip" id="fs86">val copyfun : Expr</div>
<div class="tip" id="fs87">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; array:&#39;T [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.map</div>
<div class="tip" id="fs88">val utype : Type</div>
<div class="tip" id="fs89">val cases : UnionCaseInfo []</div>
<div class="tip" id="fs90">static member FSharpType.GetUnionCases : unionType:Type * ?allowAccessToPrivateRepresentation:bool -&gt; UnionCaseInfo []<br />static member FSharpType.GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []</div>
<div class="tip" id="fs91">val useArg : Expr</div>
<div class="tip" id="fs92">val genCaseTest : (UnionCaseInfo -&gt; Expr)</div>
<div class="tip" id="fs93">val case : UnionCaseInfo</div>
<div class="tip" id="fs94">static member Expr.UnionCaseTest : source:Expr * unionCase:UnionCaseInfo -&gt; Expr</div>
<div class="tip" id="fs95">val makeCopyCtor : (UnionCaseInfo -&gt; Expr)</div>
<div class="tip" id="fs96">val ci : UnionCaseInfo</div>
<div class="tip" id="fs97">type UnionCaseInfo<br />member GetCustomAttributes : unit -&gt; obj []<br />member GetCustomAttributes : attributeType:Type -&gt; obj []<br />member GetCustomAttributesData : unit -&gt; IList&lt;CustomAttributeData&gt;<br />member GetFields : unit -&gt; PropertyInfo []<br />member DeclaringType : Type<br />member Name : string<br />member Tag : int<br /><br />Full name: Microsoft.FSharp.Reflection.UnionCaseInfo</div>
<div class="tip" id="fs98">val copiedMembers : Expr list</div>
<div class="tip" id="fs99">member UnionCaseInfo.GetFields : unit -&gt; PropertyInfo []</div>
<div class="tip" id="fs100">static member Expr.NewUnionCase : unionCase:UnionCaseInfo * arguments:Expr list -&gt; Expr</div>
<div class="tip" id="fs101">val genIf : (Expr -&gt; Expr -&gt; Expr -&gt; Expr)</div>
<div class="tip" id="fs102">val ifCase : Expr</div>
<div class="tip" id="fs103">val thenCase : Expr</div>
<div class="tip" id="fs104">val elseCase : Expr</div>
<div class="tip" id="fs105">static member Expr.IfThenElse : guard:Expr * thenExpr:Expr * elseExpr:Expr -&gt; Expr</div>
<div class="tip" id="fs106">val typedFail : (string -&gt; Expr)</div>
<div class="tip" id="fs107">val str : string</div>
<div class="tip" id="fs108">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs109">val nestedIfs : Expr</div>
<div class="tip" id="fs110">val foldBack : folder:(&#39;T -&gt; &#39;State -&gt; &#39;State) -&gt; array:&#39;T [] -&gt; state:&#39;State -&gt; &#39;State<br /><br />Full name: Microsoft.FSharp.Collections.Array.foldBack</div>
<div class="tip" id="fs111">val iff : (Expr -&gt; Expr)</div>
<div class="tip" id="fs112">val st : Expr</div>
<div class="tip" id="fs113">val toLinq : expr:Expr&lt;(&#39;I -&gt; &#39;O)&gt; -&gt; Expression&lt;Func&lt;&#39;I,&#39;O&gt;&gt;<br /><br />Full name: Script.RecordCloning.toLinq</div>
<div class="tip" id="fs114">val expr : Expr&lt;(&#39;I -&gt; &#39;O)&gt;</div>
<div class="tip" id="fs115">val linq : Expression</div>
<div class="tip" id="fs116">namespace Microsoft.FSharp.Linq</div>
<div class="tip" id="fs117">namespace Microsoft.FSharp.Linq.RuntimeHelpers</div>
<div class="tip" id="fs118">module LeafExpressionConverter<br /><br />from Microsoft.FSharp.Linq.RuntimeHelpers</div>
<div class="tip" id="fs119">val QuotationToExpression : Expr -&gt; Expression<br /><br />Full name: Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter.QuotationToExpression</div>
<div class="tip" id="fs120">val call : MethodCallExpression</div>
<div class="tip" id="fs121">type MethodCallExpression =<br />&#160;&#160;inherit Expression<br />&#160;&#160;member Arguments : ReadOnlyCollection&lt;Expression&gt;<br />&#160;&#160;member Method : MethodInfo<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Object : Expression<br />&#160;&#160;member Type : Type<br />&#160;&#160;member Update : object:Expression * arguments:IEnumerable&lt;Expression&gt; -&gt; MethodCallExpression<br /><br />Full name: System.Linq.Expressions.MethodCallExpression</div>
<div class="tip" id="fs122">val lambda : LambdaExpression</div>
<div class="tip" id="fs123">property MethodCallExpression.Arguments: Collections.ObjectModel.ReadOnlyCollection&lt;Expression&gt;</div>
<div class="tip" id="fs124">type LambdaExpression =<br />&#160;&#160;inherit Expression<br />&#160;&#160;member Body : Expression<br />&#160;&#160;member Compile : unit -&gt; Delegate + 1 overload<br />&#160;&#160;member CompileToMethod : method:MethodBuilder -&gt; unit + 1 overload<br />&#160;&#160;member Name : string<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Parameters : ReadOnlyCollection&lt;ParameterExpression&gt;<br />&#160;&#160;member ReturnType : Type<br />&#160;&#160;member TailCall : bool<br />&#160;&#160;member Type : Type<br /><br />Full name: System.Linq.Expressions.LambdaExpression</div>
<div class="tip" id="fs125">Multiple items<br />type Expression =<br />&#160;&#160;member CanReduce : bool<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Reduce : unit -&gt; Expression<br />&#160;&#160;member ReduceAndCheck : unit -&gt; Expression<br />&#160;&#160;member ReduceExtensions : unit -&gt; Expression<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member Add : left:Expression * right:Expression -&gt; BinaryExpression + 1 overload<br />&#160;&#160;static member AddAssign : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;static member AddAssignChecked : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;...<br /><br />Full name: System.Linq.Expressions.Expression<br /><br />--------------------<br />type Expression&lt;&#39;TDelegate&gt; =<br />&#160;&#160;inherit LambdaExpression<br />&#160;&#160;member Compile : unit -&gt; &#39;TDelegate + 1 overload<br />&#160;&#160;member Update : body:Expression * parameters:IEnumerable&lt;ParameterExpression&gt; -&gt; Expression&lt;&#39;TDelegate&gt;<br /><br />Full name: System.Linq.Expressions.Expression&lt;_&gt;</div>
<div class="tip" id="fs126">Expression.Lambda(body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, name: string, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(delegateType: Type, body: Expression, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(delegateType: Type, body: Expression, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, tailCall: bool, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda(body: Expression, tailCall: bool, [&lt;ParamArray&gt;] parameters: ParameterExpression []) : LambdaExpression<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Expression.Lambda&lt;&#39;TDelegate&gt;(body: Expression, name: string, parameters: Collections.Generic.IEnumerable&lt;ParameterExpression&gt;) : Expression&lt;&#39;TDelegate&gt;<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>
<div class="tip" id="fs127">Multiple items<br />type Func&lt;&#39;TResult&gt; =<br />&#160;&#160;delegate of unit -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;T16,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 * &#39;T16 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;</div>
<div class="tip" id="fs128">property LambdaExpression.Body: Expression</div>
<div class="tip" id="fs129">property LambdaExpression.Parameters: Collections.ObjectModel.ReadOnlyCollection&lt;ParameterExpression&gt;</div>
<div class="tip" id="fs130">val genrateRecordDeepCopyFunction : unit -&gt; (&#39;T -&gt; &#39;T)<br /><br />Full name: Script.RecordCloning.genrateRecordDeepCopyFunction</div>
<div class="tip" id="fs131">val castExpr : Expr&lt;(&#39;T -&gt; &#39;T)&gt;</div>
<div class="tip" id="fs132">static member Expr.Cast : source:Expr -&gt; Expr&lt;&#39;T&gt;</div>
<div class="tip" id="fs133">val compiledExpr : Func&lt;&#39;T,&#39;T&gt;</div>
<div class="tip" id="fs134">val v : &#39;T</div>
<div class="tip" id="fs135">Func.Invoke(arg: &#39;T) : &#39;T</div>

