<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">module</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">Graphs</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">Graph</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span> <span class="k">when</span> <span class="o">&#39;</span><span class="i">a</span><span class="o">:</span> <span class="i">comparison</span><span class="o">&gt;</span> <span class="o">=</span> 
    {   
        <span class="c">/// Element to attach to</span>
        <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Current</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span>
        <span class="c">/// (From --&gt; To) Set</span>
        <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">Edges</span><span class="o">:</span> (<span class="o">&#39;</span><span class="i">a</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">a</span>) <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">Set</span>
    }

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs2', 6)" onmouseover="showTip(event, 'fs2', 6)" class="t">Graph</span>
    <span class="k">with</span>
        <span class="c">// N &lt;== a</span>
        <span class="k">static</span> <span class="k">member</span> <span class="i">op_LessEqualsEquals</span> (<span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">l</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 8)" onmouseover="showTip(event, 'fs2', 8)" class="t">Graph</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="i">r</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 10)" onmouseover="showTip(event, 'fs2', 10)" class="t">Graph</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> <span class="o">=</span>
            { <span class="i">Current</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="i">r</span>; <span class="i">Edges</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 12)" onmouseover="showTip(event, 'fs6', 12)" class="i">l</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 13)" onmouseover="showTip(event, 'fs4', 13)" class="i">Edges</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs5', 14)" onmouseover="showTip(event, 'fs5', 14)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 15)" onmouseover="showTip(event, 'fs8', 15)" class="f">add</span> (<span onmouseout="hideTip(event, 'fs7', 16)" onmouseover="showTip(event, 'fs7', 16)" class="i">r</span>, <span onmouseout="hideTip(event, 'fs6', 17)" onmouseover="showTip(event, 'fs6', 17)" class="i">l</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 18)" onmouseover="showTip(event, 'fs3', 18)" class="i">Current</span>) }
        <span class="c">// N ==&gt; a</span>
        <span class="k">static</span> <span class="k">member</span> <span class="i">op_EqualsEqualsGreater</span> (<span onmouseout="hideTip(event, 'fs6', 19)" onmouseover="showTip(event, 'fs6', 19)" class="i">l</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 20)" onmouseover="showTip(event, 'fs2', 20)" class="t">Graph</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs7', 21)" onmouseover="showTip(event, 'fs7', 21)" class="i">r</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 22)" onmouseover="showTip(event, 'fs2', 22)" class="t">Graph</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> <span class="o">=</span>
            { <span class="i">Current</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 23)" onmouseover="showTip(event, 'fs7', 23)" class="i">r</span>; <span class="i">Edges</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 24)" onmouseover="showTip(event, 'fs6', 24)" class="i">l</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 25)" onmouseover="showTip(event, 'fs4', 25)" class="i">Edges</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs5', 26)" onmouseover="showTip(event, 'fs5', 26)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 27)" onmouseover="showTip(event, 'fs8', 27)" class="f">add</span> (<span onmouseout="hideTip(event, 'fs6', 28)" onmouseover="showTip(event, 'fs6', 28)" class="i">l</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 29)" onmouseover="showTip(event, 'fs3', 29)" class="i">Current</span>, <span onmouseout="hideTip(event, 'fs7', 30)" onmouseover="showTip(event, 'fs7', 30)" class="i">r</span>) }
<span class="c">/// Pseudo Graph Record Type Constructor</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 31)" onmouseover="showTip(event, 'fs9', 31)" class="f">Graph</span> (<span onmouseout="hideTip(event, 'fs10', 32)" onmouseover="showTip(event, 'fs10', 32)" class="i">inval</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span>) <span class="o">=</span> { <span class="i">Current</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 33)" onmouseover="showTip(event, 'fs10', 33)" class="i">inval</span>; <span class="i">Edges</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 34)" onmouseover="showTip(event, 'fs5', 34)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 35)" onmouseover="showTip(event, 'fs11', 35)" class="i">empty</span> }

<span class="c">/// Combines all graphs</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 36)" onmouseover="showTip(event, 'fs12', 36)" class="f">Combine</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 37)" onmouseover="showTip(event, 'fs13', 37)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 38)" onmouseover="showTip(event, 'fs14', 38)" class="f">reduce</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs15', 39)" onmouseover="showTip(event, 'fs15', 39)" class="i">l</span> <span onmouseout="hideTip(event, 'fs16', 40)" onmouseover="showTip(event, 'fs16', 40)" class="i">r</span> <span class="k">-&gt;</span> { <span onmouseout="hideTip(event, 'fs16', 41)" onmouseover="showTip(event, 'fs16', 41)" class="i">r</span> <span class="k">with</span> <span class="i">Edges</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 42)" onmouseover="showTip(event, 'fs5', 42)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 43)" onmouseover="showTip(event, 'fs17', 43)" class="f">union</span> <span onmouseout="hideTip(event, 'fs15', 44)" onmouseover="showTip(event, 'fs15', 44)" class="i">l</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 45)" onmouseover="showTip(event, 'fs18', 45)" class="i">Edges</span> <span onmouseout="hideTip(event, 'fs16', 46)" onmouseover="showTip(event, 'fs16', 46)" class="i">r</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 47)" onmouseover="showTip(event, 'fs18', 47)" class="i">Edges</span> })

<span class="c">// Example</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 48)" onmouseover="showTip(event, 'fs19', 48)" class="i">totalGraph</span> <span class="o">=</span> 
    [
        <span onmouseout="hideTip(event, 'fs9', 49)" onmouseover="showTip(event, 'fs9', 49)" class="f">Graph</span> <span class="n">2</span> <span class="o">&lt;==</span> <span class="n">1</span>
        <span onmouseout="hideTip(event, 'fs9', 50)" onmouseover="showTip(event, 'fs9', 50)" class="f">Graph</span> <span class="n">2</span> <span class="o">&lt;==</span> <span class="n">1</span> <span class="o">==&gt;</span> <span class="n">3</span>
        <span onmouseout="hideTip(event, 'fs9', 51)" onmouseover="showTip(event, 'fs9', 51)" class="f">Graph</span> <span class="n">2</span> <span class="o">==&gt;</span> <span class="n">4</span> <span class="o">&lt;==</span> <span class="n">3</span> <span class="o">==&gt;</span> <span class="n">5</span>
        <span onmouseout="hideTip(event, 'fs9', 52)" onmouseover="showTip(event, 'fs9', 52)" class="f">Graph</span> <span class="n">2</span> <span class="o">==&gt;</span> <span class="n">4</span> <span class="o">&lt;==</span> <span class="n">3</span> <span class="o">&lt;==</span> <span class="n">8</span>
        <span onmouseout="hideTip(event, 'fs9', 53)" onmouseover="showTip(event, 'fs9', 53)" class="f">Graph</span> <span class="n">4</span> <span class="o">==&gt;</span> <span class="n">6</span>
    ] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs12', 54)" onmouseover="showTip(event, 'fs12', 54)" class="f">Combine</span>

<span class="c">// val totalGraph : Graph&lt;int&gt; =</span>
<span class="c">//  {Current = 6;</span>
<span class="c">//   Edges = set [(1, 2); (1, 3); (2, 4); (3, 4); (3, 5); (4, 6); (8, 3)];}</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">module Graphs</div>
<div class="tip" id="fs2">type Graph&lt;&#39;a (requires comparison)&gt; =<br />&#160;&#160;{Current: &#39;a;<br />&#160;&#160;&#160;Edges: Set&lt;&#39;a * &#39;a&gt;;}<br />&#160;&#160;static member ( ==&gt; ) : l:Graph&lt;&#39;a&gt; * r:&#39;a -&gt; Graph&lt;&#39;a&gt;<br />&#160;&#160;static member ( &lt;== ) : l:Graph&lt;&#39;a&gt; * r:&#39;a -&gt; Graph&lt;&#39;a&gt;<br /><br />Full name: Graphs.Graph&lt;_&gt;</div>
<div class="tip" id="fs3">Graph.Current: &#39;a<br /><em><br /><br />&#160;Element to attach to</em></div>
<div class="tip" id="fs4">Graph.Edges: Set&lt;&#39;a * &#39;a&gt;<br /><em><br /><br />&#160;(From --&gt; To) Set</em></div>
<div class="tip" id="fs5">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;member IsProperSupersetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Set&lt;_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs6">val l : Graph&lt;&#39;a&gt; (requires comparison)</div>
<div class="tip" id="fs7">val r : &#39;a (requires comparison)</div>
<div class="tip" id="fs8">val add : value:&#39;T -&gt; set:Set&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.add</div>
<div class="tip" id="fs9">Multiple items<br />val Graph : inval:&#39;a -&gt; Graph&lt;&#39;a&gt; (requires comparison)<br /><br />Full name: Graphs.Graph<br /><em><br /><br />&#160;Pseudo Graph Record Type Constructor</em><br /><br />--------------------<br />type Graph&lt;&#39;a (requires comparison)&gt; =<br />&#160;&#160;{Current: &#39;a;<br />&#160;&#160;&#160;Edges: Set&lt;&#39;a * &#39;a&gt;;}<br />&#160;&#160;static member ( ==&gt; ) : l:Graph&lt;&#39;a&gt; * r:&#39;a -&gt; Graph&lt;&#39;a&gt;<br />&#160;&#160;static member ( &lt;== ) : l:Graph&lt;&#39;a&gt; * r:&#39;a -&gt; Graph&lt;&#39;a&gt;<br /><br />Full name: Graphs.Graph&lt;_&gt;</div>
<div class="tip" id="fs10">val inval : &#39;a (requires comparison)</div>
<div class="tip" id="fs11">val empty&lt;&#39;T (requires comparison)&gt; : Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.empty</div>
<div class="tip" id="fs12">val Combine : (Graph&lt;int&gt; list -&gt; Graph&lt;int&gt;)<br /><br />Full name: Graphs.Combine<br /><em><br /><br />&#160;Combines all graphs</em></div>
<div class="tip" id="fs13">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs14">val reduce : reduction:(&#39;T -&gt; &#39;T -&gt; &#39;T) -&gt; source:seq&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Collections.Seq.reduce</div>
<div class="tip" id="fs15">val l : Graph&lt;int&gt;</div>
<div class="tip" id="fs16">val r : Graph&lt;int&gt;</div>
<div class="tip" id="fs17">val union : set1:Set&lt;&#39;T&gt; -&gt; set2:Set&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.union</div>
<div class="tip" id="fs18">Graph.Edges: Set&lt;int * int&gt;<br /><em><br /><br />&#160;(From --&gt; To) Set</em></div>
<div class="tip" id="fs19">val totalGraph : Graph&lt;int&gt;<br /><br />Full name: Graphs.totalGraph</div>

