<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span id="fst1" onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1, document.getElementById('fst1'))" class="omitted">(Parser Monad omitted. Code available here: https://bitbucket.org/ZachBray/parsad)</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">number</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">n</span> <span class="o">=</span> <span class="s">&quot;[0-9]+&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">Int32</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">Parse</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">n</span>
}

<span class="k">let</span> (<span class="o">&lt;+&gt;</span>) <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">x</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="f">y</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 10)" onmouseover="showTip(event, 'fs3', 10)" class="i">parser</span> {
   <span class="c">// Left associativity is by default for infix operators</span>
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="i">x</span>, _, <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">y</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="f">x</span>, <span class="s">&quot;\+&quot;</span>, <span onmouseout="hideTip(event, 'fs8', 14)" onmouseover="showTip(event, 'fs8', 14)" class="f">y</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="i">y</span>
}

<span class="k">let</span> (<span class="o">&lt;-&gt;</span>) <span onmouseout="hideTip(event, 'fs7', 17)" onmouseover="showTip(event, 'fs7', 17)" class="f">x</span> <span onmouseout="hideTip(event, 'fs8', 18)" onmouseover="showTip(event, 'fs8', 18)" class="f">y</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 19)" onmouseover="showTip(event, 'fs3', 19)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs9', 20)" onmouseover="showTip(event, 'fs9', 20)" class="i">x</span>, _, <span onmouseout="hideTip(event, 'fs10', 21)" onmouseover="showTip(event, 'fs10', 21)" class="i">y</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 22)" onmouseover="showTip(event, 'fs7', 22)" class="f">x</span>, <span class="s">&quot;\-&quot;</span>, <span onmouseout="hideTip(event, 'fs8', 23)" onmouseover="showTip(event, 'fs8', 23)" class="f">y</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs9', 24)" onmouseover="showTip(event, 'fs9', 24)" class="i">x</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs10', 25)" onmouseover="showTip(event, 'fs10', 25)" class="i">y</span>
}

<span class="k">let</span> (<span class="o">&lt;*&gt;</span>) <span onmouseout="hideTip(event, 'fs7', 26)" onmouseover="showTip(event, 'fs7', 26)" class="f">x</span> <span onmouseout="hideTip(event, 'fs8', 27)" onmouseover="showTip(event, 'fs8', 27)" class="f">y</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 28)" onmouseover="showTip(event, 'fs3', 28)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs9', 29)" onmouseover="showTip(event, 'fs9', 29)" class="i">x</span>, _, <span onmouseout="hideTip(event, 'fs10', 30)" onmouseover="showTip(event, 'fs10', 30)" class="i">y</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 31)" onmouseover="showTip(event, 'fs7', 31)" class="f">x</span>, <span class="s">&quot;\*&quot;</span>, <span onmouseout="hideTip(event, 'fs8', 32)" onmouseover="showTip(event, 'fs8', 32)" class="f">y</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs9', 33)" onmouseover="showTip(event, 'fs9', 33)" class="i">x</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs10', 34)" onmouseover="showTip(event, 'fs10', 34)" class="i">y</span>
}

<span class="k">let</span> (<span class="o">&lt;/&gt;</span>) <span onmouseout="hideTip(event, 'fs7', 35)" onmouseover="showTip(event, 'fs7', 35)" class="f">x</span> <span onmouseout="hideTip(event, 'fs8', 36)" onmouseover="showTip(event, 'fs8', 36)" class="f">y</span> () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 37)" onmouseover="showTip(event, 'fs3', 37)" class="i">parser</span> {
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs9', 38)" onmouseover="showTip(event, 'fs9', 38)" class="i">x</span>, _, <span onmouseout="hideTip(event, 'fs10', 39)" onmouseover="showTip(event, 'fs10', 39)" class="i">y</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 40)" onmouseover="showTip(event, 'fs7', 40)" class="f">x</span>, <span class="s">&quot;/&quot;</span>,<span onmouseout="hideTip(event, 'fs8', 41)" onmouseover="showTip(event, 'fs8', 41)" class="f">y</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs9', 42)" onmouseover="showTip(event, 'fs9', 42)" class="i">x</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs10', 43)" onmouseover="showTip(event, 'fs10', 43)" class="i">y</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 44)" onmouseover="showTip(event, 'fs11', 44)" class="f">bracketed</span> (<span onmouseout="hideTip(event, 'fs12', 45)" onmouseover="showTip(event, 'fs12', 45)" class="f">f</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs13', 46)" onmouseover="showTip(event, 'fs13', 46)" class="t">unit</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs14', 47)" onmouseover="showTip(event, 'fs14', 47)" class="t">Parser</span>) () <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 48)" onmouseover="showTip(event, 'fs3', 48)" class="i">parser</span>{
   <span class="k">let!</span> _ <span class="o">=</span> <span class="s">&quot;\(&quot;</span>
   <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs15', 49)" onmouseover="showTip(event, 'fs15', 49)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 50)" onmouseover="showTip(event, 'fs12', 50)" class="f">f</span>
   <span class="k">let!</span> _ <span class="o">=</span> <span class="s">&quot;\)&quot;</span>
   <span class="k">return</span> <span onmouseout="hideTip(event, 'fs15', 51)" onmouseover="showTip(event, 'fs15', 51)" class="i">x</span>
}

<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs16', 52)" onmouseover="showTip(event, 'fs16', 52)" class="f">expression</span>() <span class="o">=</span> 
   <span onmouseout="hideTip(event, 'fs3', 53)" onmouseover="showTip(event, 'fs3', 53)" class="i">parser</span> {
      <span class="c">// Tries possible parsing steps in order</span>
      <span class="c">// I.e., in reverse order of precedence</span>
      <span class="k">return!</span> [
         <span onmouseout="hideTip(event, 'fs16', 54)" onmouseover="showTip(event, 'fs16', 54)" class="f">expression</span> <span class="o">&lt;+&gt;</span> <span onmouseout="hideTip(event, 'fs16', 55)" onmouseover="showTip(event, 'fs16', 55)" class="f">expression</span>
         <span onmouseout="hideTip(event, 'fs16', 56)" onmouseover="showTip(event, 'fs16', 56)" class="f">expression</span> <span class="o">&lt;-&gt;</span> <span onmouseout="hideTip(event, 'fs16', 57)" onmouseover="showTip(event, 'fs16', 57)" class="f">expression</span>
         <span onmouseout="hideTip(event, 'fs16', 58)" onmouseover="showTip(event, 'fs16', 58)" class="f">expression</span> <span class="o">&lt;*&gt;</span> <span onmouseout="hideTip(event, 'fs16', 59)" onmouseover="showTip(event, 'fs16', 59)" class="f">expression</span>
         <span onmouseout="hideTip(event, 'fs16', 60)" onmouseover="showTip(event, 'fs16', 60)" class="f">expression</span> <span class="o">&lt;/&gt;</span> <span onmouseout="hideTip(event, 'fs16', 61)" onmouseover="showTip(event, 'fs16', 61)" class="f">expression</span>
         <span onmouseout="hideTip(event, 'fs11', 62)" onmouseover="showTip(event, 'fs11', 62)" class="f">bracketed</span> <span onmouseout="hideTip(event, 'fs16', 63)" onmouseover="showTip(event, 'fs16', 63)" class="f">expression</span>
         <span onmouseout="hideTip(event, 'fs2', 64)" onmouseover="showTip(event, 'fs2', 64)" class="f">number</span>
      ]
   }

<span class="c">// Example</span>
<span onmouseout="hideTip(event, 'fs17', 65)" onmouseover="showTip(event, 'fs17', 65)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs16', 66)" onmouseover="showTip(event, 'fs16', 66)" class="f">expression</span>()<span class="o">.</span><span class="f">Parse</span> <span class="s">&quot;(10 + (2 * 10 * 2))/5 - 14&quot;</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">open System.Text.RegularExpressions<br />open System<br /><br />type text = string<br />type error = string<br /><br />[&lt;AutoOpen&gt;]<br />module String =<br />&#160;&#160;&#160;let isEmpty(str:string) =<br />&#160;&#160;&#160;&#160;&#160;&#160;str.Trim().Length = 0<br /><br />&#160;&#160;&#160;let (|Empty|_|) str =<br />&#160;&#160;&#160;&#160;&#160;&#160;if isEmpty str then Some()<br />&#160;&#160;&#160;&#160;&#160;&#160;else None<br /><br />type &#39;a Parser = <br />&#160;&#160;&#160;| Parser of (text -&gt; error ref -&gt; (&#39;a * text) option)<br />&#160;&#160;&#160;member x.Evaluate(text, error) =<br />&#160;&#160;&#160;&#160;&#160;&#160;let (Parser f) = x<br />&#160;&#160;&#160;&#160;&#160;&#160;f text error<br />&#160;&#160;&#160;member x.Parse text =<br />&#160;&#160;&#160;&#160;&#160;&#160;let error = ref &quot;&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;match x.Evaluate(text, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;| Some (y, Empty) -&gt; y<br />&#160;&#160;&#160;&#160;&#160;&#160;| Some _ | None -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;failwith !error<br /><br />type ParserBuilder() =<br />&#160;&#160;&#160;let parse patterns text =<br />&#160;&#160;&#160;&#160;&#160;&#160;let pattern = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;patterns |&gt; Seq.map (sprintf &quot;(%s)&quot;)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&gt; String.concat &quot;&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;let regex = Regex (sprintf &quot;^\s*%s&quot; pattern)<br />&#160;&#160;&#160;&#160;&#160;&#160;let matchAttempt = regex.Match text<br />&#160;&#160;&#160;&#160;&#160;&#160;let groups =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[ for group in matchAttempt.Groups -&gt; group.Value ]<br />&#160;&#160;&#160;&#160;&#160;&#160;match groups with<br />&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; []<br />&#160;&#160;&#160;&#160;&#160;&#160;| x::xs -&gt; xs<br /><br />&#160;&#160;&#160;let parsePattern pattern (f:string -&gt; &#39;a Parser) text error =<br />&#160;&#160;&#160;&#160;&#160;&#160;match text |&gt; parse [pattern; &quot;.*&quot;]  with<br />&#160;&#160;&#160;&#160;&#160;&#160;| [value; rest] -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let g = f value<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g.Evaluate(rest, error)<br />&#160;&#160;&#160;&#160;&#160;&#160;| _ -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected &#39;%s&#39; but found &#39;%s&#39;&quot; pattern text<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<br />&#160;&#160;&#160;let parseInfix (left:unit -&gt; &#39;a Parser) op (right:unit -&gt; &#39;b Parser) (f:(&#39;a*string*&#39;b) -&gt; &#39;c Parser) text error =<br />&#160;&#160;&#160;&#160;&#160;&#160;match text |&gt; parse [&quot;.*&quot;; op; &quot;.*&quot;] with<br />&#160;&#160;&#160;&#160;&#160;&#160;| [x; op; y] -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match left().Evaluate(x, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(x, Empty) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match right().Evaluate(y, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(y, rest) -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f(x, op, y).Evaluate(rest, error)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| None -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected expression but found &#39;%s&#39;&quot; y<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some _ | None -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected expression but found &#39;%s&#39;&quot; x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br />&#160;&#160;&#160;&#160;&#160;&#160;| _ -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error := sprintf &quot;Expected &#39;&lt;x&gt; %s &lt;y&gt;&#39; but found &#39;%s&#39;&quot; op text<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None<br /><br />&#160;&#160;&#160;let parseAny (parsers:(unit -&gt; &#39;a Parser) list) (f: &#39;a -&gt; &#39;b Parser) text error =<br />&#160;&#160;&#160;&#160;&#160;&#160;parsers |&gt; Seq.tryPick (fun parser -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match parser().Evaluate(text, error) with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Some(x, rest) -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let g = f x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g.Evaluate(rest, error)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| None -&gt; None<br />&#160;&#160;&#160;&#160;&#160;&#160;)<br /><br />&#160;&#160;&#160;member b.Bind (parsers, f) =<br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(parseAny parsers f)<br />&#160;&#160;&#160;member b.Bind ((left, op, right), f) =<br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(parseInfix left op right f)<br />&#160;&#160;&#160;member b.Bind (parser, f) = <br />&#160;&#160;&#160;&#160;&#160;&#160;b.Bind([parser], f)<br />&#160;&#160;&#160;member b.Bind (pattern:string, f) = <br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(parsePattern pattern f)<br />&#160;&#160;&#160;member b.Return x =<br />&#160;&#160;&#160;&#160;&#160;&#160;Parser(fun text error -&gt; Some(x, text))<br />&#160;&#160;&#160;member b.ReturnFrom(parsers:_ list) =<br />&#160;&#160;&#160;&#160;&#160;&#160;b.Bind(parsers, b.Return)<br /><br />let parser = ParserBuilder()</div>
<div class="tip" id="fs2">val number : unit -&gt; int Parser<br /><br />Full name: Script.number</div>
<div class="tip" id="fs3">val parser : ParserBuilder<br /><br />Full name: Script.parser</div>
<div class="tip" id="fs4">val n : string</div>
<div class="tip" id="fs5">type Int32 =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 3 overloads<br />&#160;&#160;&#160;&#160;static val MaxValue : int<br />&#160;&#160;&#160;&#160;static val MinValue : int<br />&#160;&#160;&#160;&#160;static member Parse : s:string -&gt; int + 3 overloads<br />&#160;&#160;&#160;&#160;static member TryParse : s:string * result:int -&gt; bool + 1 overload<br />&#160;&#160;end<br /><br />Full name: System.Int32</div>
<div class="tip" id="fs6">Int32.Parse(s: string) : int<br />Int32.Parse(s: string, provider: IFormatProvider) : int<br />Int32.Parse(s: string, style: Globalization.NumberStyles) : int<br />Int32.Parse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider) : int</div>
<div class="tip" id="fs7">val x : (unit -&gt; int Parser)</div>
<div class="tip" id="fs8">val y : (unit -&gt; int Parser)</div>
<div class="tip" id="fs9">val x : int</div>
<div class="tip" id="fs10">val y : int</div>
<div class="tip" id="fs11">val bracketed : f:(unit -&gt; &#39;a Parser) -&gt; unit -&gt; &#39;a Parser<br /><br />Full name: Script.bracketed</div>
<div class="tip" id="fs12">val f : (unit -&gt; &#39;a Parser)</div>
<div class="tip" id="fs13">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs14">Multiple items<br />union case Parser.Parser: (text -&gt; error ref -&gt; (&#39;a * text) option) -&gt; &#39;a Parser<br /><br />--------------------<br />type &#39;a Parser =<br />&#160;&#160;| Parser of (text -&gt; error ref -&gt; (&#39;a * text) option)<br />&#160;&#160;member Evaluate : text:text * error:error ref -&gt; (&#39;a * text) option<br />&#160;&#160;member Parse : text:text -&gt; &#39;a<br /><br />Full name: Script.Parser&lt;_&gt;</div>
<div class="tip" id="fs15">val x : &#39;a</div>
<div class="tip" id="fs16">val expression : unit -&gt; int Parser<br /><br />Full name: Script.expression</div>
<div class="tip" id="fs17">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

