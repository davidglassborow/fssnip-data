<h2><a name="Definition-of-ResilientMailbox" class="anchor" href="#Definition-of-ResilientMailbox">Definition of ResilientMailbox</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// A wrapper for MailboxProcessor that catches all unhandled</span>
<span class="c">/// exceptions and reports them via the &#39;OnError&#39; event, repeatedly</span>
<span class="c">/// running the provided function until it returns normally.</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">ResilientMailbox</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">private</span>(<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">f</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="t">ResilientMailbox</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="t">Async</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="t">unit</span><span class="o">&gt;</span>) <span class="k">as</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="v">self</span> <span class="o">=</span>
    <span class="c">// Create an event for reporting errors</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">event</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">Event</span><span class="o">&lt;</span>_<span class="o">&gt;</span>()
    <span class="c">// Start the standard MailboxProcessor</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">inbox</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="t">MailboxProcessor</span><span class="o">&lt;</span>_<span class="o">&gt;</span>(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="i">_inbox</span> <span class="k">-&gt;</span>
        <span class="c">// Recursivly run the user-provided function until it returns</span>
        <span class="c">// normally; handle any exceptions it throws</span>
        <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="f">loop</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="i">async</span> {
            <span class="c">// Run the user-provided function and handle exceptions</span>
            <span class="k">try</span> <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs2', 14)" onmouseover="showTip(event, 'fs2', 14)" class="f">f</span> <span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="v">self</span>
            <span class="k">with</span> <span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="i">e</span> <span class="k">-&gt;</span>
                <span onmouseout="hideTip(event, 'fs6', 17)" onmouseover="showTip(event, 'fs6', 17)" class="i">event</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 18)" onmouseover="showTip(event, 'fs14', 18)" class="f">Trigger</span>(<span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="i">e</span>)
                <span class="k">return!</span> <span onmouseout="hideTip(event, 'fs11', 20)" onmouseover="showTip(event, 'fs11', 20)" class="f">loop</span>()
            }
        <span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="f">loop</span>())
    <span class="c">/// Triggered when an unhandled exception occurs</span>
    <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 22)" onmouseover="showTip(event, 'fs15', 22)" class="i">OnError</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 23)" onmouseover="showTip(event, 'fs6', 23)" class="i">event</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="i">Publish</span>
    <span class="c">/// Starts the mailbox processor</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 26)" onmouseover="showTip(event, 'fs18', 26)" class="f">Start</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 27)" onmouseover="showTip(event, 'fs8', 27)" class="i">inbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 28)" onmouseover="showTip(event, 'fs19', 28)" class="f">Start</span>()
    <span class="c">/// Receive a message from the mailbox processor</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 30)" onmouseover="showTip(event, 'fs20', 30)" class="f">Receive</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 31)" onmouseover="showTip(event, 'fs8', 31)" class="i">inbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 32)" onmouseover="showTip(event, 'fs21', 32)" class="f">Receive</span>()
    <span class="c">/// Post a message to the mailbox processor</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 34)" onmouseover="showTip(event, 'fs22', 34)" class="f">Post</span>(<span onmouseout="hideTip(event, 'fs23', 35)" onmouseover="showTip(event, 'fs23', 35)" class="i">v</span><span class="o">:</span><span class="o">&#39;</span><span class="i">T</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 36)" onmouseover="showTip(event, 'fs8', 36)" class="i">inbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 37)" onmouseover="showTip(event, 'fs24', 37)" class="f">Post</span>(<span onmouseout="hideTip(event, 'fs23', 38)" onmouseover="showTip(event, 'fs23', 38)" class="i">v</span>)
    <span class="c">/// Start the mailbox processor</span>
    <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs25', 39)" onmouseover="showTip(event, 'fs25', 39)" class="f">Start</span>(<span onmouseout="hideTip(event, 'fs26', 40)" onmouseover="showTip(event, 'fs26', 40)" class="f">f</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 41)" onmouseover="showTip(event, 'fs27', 41)" class="i">mbox</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs1', 42)" onmouseover="showTip(event, 'fs1', 42)" class="t">ResilientMailbox</span><span class="o">&lt;</span>_<span class="o">&gt;</span>(<span onmouseout="hideTip(event, 'fs26', 43)" onmouseover="showTip(event, 'fs26', 43)" class="f">f</span>)
        <span onmouseout="hideTip(event, 'fs27', 44)" onmouseover="showTip(event, 'fs27', 44)" class="i">mbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 45)" onmouseover="showTip(event, 'fs28', 45)" class="f">Start</span>()
        <span onmouseout="hideTip(event, 'fs27', 46)" onmouseover="showTip(event, 'fs27', 46)" class="i">mbox</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Example-of-use" class="anchor" href="#Example-of-use">Example of use</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// The usage is the same as with standard MailboxProcessor</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 47)" onmouseover="showTip(event, 'fs29', 47)" class="i">counter</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs30', 48)" onmouseover="showTip(event, 'fs30', 48)" class="t">ResilientMailbox</span><span class="o">&lt;</span>_<span class="o">&gt;</span><span class="o">.</span><span class="f">Start</span>(
        <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs31', 49)" onmouseover="showTip(event, 'fs31', 49)" class="i">inbox</span> <span class="k">-&gt;</span>
            <span onmouseout="hideTip(event, 'fs12', 50)" onmouseover="showTip(event, 'fs12', 50)" class="i">async</span> {
                <span class="k">while</span> <span class="k">true</span> <span class="k">do</span>
                    <span onmouseout="hideTip(event, 'fs32', 51)" onmouseover="showTip(event, 'fs32', 51)" class="f">printfn</span> <span class="s">&quot;waiting for data...&quot;</span>
                    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs33', 52)" onmouseover="showTip(event, 'fs33', 52)" class="i">data</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs31', 53)" onmouseover="showTip(event, 'fs31', 53)" class="i">inbox</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 54)" onmouseover="showTip(event, 'fs34', 54)" class="f">Receive</span>()
                    <span class="c">// Simulate an exception</span>
                    <span onmouseout="hideTip(event, 'fs35', 55)" onmouseover="showTip(event, 'fs35', 55)" class="f">failwith</span> <span class="s">&quot;fail!&quot;</span>
            })

<span class="c">// Specify callback for unhandled errors and send a test message</span>
<span onmouseout="hideTip(event, 'fs29', 56)" onmouseover="showTip(event, 'fs29', 56)" class="i">counter</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 57)" onmouseover="showTip(event, 'fs36', 57)" class="i">OnError</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 58)" onmouseover="showTip(event, 'fs37', 58)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs32', 59)" onmouseover="showTip(event, 'fs32', 59)" class="f">printfn</span> <span class="s">&quot;Exception: </span><span class="pf">%A</span><span class="s">&quot;</span>)
<span onmouseout="hideTip(event, 'fs29', 60)" onmouseover="showTip(event, 'fs29', 60)" class="i">counter</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 61)" onmouseover="showTip(event, 'fs38', 61)" class="f">Post</span>(<span class="n">42</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />type ResilientMailbox&lt;&#39;T&gt; =<br />&#160;&#160;private new : f:(ResilientMailbox&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;) -&gt; ResilientMailbox&lt;&#39;T&gt;<br />&#160;&#160;member Post : v:&#39;T -&gt; unit<br />&#160;&#160;member Receive : unit -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Start : unit -&gt; unit<br />&#160;&#160;member OnError : IEvent&lt;exn&gt;<br />&#160;&#160;static member Start : f:(ResilientMailbox&lt;&#39;a&gt; -&gt; Async&lt;unit&gt;) -&gt; ResilientMailbox&lt;&#39;a&gt;<br /><br />Full name: Script.ResilientMailbox&lt;_&gt;<br /><em><br /><br />&#160;A wrapper for MailboxProcessor that catches all unhandled<br />&#160;exceptions and reports them via the &#39;OnError&#39; event, repeatedly<br />&#160;running the provided function until it returns normally.</em><br /><br />--------------------<br />private new : f:(ResilientMailbox&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;) -&gt; ResilientMailbox&lt;&#39;T&gt;</div>
<div class="tip" id="fs2">val f : (ResilientMailbox&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;)</div>
<div class="tip" id="fs3">Multiple items<br />type Async<br />static member AsBeginEnd : computation:(&#39;Arg -&gt; Async&lt;&#39;T&gt;) -&gt; (&#39;Arg * AsyncCallback * obj -&gt; IAsyncResult) * (IAsyncResult -&gt; &#39;T) * (IAsyncResult -&gt; unit)<br />static member AwaitEvent : event:IEvent&lt;&#39;Del,&#39;T&gt; * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt; (requires delegate and &#39;Del :&gt; Delegate)<br />static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member AwaitTask : task:Task&lt;&#39;T&gt; -&gt; Async&lt;&#39;T&gt;<br />static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member CancelDefaultToken : unit -&gt; unit<br />static member Catch : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;Choice&lt;&#39;T,exn&gt;&gt;<br />static member FromBeginEnd : beginAction:(AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg:&#39;Arg1 * beginAction:(&#39;Arg1 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * beginAction:(&#39;Arg1 * &#39;Arg2 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * arg3:&#39;Arg3 * beginAction:(&#39;Arg1 * &#39;Arg2 * &#39;Arg3 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromContinuations : callback:((&#39;T -&gt; unit) * (exn -&gt; unit) * (OperationCanceledException -&gt; unit) -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member Ignore : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;<br />static member OnCancel : interruption:(unit -&gt; unit) -&gt; Async&lt;IDisposable&gt;<br />static member Parallel : computations:seq&lt;Async&lt;&#39;T&gt;&gt; -&gt; Async&lt;&#39;T []&gt;<br />static member RunSynchronously : computation:Async&lt;&#39;T&gt; * ?timeout:int * ?cancellationToken:CancellationToken -&gt; &#39;T<br />static member Sleep : millisecondsDueTime:int -&gt; Async&lt;unit&gt;<br />static member Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&gt; Task&lt;&#39;T&gt;<br />static member StartChild : computation:Async&lt;&#39;T&gt; * ?millisecondsTimeout:int -&gt; Async&lt;Async&lt;&#39;T&gt;&gt;<br />static member StartChildAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions -&gt; Async&lt;Task&lt;&#39;T&gt;&gt;<br />static member StartImmediate : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartWithContinuations : computation:Async&lt;&#39;T&gt; * continuation:(&#39;T -&gt; unit) * exceptionContinuation:(exn -&gt; unit) * cancellationContinuation:(OperationCanceledException -&gt; unit) * ?cancellationToken:CancellationToken -&gt; unit<br />static member SwitchToContext : syncContext:SynchronizationContext -&gt; Async&lt;unit&gt;<br />static member SwitchToNewThread : unit -&gt; Async&lt;unit&gt;<br />static member SwitchToThreadPool : unit -&gt; Async&lt;unit&gt;<br />static member TryCancelled : computation:Async&lt;&#39;T&gt; * compensation:(OperationCanceledException -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member CancellationToken : Async&lt;CancellationToken&gt;<br />static member DefaultCancellationToken : CancellationToken<br /><br />Full name: Microsoft.FSharp.Control.Async<br /><br />--------------------<br />type Async&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Async&lt;_&gt;</div>
<div class="tip" id="fs4">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs5">val self : ResilientMailbox&lt;&#39;T&gt;</div>
<div class="tip" id="fs6">val event : Event&lt;exn&gt;</div>
<div class="tip" id="fs7">Multiple items<br />module Event<br /><br />from Microsoft.FSharp.Control<br /><br />--------------------<br />type Event&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; Event&lt;&#39;T&gt;<br />&#160;&#160;member Trigger : arg:&#39;T -&gt; unit<br />&#160;&#160;member Publish : IEvent&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Event&lt;_&gt;<br /><br />--------------------<br />type Event&lt;&#39;Delegate,&#39;Args (requires delegate and &#39;Delegate :&gt; Delegate)&gt; =<br />&#160;&#160;new : unit -&gt; Event&lt;&#39;Delegate,&#39;Args&gt;<br />&#160;&#160;member Trigger : sender:obj * args:&#39;Args -&gt; unit<br />&#160;&#160;member Publish : IEvent&lt;&#39;Delegate,&#39;Args&gt;<br /><br />Full name: Microsoft.FSharp.Control.Event&lt;_,_&gt;<br /><br />--------------------<br />new : unit -&gt; Event&lt;&#39;T&gt;<br /><br />--------------------<br />new : unit -&gt; Event&lt;&#39;Delegate,&#39;Args&gt;</div>
<div class="tip" id="fs8">val inbox : MailboxProcessor&lt;&#39;T&gt;</div>
<div class="tip" id="fs9">Multiple items<br />type MailboxProcessor&lt;&#39;Msg&gt; =<br />&#160;&#160;interface IDisposable<br />&#160;&#160;new : body:(MailboxProcessor&lt;&#39;Msg&gt; -&gt; Async&lt;unit&gt;) * ?cancellationToken:CancellationToken -&gt; MailboxProcessor&lt;&#39;Msg&gt;<br />&#160;&#160;member Post : message:&#39;Msg -&gt; unit<br />&#160;&#160;member PostAndAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply&gt;<br />&#160;&#160;member PostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply<br />&#160;&#160;member PostAndTryAsyncReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; Async&lt;&#39;Reply option&gt;<br />&#160;&#160;member Receive : ?timeout:int -&gt; Async&lt;&#39;Msg&gt;<br />&#160;&#160;member Scan : scanner:(&#39;Msg -&gt; Async&lt;&#39;T&gt; option) * ?timeout:int -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Start : unit -&gt; unit<br />&#160;&#160;member TryPostAndReply : buildMessage:(AsyncReplyChannel&lt;&#39;Reply&gt; -&gt; &#39;Msg) * ?timeout:int -&gt; &#39;Reply option<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Control.MailboxProcessor&lt;_&gt;<br /><br />--------------------<br />new : body:(MailboxProcessor&lt;&#39;Msg&gt; -&gt; Async&lt;unit&gt;) * ?cancellationToken:System.Threading.CancellationToken -&gt; MailboxProcessor&lt;&#39;Msg&gt;</div>
<div class="tip" id="fs10">val _inbox : MailboxProcessor&lt;&#39;T&gt;</div>
<div class="tip" id="fs11">val loop : (unit -&gt; Async&lt;unit&gt;)</div>
<div class="tip" id="fs12">val async : AsyncBuilder<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.async</div>
<div class="tip" id="fs13">val e : exn</div>
<div class="tip" id="fs14">member Event.Trigger : arg:&#39;T -&gt; unit</div>
<div class="tip" id="fs15">member ResilientMailbox.OnError : IEvent&lt;exn&gt;<br /><br />Full name: Script.ResilientMailbox`1.OnError<br /><em><br /><br />&#160;Triggered when an unhandled exception occurs</em></div>
<div class="tip" id="fs16">property Event.Publish: IEvent&lt;exn&gt;</div>
<div class="tip" id="fs17">val __ : ResilientMailbox&lt;&#39;T&gt;</div>
<div class="tip" id="fs18">member ResilientMailbox.Start : unit -&gt; unit<br /><br />Full name: Script.ResilientMailbox`1.Start<br /><em><br /><br />&#160;Starts the mailbox processor</em></div>
<div class="tip" id="fs19">member MailboxProcessor.Start : unit -&gt; unit</div>
<div class="tip" id="fs20">member ResilientMailbox.Receive : unit -&gt; Async&lt;&#39;T&gt;<br /><br />Full name: Script.ResilientMailbox`1.Receive<br /><em><br /><br />&#160;Receive a message from the mailbox processor</em></div>
<div class="tip" id="fs21">member MailboxProcessor.Receive : ?timeout:int -&gt; Async&lt;&#39;Msg&gt;</div>
<div class="tip" id="fs22">member ResilientMailbox.Post : v:&#39;T -&gt; unit<br /><br />Full name: Script.ResilientMailbox`1.Post<br /><em><br /><br />&#160;Post a message to the mailbox processor</em></div>
<div class="tip" id="fs23">val v : &#39;T</div>
<div class="tip" id="fs24">member MailboxProcessor.Post : message:&#39;Msg -&gt; unit</div>
<div class="tip" id="fs25">static member ResilientMailbox.Start : f:(ResilientMailbox&lt;&#39;a&gt; -&gt; Async&lt;unit&gt;) -&gt; ResilientMailbox&lt;&#39;a&gt;<br /><br />Full name: Script.ResilientMailbox`1.Start<br /><em><br /><br />&#160;Start the mailbox processor</em></div>
<div class="tip" id="fs26">val f : (ResilientMailbox&lt;&#39;a&gt; -&gt; Async&lt;unit&gt;)</div>
<div class="tip" id="fs27">val mbox : ResilientMailbox&lt;&#39;a&gt;</div>
<div class="tip" id="fs28">member ResilientMailbox.Start : unit -&gt; unit<br /><em><br /><br />&#160;Starts the mailbox processor</em></div>
<div class="tip" id="fs29">val counter : ResilientMailbox&lt;int&gt;<br /><br />Full name: Script.counter</div>
<div class="tip" id="fs30">type ResilientMailbox&lt;&#39;T&gt; =<br />&#160;&#160;private new : f:(ResilientMailbox&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;) -&gt; ResilientMailbox&lt;&#39;T&gt;<br />&#160;&#160;member Post : v:&#39;T -&gt; unit<br />&#160;&#160;member Receive : unit -&gt; Async&lt;&#39;T&gt;<br />&#160;&#160;member Start : unit -&gt; unit<br />&#160;&#160;member OnError : IEvent&lt;exn&gt;<br />&#160;&#160;static member Start : f:(ResilientMailbox&lt;&#39;a&gt; -&gt; Async&lt;unit&gt;) -&gt; ResilientMailbox&lt;&#39;a&gt;<br /><br />Full name: Script.ResilientMailbox&lt;_&gt;<br /><em><br /><br />&#160;A wrapper for MailboxProcessor that catches all unhandled<br />&#160;exceptions and reports them via the &#39;OnError&#39; event, repeatedly<br />&#160;running the provided function until it returns normally.</em></div>
<div class="tip" id="fs31">val inbox : ResilientMailbox&lt;int&gt;</div>
<div class="tip" id="fs32">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs33">val data : int</div>
<div class="tip" id="fs34">member ResilientMailbox.Receive : unit -&gt; Async&lt;&#39;T&gt;<br /><em><br /><br />&#160;Receive a message from the mailbox processor</em></div>
<div class="tip" id="fs35">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs36">property ResilientMailbox.OnError: IEvent&lt;exn&gt;<br /><em><br /><br />&#160;Triggered when an unhandled exception occurs</em></div>
<div class="tip" id="fs37">member System.IObservable.Add : callback:(&#39;T -&gt; unit) -&gt; unit</div>
<div class="tip" id="fs38">member ResilientMailbox.Post : v:&#39;T -&gt; unit<br /><em><br /><br />&#160;Post a message to the mailbox processor</em></div>

