<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Given a type &#39;SomeType&#39; and a discriminated union with</span>
<span class="c">// multiple cases that reference SomeType:</span>

<span class="k">type</span> <span class="t">SomeType</span> <span class="o">=</span> { <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">Name</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">string</span> }

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">Union</span> <span class="o">=</span>
  | <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="p">Foo</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">SomeType</span>
  | <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="p">Bar</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="t">SomeType</span>
  | <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="p">Zoo</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="t">int</span>

<span class="c">// We can avoid code duplication when we need to get SomeType</span>
<span class="c">// from the Foo and Bar case by merging them into a single case:</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="t">SomeKind</span> <span class="o">=</span> 
  | <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="p">Foo</span> | <span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="p">Bar</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="t">Union2</span> <span class="o">=</span>
  | <span onmouseout="hideTip(event, 'fs13', 14)" onmouseover="showTip(event, 'fs13', 14)" class="p">Some</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="t">SomeType</span>
  | <span onmouseout="hideTip(event, 'fs14', 16)" onmouseover="showTip(event, 'fs14', 16)" class="p">Zoo</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs8', 17)" onmouseover="showTip(event, 'fs8', 17)" class="t">int</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">SomeType.Name: string</div>
<div class="tip" id="fs2">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs3">type Union =<br />&#160;&#160;| Foo of SomeType<br />&#160;&#160;| Bar of SomeType<br />&#160;&#160;| Zoo of int<br /><br />Full name: Script.Union</div>
<div class="tip" id="fs4">union case Union.Foo: SomeType -&gt; Union</div>
<div class="tip" id="fs5">type SomeType =<br />&#160;&#160;{Name: string;}<br /><br />Full name: Script.SomeType</div>
<div class="tip" id="fs6">union case Union.Bar: SomeType -&gt; Union</div>
<div class="tip" id="fs7">union case Union.Zoo: int -&gt; Union</div>
<div class="tip" id="fs8">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs9">type SomeKind =<br />&#160;&#160;| Foo<br />&#160;&#160;| Bar<br /><br />Full name: Script.SomeKind</div>
<div class="tip" id="fs10">union case SomeKind.Foo: SomeKind</div>
<div class="tip" id="fs11">union case SomeKind.Bar: SomeKind</div>
<div class="tip" id="fs12">type Union2 =<br />&#160;&#160;| Some of SomeType<br />&#160;&#160;| Zoo of int<br /><br />Full name: Script.Union2</div>
<div class="tip" id="fs13">union case Union2.Some: SomeType -&gt; Union2</div>
<div class="tip" id="fs14">union case Union2.Zoo: int -&gt; Union2</div>

