<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Minimal example</span>
<span class="c">// We can use active patterns and SRTP for methods deconstruction</span>
<span class="c">// It allow to hide some rough SRTP syntax</span>
<span class="k">let</span> <span class="k">inline</span> (|<span class="p">HasLength</span>|) <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">x</span> <span class="o">=</span> 
  <span class="k">fun</span> () <span class="k">-&gt;</span> (<span class="o">^</span><span class="i">a</span><span class="o">:</span> (<span class="k">member</span> <span class="i">Length</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">int</span>) <span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="i">x</span>)

<span class="c">// `this` is optional here, just for demonstration `as` pattern</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="f">length</span> (<span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="p">HasLength</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="f">f</span> <span class="k">as</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">this</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="f">f</span>()

<span class="c">// It works!</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="i">foo</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 10)" onmouseover="showTip(event, 'fs3', 10)" class="f">length</span> [<span class="n">1</span>; <span class="n">2</span>; <span class="n">3</span>]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">bar</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 12)" onmouseover="showTip(event, 'fs3', 12)" class="f">length</span> [|<span class="n">1</span>; <span class="n">2</span>; <span class="n">3</span>|]
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val x : &#39;a (requires member get_Length)</div>
<div class="tip" id="fs2">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs3">val length : &#39;a -&gt; int (requires member get_Length)<br /><br />Full name: Script.length</div>
<div class="tip" id="fs4">active recognizer HasLength: &#39;a -&gt; unit -&gt; int<br /><br />Full name: Script.( |HasLength| )</div>
<div class="tip" id="fs5">val f : (unit -&gt; int)</div>
<div class="tip" id="fs6">val this : &#39;a (requires member get_Length)</div>
<div class="tip" id="fs7">val foo : int<br /><br />Full name: Script.foo</div>
<div class="tip" id="fs8">val bar : int<br /><br />Full name: Script.bar</div>

