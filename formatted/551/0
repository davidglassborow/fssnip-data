<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>

<span id="fst2" onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2, document.getElementById('fst2'))" class="omitted">(Parser Monad and combinators omitted. Code available here: http://fssnip.net/8S)</span>

<span class="c">// New parser combinators/helpers</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">isHexDigit</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">ds</span> <span class="o">=</span> [<span class="s">&#39;A&#39;</span><span class="o">..</span><span class="s">&#39;F&#39;</span>] <span class="o">@</span> [<span class="s">&#39;a&#39;</span><span class="o">..</span><span class="s">&#39;f&#39;</span>] <span class="o">@</span> [<span class="s">&#39;0&#39;</span><span class="o">..</span><span class="s">&#39;9&#39;</span>] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">ofList</span>
    <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">ds</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">Contains</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">hexDigit</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="f">sat</span> <span onmouseout="hideTip(event, 'fs3', 11)" onmouseover="showTip(event, 'fs3', 11)" class="f">isHexDigit</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="f">charToken</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 13)" onmouseover="showTip(event, 'fs11', 13)" class="f">tChar</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs12', 14)" onmouseover="showTip(event, 'fs12', 14)" class="f">token</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 15)" onmouseover="showTip(event, 'fs13', 15)" class="f">betweenChars</span> <span onmouseout="hideTip(event, 'fs14', 16)" onmouseover="showTip(event, 'fs14', 16)" class="i">c1</span> <span onmouseout="hideTip(event, 'fs15', 17)" onmouseover="showTip(event, 'fs15', 17)" class="i">c2</span> <span onmouseout="hideTip(event, 'fs16', 18)" onmouseover="showTip(event, 'fs16', 18)" class="f">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 19)" onmouseover="showTip(event, 'fs17', 19)" class="i">parser</span> {
    <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 20)" onmouseover="showTip(event, 'fs10', 20)" class="f">charToken</span> <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="i">c1</span>
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs18', 22)" onmouseover="showTip(event, 'fs18', 22)" class="i">r</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="f">f</span>()
    <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 24)" onmouseover="showTip(event, 'fs10', 24)" class="f">charToken</span> <span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="i">c2</span>
    <span class="k">return</span> <span onmouseout="hideTip(event, 'fs18', 26)" onmouseover="showTip(event, 'fs18', 26)" class="i">r</span>
}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 27)" onmouseover="showTip(event, 'fs19', 27)" class="f">zeroOrOne</span> <span onmouseout="hideTip(event, 'fs20', 28)" onmouseover="showTip(event, 'fs20', 28)" class="i">p</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="i">parser</span> { <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs21', 30)" onmouseover="showTip(event, 'fs21', 30)" class="i">ret</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="i">p</span> <span class="k">in</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs21', 32)" onmouseover="showTip(event, 'fs21', 32)" class="i">ret</span> } <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="i">parser</span> { <span class="k">return</span> [] }

<span class="k">let</span> (<span class="o">&lt;@&gt;</span>) <span onmouseout="hideTip(event, 'fs20', 34)" onmouseover="showTip(event, 'fs20', 34)" class="i">p</span> <span onmouseout="hideTip(event, 'fs22', 35)" onmouseover="showTip(event, 'fs22', 35)" class="i">q</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 36)" onmouseover="showTip(event, 'fs17', 36)" class="i">parser</span> {
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs23', 37)" onmouseover="showTip(event, 'fs23', 37)" class="i">rp</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="i">p</span>
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs24', 39)" onmouseover="showTip(event, 'fs24', 39)" class="i">rq</span><span class="o">=</span> <span onmouseout="hideTip(event, 'fs22', 40)" onmouseover="showTip(event, 'fs22', 40)" class="i">q</span>
    <span class="k">return</span> (<span onmouseout="hideTip(event, 'fs23', 41)" onmouseover="showTip(event, 'fs23', 41)" class="i">rp</span> <span class="o">@</span> <span onmouseout="hideTip(event, 'fs24', 42)" onmouseover="showTip(event, 'fs24', 42)" class="i">rq</span>)
}


<span class="c">//</span>
<span class="c">// JSON Paser Monad</span>
<span class="c">//</span>
<span class="prep">#nowarn</span> <span class="s">&quot;40&quot;</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs25', 43)" onmouseover="showTip(event, 'fs25', 43)" class="t">JSValue</span> <span class="o">=</span> 
    | <span onmouseout="hideTip(event, 'fs26', 44)" onmouseover="showTip(event, 'fs26', 44)" class="p">JSString</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs27', 45)" onmouseover="showTip(event, 'fs27', 45)" class="t">string</span>
    | <span onmouseout="hideTip(event, 'fs28', 46)" onmouseover="showTip(event, 'fs28', 46)" class="p">JSNumber</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs29', 47)" onmouseover="showTip(event, 'fs29', 47)" class="t">float</span>
    | <span onmouseout="hideTip(event, 'fs30', 48)" onmouseover="showTip(event, 'fs30', 48)" class="p">JSObject</span> <span class="k">of</span> (<span onmouseout="hideTip(event, 'fs25', 49)" onmouseover="showTip(event, 'fs25', 49)" class="t">JSValue</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs25', 50)" onmouseover="showTip(event, 'fs25', 50)" class="t">JSValue</span>) <span onmouseout="hideTip(event, 'fs31', 51)" onmouseover="showTip(event, 'fs31', 51)" class="t">list</span>
    | <span onmouseout="hideTip(event, 'fs32', 52)" onmouseover="showTip(event, 'fs32', 52)" class="p">JSArray</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs25', 53)" onmouseover="showTip(event, 'fs25', 53)" class="t">JSValue</span> <span onmouseout="hideTip(event, 'fs31', 54)" onmouseover="showTip(event, 'fs31', 54)" class="t">list</span>
    | <span onmouseout="hideTip(event, 'fs33', 55)" onmouseover="showTip(event, 'fs33', 55)" class="p">JSBool</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs34', 56)" onmouseover="showTip(event, 'fs34', 56)" class="t">bool</span>
    | <span onmouseout="hideTip(event, 'fs35', 57)" onmouseover="showTip(event, 'fs35', 57)" class="p">JSNull</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 58)" onmouseover="showTip(event, 'fs36', 58)" class="i">jsNull</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 59)" onmouseover="showTip(event, 'fs37', 59)" class="i">nullLiteral</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs38', 60)" onmouseover="showTip(event, 'fs38', 60)" class="f">s2cs</span> <span class="s">&quot;null&quot;</span>
    <span onmouseout="hideTip(event, 'fs17', 61)" onmouseover="showTip(event, 'fs17', 61)" class="i">parser</span> { <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 62)" onmouseover="showTip(event, 'fs39', 62)" class="f">symb</span> <span onmouseout="hideTip(event, 'fs37', 63)" onmouseover="showTip(event, 'fs37', 63)" class="i">nullLiteral</span> <span class="k">in</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs35', 64)" onmouseover="showTip(event, 'fs35', 64)" class="p">JSNull</span>}

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 65)" onmouseover="showTip(event, 'fs40', 65)" class="i">jsBool</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 66)" onmouseover="showTip(event, 'fs41', 66)" class="i">trueLit</span> <span class="o">=</span> <span class="s">&quot;true&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs38', 67)" onmouseover="showTip(event, 'fs38', 67)" class="f">s2cs</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 68)" onmouseover="showTip(event, 'fs42', 68)" class="i">falseLit</span> <span class="o">=</span> <span class="s">&quot;false&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs38', 69)" onmouseover="showTip(event, 'fs38', 69)" class="f">s2cs</span>
    <span onmouseout="hideTip(event, 'fs17', 70)" onmouseover="showTip(event, 'fs17', 70)" class="i">parser</span> { <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 71)" onmouseover="showTip(event, 'fs39', 71)" class="f">symb</span> <span onmouseout="hideTip(event, 'fs41', 72)" onmouseover="showTip(event, 'fs41', 72)" class="i">trueLit</span> <span class="k">in</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs33', 73)" onmouseover="showTip(event, 'fs33', 73)" class="p">JSBool</span>(<span class="k">true</span>) } 
    <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs17', 74)" onmouseover="showTip(event, 'fs17', 74)" class="i">parser</span> { <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 75)" onmouseover="showTip(event, 'fs39', 75)" class="f">symb</span> <span onmouseout="hideTip(event, 'fs42', 76)" onmouseover="showTip(event, 'fs42', 76)" class="i">falseLit</span> <span class="k">in</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs33', 77)" onmouseover="showTip(event, 'fs33', 77)" class="p">JSBool</span>(<span class="k">false</span>) }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 78)" onmouseover="showTip(event, 'fs43', 78)" class="i">jsNumber</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs44', 79)" onmouseover="showTip(event, 'fs44', 79)" class="i">digitsParser</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs45', 80)" onmouseover="showTip(event, 'fs45', 80)" class="f">many1</span> (<span onmouseout="hideTip(event, 'fs9', 81)" onmouseover="showTip(event, 'fs9', 81)" class="f">sat</span> <span onmouseout="hideTip(event, 'fs1', 82)" onmouseover="showTip(event, 'fs1', 82)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs46', 83)" onmouseover="showTip(event, 'fs46', 83)" class="t">Char</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 84)" onmouseover="showTip(event, 'fs47', 84)" class="f">IsDigit</span>)
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 85)" onmouseover="showTip(event, 'fs48', 85)" class="i">intParser</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs19', 86)" onmouseover="showTip(event, 'fs19', 86)" class="f">zeroOrOne</span> (<span onmouseout="hideTip(event, 'fs49', 87)" onmouseover="showTip(event, 'fs49', 87)" class="f">text</span> [<span class="s">&#39;-&#39;</span>])) <span class="o">&lt;@&gt;</span> <span onmouseout="hideTip(event, 'fs44', 88)" onmouseover="showTip(event, 'fs44', 88)" class="i">digitsParser</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs50', 89)" onmouseover="showTip(event, 'fs50', 89)" class="i">fracParser</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs49', 90)" onmouseover="showTip(event, 'fs49', 90)" class="f">text</span> [<span class="s">&#39;.&#39;</span>] <span class="o">&lt;@&gt;</span> <span onmouseout="hideTip(event, 'fs44', 91)" onmouseover="showTip(event, 'fs44', 91)" class="i">digitsParser</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs51', 92)" onmouseover="showTip(event, 'fs51', 92)" class="i">expParser</span> <span class="o">=</span> 
        (<span onmouseout="hideTip(event, 'fs49', 93)" onmouseover="showTip(event, 'fs49', 93)" class="f">text</span> [<span class="s">&#39;e&#39;</span>] <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs49', 94)" onmouseover="showTip(event, 'fs49', 94)" class="f">text</span> [<span class="s">&#39;E&#39;</span>]) <span class="o">&lt;@&gt;</span> 
        (<span onmouseout="hideTip(event, 'fs19', 95)" onmouseover="showTip(event, 'fs19', 95)" class="f">zeroOrOne</span> (<span onmouseout="hideTip(event, 'fs49', 96)" onmouseover="showTip(event, 'fs49', 96)" class="f">text</span> [<span class="s">&#39;+&#39;</span>] <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs49', 97)" onmouseover="showTip(event, 'fs49', 97)" class="f">text</span> [<span class="s">&#39;-&#39;</span>])) <span class="o">&lt;@&gt;</span>
        <span onmouseout="hideTip(event, 'fs44', 98)" onmouseover="showTip(event, 'fs44', 98)" class="i">digitsParser</span>
    <span onmouseout="hideTip(event, 'fs17', 99)" onmouseover="showTip(event, 'fs17', 99)" class="i">parser</span> {
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs52', 100)" onmouseover="showTip(event, 'fs52', 100)" class="i">result</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs48', 101)" onmouseover="showTip(event, 'fs48', 101)" class="i">intParser</span> <span class="o">&lt;@&gt;</span> <span onmouseout="hideTip(event, 'fs19', 102)" onmouseover="showTip(event, 'fs19', 102)" class="f">zeroOrOne</span> <span onmouseout="hideTip(event, 'fs50', 103)" onmouseover="showTip(event, 'fs50', 103)" class="i">fracParser</span> <span class="o">&lt;@&gt;</span> <span onmouseout="hideTip(event, 'fs19', 104)" onmouseover="showTip(event, 'fs19', 104)" class="f">zeroOrOne</span> <span onmouseout="hideTip(event, 'fs51', 105)" onmouseover="showTip(event, 'fs51', 105)" class="i">expParser</span> 
        <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs53', 106)" onmouseover="showTip(event, 'fs53', 106)" class="i">space</span>
        <span class="k">return</span> (<span onmouseout="hideTip(event, 'fs52', 107)" onmouseover="showTip(event, 'fs52', 107)" class="i">result</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs54', 108)" onmouseover="showTip(event, 'fs54', 108)" class="f">cs2s</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs1', 109)" onmouseover="showTip(event, 'fs1', 109)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs55', 110)" onmouseover="showTip(event, 'fs55', 110)" class="t">Double</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 111)" onmouseover="showTip(event, 'fs56', 111)" class="f">Parse</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs28', 112)" onmouseover="showTip(event, 'fs28', 112)" class="p">JSNumber</span>)
    }     

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 113)" onmouseover="showTip(event, 'fs57', 113)" class="i">jsString</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs58', 114)" onmouseover="showTip(event, 'fs58', 114)" class="f">isChar</span> <span onmouseout="hideTip(event, 'fs59', 115)" onmouseover="showTip(event, 'fs59', 115)" class="i">c</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs59', 116)" onmouseover="showTip(event, 'fs59', 116)" class="i">c</span> <span class="o">&lt;&gt;</span> <span class="s">&#39;\&quot;&#39;</span>) <span class="o">&amp;&amp;</span> (<span onmouseout="hideTip(event, 'fs59', 117)" onmouseover="showTip(event, 'fs59', 117)" class="i">c</span> <span class="o">&lt;&gt;</span> <span class="s">&#39;\\&#39;</span>)
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs60', 118)" onmouseover="showTip(event, 'fs60', 118)" class="f">isEscChar</span> <span class="o">=</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs61', 119)" onmouseover="showTip(event, 'fs61', 119)" class="i">cs</span> <span class="o">=</span> <span class="s">&quot;</span><span class="e">\&quot;</span><span class="s"></span><span class="e">\\</span><span class="s">/bfnrt&quot;</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 120)" onmouseover="showTip(event, 'fs62', 120)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs63', 121)" onmouseover="showTip(event, 'fs63', 121)" class="f">ofSeq</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs5', 122)" onmouseover="showTip(event, 'fs5', 122)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 123)" onmouseover="showTip(event, 'fs6', 123)" class="f">ofList</span>
        <span onmouseout="hideTip(event, 'fs61', 124)" onmouseover="showTip(event, 'fs61', 124)" class="i">cs</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 125)" onmouseover="showTip(event, 'fs7', 125)" class="f">Contains</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 126)" onmouseover="showTip(event, 'fs64', 126)" class="f">replaceEscChar</span> <span class="o">=</span> <span class="k">function</span> <span class="s">&#39;b&#39;</span> <span class="k">-&gt;</span> <span class="s">&#39;\b&#39;</span> | <span class="s">&#39;f&#39;</span> <span class="k">-&gt;</span> <span class="s">&#39;\f&#39;</span> | <span class="s">&#39;n&#39;</span> <span class="k">-&gt;</span> <span class="s">&#39;\n&#39;</span>
                                | <span class="s">&#39;r&#39;</span> <span class="k">-&gt;</span> <span class="s">&#39;\r&#39;</span> | <span class="s">&#39;t&#39;</span> <span class="k">-&gt;</span> <span class="s">&#39;\t&#39;</span> | <span onmouseout="hideTip(event, 'fs65', 127)" onmouseover="showTip(event, 'fs65', 127)" class="i">other</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs65', 128)" onmouseover="showTip(event, 'fs65', 128)" class="i">other</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs66', 129)" onmouseover="showTip(event, 'fs66', 129)" class="i">escChars</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 130)" onmouseover="showTip(event, 'fs17', 130)" class="i">parser</span> {
        <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 131)" onmouseover="showTip(event, 'fs11', 131)" class="f">tChar</span> <span class="s">&#39;\\&#39;</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs59', 132)" onmouseover="showTip(event, 'fs59', 132)" class="i">c</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 133)" onmouseover="showTip(event, 'fs9', 133)" class="f">sat</span> <span onmouseout="hideTip(event, 'fs60', 134)" onmouseover="showTip(event, 'fs60', 134)" class="f">isEscChar</span>
        <span class="k">return</span> (<span onmouseout="hideTip(event, 'fs64', 135)" onmouseover="showTip(event, 'fs64', 135)" class="f">replaceEscChar</span> <span onmouseout="hideTip(event, 'fs59', 136)" onmouseover="showTip(event, 'fs59', 136)" class="i">c</span>)
    }
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs67', 137)" onmouseover="showTip(event, 'fs67', 137)" class="i">uniChars</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 138)" onmouseover="showTip(event, 'fs17', 138)" class="i">parser</span> {
        <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs49', 139)" onmouseover="showTip(event, 'fs49', 139)" class="f">text</span> [ <span class="s">&#39;\\&#39;</span>; <span class="s">&#39;u&#39;</span> ]
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs68', 140)" onmouseover="showTip(event, 'fs68', 140)" class="i">d1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 141)" onmouseover="showTip(event, 'fs8', 141)" class="i">hexDigit</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs69', 142)" onmouseover="showTip(event, 'fs69', 142)" class="i">d2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 143)" onmouseover="showTip(event, 'fs8', 143)" class="i">hexDigit</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs70', 144)" onmouseover="showTip(event, 'fs70', 144)" class="i">d3</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 145)" onmouseover="showTip(event, 'fs8', 145)" class="i">hexDigit</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs71', 146)" onmouseover="showTip(event, 'fs71', 146)" class="i">d4</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 147)" onmouseover="showTip(event, 'fs8', 147)" class="i">hexDigit</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs72', 148)" onmouseover="showTip(event, 'fs72', 148)" class="i">r</span> <span class="o">=</span> 
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs73', 149)" onmouseover="showTip(event, 'fs73', 149)" class="i">s</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs74', 150)" onmouseover="showTip(event, 'fs74', 150)" class="t">String</span> [|<span onmouseout="hideTip(event, 'fs68', 151)" onmouseover="showTip(event, 'fs68', 151)" class="i">d1</span>; <span onmouseout="hideTip(event, 'fs69', 152)" onmouseover="showTip(event, 'fs69', 152)" class="i">d2</span>; <span onmouseout="hideTip(event, 'fs70', 153)" onmouseover="showTip(event, 'fs70', 153)" class="i">d3</span>; <span onmouseout="hideTip(event, 'fs71', 154)" onmouseover="showTip(event, 'fs71', 154)" class="i">d4</span>|]
            <span onmouseout="hideTip(event, 'fs75', 155)" onmouseover="showTip(event, 'fs75', 155)" class="t">Byte</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs76', 156)" onmouseover="showTip(event, 'fs76', 156)" class="f">Parse</span>(<span onmouseout="hideTip(event, 'fs73', 157)" onmouseover="showTip(event, 'fs73', 157)" class="i">s</span>, <span onmouseout="hideTip(event, 'fs77', 158)" onmouseover="showTip(event, 'fs77', 158)" class="i">Globalization</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs78', 159)" onmouseover="showTip(event, 'fs78', 159)" class="t">NumberStyles</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs79', 160)" onmouseover="showTip(event, 'fs79', 160)" class="i">HexNumber</span>)
            <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs80', 161)" onmouseover="showTip(event, 'fs80', 161)" class="f">char</span>
        <span class="k">return</span> <span onmouseout="hideTip(event, 'fs72', 162)" onmouseover="showTip(event, 'fs72', 162)" class="i">r</span>
    }
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs81', 163)" onmouseover="showTip(event, 'fs81', 163)" class="i">chars</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs82', 164)" onmouseover="showTip(event, 'fs82', 164)" class="f">many</span> ((<span onmouseout="hideTip(event, 'fs9', 165)" onmouseover="showTip(event, 'fs9', 165)" class="f">sat</span> <span onmouseout="hideTip(event, 'fs58', 166)" onmouseover="showTip(event, 'fs58', 166)" class="f">isChar</span>) <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs66', 167)" onmouseover="showTip(event, 'fs66', 167)" class="i">escChars</span> <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs67', 168)" onmouseover="showTip(event, 'fs67', 168)" class="i">uniChars</span>)
    <span onmouseout="hideTip(event, 'fs17', 169)" onmouseover="showTip(event, 'fs17', 169)" class="i">parser</span> {
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs83', 170)" onmouseover="showTip(event, 'fs83', 170)" class="i">cs</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 171)" onmouseover="showTip(event, 'fs13', 171)" class="f">betweenChars</span> <span class="s">&#39;\&quot;&#39;</span> <span class="s">&#39;\&quot;&#39;</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs81', 172)" onmouseover="showTip(event, 'fs81', 172)" class="i">chars</span>)
        <span class="k">return</span> (<span class="i">cs</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs54', 173)" onmouseover="showTip(event, 'fs54', 173)" class="f">cs2s</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 174)" onmouseover="showTip(event, 'fs26', 174)" class="p">JSString</span>)
    }

<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs84', 175)" onmouseover="showTip(event, 'fs84', 175)" class="i">jsValue</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs57', 176)" onmouseover="showTip(event, 'fs57', 176)" class="i">jsString</span> <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs43', 177)" onmouseover="showTip(event, 'fs43', 177)" class="i">jsNumber</span> <span class="o">&lt;|&gt;</span> <span class="i">jsArray</span> <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs40', 178)" onmouseover="showTip(event, 'fs40', 178)" class="i">jsBool</span> <span class="o">&lt;|&gt;</span> <span onmouseout="hideTip(event, 'fs36', 179)" onmouseover="showTip(event, 'fs36', 179)" class="i">jsNull</span> <span class="o">&lt;|&gt;</span> <span class="i">jsObject</span>
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs85', 180)" onmouseover="showTip(event, 'fs85', 180)" class="i">jsElements</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs86', 181)" onmouseover="showTip(event, 'fs86', 181)" class="f">sepby</span> <span class="i">jsValue</span> (<span onmouseout="hideTip(event, 'fs10', 182)" onmouseover="showTip(event, 'fs10', 182)" class="f">charToken</span> <span class="s">&#39;,&#39;</span>)
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs87', 183)" onmouseover="showTip(event, 'fs87', 183)" class="i">jsArray</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 184)" onmouseover="showTip(event, 'fs17', 184)" class="i">parser</span> {
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs88', 185)" onmouseover="showTip(event, 'fs88', 185)" class="i">values</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 186)" onmouseover="showTip(event, 'fs13', 186)" class="f">betweenChars</span> <span class="s">&#39;[&#39;</span> <span class="s">&#39;]&#39;</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs85', 187)" onmouseover="showTip(event, 'fs85', 187)" class="i">jsElements</span>)
    <span class="k">return</span> (<span onmouseout="hideTip(event, 'fs32', 188)" onmouseover="showTip(event, 'fs32', 188)" class="p">JSArray</span> <span class="i">values</span>)
    }
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs89', 189)" onmouseover="showTip(event, 'fs89', 189)" class="i">jsMembers</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs86', 190)" onmouseover="showTip(event, 'fs86', 190)" class="f">sepby</span> <span class="i">jsPair</span> (<span onmouseout="hideTip(event, 'fs10', 191)" onmouseover="showTip(event, 'fs10', 191)" class="f">charToken</span> <span class="s">&#39;,&#39;</span>)
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs90', 192)" onmouseover="showTip(event, 'fs90', 192)" class="i">jsPair</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 193)" onmouseover="showTip(event, 'fs17', 193)" class="i">parser</span> {
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs91', 194)" onmouseover="showTip(event, 'fs91', 194)" class="i">key</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs57', 195)" onmouseover="showTip(event, 'fs57', 195)" class="i">jsString</span>
    <span class="k">let!</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 196)" onmouseover="showTip(event, 'fs10', 196)" class="f">charToken</span> <span class="s">&#39;:&#39;</span>
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs92', 197)" onmouseover="showTip(event, 'fs92', 197)" class="i">value</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs84', 198)" onmouseover="showTip(event, 'fs84', 198)" class="i">jsValue</span>
    <span class="k">return</span> (<span onmouseout="hideTip(event, 'fs91', 199)" onmouseover="showTip(event, 'fs91', 199)" class="i">key</span>, <span onmouseout="hideTip(event, 'fs92', 200)" onmouseover="showTip(event, 'fs92', 200)" class="i">value</span>)
    }
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs93', 201)" onmouseover="showTip(event, 'fs93', 201)" class="i">jsObject</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 202)" onmouseover="showTip(event, 'fs17', 202)" class="i">parser</span> {
    <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs94', 203)" onmouseover="showTip(event, 'fs94', 203)" class="i">members</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 204)" onmouseover="showTip(event, 'fs13', 204)" class="f">betweenChars</span> <span class="s">&#39;{&#39;</span> <span class="s">&#39;}&#39;</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs89', 205)" onmouseover="showTip(event, 'fs89', 205)" class="i">jsMembers</span>)
    <span class="k">return</span> (<span onmouseout="hideTip(event, 'fs30', 206)" onmouseover="showTip(event, 'fs30', 206)" class="p">JSObject</span> <span class="i">members</span>)
    }

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs95', 207)" onmouseover="showTip(event, 'fs95', 207)" class="f">parseJson</span> <span class="o">:</span> (<span onmouseout="hideTip(event, 'fs27', 208)" onmouseover="showTip(event, 'fs27', 208)" class="t">string</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs25', 209)" onmouseover="showTip(event, 'fs25', 209)" class="t">JSValue</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs96', 210)" onmouseover="showTip(event, 'fs96', 210)" class="f">runParser</span> <span onmouseout="hideTip(event, 'fs93', 211)" onmouseover="showTip(event, 'fs93', 211)" class="i">jsObject</span>


<span class="c">////////////////////////////////////////////</span>
<span class="c">// Sample JSON from http://json.org/example</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs97', 212)" onmouseover="showTip(event, 'fs97', 212)" class="i">widgetJson</span> <span class="o">=</span> <span class="s">&quot;{</span><span class="e">\&quot;</span><span class="s">widget</span><span class="e">\&quot;</span><span class="s">: {</span>
<span class="s">    </span><span class="e">\&quot;</span><span class="s">debug</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">on</span><span class="e">\&quot;</span><span class="s">,</span>
<span class="s">    </span><span class="e">\&quot;</span><span class="s">window</span><span class="e">\&quot;</span><span class="s">: {</span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">title</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">Sample Konfabulator Widget</span><span class="e">\&quot;</span><span class="s">,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">name</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">main_window</span><span class="e">\&quot;</span><span class="s">,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">width</span><span class="e">\&quot;</span><span class="s">: 500,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">height</span><span class="e">\&quot;</span><span class="s">: 500</span>
<span class="s">    },    </span><span class="e">\&quot;</span><span class="s">image</span><span class="e">\&quot;</span><span class="s">: { </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">src</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">Images/Sun.png</span><span class="e">\&quot;</span><span class="s">,</span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">name</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">sun1</span><span class="e">\&quot;</span><span class="s">,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">hOffset</span><span class="e">\&quot;</span><span class="s">: 250,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">vOffset</span><span class="e">\&quot;</span><span class="s">: 250,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">alignment</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">center\&quot;</span>
<span class="s">    },    </span><span class="e">\&quot;</span><span class="s">text</span><span class="e">\&quot;</span><span class="s">: {</span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">data</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">Click Here</span><span class="e">\&quot;</span><span class="s">,</span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">size</span><span class="e">\&quot;</span><span class="s">: 36,</span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">style</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">bold</span><span class="e">\&quot;</span><span class="s">,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">name</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">text1</span><span class="e">\&quot;</span><span class="s">,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">hOffset</span><span class="e">\&quot;</span><span class="s">: 250,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">vOffset</span><span class="e">\&quot;</span><span class="s">: 100,        </span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">alignment</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">center</span><span class="e">\&quot;</span><span class="s">,</span>
<span class="s">        </span><span class="e">\&quot;</span><span class="s">onMouseUp</span><span class="e">\&quot;</span><span class="s">: </span><span class="e">\&quot;</span><span class="s">sun1.opacity = (sun1.opacity / 100) * 90;\&quot;</span>
<span class="s">    }</span>
<span class="s">}}&quot;</span>

<span class="c">// Testing</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs98', 213)" onmouseover="showTip(event, 'fs98', 213)" class="i">jsonAst</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs95', 214)" onmouseover="showTip(event, 'fs95', 214)" class="f">parseJson</span> <span onmouseout="hideTip(event, 'fs97', 215)" onmouseover="showTip(event, 'fs97', 215)" class="i">widgetJson</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">type &#39;a Parser = Parser of (char list -&gt; (&#39;a * char list) list)<br />let parse (Parser p) = p <br /><br />type ParserBuilder () =<br />&#160;&#160;&#160;&#160;member x.Return a = Parser (fun cs -&gt; [a, cs])<br />&#160;&#160;&#160;&#160;member x.Bind (p, f) = Parser (fun cs -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match parse p cs with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (c&#39;, cs&#39;)::_ -&gt; parse (f c&#39;) cs&#39;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; []<br />&#160;&#160;&#160;&#160;)<br />&#160;&#160;&#160;&#160;member x.Zero () = Parser (fun _ -&gt; [])<br />&#160;&#160;&#160;&#160;member x.ReturnFrom a = a<br /><br />let parser = ParserBuilder() <br /><br />let item = Parser (function [] -&gt; [] | c::cs -&gt; [c, cs])<br />let sat pred = parser {<br />&#160;&#160;&#160;&#160;let! c = item<br />&#160;&#160;&#160;&#160;if pred c then return c<br />}<br />let tChar c = sat ((=) c)<br /><br />/// Concatenates the results of applying parser p and parser q<br />let (&lt;+&gt;) p q = Parser (fun cs -&gt; (parse p cs) @ (parse q cs))<br />/// Applies parser p or parser q and returns at most one result<br />let (&lt;|&gt;) p q = Parser (fun cs -&gt; <br />&#160;&#160;&#160;&#160;match (parse (p &lt;+&gt; q) cs) with<br />&#160;&#160;&#160;&#160;| []    -&gt; []<br />&#160;&#160;&#160;&#160;| x::xs -&gt; [x]<br />)<br /><br />/// Given a char list, returns a parser that parsers it<br />let rec text = function<br />&#160;&#160;&#160;&#160;| []  -&gt; parser { return [] }<br />&#160;&#160;&#160;&#160;| c::cs -&gt; parser { <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! _ = tChar c<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! _ = text cs<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return c::cs <br />&#160;&#160;&#160;&#160;} <br /><br />/// Combines many (0 or more) applications of parser p<br />let rec many p = (many1 p) &lt;|&gt; parser { return [] }<br />/// Combines at least one (1 or more) applications of parser p<br />and many1 p = <br />&#160;&#160;&#160;&#160;parser { <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! r = p<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! rs = many p<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return r::rs<br />&#160;&#160;&#160;&#160;} <br /><br />/// Combines 0 or more applications of parser p separated by parser sep<br />let rec sepby p sep =  (sepby1 p sep) &lt;|&gt; parser { return [] }<br />/// Combines 1 or more applications of parser p separated by parser sep<br />and sepby1 p sep = <br />&#160;&#160;&#160;&#160;parser {<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! r = p<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! rs = many (parser { <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! _ = sep<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return! p<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;})<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return r::rs<br />&#160;&#160;&#160;&#160;} <br /><br />/// Chain 0 or more applications of parser p separated by applications of parser op<br />let rec chainl p op a = (chainl1  p op) &lt;|&gt; parser { return a }<br />/// Chain 1 or more applications of parser p separated by applications of parser op<br />and chainl1 p op =  <br />&#160;&#160;&#160;&#160;let rec rest r = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;parser {<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! f = op<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! r&#39; = p<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return! rest (f r r&#39;)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &lt;|&gt; parser {return r}<br /><br />&#160;&#160;&#160;&#160;parser { let! a = p in return! rest a }<br /><br />let isSpace =<br />&#160;&#160;&#160;&#160;// list of &quot;space&quot; chars based on <br />&#160;&#160;&#160;&#160;// http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html#v:isSpace<br />&#160;&#160;&#160;&#160;let cs = [&#39; &#39;; &#39;\t&#39;; &#39;\n&#39;; &#39;\r&#39;; &#39;\f&#39;; &#39;\v&#39;] |&gt; Set.ofList<br />&#160;&#160;&#160;&#160;cs.Contains<br />let space = many (sat isSpace)<br /><br />let token p = parser { <br />&#160;&#160;&#160;&#160;let! r = p<br />&#160;&#160;&#160;&#160;let! _ = space<br />&#160;&#160;&#160;&#160;return r<br />}<br /><br />let symb = text &gt;&gt; token<br /><br />let apply p = parse (parser {<br />&#160;&#160;&#160;&#160;let! _ = space<br />&#160;&#160;&#160;&#160;let! r = p<br />&#160;&#160;&#160;&#160;return r<br />})<br /><br />let s2cs = List.ofSeq<br />let cs2s cs = new String(Array.ofList cs)<br /><br />let runParser p = <br />&#160;&#160;&#160;&#160;s2cs &gt;&gt;<br />&#160;&#160;&#160;&#160;apply p &gt;&gt;<br />&#160;&#160;&#160;&#160;function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; failwith &quot;Error parsing string&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (result,_)::_ -&gt; result</div>
<div class="tip" id="fs3">val isHexDigit : (char -&gt; bool)<br /><br />Full name: Script.isHexDigit</div>
<div class="tip" id="fs4">val ds : Set&lt;char&gt;</div>
<div class="tip" id="fs5">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;member IsProperSupersetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Set&lt;_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs6">val ofList : elements:&#39;T list -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.ofList</div>
<div class="tip" id="fs7">member Set.Contains : value:&#39;T -&gt; bool</div>
<div class="tip" id="fs8">val hexDigit : char Parser<br /><br />Full name: Script.hexDigit</div>
<div class="tip" id="fs9">val sat : pred:(char -&gt; bool) -&gt; char Parser<br /><br />Full name: Script.sat</div>
<div class="tip" id="fs10">val charToken : (char -&gt; char Parser)<br /><br />Full name: Script.charToken</div>
<div class="tip" id="fs11">val tChar : c:char -&gt; char Parser<br /><br />Full name: Script.tChar</div>
<div class="tip" id="fs12">val token : p:&#39;a Parser -&gt; &#39;a Parser<br /><br />Full name: Script.token</div>
<div class="tip" id="fs13">val betweenChars : c1:char -&gt; c2:char -&gt; f:(unit -&gt; &#39;a Parser) -&gt; &#39;a Parser<br /><br />Full name: Script.betweenChars</div>
<div class="tip" id="fs14">val c1 : char</div>
<div class="tip" id="fs15">val c2 : char</div>
<div class="tip" id="fs16">val f : (unit -&gt; &#39;a Parser)</div>
<div class="tip" id="fs17">val parser : ParserBuilder<br /><br />Full name: Script.parser</div>
<div class="tip" id="fs18">val r : &#39;a</div>
<div class="tip" id="fs19">val zeroOrOne : p:&#39;a list Parser -&gt; &#39;a list Parser<br /><br />Full name: Script.zeroOrOne</div>
<div class="tip" id="fs20">val p : &#39;a list Parser</div>
<div class="tip" id="fs21">val ret : &#39;a list</div>
<div class="tip" id="fs22">val q : &#39;a list Parser</div>
<div class="tip" id="fs23">val rp : &#39;a list</div>
<div class="tip" id="fs24">val rq : &#39;a list</div>
<div class="tip" id="fs25">type JSValue =<br />&#160;&#160;| JSString of string<br />&#160;&#160;| JSNumber of float<br />&#160;&#160;| JSObject of (JSValue * JSValue) list<br />&#160;&#160;| JSArray of JSValue list<br />&#160;&#160;| JSBool of bool<br />&#160;&#160;| JSNull<br /><br />Full name: Script.JSValue</div>
<div class="tip" id="fs26">union case JSValue.JSString: string -&gt; JSValue</div>
<div class="tip" id="fs27">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs28">union case JSValue.JSNumber: float -&gt; JSValue</div>
<div class="tip" id="fs29">Multiple items<br />val float : value:&#39;T -&gt; float (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.float<br /><br />--------------------<br />type float = Double<br /><br />Full name: Microsoft.FSharp.Core.float<br /><br />--------------------<br />type float&lt;&#39;Measure&gt; = float<br /><br />Full name: Microsoft.FSharp.Core.float&lt;_&gt;</div>
<div class="tip" id="fs30">union case JSValue.JSObject: (JSValue * JSValue) list -&gt; JSValue</div>
<div class="tip" id="fs31">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs32">union case JSValue.JSArray: JSValue list -&gt; JSValue</div>
<div class="tip" id="fs33">union case JSValue.JSBool: bool -&gt; JSValue</div>
<div class="tip" id="fs34">type bool = Boolean<br /><br />Full name: Microsoft.FSharp.Core.bool</div>
<div class="tip" id="fs35">union case JSValue.JSNull: JSValue</div>
<div class="tip" id="fs36">val jsNull : JSValue Parser<br /><br />Full name: Script.jsNull</div>
<div class="tip" id="fs37">val nullLiteral : char list</div>
<div class="tip" id="fs38">val s2cs : (seq&lt;&#39;a&gt; -&gt; &#39;a list)<br /><br />Full name: Script.s2cs</div>
<div class="tip" id="fs39">val symb : (char list -&gt; char list Parser)<br /><br />Full name: Script.symb</div>
<div class="tip" id="fs40">val jsBool : JSValue Parser<br /><br />Full name: Script.jsBool</div>
<div class="tip" id="fs41">val trueLit : char list</div>
<div class="tip" id="fs42">val falseLit : char list</div>
<div class="tip" id="fs43">val jsNumber : JSValue Parser<br /><br />Full name: Script.jsNumber</div>
<div class="tip" id="fs44">val digitsParser : char list Parser</div>
<div class="tip" id="fs45">val many1 : p:&#39;a Parser -&gt; &#39;a list Parser<br /><br />Full name: Script.many1<br /><em><br /><br />&#160;Combines at least one (1 or more) applications of parser p</em></div>
<div class="tip" id="fs46">type Char =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 1 overload<br />&#160;&#160;&#160;&#160;static val MaxValue : char<br />&#160;&#160;&#160;&#160;static val MinValue : char<br />&#160;&#160;&#160;&#160;static member ConvertFromUtf32 : utf32:int -&gt; string<br />&#160;&#160;&#160;&#160;static member ConvertToUtf32 : highSurrogate:char * lowSurrogate:char -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;static member GetNumericValue : c:char -&gt; float + 1 overload<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Char</div>
<div class="tip" id="fs47">Char.IsDigit(c: char) : bool<br />Char.IsDigit(s: string, index: int) : bool</div>
<div class="tip" id="fs48">val intParser : char list Parser</div>
<div class="tip" id="fs49">val text : _arg1:char list -&gt; char list Parser<br /><br />Full name: Script.text<br /><em><br /><br />&#160;Given a char list, returns a parser that parsers it</em></div>
<div class="tip" id="fs50">val fracParser : char list Parser</div>
<div class="tip" id="fs51">val expParser : char list Parser</div>
<div class="tip" id="fs52">val result : char list</div>
<div class="tip" id="fs53">val space : char list Parser<br /><br />Full name: Script.space</div>
<div class="tip" id="fs54">val cs2s : cs:char list -&gt; String<br /><br />Full name: Script.cs2s</div>
<div class="tip" id="fs55">type Double =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 3 overloads<br />&#160;&#160;&#160;&#160;static val MinValue : float<br />&#160;&#160;&#160;&#160;static val MaxValue : float<br />&#160;&#160;&#160;&#160;static val Epsilon : float<br />&#160;&#160;&#160;&#160;static val NegativeInfinity : float<br />&#160;&#160;&#160;&#160;static val PositiveInfinity : float<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Double</div>
<div class="tip" id="fs56">Double.Parse(s: string) : float<br />Double.Parse(s: string, provider: IFormatProvider) : float<br />Double.Parse(s: string, style: Globalization.NumberStyles) : float<br />Double.Parse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider) : float</div>
<div class="tip" id="fs57">val jsString : JSValue Parser<br /><br />Full name: Script.jsString</div>
<div class="tip" id="fs58">val isChar : (char -&gt; bool)</div>
<div class="tip" id="fs59">val c : char</div>
<div class="tip" id="fs60">val isEscChar : (char -&gt; bool)</div>
<div class="tip" id="fs61">val cs : Set&lt;char&gt;</div>
<div class="tip" id="fs62">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs63">val ofSeq : source:seq&lt;&#39;T&gt; -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.ofSeq</div>
<div class="tip" id="fs64">val replaceEscChar : (char -&gt; char)</div>
<div class="tip" id="fs65">val other : char</div>
<div class="tip" id="fs66">val escChars : char Parser</div>
<div class="tip" id="fs67">val uniChars : char Parser</div>
<div class="tip" id="fs68">val d1 : char</div>
<div class="tip" id="fs69">val d2 : char</div>
<div class="tip" id="fs70">val d3 : char</div>
<div class="tip" id="fs71">val d4 : char</div>
<div class="tip" id="fs72">val r : char</div>
<div class="tip" id="fs73">val s : String</div>
<div class="tip" id="fs74">Multiple items<br />type String =<br />&#160;&#160;new : value:char -&gt; string + 7 overloads<br />&#160;&#160;member Chars : int -&gt; char<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;member Contains : value:string -&gt; bool<br />&#160;&#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&gt; unit<br />&#160;&#160;member EndsWith : value:string -&gt; bool + 2 overloads<br />&#160;&#160;member Equals : obj:obj -&gt; bool + 2 overloads<br />&#160;&#160;member GetEnumerator : unit -&gt; CharEnumerator<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;...<br /><br />Full name: System.String<br /><br />--------------------<br />String(value: nativeptr&lt;char&gt;) : unit<br />String(value: nativeptr&lt;sbyte&gt;) : unit<br />String(value: char []) : unit<br />String(c: char, count: int) : unit<br />String(value: nativeptr&lt;char&gt;, startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int) : unit<br />String(value: char [], startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int, enc: Text.Encoding) : unit</div>
<div class="tip" id="fs75">type Byte =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 3 overloads<br />&#160;&#160;&#160;&#160;static val MaxValue : byte<br />&#160;&#160;&#160;&#160;static val MinValue : byte<br />&#160;&#160;&#160;&#160;static member Parse : s:string -&gt; byte + 3 overloads<br />&#160;&#160;&#160;&#160;static member TryParse : s:string * result:byte -&gt; bool + 1 overload<br />&#160;&#160;end<br /><br />Full name: System.Byte</div>
<div class="tip" id="fs76">Byte.Parse(s: string) : byte<br />Byte.Parse(s: string, provider: IFormatProvider) : byte<br />Byte.Parse(s: string, style: Globalization.NumberStyles) : byte<br />Byte.Parse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider) : byte</div>
<div class="tip" id="fs77">namespace System.Globalization</div>
<div class="tip" id="fs78">type NumberStyles =<br />&#160;&#160;| None = 0<br />&#160;&#160;| AllowLeadingWhite = 1<br />&#160;&#160;| AllowTrailingWhite = 2<br />&#160;&#160;| AllowLeadingSign = 4<br />&#160;&#160;| AllowTrailingSign = 8<br />&#160;&#160;| AllowParentheses = 16<br />&#160;&#160;| AllowDecimalPoint = 32<br />&#160;&#160;| AllowThousands = 64<br />&#160;&#160;| AllowExponent = 128<br />&#160;&#160;| AllowCurrencySymbol = 256<br />&#160;&#160;...<br /><br />Full name: System.Globalization.NumberStyles</div>
<div class="tip" id="fs79">field Globalization.NumberStyles.HexNumber = 515</div>
<div class="tip" id="fs80">Multiple items<br />val char : value:&#39;T -&gt; char (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.char<br /><br />--------------------<br />type char = Char<br /><br />Full name: Microsoft.FSharp.Core.char</div>
<div class="tip" id="fs81">val chars : char list Parser</div>
<div class="tip" id="fs82">val many : p:&#39;a Parser -&gt; &#39;a list Parser<br /><br />Full name: Script.many<br /><em><br /><br />&#160;Combines many (0 or more) applications of parser p</em></div>
<div class="tip" id="fs83">val cs : char list</div>
<div class="tip" id="fs84">val jsValue : JSValue Parser<br /><br />Full name: Script.jsValue</div>
<div class="tip" id="fs85">val jsElements : JSValue list Parser<br /><br />Full name: Script.jsElements</div>
<div class="tip" id="fs86">val sepby : p:&#39;a Parser -&gt; sep:&#39;b Parser -&gt; &#39;a list Parser<br /><br />Full name: Script.sepby<br /><em><br /><br />&#160;Combines 0 or more applications of parser p separated by parser sep</em></div>
<div class="tip" id="fs87">val jsArray : JSValue Parser<br /><br />Full name: Script.jsArray</div>
<div class="tip" id="fs88">val values : JSValue list</div>
<div class="tip" id="fs89">val jsMembers : (JSValue * JSValue) list Parser<br /><br />Full name: Script.jsMembers</div>
<div class="tip" id="fs90">val jsPair : (JSValue * JSValue) Parser<br /><br />Full name: Script.jsPair</div>
<div class="tip" id="fs91">val key : JSValue</div>
<div class="tip" id="fs92">val value : JSValue</div>
<div class="tip" id="fs93">val jsObject : JSValue Parser<br /><br />Full name: Script.jsObject</div>
<div class="tip" id="fs94">val members : (JSValue * JSValue) list</div>
<div class="tip" id="fs95">val parseJson : (string -&gt; JSValue)<br /><br />Full name: Script.parseJson</div>
<div class="tip" id="fs96">val runParser : p:&#39;a Parser -&gt; (seq&lt;char&gt; -&gt; &#39;a)<br /><br />Full name: Script.runParser</div>
<div class="tip" id="fs97">val widgetJson : string<br /><br />Full name: Script.widgetJson</div>
<div class="tip" id="fs98">val jsonAst : JSValue<br /><br />Full name: Script.jsonAst</div>

