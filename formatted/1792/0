<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">(* Reassemble &quot;chunks&quot; into &quot;data&quot;.</span>
<span class="c"> *</span>
<span class="c"> * The input sequence is a stream of chunks. A chunk may correspond to zero or more pieces of data, and one or more chunks may correspond to a piece of data.</span>
<span class="c"> *</span>
<span class="c"> * func is given the current state and sees if it can extract any data from it.</span>
<span class="c"> * If it can, it will return Some of that data and whatever is left over. This leftover will become the current state for the next invocation.</span>
<span class="c"> * If it can&#39;t extract any data from the current state it returns None. Then reassemble pulls another chunk from the stream, adds it to the state, and invokes func again.</span>
<span class="c"> *)</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">reassemble</span> (<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">func</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> (<span class="o">&#39;</span><span class="i">T</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">T</span>) <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">option</span>) (<span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">initial</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span>) (<span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">sequence</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">seq</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>)<span class="o">:</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">seq</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">enumerator</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="i">sequence</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="f">GetEnumerator</span>()

    <span class="c">(* Pull next chunk from input and add it to current state</span>
<span class="c">     *)</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="f">pullNext</span> (<span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">state</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs6', 13)" onmouseover="showTip(event, 'fs6', 13)" class="i">seq</span> {
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="i">hasNext</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="i">enumerator</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="f">MoveNext</span>()
            <span class="k">match</span> <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="i">hasNext</span> <span class="k">with</span>
            | <span class="k">true</span> <span class="k">-&gt;</span>
                <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="f">pushNext</span> (<span onmouseout="hideTip(event, 'fs10', 19)" onmouseover="showTip(event, 'fs10', 19)" class="i">state</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs7', 20)" onmouseover="showTip(event, 'fs7', 20)" class="i">enumerator</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="i">Current</span>)
            | <span class="k">false</span> <span class="k">-&gt;</span>
                <span class="c">(* end-of-stream but func doesn&#39;t consider it a complete piece yet. Send it anyway. *)</span>
                <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs10', 22)" onmouseover="showTip(event, 'fs10', 22)" class="i">state</span>
        }
    <span class="c">(* Push current state to func</span>
<span class="c">     *)</span>
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="f">pushNext</span> (<span onmouseout="hideTip(event, 'fs10', 24)" onmouseover="showTip(event, 'fs10', 24)" class="i">state</span><span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs6', 25)" onmouseover="showTip(event, 'fs6', 25)" class="i">seq</span> {
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="i">next</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 27)" onmouseover="showTip(event, 'fs2', 27)" class="f">func</span> <span onmouseout="hideTip(event, 'fs10', 28)" onmouseover="showTip(event, 'fs10', 28)" class="i">state</span>
            <span class="k">match</span> <span onmouseout="hideTip(event, 'fs15', 29)" onmouseover="showTip(event, 'fs15', 29)" class="i">next</span> <span class="k">with</span>
            | <span onmouseout="hideTip(event, 'fs16', 30)" onmouseover="showTip(event, 'fs16', 30)" class="p">Some</span> (<span onmouseout="hideTip(event, 'fs17', 31)" onmouseover="showTip(event, 'fs17', 31)" class="i">result</span>, <span onmouseout="hideTip(event, 'fs10', 32)" onmouseover="showTip(event, 'fs10', 32)" class="i">state</span>) <span class="k">-&gt;</span>
                <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="i">result</span>
                <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs13', 34)" onmouseover="showTip(event, 'fs13', 34)" class="f">pushNext</span> <span onmouseout="hideTip(event, 'fs10', 35)" onmouseover="showTip(event, 'fs10', 35)" class="i">state</span>
            | <span onmouseout="hideTip(event, 'fs18', 36)" onmouseover="showTip(event, 'fs18', 36)" class="p">None</span> <span class="k">-&gt;</span>
                <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs9', 37)" onmouseover="showTip(event, 'fs9', 37)" class="f">pullNext</span> <span onmouseout="hideTip(event, 'fs10', 38)" onmouseover="showTip(event, 'fs10', 38)" class="i">state</span>
        }

    <span onmouseout="hideTip(event, 'fs13', 39)" onmouseover="showTip(event, 'fs13', 39)" class="f">pushNext</span> <span onmouseout="hideTip(event, 'fs4', 40)" onmouseover="showTip(event, 'fs4', 40)" class="i">initial</span>

<span class="c">(* Convert chunks of strings into \n-delimited lines</span>
<span class="c"> *)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 41)" onmouseover="showTip(event, 'fs19', 41)" class="f">getLines</span> (<span onmouseout="hideTip(event, 'fs20', 42)" onmouseover="showTip(event, 'fs20', 42)" class="i">stream</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs6', 43)" onmouseover="showTip(event, 'fs6', 43)" class="t">seq</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs21', 44)" onmouseover="showTip(event, 'fs21', 44)" class="t">string</span><span class="o">&gt;</span>)<span class="o">:</span> <span onmouseout="hideTip(event, 'fs6', 45)" onmouseover="showTip(event, 'fs6', 45)" class="t">seq</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs21', 46)" onmouseover="showTip(event, 'fs21', 46)" class="t">string</span><span class="o">&gt;</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs20', 47)" onmouseover="showTip(event, 'fs20', 47)" class="i">stream</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs1', 48)" onmouseover="showTip(event, 'fs1', 48)" class="f">reassemble</span>
        (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs22', 49)" onmouseover="showTip(event, 'fs22', 49)" class="i">chunk</span> <span class="k">-&gt;</span>
            <span class="k">match</span> <span onmouseout="hideTip(event, 'fs22', 50)" onmouseover="showTip(event, 'fs22', 50)" class="i">chunk</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 51)" onmouseover="showTip(event, 'fs23', 51)" class="f">IndexOf</span>(<span class="s">&#39;\n&#39;</span>) <span class="k">with</span>
            | <span class="o">-</span><span class="n">1</span> <span class="k">-&gt;</span>
                <span onmouseout="hideTip(event, 'fs18', 52)" onmouseover="showTip(event, 'fs18', 52)" class="p">None</span>
            | <span onmouseout="hideTip(event, 'fs24', 53)" onmouseover="showTip(event, 'fs24', 53)" class="i">index</span> <span class="k">-&gt;</span>
                <span onmouseout="hideTip(event, 'fs16', 54)" onmouseover="showTip(event, 'fs16', 54)" class="p">Some</span> (<span onmouseout="hideTip(event, 'fs22', 55)" onmouseover="showTip(event, 'fs22', 55)" class="i">chunk</span><span class="o">.</span>[<span class="n">0..</span><span onmouseout="hideTip(event, 'fs24', 56)" onmouseover="showTip(event, 'fs24', 56)" class="i">index</span> <span class="o">-</span> <span class="n">1</span>], <span onmouseout="hideTip(event, 'fs22', 57)" onmouseover="showTip(event, 'fs22', 57)" class="i">chunk</span><span class="o">.</span>[<span onmouseout="hideTip(event, 'fs24', 58)" onmouseover="showTip(event, 'fs24', 58)" class="i">index</span> <span class="o">+</span> <span class="n">1..</span>])
        )
        <span class="s">&quot;&quot;</span>


<span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 59)" onmouseover="showTip(event, 'fs25', 59)" class="i">stream</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs26', 60)" onmouseover="showTip(event, 'fs26', 60)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 61)" onmouseover="showTip(event, 'fs27', 61)" class="f">ofArray</span> [| <span class="s">&quot;asd</span><span class="e">\n</span><span class="s">qw&quot;</span>; <span class="s">&quot;e</span><span class="e">\n</span><span class="s">zxc&quot;</span>; <span class="s">&quot;rty&quot;</span>; <span class="s">&quot;</span><span class="e">\n</span><span class="s">&quot;</span>; <span class="s">&quot;fgh</span><span class="e">\n</span><span class="s">vbn&quot;</span>; |]

<span class="c">(* &quot;asd&quot;; &quot;qwe&quot;; &quot;zxcrty&quot;; &quot;fgh&quot;; &quot;vbn&quot;; *)</span>
<span onmouseout="hideTip(event, 'fs19', 62)" onmouseover="showTip(event, 'fs19', 62)" class="f">getLines</span> <span onmouseout="hideTip(event, 'fs25', 63)" onmouseover="showTip(event, 'fs25', 63)" class="i">stream</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs26', 64)" onmouseover="showTip(event, 'fs26', 64)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 65)" onmouseover="showTip(event, 'fs28', 65)" class="f">iter</span> (<span onmouseout="hideTip(event, 'fs29', 66)" onmouseover="showTip(event, 'fs29', 66)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">&quot;</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val reassemble : func:(&#39;T -&gt; (&#39;T * &#39;T) option) -&gt; initial:&#39;T -&gt; sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt; (requires member ( + ))<br /><br />Full name: Script.reassemble</div>
<div class="tip" id="fs2">val func : (&#39;T -&gt; (&#39;T * &#39;T) option) (requires member ( + ))</div>
<div class="tip" id="fs3">type &#39;T option = Option&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.option&lt;_&gt;</div>
<div class="tip" id="fs4">val initial : &#39;T (requires member ( + ))</div>
<div class="tip" id="fs5">val sequence : seq&lt;&#39;T&gt; (requires member ( + ))</div>
<div class="tip" id="fs6">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = System.Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs7">val enumerator : System.Collections.Generic.IEnumerator&lt;&#39;T&gt; (requires member ( + ))</div>
<div class="tip" id="fs8">System.Collections.Generic.IEnumerable.GetEnumerator() : System.Collections.Generic.IEnumerator&lt;&#39;T&gt;</div>
<div class="tip" id="fs9">val pullNext : (&#39;T -&gt; seq&lt;&#39;T&gt;) (requires member ( + ))</div>
<div class="tip" id="fs10">val state : &#39;T (requires member ( + ))</div>
<div class="tip" id="fs11">val hasNext : bool</div>
<div class="tip" id="fs12">System.Collections.IEnumerator.MoveNext() : bool</div>
<div class="tip" id="fs13">val pushNext : (&#39;T -&gt; seq&lt;&#39;T&gt;) (requires member ( + ))</div>
<div class="tip" id="fs14">property System.Collections.Generic.IEnumerator.Current: &#39;T</div>
<div class="tip" id="fs15">val next : (&#39;T * &#39;T) option (requires member ( + ))</div>
<div class="tip" id="fs16">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs17">val result : &#39;T (requires member ( + ))</div>
<div class="tip" id="fs18">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs19">val getLines : stream:seq&lt;string&gt; -&gt; seq&lt;string&gt;<br /><br />Full name: Script.getLines</div>
<div class="tip" id="fs20">val stream : seq&lt;string&gt;</div>
<div class="tip" id="fs21">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs22">val chunk : string</div>
<div class="tip" id="fs23">System.String.IndexOf(value: string) : int<br />System.String.IndexOf(value: char) : int<br />System.String.IndexOf(value: string, comparisonType: System.StringComparison) : int<br />System.String.IndexOf(value: string, startIndex: int) : int<br />System.String.IndexOf(value: char, startIndex: int) : int<br />System.String.IndexOf(value: string, startIndex: int, comparisonType: System.StringComparison) : int<br />System.String.IndexOf(value: string, startIndex: int, count: int) : int<br />System.String.IndexOf(value: char, startIndex: int, count: int) : int<br />System.String.IndexOf(value: string, startIndex: int, count: int, comparisonType: System.StringComparison) : int</div>
<div class="tip" id="fs24">val index : int</div>
<div class="tip" id="fs25">val stream : seq&lt;string&gt;<br /><br />Full name: Script.stream</div>
<div class="tip" id="fs26">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs27">val ofArray : source:&#39;T [] -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.ofArray</div>
<div class="tip" id="fs28">val iter : action:(&#39;T -&gt; unit) -&gt; source:seq&lt;&#39;T&gt; -&gt; unit<br /><br />Full name: Microsoft.FSharp.Collections.Seq.iter</div>
<div class="tip" id="fs29">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

