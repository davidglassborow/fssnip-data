<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">NUnit</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Framework</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">Calculator</span>() <span class="o">=</span> 
    <span class="k">member</span> <span class="i">__</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="f">Add</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">x</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="i">y</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="i">y</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="f">``Given I have entered``</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">firstNumber</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="f">continuation</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">calculator</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 13)" onmouseover="showTip(event, 'fs3', 13)" class="t">Calculator</span>()
    <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="f">continuation</span> (<span onmouseout="hideTip(event, 'fs8', 15)" onmouseover="showTip(event, 'fs8', 15)" class="i">firstNumber</span>, <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="i">calculator</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="f">``into the calculator``</span> (<span onmouseout="hideTip(event, 'fs12', 18)" onmouseover="showTip(event, 'fs12', 18)" class="i">state</span>,<span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="i">calculator</span>) <span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="f">continuation</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="f">continuation</span> (<span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="i">state</span>, <span onmouseout="hideTip(event, 'fs13', 23)" onmouseover="showTip(event, 'fs13', 23)" class="i">calculator</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 24)" onmouseover="showTip(event, 'fs15', 24)" class="f">``And I have entered``</span> (<span onmouseout="hideTip(event, 'fs8', 25)" onmouseover="showTip(event, 'fs8', 25)" class="i">firstNumber</span>, <span onmouseout="hideTip(event, 'fs13', 26)" onmouseover="showTip(event, 'fs13', 26)" class="i">calculator</span>) <span onmouseout="hideTip(event, 'fs16', 27)" onmouseover="showTip(event, 'fs16', 27)" class="i">secondNumber</span> <span onmouseout="hideTip(event, 'fs17', 28)" onmouseover="showTip(event, 'fs17', 28)" class="f">continuation</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="f">continuation</span> ((<span onmouseout="hideTip(event, 'fs8', 30)" onmouseover="showTip(event, 'fs8', 30)" class="i">firstNumber</span>, <span onmouseout="hideTip(event, 'fs16', 31)" onmouseover="showTip(event, 'fs16', 31)" class="i">secondNumber</span>), <span onmouseout="hideTip(event, 'fs13', 32)" onmouseover="showTip(event, 'fs13', 32)" class="i">calculator</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs18', 33)" onmouseover="showTip(event, 'fs18', 33)" class="f">``When I press add``</span> ((<span onmouseout="hideTip(event, 'fs19', 34)" onmouseover="showTip(event, 'fs19', 34)" class="i">firstNumber</span>, <span onmouseout="hideTip(event, 'fs20', 35)" onmouseover="showTip(event, 'fs20', 35)" class="i">secondNumber</span>), <span onmouseout="hideTip(event, 'fs10', 36)" onmouseover="showTip(event, 'fs10', 36)" class="i">calculator</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs3', 37)" onmouseover="showTip(event, 'fs3', 37)" class="t">Calculator</span>) <span onmouseout="hideTip(event, 'fs21', 38)" onmouseover="showTip(event, 'fs21', 38)" class="f">continuation</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 39)" onmouseover="showTip(event, 'fs22', 39)" class="i">actual</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 40)" onmouseover="showTip(event, 'fs10', 40)" class="i">calculator</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 41)" onmouseover="showTip(event, 'fs23', 41)" class="f">Add</span> <span onmouseout="hideTip(event, 'fs19', 42)" onmouseover="showTip(event, 'fs19', 42)" class="i">firstNumber</span> <span onmouseout="hideTip(event, 'fs20', 43)" onmouseover="showTip(event, 'fs20', 43)" class="i">secondNumber</span>
    <span onmouseout="hideTip(event, 'fs21', 44)" onmouseover="showTip(event, 'fs21', 44)" class="f">continuation</span> <span onmouseout="hideTip(event, 'fs22', 45)" onmouseover="showTip(event, 'fs22', 45)" class="i">actual</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 46)" onmouseover="showTip(event, 'fs24', 46)" class="f">``Then the result should be``</span> <span onmouseout="hideTip(event, 'fs22', 47)" onmouseover="showTip(event, 'fs22', 47)" class="i">actual</span> (<span onmouseout="hideTip(event, 'fs25', 48)" onmouseover="showTip(event, 'fs25', 48)" class="i">expected</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs26', 49)" onmouseover="showTip(event, 'fs26', 49)" class="t">int</span>) <span onmouseout="hideTip(event, 'fs27', 50)" onmouseover="showTip(event, 'fs27', 50)" class="i">continuation</span> <span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs28', 51)" onmouseover="showTip(event, 'fs28', 51)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 52)" onmouseover="showTip(event, 'fs29', 52)" class="f">AreEqual</span>(<span onmouseout="hideTip(event, 'fs25', 53)" onmouseover="showTip(event, 'fs25', 53)" class="i">expected</span>, <span onmouseout="hideTip(event, 'fs22', 54)" onmouseover="showTip(event, 'fs22', 54)" class="i">actual</span>)
    <span onmouseout="hideTip(event, 'fs27', 55)" onmouseover="showTip(event, 'fs27', 55)" class="i">continuation</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs30', 56)" onmouseover="showTip(event, 'fs30', 56)" class="i">``on the screen``</span> <span class="o">=</span> ()
   

[&lt;<span onmouseout="hideTip(event, 'fs31', 57)" onmouseover="showTip(event, 'fs31', 57)" class="t">Test</span>&gt;]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs32', 58)" onmouseover="showTip(event, 'fs32', 58)" class="f">testAdd</span> ()<span class="o">=</span> 
    <span onmouseout="hideTip(event, 'fs7', 59)" onmouseover="showTip(event, 'fs7', 59)" class="f">``Given I have entered``</span> <span class="n">50</span> <span onmouseout="hideTip(event, 'fs11', 60)" onmouseover="showTip(event, 'fs11', 60)" class="f">``into the calculator``</span> 
     <span onmouseout="hideTip(event, 'fs15', 61)" onmouseover="showTip(event, 'fs15', 61)" class="f">``And I have entered``</span> <span class="n">70</span> <span onmouseout="hideTip(event, 'fs11', 62)" onmouseover="showTip(event, 'fs11', 62)" class="f">``into the calculator``</span> 
     <span onmouseout="hideTip(event, 'fs18', 63)" onmouseover="showTip(event, 'fs18', 63)" class="f">``When I press add``</span> 
     <span onmouseout="hideTip(event, 'fs24', 64)" onmouseover="showTip(event, 'fs24', 64)" class="f">``Then the result should be``</span> <span class="n">120</span> <span onmouseout="hideTip(event, 'fs30', 65)" onmouseover="showTip(event, 'fs30', 65)" class="i">``on the screen``</span>
 
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace NUnit</div>
<div class="tip" id="fs2">namespace NUnit.Framework</div>
<div class="tip" id="fs3">Multiple items<br />type Calculator =<br />&#160;&#160;new : unit -&gt; Calculator<br />&#160;&#160;member Add : x:int -&gt; y:int -&gt; int<br /><br />Full name: Script.Calculator<br /><br />--------------------<br />new : unit -&gt; Calculator</div>
<div class="tip" id="fs4">member Calculator.Add : x:int -&gt; y:int -&gt; int<br /><br />Full name: Script.Calculator.Add</div>
<div class="tip" id="fs5">val x : int</div>
<div class="tip" id="fs6">val y : int</div>
<div class="tip" id="fs7">val ( Given I have entered ) : firstNumber:&#39;a -&gt; continuation:(&#39;a * Calculator -&gt; &#39;b) -&gt; &#39;b<br /><br />Full name: Script.( Given I have entered )</div>
<div class="tip" id="fs8">val firstNumber : &#39;a</div>
<div class="tip" id="fs9">val continuation : (&#39;a * Calculator -&gt; &#39;b)</div>
<div class="tip" id="fs10">val calculator : Calculator</div>
<div class="tip" id="fs11">val ( into the calculator ) : state:&#39;a * calculator:&#39;b -&gt; continuation:(&#39;a * &#39;b -&gt; &#39;c) -&gt; &#39;c<br /><br />Full name: Script.( into the calculator )</div>
<div class="tip" id="fs12">val state : &#39;a</div>
<div class="tip" id="fs13">val calculator : &#39;b</div>
<div class="tip" id="fs14">val continuation : (&#39;a * &#39;b -&gt; &#39;c)</div>
<div class="tip" id="fs15">val ( And I have entered ) : firstNumber:&#39;a * calculator:&#39;b -&gt; secondNumber:&#39;c -&gt; continuation:((&#39;a * &#39;c) * &#39;b -&gt; &#39;d) -&gt; &#39;d<br /><br />Full name: Script.( And I have entered )</div>
<div class="tip" id="fs16">val secondNumber : &#39;c</div>
<div class="tip" id="fs17">val continuation : ((&#39;a * &#39;c) * &#39;b -&gt; &#39;d)</div>
<div class="tip" id="fs18">val ( When I press add ) : (int * int) * calculator:Calculator -&gt; continuation:(int -&gt; &#39;a) -&gt; &#39;a<br /><br />Full name: Script.( When I press add )</div>
<div class="tip" id="fs19">val firstNumber : int</div>
<div class="tip" id="fs20">val secondNumber : int</div>
<div class="tip" id="fs21">val continuation : (int -&gt; &#39;a)</div>
<div class="tip" id="fs22">val actual : int</div>
<div class="tip" id="fs23">member Calculator.Add : x:int -&gt; y:int -&gt; int</div>
<div class="tip" id="fs24">val ( Then the result should be ) : actual:int -&gt; expected:int -&gt; continuation:&#39;a -&gt; &#39;a<br /><br />Full name: Script.( Then the result should be )</div>
<div class="tip" id="fs25">val expected : int</div>
<div class="tip" id="fs26">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs27">val continuation : &#39;a</div>
<div class="tip" id="fs28">type Assert =<br />&#160;&#160;static member AreEqual : expected:int * actual:int -&gt; unit + 23 overloads<br />&#160;&#160;static member AreNotEqual : expected:int * actual:int -&gt; unit + 23 overloads<br />&#160;&#160;static member AreNotSame : expected:obj * actual:obj -&gt; unit + 2 overloads<br />&#160;&#160;static member AreSame : expected:obj * actual:obj -&gt; unit + 2 overloads<br />&#160;&#160;static member ByVal : actual:obj * expression:IResolveConstraint -&gt; unit + 2 overloads<br />&#160;&#160;static member Catch : code:TestDelegate -&gt; Exception + 8 overloads<br />&#160;&#160;static member Contains : expected:obj * actual:ICollection -&gt; unit + 2 overloads<br />&#160;&#160;static member Counter : int<br />&#160;&#160;static member DoesNotThrow : code:TestDelegate -&gt; unit + 2 overloads<br />&#160;&#160;static member Equals : a:obj * b:obj -&gt; bool<br />&#160;&#160;...<br /><br />Full name: NUnit.Framework.Assert</div>
<div class="tip" id="fs29">Assert.AreEqual(expected: obj, actual: obj) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: decimal, actual: decimal) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: uint64, actual: uint64) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: uint32, actual: uint32) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: int64, actual: int64) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: int, actual: int) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: obj, actual: obj, message: string) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: float, actual: System.Nullable&lt;float&gt;, delta: float) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: float, actual: float, delta: float) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em><br />Assert.AreEqual(expected: decimal, actual: decimal, message: string) : unit<br />&#160;&#160;&#160;<em>(+0 other overloads)</em></div>
<div class="tip" id="fs30">val ( on the screen ) : unit<br /><br />Full name: Script.( on the screen )</div>
<div class="tip" id="fs31">Multiple items<br />type TestAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; TestAttribute<br />&#160;&#160;member Description : string with get, set<br /><br />Full name: NUnit.Framework.TestAttribute<br /><br />--------------------<br />TestAttribute() : unit</div>
<div class="tip" id="fs32">val testAdd : unit -&gt; unit<br /><br />Full name: Script.testAdd</div>

