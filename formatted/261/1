<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">namespace</span> <span class="i">Foo</span>

  <span class="k">module</span> <span class="t">Collection</span> <span class="o">=</span>
    
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">add</span> (<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">set</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">Generic</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">ICollection</span><span class="o">&lt;</span>_<span class="o">&gt;</span>) <span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="i">item</span> <span class="o">=</span>
      <span onmouseout="hideTip(event, 'fs2', 8)" onmouseover="showTip(event, 'fs2', 8)" class="i">set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="i">item</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="f">ignore</span>

    <span class="c">// EXAMPLE</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">testSet</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs3', 13)" onmouseover="showTip(event, 'fs3', 13)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 14)" onmouseover="showTip(event, 'fs4', 14)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 15)" onmouseover="showTip(event, 'fs5', 15)" class="i">Generic</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="t">HashSet</span><span class="o">&lt;</span>_<span class="o">&gt;</span>()
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 17)" onmouseover="showTip(event, 'fs12', 17)" class="i">test</span> <span class="o">=</span> [<span class="n">1..</span><span class="n">10</span>] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs13', 18)" onmouseover="showTip(event, 'fs13', 18)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="f">iter</span> (<span onmouseout="hideTip(event, 'fs1', 20)" onmouseover="showTip(event, 'fs1', 20)" class="f">add</span> <span onmouseout="hideTip(event, 'fs10', 21)" onmouseover="showTip(event, 'fs10', 21)" class="i">testSet</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val add : set:System.Collections.Generic.ICollection&lt;&#39;a&gt; -&gt; item:&#39;a -&gt; unit<br /><br />Full name: Foo.Collection.add</div>
<div class="tip" id="fs2">val set : System.Collections.Generic.ICollection&lt;&#39;a&gt;</div>
<div class="tip" id="fs3">namespace System</div>
<div class="tip" id="fs4">namespace System.Collections</div>
<div class="tip" id="fs5">namespace System.Collections.Generic</div>
<div class="tip" id="fs6">type ICollection&lt;&#39;T&gt; =<br />&#160;&#160;member Add : item:&#39;T -&gt; unit<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Contains : item:&#39;T -&gt; bool<br />&#160;&#160;member CopyTo : array:&#39;T[] * arrayIndex:int -&gt; unit<br />&#160;&#160;member Count : int<br />&#160;&#160;member IsReadOnly : bool<br />&#160;&#160;member Remove : item:&#39;T -&gt; bool<br /><br />Full name: System.Collections.Generic.ICollection&lt;_&gt;</div>
<div class="tip" id="fs7">val item : &#39;a</div>
<div class="tip" id="fs8">System.Collections.Generic.ICollection.Add(item: &#39;a) : unit</div>
<div class="tip" id="fs9">val ignore : value:&#39;T -&gt; unit<br /><br />Full name: Microsoft.FSharp.Core.Operators.ignore</div>
<div class="tip" id="fs10">val testSet : System.Collections.Generic.HashSet&lt;int&gt;<br /><br />Full name: Foo.Collection.testSet</div>
<div class="tip" id="fs11">Multiple items<br />type HashSet&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; HashSet&lt;&#39;T&gt; + 3 overloads<br />&#160;&#160;member Add : item:&#39;T -&gt; bool<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Comparer : IEqualityComparer&lt;&#39;T&gt;<br />&#160;&#160;member Contains : item:&#39;T -&gt; bool<br />&#160;&#160;member CopyTo : array:&#39;T[] -&gt; unit + 2 overloads<br />&#160;&#160;member Count : int<br />&#160;&#160;member ExceptWith : other:IEnumerable&lt;&#39;T&gt; -&gt; unit<br />&#160;&#160;member GetEnumerator : unit -&gt; Enumerator&lt;&#39;T&gt;<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;...<br />&#160;&#160;nested type Enumerator<br /><br />Full name: System.Collections.Generic.HashSet&lt;_&gt;<br /><br />--------------------<br />System.Collections.Generic.HashSet() : unit<br />System.Collections.Generic.HashSet(comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;T&gt;) : unit<br />System.Collections.Generic.HashSet(collection: System.Collections.Generic.IEnumerable&lt;&#39;T&gt;) : unit<br />System.Collections.Generic.HashSet(collection: System.Collections.Generic.IEnumerable&lt;&#39;T&gt;, comparer: System.Collections.Generic.IEqualityComparer&lt;&#39;T&gt;) : unit</div>
<div class="tip" id="fs12">val test : unit<br /><br />Full name: Foo.Collection.test</div>
<div class="tip" id="fs13">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs14">val iter : action:(&#39;T -&gt; unit) -&gt; list:&#39;T list -&gt; unit<br /><br />Full name: Microsoft.FSharp.Collections.List.iter</div>

