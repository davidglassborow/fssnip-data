<h2><a name="Combinatorial-functions" class="anchor" href="#Combinatorial-functions">Combinatorial functions</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
<span class="l">70: </span>
<span class="l">71: </span>
<span class="l">72: </span>
<span class="l">73: </span>
<span class="l">74: </span>
<span class="l">75: </span>
<span class="l">76: </span>
<span class="l">77: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Combinatorial functions from the book &quot;Introduction to Functional Programming&quot;</span>
<span class="c">// by Richard Bird and Philip Wadler.</span>

<span class="c">// the function inits returns the list of all inital segments of a list, </span>
<span class="c">// in order of increasing length.</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">inits</span> <span class="o">=</span> <span class="k">function</span>
    | []    <span class="k">-&gt;</span> [[]]
    | <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">xs</span> <span class="k">-&gt;</span> [ <span class="k">yield</span> [];
                 <span class="k">for</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">ys</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs1', 5)" onmouseover="showTip(event, 'fs1', 5)" class="f">inits</span> <span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">xs</span> <span class="k">do</span>
                    <span class="k">yield!</span> [<span onmouseout="hideTip(event, 'fs2', 7)" onmouseover="showTip(event, 'fs2', 7)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="i">ys</span>]]
<span class="c">// Example:</span>
<span class="c">// &gt; inits [1..5];;</span>
<span class="c">// val it : int list list =</span>
<span class="c">//  [[]; [1]; [1; 2]; [1; 2; 3]; [1; 2; 3; 4]; [1; 2; 3; 4; 5]]</span>

<span class="c">// the function subs returns a list of all subsequences of a list</span>
<span class="c">// this function is also know as the powerset.</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs5', 9)" onmouseover="showTip(event, 'fs5', 9)" class="f">subs</span> <span class="o">=</span> <span class="k">function</span>
    | [] <span class="k">-&gt;</span> [[]]
    | <span onmouseout="hideTip(event, 'fs2', 10)" onmouseover="showTip(event, 'fs2', 10)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs3', 11)" onmouseover="showTip(event, 'fs3', 11)" class="i">xs</span> <span class="k">-&gt;</span> [ <span class="k">for</span> <span onmouseout="hideTip(event, 'fs4', 12)" onmouseover="showTip(event, 'fs4', 12)" class="i">ys</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="f">subs</span> <span onmouseout="hideTip(event, 'fs3', 14)" onmouseover="showTip(event, 'fs3', 14)" class="i">xs</span> <span class="k">do</span>
                    <span class="k">yield!</span> [<span onmouseout="hideTip(event, 'fs4', 15)" onmouseover="showTip(event, 'fs4', 15)" class="i">ys</span>;<span onmouseout="hideTip(event, 'fs2', 16)" onmouseover="showTip(event, 'fs2', 16)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs4', 17)" onmouseover="showTip(event, 'fs4', 17)" class="i">ys</span>] ]
<span class="c">// &gt; subs [1..3];;</span>
<span class="c">// val it : int list list =</span>
<span class="c">//   [[]; [1]; [2]; [1; 2]; [3]; [1; 3]; [2; 3]; [1; 2; 3]]</span>

<span class="c">// the term interleave x ys returns a  list of all possible ways of inserting </span>
<span class="c">// the element x into the list ys.</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs6', 18)" onmouseover="showTip(event, 'fs6', 18)" class="f">interleave</span> <span onmouseout="hideTip(event, 'fs2', 19)" onmouseover="showTip(event, 'fs2', 19)" class="i">x</span> <span class="o">=</span> <span class="k">function</span>
    | [] <span class="k">-&gt;</span> [[<span onmouseout="hideTip(event, 'fs2', 20)" onmouseover="showTip(event, 'fs2', 20)" class="i">x</span>]]
    | <span onmouseout="hideTip(event, 'fs7', 21)" onmouseover="showTip(event, 'fs7', 21)" class="i">y</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs4', 22)" onmouseover="showTip(event, 'fs4', 22)" class="i">ys</span> <span class="k">-&gt;</span> 
        [ <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs2', 23)" onmouseover="showTip(event, 'fs2', 23)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs7', 24)" onmouseover="showTip(event, 'fs7', 24)" class="i">y</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs4', 25)" onmouseover="showTip(event, 'fs4', 25)" class="i">ys</span>
          <span class="k">for</span> <span onmouseout="hideTip(event, 'fs8', 26)" onmouseover="showTip(event, 'fs8', 26)" class="i">zs</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs6', 27)" onmouseover="showTip(event, 'fs6', 27)" class="f">interleave</span> <span onmouseout="hideTip(event, 'fs2', 28)" onmouseover="showTip(event, 'fs2', 28)" class="i">x</span> <span onmouseout="hideTip(event, 'fs4', 29)" onmouseover="showTip(event, 'fs4', 29)" class="i">ys</span> <span class="k">do</span>
            <span class="k">yield!</span> [<span onmouseout="hideTip(event, 'fs7', 30)" onmouseover="showTip(event, 'fs7', 30)" class="i">y</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs8', 31)" onmouseover="showTip(event, 'fs8', 31)" class="i">zs</span>]]

<span class="c">// Example: </span>
<span class="c">// &gt; interleave &quot;&quot; [&quot;Count&quot;; &quot;Of&quot;; &quot;Monte&quot;; &quot;Cristo&quot;];;</span>
<span class="c">// val it : string list list =</span>
<span class="c">//   [[&quot;&quot;; &quot;Count&quot;; &quot;Of&quot;; &quot;Monte&quot;; &quot;Cristo&quot;];</span>
<span class="c">//    [&quot;Count&quot;; &quot;&quot;; &quot;Of&quot;; &quot;Monte&quot;; &quot;Cristo&quot;];</span>
<span class="c">//    [&quot;Count&quot;; &quot;Of&quot;; &quot;&quot;; &quot;Monte&quot;; &quot;Cristo&quot;];</span>
<span class="c">//    [&quot;Count&quot;; &quot;Of&quot;; &quot;Monte&quot;; &quot;&quot;; &quot;Cristo&quot;];</span>
<span class="c">//    [&quot;Count&quot;; &quot;Of&quot;; &quot;Monte&quot;; &quot;Cristo&quot;; &quot;&quot;]]</span>

<span class="c">// the function perms returns a list of all permutations of a list.</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs9', 32)" onmouseover="showTip(event, 'fs9', 32)" class="f">perms</span> <span class="o">=</span> <span class="k">function</span>
    | [] <span class="k">-&gt;</span> [[]]
    | <span onmouseout="hideTip(event, 'fs2', 33)" onmouseover="showTip(event, 'fs2', 33)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs3', 34)" onmouseover="showTip(event, 'fs3', 34)" class="i">xs</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 35)" onmouseover="showTip(event, 'fs10', 35)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 36)" onmouseover="showTip(event, 'fs11', 36)" class="f">concat</span> (<span onmouseout="hideTip(event, 'fs10', 37)" onmouseover="showTip(event, 'fs10', 37)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 38)" onmouseover="showTip(event, 'fs12', 38)" class="f">map</span> (<span onmouseout="hideTip(event, 'fs6', 39)" onmouseover="showTip(event, 'fs6', 39)" class="f">interleave</span> <span onmouseout="hideTip(event, 'fs2', 40)" onmouseover="showTip(event, 'fs2', 40)" class="i">x</span>) (<span onmouseout="hideTip(event, 'fs9', 41)" onmouseover="showTip(event, 'fs9', 41)" class="f">perms</span> <span onmouseout="hideTip(event, 'fs3', 42)" onmouseover="showTip(event, 'fs3', 42)" class="i">xs</span>))

<span class="c">// &gt; perms [1..3];;</span>
<span class="c">// val it : int list list =</span>
<span class="c">//   [[1; 2; 3]; [2; 1; 3]; [2; 3; 1]; [1; 3; 2]; [3; 1; 2]; [3; 2; 1]]</span>

<span class="c">// some helper functions</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 43)" onmouseover="showTip(event, 'fs13', 43)" class="f">curry</span> <span onmouseout="hideTip(event, 'fs14', 44)" onmouseover="showTip(event, 'fs14', 44)" class="f">f</span> <span onmouseout="hideTip(event, 'fs15', 45)" onmouseover="showTip(event, 'fs15', 45)" class="i">a</span> <span onmouseout="hideTip(event, 'fs16', 46)" onmouseover="showTip(event, 'fs16', 46)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 47)" onmouseover="showTip(event, 'fs14', 47)" class="f">f</span>(<span onmouseout="hideTip(event, 'fs15', 48)" onmouseover="showTip(event, 'fs15', 48)" class="i">a</span>,<span onmouseout="hideTip(event, 'fs16', 49)" onmouseover="showTip(event, 'fs16', 49)" class="i">b</span>)
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 50)" onmouseover="showTip(event, 'fs17', 50)" class="f">cons</span> <span onmouseout="hideTip(event, 'fs2', 51)" onmouseover="showTip(event, 'fs2', 51)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 52)" onmouseover="showTip(event, 'fs13', 52)" class="f">curry</span> <span onmouseout="hideTip(event, 'fs10', 53)" onmouseover="showTip(event, 'fs10', 53)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 54)" onmouseover="showTip(event, 'fs18', 54)" class="f">Cons</span> <span onmouseout="hideTip(event, 'fs2', 55)" onmouseover="showTip(event, 'fs2', 55)" class="i">x</span>

<span class="c">// the function parts returns a list of all proper partitions of a list.    </span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs19', 56)" onmouseover="showTip(event, 'fs19', 56)" class="f">parts</span> <span class="o">=</span> <span class="k">function</span>
    | []    <span class="k">-&gt;</span> [[]]
    | [<span onmouseout="hideTip(event, 'fs2', 57)" onmouseover="showTip(event, 'fs2', 57)" class="i">x</span>]   <span class="k">-&gt;</span> [[[<span onmouseout="hideTip(event, 'fs2', 58)" onmouseover="showTip(event, 'fs2', 58)" class="i">x</span>]]]
    | <span onmouseout="hideTip(event, 'fs2', 59)" onmouseover="showTip(event, 'fs2', 59)" class="i">x</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs20', 60)" onmouseover="showTip(event, 'fs20', 60)" class="i">x&#39;</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs3', 61)" onmouseover="showTip(event, 'fs3', 61)" class="i">xs</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 62)" onmouseover="showTip(event, 'fs10', 62)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 63)" onmouseover="showTip(event, 'fs12', 63)" class="f">map</span> (<span onmouseout="hideTip(event, 'fs21', 64)" onmouseover="showTip(event, 'fs21', 64)" class="f">glue</span> <span onmouseout="hideTip(event, 'fs2', 65)" onmouseover="showTip(event, 'fs2', 65)" class="i">x</span>) (<span onmouseout="hideTip(event, 'fs19', 66)" onmouseover="showTip(event, 'fs19', 66)" class="f">parts</span> (<span class="i">x&#39;</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs3', 67)" onmouseover="showTip(event, 'fs3', 67)" class="i">xs</span>)) 
                    <span class="o">@</span> <span onmouseout="hideTip(event, 'fs10', 68)" onmouseover="showTip(event, 'fs10', 68)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 69)" onmouseover="showTip(event, 'fs12', 69)" class="f">map</span> (<span onmouseout="hideTip(event, 'fs17', 70)" onmouseover="showTip(event, 'fs17', 70)" class="f">cons</span> [<span onmouseout="hideTip(event, 'fs2', 71)" onmouseover="showTip(event, 'fs2', 71)" class="i">x</span>]) (<span onmouseout="hideTip(event, 'fs19', 72)" onmouseover="showTip(event, 'fs19', 72)" class="f">parts</span> (<span class="i">x&#39;</span><span class="o">::</span><span onmouseout="hideTip(event, 'fs3', 73)" onmouseover="showTip(event, 'fs3', 73)" class="i">xs</span>))

<span class="k">and</span> <span onmouseout="hideTip(event, 'fs21', 74)" onmouseover="showTip(event, 'fs21', 74)" class="f">glue</span> <span onmouseout="hideTip(event, 'fs2', 75)" onmouseover="showTip(event, 'fs2', 75)" class="i">x</span> <span onmouseout="hideTip(event, 'fs22', 76)" onmouseover="showTip(event, 'fs22', 76)" class="i">xss</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs2', 77)" onmouseover="showTip(event, 'fs2', 77)" class="i">x</span> <span class="o">::</span> <span onmouseout="hideTip(event, 'fs10', 78)" onmouseover="showTip(event, 'fs10', 78)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 79)" onmouseover="showTip(event, 'fs23', 79)" class="f">head</span> <span onmouseout="hideTip(event, 'fs22', 80)" onmouseover="showTip(event, 'fs22', 80)" class="i">xss</span>)<span class="o">::</span> <span onmouseout="hideTip(event, 'fs10', 81)" onmouseover="showTip(event, 'fs10', 81)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 82)" onmouseover="showTip(event, 'fs24', 82)" class="f">tail</span> <span onmouseout="hideTip(event, 'fs22', 83)" onmouseover="showTip(event, 'fs22', 83)" class="i">xss</span>

<span class="c">// &gt; parts [1..3];;</span>
<span class="c">// val it : int list list list =</span>
<span class="c">//   [[[1; 2; 3]]; [[1; 2]; [3]]; [[1]; [2; 3]]; [[1]; [2]; [3]]]</span>

<span class="c">// This one comes from the book &quot;Programming in Haskell&quot; by Graham Hutton.</span>
<span class="c">// The function choices returns all the way you can select elements from a list</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 84)" onmouseover="showTip(event, 'fs25', 84)" class="f">choices</span> <span onmouseout="hideTip(event, 'fs3', 85)" onmouseover="showTip(event, 'fs3', 85)" class="i">xs</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 86)" onmouseover="showTip(event, 'fs10', 86)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 87)" onmouseover="showTip(event, 'fs11', 87)" class="f">concat</span> (<span onmouseout="hideTip(event, 'fs10', 88)" onmouseover="showTip(event, 'fs10', 88)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 89)" onmouseover="showTip(event, 'fs12', 89)" class="f">map</span> <span onmouseout="hideTip(event, 'fs9', 90)" onmouseover="showTip(event, 'fs9', 90)" class="f">perms</span> (<span onmouseout="hideTip(event, 'fs5', 91)" onmouseover="showTip(event, 'fs5', 91)" class="f">subs</span> <span onmouseout="hideTip(event, 'fs3', 92)" onmouseover="showTip(event, 'fs3', 92)" class="i">xs</span>))

<span class="c">// &gt; choices [1..3];;</span>
<span class="c">// val it : int list list =</span>
<span class="c">//   [[]; [1]; [2]; [1; 2]; [2; 1]; [3]; [1; 3]; [3; 1]; [2; 3]; [3; 2];</span>
<span class="c">//    [1; 2; 3]; [2; 1; 3]; [2; 3; 1]; [1; 3; 2]; [3; 1; 2]; [3; 2; 1]]</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val inits : _arg1:&#39;a list -&gt; &#39;a list list<br /><br />Full name: Script.inits</div>
<div class="tip" id="fs2">val x : &#39;a</div>
<div class="tip" id="fs3">val xs : &#39;a list</div>
<div class="tip" id="fs4">val ys : &#39;a list</div>
<div class="tip" id="fs5">val subs : _arg1:&#39;a list -&gt; &#39;a list list<br /><br />Full name: Script.subs</div>
<div class="tip" id="fs6">val interleave : x:&#39;a -&gt; _arg1:&#39;a list -&gt; &#39;a list list<br /><br />Full name: Script.interleave</div>
<div class="tip" id="fs7">val y : &#39;a</div>
<div class="tip" id="fs8">val zs : &#39;a list</div>
<div class="tip" id="fs9">val perms : _arg1:&#39;a list -&gt; &#39;a list list<br /><br />Full name: Script.perms</div>
<div class="tip" id="fs10">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs11">val concat : lists:seq&lt;&#39;T list&gt; -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.concat</div>
<div class="tip" id="fs12">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; list:&#39;T list -&gt; &#39;U list<br /><br />Full name: Microsoft.FSharp.Collections.List.map</div>
<div class="tip" id="fs13">val curry : f:(&#39;a * &#39;b -&gt; &#39;c) -&gt; a:&#39;a -&gt; b:&#39;b -&gt; &#39;c<br /><br />Full name: Script.curry</div>
<div class="tip" id="fs14">val f : (&#39;a * &#39;b -&gt; &#39;c)</div>
<div class="tip" id="fs15">val a : &#39;a</div>
<div class="tip" id="fs16">val b : &#39;b</div>
<div class="tip" id="fs17">val cons : x:&#39;a -&gt; (&#39;a list -&gt; &#39;a list)<br /><br />Full name: Script.cons</div>
<div class="tip" id="fs18">static member List.Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list</div>
<div class="tip" id="fs19">val parts : _arg1:&#39;a list -&gt; &#39;a list list list<br /><br />Full name: Script.parts</div>
<div class="tip" id="fs20">val x&#39; : &#39;a</div>
<div class="tip" id="fs21">val glue : x:&#39;a -&gt; xss:&#39;a list list -&gt; &#39;a list list<br /><br />Full name: Script.glue</div>
<div class="tip" id="fs22">val xss : &#39;a list list</div>
<div class="tip" id="fs23">val head : list:&#39;T list -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Collections.List.head</div>
<div class="tip" id="fs24">val tail : list:&#39;T list -&gt; &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.tail</div>
<div class="tip" id="fs25">val choices : xs:&#39;a list -&gt; &#39;a list list<br /><br />Full name: Script.choices</div>

