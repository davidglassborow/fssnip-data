<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
<span class="l">110: </span>
<span class="l">111: </span>
<span class="l">112: </span>
<span class="l">113: </span>
<span class="l">114: </span>
<span class="l">115: </span>
<span class="l">116: </span>
<span class="l">117: </span>
<span class="l">118: </span>
<span class="l">119: </span>
<span class="l">120: </span>
<span class="l">121: </span>
<span class="l">122: </span>
<span class="l">123: </span>
<span class="l">124: </span>
<span class="l">125: </span>
<span class="l">126: </span>
<span class="l">127: </span>
<span class="l">128: </span>
<span class="l">129: </span>
<span class="l">130: </span>
<span class="l">131: </span>
<span class="l">132: </span>
<span class="l">133: </span>
<span class="l">134: </span>
<span class="l">135: </span>
<span class="l">136: </span>
<span class="l">137: </span>
<span class="l">138: </span>
<span class="l">139: </span>
<span class="l">140: </span>
<span class="l">141: </span>
<span class="l">142: </span>
<span class="l">143: </span>
<span class="l">144: </span>
<span class="l">145: </span>
<span class="l">146: </span>
<span class="l">147: </span>
<span class="l">148: </span>
<span class="l">149: </span>
<span class="l">150: </span>
<span class="l">151: </span>
<span class="l">152: </span>
<span class="l">153: </span>
<span class="l">154: </span>
<span class="l">155: </span>
<span class="l">156: </span>
<span class="l">157: </span>
<span class="l">158: </span>
<span class="l">159: </span>
<span class="l">160: </span>
<span class="l">161: </span>
<span class="l">162: </span>
<span class="l">163: </span>
<span class="l">164: </span>
<span class="l">165: </span>
<span class="l">166: </span>
<span class="l">167: </span>
<span class="l">168: </span>
<span class="l">169: </span>
<span class="l">170: </span>
<span class="l">171: </span>
<span class="l">172: </span>
<span class="l">173: </span>
<span class="l">174: </span>
<span class="l">175: </span>
<span class="l">176: </span>
<span class="l">177: </span>
<span class="l">178: </span>
<span class="l">179: </span>
<span class="l">180: </span>
<span class="l">181: </span>
<span class="l">182: </span>
<span class="l">183: </span>
<span class="l">184: </span>
<span class="l">185: </span>
<span class="l">186: </span>
<span class="l">187: </span>
<span class="l">188: </span>
<span class="l">189: </span>
<span class="l">190: </span>
<span class="l">191: </span>
<span class="l">192: </span>
<span class="l">193: </span>
<span class="l">194: </span>
<span class="l">195: </span>
<span class="l">196: </span>
<span class="l">197: </span>
<span class="l">198: </span>
<span class="l">199: </span>
<span class="l">200: </span>
<span class="l">201: </span>
<span class="l">202: </span>
<span class="l">203: </span>
<span class="l">204: </span>
<span class="l">205: </span>
<span class="l">206: </span>
<span class="l">207: </span>
<span class="l">208: </span>
<span class="l">209: </span>
<span class="l">210: </span>
<span class="l">211: </span>
<span class="l">212: </span>
<span class="l">213: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">//////////////////////////////////////////////////////////////////</span>
<span class="c">// A compositional type system using generics and monads in F#. //</span>
<span class="c">//////////////////////////////////////////////////////////////////</span>
<span class="c">// A very limited, _toy_ project exploring traits, mixins       //</span>
<span class="c">// and aspect oriented programming                              //</span>
<span class="c">// by Zach Bray (http://www.zbray.com).                         //</span>
<span class="c">//////////////////////////////////////////////////////////////////</span>

<span id="fst1" onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1, document.getElementById('fst1'))" class="omitted">(Class monad omitted.)</span>


<span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">TypeSystem</span>

<span class="c">//////////////////////////////////////////////////////////////////</span>
<span class="c">// BASICS                                                       //</span>
<span class="c">//////////////////////////////////////////////////////////////////</span>

<span class="c">// Member symbols are defined as single cases.</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">FirstName</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="p">FirstName</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="t">LastName</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="p">LastName</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="t">Name</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="p">Name</span>

<span class="c">// Class constructors are created using the Class monad.</span>
<span class="c">// In this example only 5 members are supported.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="f">person</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">firstName</span> <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="i">lastName</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="i">Class</span> {
   <span class="c">// Each member function is yielded</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs4', 14)" onmouseover="showTip(event, 'fs4', 14)" class="p">FirstName</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 15)" onmouseover="showTip(event, 'fs8', 15)" class="i">firstName</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs5', 16)" onmouseover="showTip(event, 'fs5', 16)" class="p">LastName</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs9', 17)" onmouseover="showTip(event, 'fs9', 17)" class="i">lastName</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs6', 18)" onmouseover="showTip(event, 'fs6', 18)" class="p">Name</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 19)" onmouseover="showTip(event, 'fs8', 19)" class="i">firstName</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs9', 20)" onmouseover="showTip(event, 'fs9', 20)" class="i">lastName</span>
}

<span class="c">// Members symbols can have arguments (and these arguments can be generic).</span>
<span class="k">type</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="t">AddManager</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs11', 22)" onmouseover="showTip(event, 'fs11', 22)" class="p">AddManager</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">a</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs12', 23)" onmouseover="showTip(event, 'fs12', 23)" class="t">Managers</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="p">Managers</span>

<span class="c">// Class constructors can be generic</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 25)" onmouseover="showTip(event, 'fs13', 25)" class="f">worker</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26)" class="i">Class</span> {
   <span class="c">// Mutable state can be kept inside reference cells.</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 27)" onmouseover="showTip(event, 'fs14', 27)" class="v">managers</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 28)" onmouseover="showTip(event, 'fs15', 28)" class="f">ref</span> <span onmouseout="hideTip(event, 'fs16', 29)" onmouseover="showTip(event, 'fs16', 29)" class="t">List</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 30)" onmouseover="showTip(event, 'fs17', 30)" class="i">empty</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs12', 31)" onmouseover="showTip(event, 'fs12', 31)" class="p">Managers</span> <span class="k">-&gt;</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs14', 32)" onmouseover="showTip(event, 'fs14', 32)" class="v">managers</span>
   <span class="c">// A member that takes a parameter</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs11', 33)" onmouseover="showTip(event, 'fs11', 33)" class="p">AddManager</span> <span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="i">newManager</span> <span class="k">-&gt;</span> 
                  <span onmouseout="hideTip(event, 'fs14', 35)" onmouseover="showTip(event, 'fs14', 35)" class="v">managers</span> <span class="o">:=</span> <span onmouseout="hideTip(event, 'fs18', 36)" onmouseover="showTip(event, 'fs18', 36)" class="i">newManager</span> <span class="o">::</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs14', 37)" onmouseover="showTip(event, 'fs14', 37)" class="v">managers</span>
}

<span class="c">// Class constructors can be composed</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 38)" onmouseover="showTip(event, 'fs19', 38)" class="f">employee</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs8', 39)" onmouseover="showTip(event, 'fs8', 39)" class="i">firstName</span> <span onmouseout="hideTip(event, 'fs20', 40)" onmouseover="showTip(event, 'fs20', 40)" class="i">secondName</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 41)" onmouseover="showTip(event, 'fs10', 41)" class="i">Class</span> {
   <span class="c">// We can yield the members of one class...</span>
   <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs7', 42)" onmouseover="showTip(event, 'fs7', 42)" class="f">person</span> <span onmouseout="hideTip(event, 'fs8', 43)" onmouseover="showTip(event, 'fs8', 43)" class="i">firstName</span> <span onmouseout="hideTip(event, 'fs20', 44)" onmouseover="showTip(event, 'fs20', 44)" class="i">secondName</span>
   <span class="c">// ... then another</span>
   <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs13', 45)" onmouseover="showTip(event, 'fs13', 45)" class="f">worker</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>()
}

<span class="c">// We construct instances by passing the parameters into</span>
<span class="c">// the constuctor</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 46)" onmouseover="showTip(event, 'fs21', 46)" class="i">testConstruction</span> <span class="o">=</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 47)" onmouseover="showTip(event, 'fs22', 47)" class="i">rupert</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 48)" onmouseover="showTip(event, 'fs19', 48)" class="f">employee</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs23', 49)" onmouseover="showTip(event, 'fs23', 49)" class="t">unit</span><span class="o">&gt;</span> <span class="s">&quot;Rupert&quot;</span> <span class="s">&quot;Maddog&quot;</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs24', 50)" onmouseover="showTip(event, 'fs24', 50)" class="i">becca</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 51)" onmouseover="showTip(event, 'fs19', 51)" class="f">employee</span> <span class="s">&quot;Becca&quot;</span> <span class="s">&quot;Brooked&quot;</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 52)" onmouseover="showTip(event, 'fs25', 52)" class="i">dave</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 53)" onmouseover="showTip(event, 'fs19', 53)" class="f">employee</span> <span class="s">&quot;Dave&quot;</span> <span class="s">&quot;Kameroon&quot;</span>

   <span class="c">// We access members by using the (/) operator</span>
   <span onmouseout="hideTip(event, 'fs24', 54)" onmouseover="showTip(event, 'fs24', 54)" class="i">becca</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs11', 55)" onmouseover="showTip(event, 'fs11', 55)" class="p">AddManager</span>(<span onmouseout="hideTip(event, 'fs22', 56)" onmouseover="showTip(event, 'fs22', 56)" class="i">rupert</span>)
   <span onmouseout="hideTip(event, 'fs25', 57)" onmouseover="showTip(event, 'fs25', 57)" class="i">dave</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs11', 58)" onmouseover="showTip(event, 'fs11', 58)" class="p">AddManager</span>(<span onmouseout="hideTip(event, 'fs24', 59)" onmouseover="showTip(event, 'fs24', 59)" class="i">becca</span>)

   <span class="k">for</span> <span onmouseout="hideTip(event, 'fs26', 60)" onmouseover="showTip(event, 'fs26', 60)" class="i">manager</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs25', 61)" onmouseover="showTip(event, 'fs25', 61)" class="i">dave</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs12', 62)" onmouseover="showTip(event, 'fs12', 62)" class="p">Managers</span> <span class="k">do</span>
      <span onmouseout="hideTip(event, 'fs27', 63)" onmouseover="showTip(event, 'fs27', 63)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs26', 64)" onmouseover="showTip(event, 'fs26', 64)" class="i">manager</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs6', 65)" onmouseover="showTip(event, 'fs6', 65)" class="p">Name</span>)


<span class="c">//////////////////////////////////////////////////////////////////</span>
<span class="c">// MIXINS &amp; ADAPTORS                                            //</span>
<span class="c">//////////////////////////////////////////////////////////////////</span>

<span class="c">// Class constructors can also be composed using </span>
<span class="c">// the (+) operator which allows us to use mixins a la Scala</span>
<span class="c">// http://www.scala-lang.org/node/117</span>

<span class="c">// Iterator members</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs28', 66)" onmouseover="showTip(event, 'fs28', 66)" class="t">HasNext</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs28', 67)" onmouseover="showTip(event, 'fs28', 67)" class="p">HasNext</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs29', 68)" onmouseover="showTip(event, 'fs29', 68)" class="t">Next</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs29', 69)" onmouseover="showTip(event, 'fs29', 69)" class="p">Next</span>

<span class="c">// Rich iterator members</span>
<span class="k">type</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs30', 70)" onmouseover="showTip(event, 'fs30', 70)" class="t">ForEach</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs30', 71)" onmouseover="showTip(event, 'fs30', 71)" class="p">ForEach</span> <span class="k">of</span> (<span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs23', 72)" onmouseover="showTip(event, 'fs23', 72)" class="t">unit</span>)

<span class="c">// A rich iterator provides a foreach wrapper</span>
<span class="c">// around the HasNext and Next members</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs31', 73)" onmouseover="showTip(event, 'fs31', 73)" class="f">richIterator</span> <span onmouseout="hideTip(event, 'fs32', 74)" onmouseover="showTip(event, 'fs32', 74)" class="i">x</span> <span class="o">=</span> 
   <span onmouseout="hideTip(event, 'fs10', 75)" onmouseover="showTip(event, 'fs10', 75)" class="i">Class</span> {
      <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs30', 76)" onmouseover="showTip(event, 'fs30', 76)" class="p">ForEach</span> <span onmouseout="hideTip(event, 'fs33', 77)" onmouseover="showTip(event, 'fs33', 77)" class="f">f</span> <span class="k">-&gt;</span>
                     <span class="k">while</span> <span onmouseout="hideTip(event, 'fs32', 78)" onmouseover="showTip(event, 'fs32', 78)" class="i">x</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs28', 79)" onmouseover="showTip(event, 'fs28', 79)" class="p">HasNext</span> <span class="k">do</span>
                        <span onmouseout="hideTip(event, 'fs33', 80)" onmouseover="showTip(event, 'fs33', 80)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs32', 81)" onmouseover="showTip(event, 'fs32', 81)" class="i">x</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs29', 82)" onmouseover="showTip(event, 'fs29', 82)" class="p">Next</span>)
   }

<span class="c">// Here we construct a basic string iterator</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 83)" onmouseover="showTip(event, 'fs34', 83)" class="f">stringIterator</span> (<span onmouseout="hideTip(event, 'fs35', 84)" onmouseover="showTip(event, 'fs35', 84)" class="i">str</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs36', 85)" onmouseover="showTip(event, 'fs36', 85)" class="t">string</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 86)" onmouseover="showTip(event, 'fs10', 86)" class="i">Class</span> {
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 87)" onmouseover="showTip(event, 'fs37', 87)" class="v">i</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 88)" onmouseover="showTip(event, 'fs15', 88)" class="f">ref</span> <span class="n">0</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs28', 89)" onmouseover="showTip(event, 'fs28', 89)" class="p">HasNext</span> <span class="k">-&gt;</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs37', 90)" onmouseover="showTip(event, 'fs37', 90)" class="v">i</span> <span class="o">&lt;</span> <span onmouseout="hideTip(event, 'fs35', 91)" onmouseover="showTip(event, 'fs35', 91)" class="i">str</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 92)" onmouseover="showTip(event, 'fs38', 92)" class="i">Length</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs29', 93)" onmouseover="showTip(event, 'fs29', 93)" class="p">Next</span> <span class="k">-&gt;</span>
                  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 94)" onmouseover="showTip(event, 'fs39', 94)" class="i">c</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs35', 95)" onmouseover="showTip(event, 'fs35', 95)" class="i">str</span><span class="o">.</span>[<span class="o">!</span><span onmouseout="hideTip(event, 'fs37', 96)" onmouseover="showTip(event, 'fs37', 96)" class="v">i</span>]
                  <span onmouseout="hideTip(event, 'fs40', 97)" onmouseover="showTip(event, 'fs40', 97)" class="f">incr</span> <span onmouseout="hideTip(event, 'fs37', 98)" onmouseover="showTip(event, 'fs37', 98)" class="v">i</span>
                  <span onmouseout="hideTip(event, 'fs39', 99)" onmouseover="showTip(event, 'fs39', 99)" class="i">c</span>
}

<span class="c">// Here we construct a mixin of the string iterator</span>
<span class="c">// and the rich iterator</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs41', 100)" onmouseover="showTip(event, 'fs41', 100)" class="f">richStringIterator</span> <span onmouseout="hideTip(event, 'fs35', 101)" onmouseover="showTip(event, 'fs35', 101)" class="i">str</span> <span class="o">=</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs42', 102)" onmouseover="showTip(event, 'fs42', 102)" class="i">iter</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs34', 103)" onmouseover="showTip(event, 'fs34', 103)" class="f">stringIterator</span> <span onmouseout="hideTip(event, 'fs35', 104)" onmouseover="showTip(event, 'fs35', 104)" class="i">str</span>
   <span class="c">// We combine the rich iterator interface with</span>
   <span class="c">// the existing interface here using the (+) operator</span>
   <span onmouseout="hideTip(event, 'fs31', 105)" onmouseover="showTip(event, 'fs31', 105)" class="f">richIterator</span> <span onmouseout="hideTip(event, 'fs42', 106)" onmouseover="showTip(event, 'fs42', 106)" class="i">iter</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs42', 107)" onmouseover="showTip(event, 'fs42', 107)" class="i">iter</span>

<span class="c">// We can also choose to use the rich iterator constructor</span>
<span class="c">// as an adaptor rather than a mixin by omitting the</span>
<span class="c">// composition with the original iter</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 108)" onmouseover="showTip(event, 'fs43', 108)" class="f">onlyRichStringIterator</span> <span onmouseout="hideTip(event, 'fs35', 109)" onmouseover="showTip(event, 'fs35', 109)" class="i">str</span> <span class="o">=</span>
   <span onmouseout="hideTip(event, 'fs31', 110)" onmouseover="showTip(event, 'fs31', 110)" class="f">richIterator</span> (<span onmouseout="hideTip(event, 'fs34', 111)" onmouseover="showTip(event, 'fs34', 111)" class="f">stringIterator</span> <span onmouseout="hideTip(event, 'fs35', 112)" onmouseover="showTip(event, 'fs35', 112)" class="i">str</span>)

<span class="c">// We can use either the ForEach member or the HasNext and</span>
<span class="c">// Next members of a richStringIterator to print a string</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs44', 113)" onmouseover="showTip(event, 'fs44', 113)" class="i">testRSI</span> <span class="o">=</span>
   <span class="c">// Using rich interface</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 114)" onmouseover="showTip(event, 'fs45', 114)" class="i">iter</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs41', 115)" onmouseover="showTip(event, 'fs41', 115)" class="f">richStringIterator</span> <span class="s">&quot;Ordered generic parameters suck!&quot;</span>
   <span onmouseout="hideTip(event, 'fs45', 116)" onmouseover="showTip(event, 'fs45', 116)" class="i">iter</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs30', 117)" onmouseover="showTip(event, 'fs30', 117)" class="p">ForEach</span> (<span onmouseout="hideTip(event, 'fs46', 118)" onmouseover="showTip(event, 'fs46', 118)" class="f">printf</span> <span class="s">&quot;</span><span class="pf">%c</span><span class="s">&quot;</span>)
   <span onmouseout="hideTip(event, 'fs27', 119)" onmouseover="showTip(event, 'fs27', 119)" class="f">printfn</span> <span class="s">&quot;&quot;</span>

   <span class="c">// Using basic interface</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs47', 120)" onmouseover="showTip(event, 'fs47', 120)" class="i">iter2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs41', 121)" onmouseover="showTip(event, 'fs41', 121)" class="f">richStringIterator</span> <span class="s">&quot;Arbitrary metrics suck!&quot;</span>
   <span class="k">while</span> <span onmouseout="hideTip(event, 'fs47', 122)" onmouseover="showTip(event, 'fs47', 122)" class="i">iter2</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs28', 123)" onmouseover="showTip(event, 'fs28', 123)" class="p">HasNext</span> <span class="k">do</span>
      <span onmouseout="hideTip(event, 'fs46', 124)" onmouseover="showTip(event, 'fs46', 124)" class="f">printf</span> <span class="s">&quot;</span><span class="pf">%c</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs47', 125)" onmouseover="showTip(event, 'fs47', 125)" class="i">iter2</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs29', 126)" onmouseover="showTip(event, 'fs29', 126)" class="p">Next</span>)
   <span onmouseout="hideTip(event, 'fs27', 127)" onmouseover="showTip(event, 'fs27', 127)" class="f">printfn</span> <span class="s">&quot;&quot;</span>

<span class="c">// If we use the adapter method we can only use the rich interface</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 128)" onmouseover="showTip(event, 'fs48', 128)" class="i">testORSI</span> <span class="o">=</span>
   <span class="c">// Using rich interface still works!</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs49', 129)" onmouseover="showTip(event, 'fs49', 129)" class="i">iter</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs43', 130)" onmouseover="showTip(event, 'fs43', 130)" class="f">onlyRichStringIterator</span> <span class="s">&quot;Type safety rules!&quot;</span>
   <span onmouseout="hideTip(event, 'fs49', 131)" onmouseover="showTip(event, 'fs49', 131)" class="i">iter</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs30', 132)" onmouseover="showTip(event, 'fs30', 132)" class="p">ForEach</span> (<span onmouseout="hideTip(event, 'fs46', 133)" onmouseover="showTip(event, 'fs46', 133)" class="f">printf</span> <span class="s">&quot;</span><span class="pf">%c</span><span class="s">&quot;</span>)
   <span onmouseout="hideTip(event, 'fs27', 134)" onmouseover="showTip(event, 'fs27', 134)" class="f">printfn</span> <span class="s">&quot;&quot;</span>

   <span class="c">// Using basic interface will _not_ compile!</span>
   <span class="c">(*</span>
<span class="c">   let iter2 = onlyRichStringIterator &quot;Type safety rules!&quot;</span>
<span class="c">   while iter2 / HasNext do</span>
<span class="c">      printf &quot;%c&quot; (iter2 / Next)</span>
<span class="c">   printfn &quot;&quot;</span>
<span class="c">   *)</span>

<span class="c">//////////////////////////////////////////////////////////////////</span>
<span class="c">// ASPECT-ORIENTED                                              //</span>
<span class="c">//////////////////////////////////////////////////////////////////</span>

<span class="c">// In addition to adding new members using the (+) operator we</span>
<span class="c">// can also hide members using the (-) operator.</span>

<span class="c">// This means we can do some simple aspect oriented programming</span>
<span class="c">// http://en.wikipedia.org/wiki/Aspect-oriented_programming</span>


<span class="c">// Here we create the interface to a bank account...</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs50', 135)" onmouseover="showTip(event, 'fs50', 135)" class="t">Balance</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs50', 136)" onmouseover="showTip(event, 'fs50', 136)" class="p">Balance</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs51', 137)" onmouseover="showTip(event, 'fs51', 137)" class="t">Deposit</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs51', 138)" onmouseover="showTip(event, 'fs51', 138)" class="p">Deposit</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs52', 139)" onmouseover="showTip(event, 'fs52', 139)" class="t">decimal</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs53', 140)" onmouseover="showTip(event, 'fs53', 140)" class="t">Withdraw</span> <span class="o">=</span> |<span onmouseout="hideTip(event, 'fs53', 141)" onmouseover="showTip(event, 'fs53', 141)" class="p">Withdraw</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs52', 142)" onmouseover="showTip(event, 'fs52', 142)" class="t">decimal</span>

<span class="c">// ... and its constructor</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs54', 143)" onmouseover="showTip(event, 'fs54', 143)" class="f">account</span> <span onmouseout="hideTip(event, 'fs55', 144)" onmouseover="showTip(event, 'fs55', 144)" class="i">name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 145)" onmouseover="showTip(event, 'fs10', 145)" class="i">Class</span> {
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs56', 146)" onmouseover="showTip(event, 'fs56', 146)" class="v">balance</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs15', 147)" onmouseover="showTip(event, 'fs15', 147)" class="f">ref</span> <span class="n">0m</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs6', 148)" onmouseover="showTip(event, 'fs6', 148)" class="p">Name</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs55', 149)" onmouseover="showTip(event, 'fs55', 149)" class="i">name</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs50', 150)" onmouseover="showTip(event, 'fs50', 150)" class="p">Balance</span> <span class="k">-&gt;</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs56', 151)" onmouseover="showTip(event, 'fs56', 151)" class="v">balance</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs51', 152)" onmouseover="showTip(event, 'fs51', 152)" class="p">Deposit</span> <span onmouseout="hideTip(event, 'fs57', 153)" onmouseover="showTip(event, 'fs57', 153)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs56', 154)" onmouseover="showTip(event, 'fs56', 154)" class="v">balance</span> <span class="o">:=</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs56', 155)" onmouseover="showTip(event, 'fs56', 155)" class="v">balance</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs57', 156)" onmouseover="showTip(event, 'fs57', 156)" class="i">x</span>
   <span class="k">yield</span> <span class="k">function</span> <span onmouseout="hideTip(event, 'fs53', 157)" onmouseover="showTip(event, 'fs53', 157)" class="p">Withdraw</span> <span onmouseout="hideTip(event, 'fs57', 158)" onmouseover="showTip(event, 'fs57', 158)" class="i">x</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs56', 159)" onmouseover="showTip(event, 'fs56', 159)" class="v">balance</span> <span class="o">:=</span> <span class="o">!</span><span onmouseout="hideTip(event, 'fs56', 160)" onmouseover="showTip(event, 'fs56', 160)" class="v">balance</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs57', 161)" onmouseover="showTip(event, 'fs57', 161)" class="i">x</span>
}

<span class="c">// Here we create a helper that will run some code before a given</span>
<span class="c">// member is accessed.</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs58', 162)" onmouseover="showTip(event, 'fs58', 162)" class="f">beforeAccess</span> <span onmouseout="hideTip(event, 'fs59', 163)" onmouseover="showTip(event, 'fs59', 163)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs60', 164)" onmouseover="showTip(event, 'fs60', 164)" class="i">property</span><span class="o">:</span><span class="o">&#39;</span><span class="i">a</span>) <span onmouseout="hideTip(event, 'fs61', 165)" onmouseover="showTip(event, 'fs61', 165)" class="i">x</span> <span class="o">=</span>
   <span onmouseout="hideTip(event, 'fs10', 166)" onmouseover="showTip(event, 'fs10', 166)" class="i">Class</span> {
      <span class="k">yield</span> <span class="k">fun</span> (_<span class="o">:</span><span class="o">&#39;</span><span class="i">a</span>) <span class="k">-&gt;</span>
         <span onmouseout="hideTip(event, 'fs59', 167)" onmouseover="showTip(event, 'fs59', 167)" class="f">f</span>()
         <span onmouseout="hideTip(event, 'fs61', 168)" onmouseover="showTip(event, 'fs61', 168)" class="i">x</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs60', 169)" onmouseover="showTip(event, 'fs60', 169)" class="i">property</span>
   } <span class="o">+</span> (<span onmouseout="hideTip(event, 'fs61', 170)" onmouseover="showTip(event, 'fs61', 170)" class="i">x</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs60', 171)" onmouseover="showTip(event, 'fs60', 171)" class="i">property</span>)

<span class="c">// Here we create a function that logs before a property is accessed</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs62', 172)" onmouseover="showTip(event, 'fs62', 172)" class="f">logAccess</span> <span onmouseout="hideTip(event, 'fs60', 173)" onmouseover="showTip(event, 'fs60', 173)" class="i">property</span> <span onmouseout="hideTip(event, 'fs63', 174)" onmouseover="showTip(event, 'fs63', 174)" class="i">x</span> <span class="o">=</span>
   <span onmouseout="hideTip(event, 'fs63', 175)" onmouseover="showTip(event, 'fs63', 175)" class="i">x</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs58', 176)" onmouseover="showTip(event, 'fs58', 176)" class="f">beforeAccess</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 177)" onmouseover="showTip(event, 'fs27', 177)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s"> Accessed!&quot;</span> <span onmouseout="hideTip(event, 'fs60', 178)" onmouseover="showTip(event, 'fs60', 178)" class="i">property</span>) <span onmouseout="hideTip(event, 'fs60', 179)" onmouseover="showTip(event, 'fs60', 179)" class="i">property</span>

<span class="c">// Here we create a new constructor for an account that logs balance</span>
<span class="c">// requests.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs64', 180)" onmouseover="showTip(event, 'fs64', 180)" class="f">loggingAccount</span> <span onmouseout="hideTip(event, 'fs55', 181)" onmouseover="showTip(event, 'fs55', 181)" class="i">name</span> <span class="o">=</span>
   <span onmouseout="hideTip(event, 'fs54', 182)" onmouseover="showTip(event, 'fs54', 182)" class="f">account</span> <span onmouseout="hideTip(event, 'fs55', 183)" onmouseover="showTip(event, 'fs55', 183)" class="i">name</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 184)" onmouseover="showTip(event, 'fs62', 184)" class="f">logAccess</span> <span onmouseout="hideTip(event, 'fs50', 185)" onmouseover="showTip(event, 'fs50', 185)" class="p">Balance</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs65', 186)" onmouseover="showTip(event, 'fs65', 186)" class="i">testLoggingAccount</span> <span class="o">=</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs66', 187)" onmouseover="showTip(event, 'fs66', 187)" class="i">acc</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs64', 188)" onmouseover="showTip(event, 'fs64', 188)" class="f">loggingAccount</span> <span class="s">&quot;Zach&#39;s current account&quot;</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs67', 189)" onmouseover="showTip(event, 'fs67', 189)" class="i">illicitFunds</span> <span class="o">=</span> <span class="n">1000000m</span>
   <span onmouseout="hideTip(event, 'fs66', 190)" onmouseover="showTip(event, 'fs66', 190)" class="i">acc</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs51', 191)" onmouseover="showTip(event, 'fs51', 191)" class="p">Deposit</span> <span onmouseout="hideTip(event, 'fs67', 192)" onmouseover="showTip(event, 'fs67', 192)" class="i">illicitFunds</span>
   <span onmouseout="hideTip(event, 'fs27', 193)" onmouseover="showTip(event, 'fs27', 193)" class="f">printfn</span> <span class="s">&quot;Zach&#39;s account balance is: </span><span class="pf">%f</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs66', 194)" onmouseover="showTip(event, 'fs66', 194)" class="i">acc</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs50', 195)" onmouseover="showTip(event, 'fs50', 195)" class="p">Balance</span>)
   <span class="c">// prints:</span>
   <span class="c">// &gt; Balance Accessed!</span>
   <span class="c">// &gt; Zach&#39;s account balance is: 1000000.000000</span>

<span class="c">// We can re-use the same block of code to log when a persons name is accessed.</span>

<span class="c">// Here we create a new constructor for a person that logs when their name</span>
<span class="c">// is accessed</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs68', 196)" onmouseover="showTip(event, 'fs68', 196)" class="f">loggingPerson</span> <span onmouseout="hideTip(event, 'fs69', 197)" onmouseover="showTip(event, 'fs69', 197)" class="i">fName</span> <span onmouseout="hideTip(event, 'fs70', 198)" onmouseover="showTip(event, 'fs70', 198)" class="i">sName</span> <span class="o">=</span>
   <span onmouseout="hideTip(event, 'fs7', 199)" onmouseover="showTip(event, 'fs7', 199)" class="f">person</span> <span onmouseout="hideTip(event, 'fs69', 200)" onmouseover="showTip(event, 'fs69', 200)" class="i">fName</span> <span onmouseout="hideTip(event, 'fs70', 201)" onmouseover="showTip(event, 'fs70', 201)" class="i">sName</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 202)" onmouseover="showTip(event, 'fs62', 202)" class="f">logAccess</span> <span onmouseout="hideTip(event, 'fs6', 203)" onmouseover="showTip(event, 'fs6', 203)" class="p">Name</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs71', 204)" onmouseover="showTip(event, 'fs71', 204)" class="i">testLoggingPerson</span> <span class="o">=</span>
   <span class="k">let</span> <span onmouseout="hideTip(event, 'fs72', 205)" onmouseover="showTip(event, 'fs72', 205)" class="i">zach</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs68', 206)" onmouseover="showTip(event, 'fs68', 206)" class="f">loggingPerson</span> <span class="s">&quot;Zach&quot;</span> <span class="s">&quot;Bray&quot;</span>
   <span onmouseout="hideTip(event, 'fs46', 207)" onmouseover="showTip(event, 'fs46', 207)" class="f">printf</span> <span class="s">&quot;My name is: </span><span class="pf">%s</span><span class="s">&quot;</span> (<span onmouseout="hideTip(event, 'fs72', 208)" onmouseover="showTip(event, 'fs72', 208)" class="i">zach</span> <span class="o">/</span> <span onmouseout="hideTip(event, 'fs6', 209)" onmouseover="showTip(event, 'fs6', 209)" class="p">Name</span>)
   <span class="c">// prints:</span>
   <span class="c">// &gt; Name Accessed!</span>
   <span class="c">// &gt; My name is: Zach Bray</span>

<span onmouseout="hideTip(event, 'fs73', 210)" onmouseover="showTip(event, 'fs73', 210)" class="t">Console</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs74', 211)" onmouseover="showTip(event, 'fs74', 211)" class="f">ReadLine</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs75', 212)" onmouseover="showTip(event, 'fs75', 212)" class="f">ignore</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs36', 213)" onmouseover="showTip(event, 'fs36', 213)" class="t">string</span><span class="o">&gt;</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">module TypeSystem =<br /><br />&#160;&#160;&#160;type Class0() =<br />&#160;&#160;&#160;&#160;&#160;&#160;do ()<br /><br />&#160;&#160;&#160;type Class1&lt;&#39;m1&gt;(m1) =<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member1:&#39;m1 = m1<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class1&lt;_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member1 m<br /><br />&#160;&#160;&#160;type Class2&lt;&#39;m1,&#39;m2&gt;(m1, m2) =<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member1:&#39;m1 = m1<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member2:&#39;m2 = m2<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class2&lt;_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member1 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class2&lt;_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member2 m<br /><br />&#160;&#160;&#160;type Class3&lt;&#39;m1,&#39;m2,&#39;m3&gt;(m1, m2, m3) =<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member1:&#39;m1 = m1<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member2:&#39;m2 = m2<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member3:&#39;m3 = m3<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class3&lt;_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member1 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class3&lt;_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member2 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class3&lt;_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member3 m<br /><br />&#160;&#160;&#160;type Class4&lt;&#39;m1,&#39;m2,&#39;m3,&#39;m4&gt;(m1, m2, m3, m4) =<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member1:&#39;m1 = m1<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member2:&#39;m2 = m2<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member3:&#39;m3 = m3<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member4:&#39;m4 = m4<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class4&lt;_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member1 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class4&lt;_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member2 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class4&lt;_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member3 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class4&lt;_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member4 m<br /><br />&#160;&#160;&#160;type Class5&lt;&#39;m1,&#39;m2,&#39;m3,&#39;m4,&#39;m5&gt;(m1, m2, m3, m4, m5) =<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member1:&#39;m1 = m1<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member2:&#39;m2 = m2<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member3:&#39;m3 = m3<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member4:&#39;m4 = m4<br />&#160;&#160;&#160;&#160;&#160;&#160;member c.Member5:&#39;m5 = m5<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class5&lt;_,_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member1 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class5&lt;_,_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member2 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class5&lt;_,_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member3 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class5&lt;_,_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member4 m<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( / ) (c:Class5&lt;_,_,_,_,_&gt;, m:&#39;m) =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.Member5 m<br /><br />&#160;&#160;&#160;type Class5 with<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class5&lt; (&#39;m -&gt; &#39;a) , _, _, _, _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member2, x.Member3, x.Member4, x.Member5)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class5&lt;_, (&#39;m -&gt; &#39;a), _, _, _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member1, x.Member3, x.Member4, x.Member5)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class5&lt;_, _, (&#39;m -&gt; &#39;a), _, _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member1, x.Member2, x.Member4, x.Member5)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class5&lt;_, _, _, (&#39;m -&gt; &#39;a), _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member1, x.Member2, x.Member3, x.Member5)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class5&lt;_, _, _, _, (&#39;m -&gt; &#39;a)&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member1, x.Member2, x.Member3, x.Member4)<br /><br />&#160;&#160;&#160;type Class4 with<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class4&lt;_,_,_,_&gt;, y:Class1&lt;_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class5(x.Member1, x.Member2, x.Member3, x.Member4, y.Member1)<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class4&lt; (&#39;m -&gt; &#39;a) , _, _, _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class3(x.Member2, x.Member3, x.Member4)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class4&lt;_, (&#39;m -&gt; &#39;a), _, _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class3(x.Member1, x.Member3, x.Member4)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class4&lt;_, _, (&#39;m -&gt; &#39;a), _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class3(x.Member1, x.Member2, x.Member4)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class4&lt;_, _, _, (&#39;m -&gt; &#39;a)&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class3(x.Member1, x.Member2, x.Member3)<br /><br />&#160;&#160;&#160;type Class3 with<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class3&lt;_,_,_&gt;, y:Class1&lt;_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member1, x.Member2, x.Member3, y.Member1)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class3&lt;_,_,_&gt;, y:Class2&lt;_,_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class5(x.Member1, x.Member2, x.Member3, y.Member1, y.Member2)<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class3&lt; (&#39;m -&gt; &#39;a) , _, _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class2(x.Member2, x.Member3)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class3&lt;_, (&#39;m -&gt; &#39;a), _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class2(x.Member1, x.Member3)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class3&lt;_, _, (&#39;m -&gt; &#39;a)&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class2(x.Member1, x.Member2)<br /><br />&#160;&#160;&#160;type Class2 with   <br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class2&lt;_,_&gt;, y:Class1&lt;_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class3(x.Member1, x.Member2, y.Member1)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class2&lt;_,_&gt;, y:Class2&lt;_,_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member1, x.Member2, y.Member1, y.Member2)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (y:Class2&lt;_,_&gt;, x:Class3&lt;_,_,_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class5(x.Member1, x.Member2, x.Member3, y.Member1, y.Member2)<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class2&lt; (&#39;m -&gt; &#39;a) , _&gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class1(x.Member2)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class2&lt;_, (&#39;m -&gt; &#39;a) &gt;, m:&#39;m) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class1(x.Member1)<br /><br />&#160;&#160;&#160;type Class1 with<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class1&lt;_&gt;, y:Class1&lt;_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class2(x.Member1, y.Member1)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (y:Class1&lt;_&gt;, x:Class2&lt;_,_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class3(x.Member1, x.Member2, y.Member1)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (y:Class1&lt;_&gt;, x:Class3&lt;_,_,_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class4(x.Member1, x.Member2, x.Member3, y.Member1)<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (y:Class1&lt;_&gt;, x:Class4&lt;_,_,_,_&gt;) = <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Class5(x.Member1, x.Member2, x.Member3, x.Member4, y.Member1)<br /><br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( - ) (x:Class1&lt; (&#39;m -&gt; &#39;a) &gt;, m:&#39;m) = Class0()<br /><br />&#160;&#160;&#160;type Class0 with<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class0, y:Class1&lt;_&gt;) = y<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class0, y:Class2&lt;_,_&gt;) = y<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class0, y:Class3&lt;_,_,_&gt;) = y<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class0, y:Class4&lt;_,_,_,_&gt;) = y<br />&#160;&#160;&#160;&#160;&#160;&#160;static member ( + ) (x:Class0, y:Class5&lt;_,_,_,_,_&gt;) = y<br /><br />&#160;&#160;&#160;type ClassBuilder() =<br />&#160;&#160;&#160;&#160;&#160;&#160;member inline b.Yield f = Class1(f)<br />&#160;&#160;&#160;&#160;&#160;&#160;member inline b.YieldFrom x = x<br />&#160;&#160;&#160;&#160;&#160;&#160;member inline b.Combine(x, y) = x + y<br />&#160;&#160;&#160;&#160;&#160;&#160;member inline b.Delay f = f()<br />&#160;&#160;&#160;<br />&#160;&#160;&#160;let Class = ClassBuilder()</div>
<div class="tip" id="fs2">namespace System</div>
<div class="tip" id="fs3">module TypeSystem<br /><br />from Script</div>
<div class="tip" id="fs4">Multiple items<br />union case FirstName.FirstName: FirstName<br /><br />--------------------<br />type FirstName = | FirstName<br /><br />Full name: Script.FirstName</div>
<div class="tip" id="fs5">Multiple items<br />union case LastName.LastName: LastName<br /><br />--------------------<br />type LastName = | LastName<br /><br />Full name: Script.LastName</div>
<div class="tip" id="fs6">Multiple items<br />union case Name.Name: Name<br /><br />--------------------<br />type Name = | Name<br /><br />Full name: Script.Name</div>
<div class="tip" id="fs7">val person : firstName:string -&gt; lastName:string -&gt; Class3&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string)&gt;<br /><br />Full name: Script.person</div>
<div class="tip" id="fs8">val firstName : string</div>
<div class="tip" id="fs9">val lastName : string</div>
<div class="tip" id="fs10">Multiple items<br />val Class : ClassBuilder<br /><br />Full name: Script.TypeSystem.Class<br /><br />--------------------<br />type ClassAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; ClassAttribute<br /><br />Full name: Microsoft.FSharp.Core.ClassAttribute<br /><br />--------------------<br />new : unit -&gt; ClassAttribute</div>
<div class="tip" id="fs11">Multiple items<br />union case AddManager.AddManager: &#39;a -&gt; &#39;a AddManager<br /><br />--------------------<br />type &#39;a AddManager = | AddManager of &#39;a<br /><br />Full name: Script.AddManager&lt;_&gt;</div>
<div class="tip" id="fs12">Multiple items<br />union case Managers.Managers: Managers<br /><br />--------------------<br />type Managers = | Managers<br /><br />Full name: Script.Managers</div>
<div class="tip" id="fs13">val worker : unit -&gt; Class2&lt;(Managers -&gt; &#39;a list),(&#39;a AddManager -&gt; unit)&gt;<br /><br />Full name: Script.worker</div>
<div class="tip" id="fs14">val managers : &#39;a list ref</div>
<div class="tip" id="fs15">Multiple items<br />val ref : value:&#39;T -&gt; &#39;T ref<br /><br />Full name: Microsoft.FSharp.Core.Operators.ref<br /><br />--------------------<br />type &#39;T ref = Ref&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.ref&lt;_&gt;</div>
<div class="tip" id="fs16">Multiple items<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs17">val empty&lt;&#39;T&gt; : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List.empty</div>
<div class="tip" id="fs18">val newManager : &#39;a</div>
<div class="tip" id="fs19">val employee : firstName:string -&gt; secondName:string -&gt; Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; &#39;a list),(&#39;a AddManager -&gt; unit)&gt;<br /><br />Full name: Script.employee</div>
<div class="tip" id="fs20">val secondName : string</div>
<div class="tip" id="fs21">val testConstruction : unit<br /><br />Full name: Script.testConstruction</div>
<div class="tip" id="fs22">val rupert : Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt;</div>
<div class="tip" id="fs23">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs24">val becca : Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; list),(Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; AddManager -&gt; unit)&gt;</div>
<div class="tip" id="fs25">val dave : Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; list),(Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; AddManager -&gt; unit)&gt; list),(Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; list),(Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; AddManager -&gt; unit)&gt; AddManager -&gt; unit)&gt;</div>
<div class="tip" id="fs26">val manager : Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; list),(Class5&lt;(LastName -&gt; string),(Name -&gt; string),(FirstName -&gt; string),(Managers -&gt; unit list),(unit AddManager -&gt; unit)&gt; AddManager -&gt; unit)&gt;</div>
<div class="tip" id="fs27">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs28">Multiple items<br />union case HasNext.HasNext: HasNext<br /><br />--------------------<br />type HasNext = | HasNext<br /><br />Full name: Script.HasNext</div>
<div class="tip" id="fs29">Multiple items<br />union case Next.Next: Next<br /><br />--------------------<br />type Next = | Next<br /><br />Full name: Script.Next</div>
<div class="tip" id="fs30">Multiple items<br />union case ForEach.ForEach: (&#39;a -&gt; unit) -&gt; &#39;a ForEach<br /><br />--------------------<br />type &#39;a ForEach = | ForEach of (&#39;a -&gt; unit)<br /><br />Full name: Script.ForEach&lt;_&gt;</div>
<div class="tip" id="fs31">val richIterator : x:&#39;a -&gt; Class1&lt;(&#39;b ForEach -&gt; unit)&gt; (requires member ( / ) and member ( / ))<br /><br />Full name: Script.richIterator</div>
<div class="tip" id="fs32">val x : &#39;a (requires member ( / ) and member ( / ))</div>
<div class="tip" id="fs33">val f : (&#39;b -&gt; unit) (requires member ( / ) and member ( / ))</div>
<div class="tip" id="fs34">val stringIterator : str:string -&gt; Class2&lt;(HasNext -&gt; bool),(Next -&gt; char)&gt;<br /><br />Full name: Script.stringIterator</div>
<div class="tip" id="fs35">val str : string</div>
<div class="tip" id="fs36">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs37">val i : int ref</div>
<div class="tip" id="fs38">property String.Length: int</div>
<div class="tip" id="fs39">val c : char</div>
<div class="tip" id="fs40">val incr : cell:int ref -&gt; unit<br /><br />Full name: Microsoft.FSharp.Core.Operators.incr</div>
<div class="tip" id="fs41">val richStringIterator : str:string -&gt; Class3&lt;(HasNext -&gt; bool),(Next -&gt; char),(char ForEach -&gt; unit)&gt;<br /><br />Full name: Script.richStringIterator</div>
<div class="tip" id="fs42">val iter : Class2&lt;(HasNext -&gt; bool),(Next -&gt; char)&gt;</div>
<div class="tip" id="fs43">val onlyRichStringIterator : str:string -&gt; Class1&lt;(char ForEach -&gt; unit)&gt;<br /><br />Full name: Script.onlyRichStringIterator</div>
<div class="tip" id="fs44">val testRSI : unit<br /><br />Full name: Script.testRSI</div>
<div class="tip" id="fs45">val iter : Class3&lt;(HasNext -&gt; bool),(Next -&gt; char),(char ForEach -&gt; unit)&gt;</div>
<div class="tip" id="fs46">val printf : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printf</div>
<div class="tip" id="fs47">val iter2 : Class3&lt;(HasNext -&gt; bool),(Next -&gt; char),(char ForEach -&gt; unit)&gt;</div>
<div class="tip" id="fs48">val testORSI : unit<br /><br />Full name: Script.testORSI</div>
<div class="tip" id="fs49">val iter : Class1&lt;(char ForEach -&gt; unit)&gt;</div>
<div class="tip" id="fs50">Multiple items<br />union case Balance.Balance: Balance<br /><br />--------------------<br />type Balance = | Balance<br /><br />Full name: Script.Balance</div>
<div class="tip" id="fs51">Multiple items<br />union case Deposit.Deposit: decimal -&gt; Deposit<br /><br />--------------------<br />type Deposit = | Deposit of decimal<br /><br />Full name: Script.Deposit</div>
<div class="tip" id="fs52">Multiple items<br />val decimal : value:&#39;T -&gt; decimal (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.decimal<br /><br />--------------------<br />type decimal = Decimal<br /><br />Full name: Microsoft.FSharp.Core.decimal<br /><br />--------------------<br />type decimal&lt;&#39;Measure&gt; = decimal<br /><br />Full name: Microsoft.FSharp.Core.decimal&lt;_&gt;</div>
<div class="tip" id="fs53">Multiple items<br />union case Withdraw.Withdraw: decimal -&gt; Withdraw<br /><br />--------------------<br />type Withdraw = | Withdraw of decimal<br /><br />Full name: Script.Withdraw</div>
<div class="tip" id="fs54">val account : name:&#39;a -&gt; Class4&lt;(Deposit -&gt; unit),(Withdraw -&gt; unit),(Balance -&gt; decimal),(Name -&gt; &#39;a)&gt;<br /><br />Full name: Script.account</div>
<div class="tip" id="fs55">val name : &#39;a</div>
<div class="tip" id="fs56">val balance : decimal ref</div>
<div class="tip" id="fs57">val x : decimal</div>
<div class="tip" id="fs58">val beforeAccess : f:(unit -&gt; unit) -&gt; property:&#39;a -&gt; x:&#39;a0 -&gt; &#39;d (requires member ( / ) and member ( - ) and member ( + ))<br /><br />Full name: Script.beforeAccess</div>
<div class="tip" id="fs59">val f : (unit -&gt; unit)</div>
<div class="tip" id="fs60">val property : &#39;a (requires member ( / ) and member ( - ) and member ( + ))</div>
<div class="tip" id="fs61">val x : &#39;a (requires member ( / ) and member ( - ) and member ( + ))</div>
<div class="tip" id="fs62">val logAccess : property:&#39;a -&gt; x:&#39;b -&gt; &#39;e (requires member ( / ) and member ( - ) and member ( + ))<br /><br />Full name: Script.logAccess</div>
<div class="tip" id="fs63">val x : &#39;b (requires member ( / ) and member ( - ) and member ( + ))</div>
<div class="tip" id="fs64">val loggingAccount : name:&#39;a -&gt; Class4&lt;(Deposit -&gt; unit),(Withdraw -&gt; unit),(Name -&gt; &#39;a),(Balance -&gt; decimal)&gt;<br /><br />Full name: Script.loggingAccount</div>
<div class="tip" id="fs65">val testLoggingAccount : unit<br /><br />Full name: Script.testLoggingAccount</div>
<div class="tip" id="fs66">val acc : Class4&lt;(Deposit -&gt; unit),(Withdraw -&gt; unit),(Name -&gt; string),(Balance -&gt; decimal)&gt;</div>
<div class="tip" id="fs67">val illicitFunds : decimal</div>
<div class="tip" id="fs68">val loggingPerson : fName:string -&gt; sName:string -&gt; Class3&lt;(LastName -&gt; string),(FirstName -&gt; string),(Name -&gt; string)&gt;<br /><br />Full name: Script.loggingPerson</div>
<div class="tip" id="fs69">val fName : string</div>
<div class="tip" id="fs70">val sName : string</div>
<div class="tip" id="fs71">val testLoggingPerson : unit<br /><br />Full name: Script.testLoggingPerson</div>
<div class="tip" id="fs72">val zach : Class3&lt;(LastName -&gt; string),(FirstName -&gt; string),(Name -&gt; string)&gt;</div>
<div class="tip" id="fs73">type Console =<br />&#160;&#160;static member BackgroundColor : ConsoleColor with get, set<br />&#160;&#160;static member Beep : unit -&gt; unit + 1 overload<br />&#160;&#160;static member BufferHeight : int with get, set<br />&#160;&#160;static member BufferWidth : int with get, set<br />&#160;&#160;static member CapsLock : bool<br />&#160;&#160;static member Clear : unit -&gt; unit<br />&#160;&#160;static member CursorLeft : int with get, set<br />&#160;&#160;static member CursorSize : int with get, set<br />&#160;&#160;static member CursorTop : int with get, set<br />&#160;&#160;static member CursorVisible : bool with get, set<br />&#160;&#160;...<br /><br />Full name: System.Console</div>
<div class="tip" id="fs74">Console.ReadLine() : string</div>
<div class="tip" id="fs75">val ignore : value:&#39;T -&gt; unit<br /><br />Full name: Microsoft.FSharp.Core.Operators.ignore</div>

