<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">instantiateTransformerAndCallMethod</span>() <span class="o">=</span> 
    <span class="c">// c# object I need to use</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">transformer</span> <span class="o">=</span> <span class="i">Transformer1</span>()

    <span class="c">// c# event object I need to create </span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">event</span> <span class="o">=</span> <span class="i">Event1</span>(<span class="n">1</span>, <span class="s">&quot;aString&quot;</span>)

    <span class="c">// invoking c# method passing event in as an argument</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">transformResult</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="i">transformer</span><span class="o">.</span><span class="i">Transform</span>(<span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">event</span>)

    <span class="c">// Is there any way I can call the Transform() method above using an &quot;anonymous&quot; construct e.g. a record instead of having to instantiates Event1 instance?</span>
    <span class="c">// It is not allowing me to do this - Im assuming it is because f# is strongly typed?</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val instantiateTransformerAndCallMethod : unit -&gt; &#39;a<br /><br />Full name: Script.instantiateTransformerAndCallMethod</div>
<div class="tip" id="fs2">val transformer : obj</div>
<div class="tip" id="fs3">val event : obj</div>
<div class="tip" id="fs4">val transformResult : obj</div>

