<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">Core</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">OptimizedClosures</span>


<span class="c">// for &#39;T = &#39;T0 -&gt; &#39;T1 -&gt; ... -&gt; &#39;Tn, returns the type of &#39;Tn</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">codomain</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="t">Type</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="i">fsFunctionTypes</span> <span class="o">=</span>
        [
            <span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10)" class="t">FSharpFunc</span><span class="o">&lt;</span>_,_<span class="o">&gt;</span><span class="o">&gt;</span>
            <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="t">FSharpFunc</span><span class="o">&lt;</span>_,_,_<span class="o">&gt;</span><span class="o">&gt;</span>
            <span onmouseout="hideTip(event, 'fs9', 13)" onmouseover="showTip(event, 'fs9', 13)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="t">FSharpFunc</span><span class="o">&lt;</span>_,_,_,_<span class="o">&gt;</span><span class="o">&gt;</span>
            <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="t">FSharpFunc</span><span class="o">&lt;</span>_,_,_,_,_<span class="o">&gt;</span><span class="o">&gt;</span>
            <span onmouseout="hideTip(event, 'fs9', 17)" onmouseover="showTip(event, 'fs9', 17)" class="i">typedefof</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="t">FSharpFunc</span><span class="o">&lt;</span>_,_,_,_,_,_<span class="o">&gt;</span><span class="o">&gt;</span>
        ] 
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">t</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="i">GUID</span>)
        <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs15', 24)" onmouseover="showTip(event, 'fs15', 24)" class="t">Set</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 25)" onmouseover="showTip(event, 'fs16', 25)" class="f">ofSeq</span>

    <span class="k">let</span> (|<span onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26)" class="p">FSharpFunc</span>|_|) (<span onmouseout="hideTip(event, 'fs13', 27)" onmouseover="showTip(event, 'fs13', 27)" class="i">t</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs7', 28)" onmouseover="showTip(event, 'fs7', 28)" class="t">Type</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs17', 29)" onmouseover="showTip(event, 'fs17', 29)" class="f">isFSharpFunc</span> (<span onmouseout="hideTip(event, 'fs13', 30)" onmouseover="showTip(event, 'fs13', 30)" class="i">t</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs7', 31)" onmouseover="showTip(event, 'fs7', 31)" class="t">Type</span>) <span class="o">=</span>
            <span onmouseout="hideTip(event, 'fs13', 32)" onmouseover="showTip(event, 'fs13', 32)" class="i">t</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs13', 33)" onmouseover="showTip(event, 'fs13', 33)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="i">IsGenericType</span> <span class="o">&amp;&amp;</span> 
                <span onmouseout="hideTip(event, 'fs13', 35)" onmouseover="showTip(event, 'fs13', 35)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 36)" onmouseover="showTip(event, 'fs19', 36)" class="f">GetGenericTypeDefinition</span>()<span class="o">.</span><span class="i">GUID</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs8', 37)" onmouseover="showTip(event, 'fs8', 37)" class="i">fsFunctionTypes</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="f">Contains</span>

        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs17', 39)" onmouseover="showTip(event, 'fs17', 39)" class="f">isFSharpFunc</span> <span onmouseout="hideTip(event, 'fs13', 40)" onmouseover="showTip(event, 'fs13', 40)" class="i">t</span>, <span onmouseout="hideTip(event, 'fs17', 41)" onmouseover="showTip(event, 'fs17', 41)" class="f">isFSharpFunc</span> <span onmouseout="hideTip(event, 'fs13', 42)" onmouseover="showTip(event, 'fs13', 42)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 43)" onmouseover="showTip(event, 'fs21', 43)" class="i">BaseType</span> <span class="k">with</span>
        | <span class="k">true</span>, _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs22', 44)" onmouseover="showTip(event, 'fs22', 44)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs13', 45)" onmouseover="showTip(event, 'fs13', 45)" class="i">t</span>
        | _, <span class="k">true</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs22', 46)" onmouseover="showTip(event, 'fs22', 46)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs13', 47)" onmouseover="showTip(event, 'fs13', 47)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 48)" onmouseover="showTip(event, 'fs21', 48)" class="i">BaseType</span>
        | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs23', 49)" onmouseover="showTip(event, 'fs23', 49)" class="p">None</span>

    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs24', 50)" onmouseover="showTip(event, 'fs24', 50)" class="f">traverse</span> <span class="o">=</span>
        <span class="k">function</span>
        | <span onmouseout="hideTip(event, 'fs25', 51)" onmouseover="showTip(event, 'fs25', 51)" class="p">FSharpFunc</span> <span onmouseout="hideTip(event, 'fs26', 52)" onmouseover="showTip(event, 'fs26', 52)" class="i">func</span> <span class="k">-&gt;</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 53)" onmouseover="showTip(event, 'fs27', 53)" class="i">funcTypes</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs26', 54)" onmouseover="showTip(event, 'fs26', 54)" class="i">func</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 55)" onmouseover="showTip(event, 'fs28', 55)" class="f">GetGenericArguments</span>()
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs29', 56)" onmouseover="showTip(event, 'fs29', 56)" class="i">returningType</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 57)" onmouseover="showTip(event, 'fs27', 57)" class="i">funcTypes</span><span class="o">.</span>[<span onmouseout="hideTip(event, 'fs27', 58)" onmouseover="showTip(event, 'fs27', 58)" class="i">funcTypes</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 59)" onmouseover="showTip(event, 'fs30', 59)" class="i">Length</span> <span class="o">-</span> <span class="n">1</span>]
            <span onmouseout="hideTip(event, 'fs24', 60)" onmouseover="showTip(event, 'fs24', 60)" class="f">traverse</span> <span onmouseout="hideTip(event, 'fs29', 61)" onmouseover="showTip(event, 'fs29', 61)" class="i">returningType</span>
        | <span onmouseout="hideTip(event, 'fs31', 62)" onmouseover="showTip(event, 'fs31', 62)" class="i">other</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs31', 63)" onmouseover="showTip(event, 'fs31', 63)" class="i">other</span>

    <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs32', 64)" onmouseover="showTip(event, 'fs32', 64)" class="i">f</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs32', 65)" onmouseover="showTip(event, 'fs32', 65)" class="i">f</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 66)" onmouseover="showTip(event, 'fs33', 66)" class="f">GetType</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs24', 67)" onmouseover="showTip(event, 'fs24', 67)" class="f">traverse</span>

<span class="c">// examples:</span>
<span onmouseout="hideTip(event, 'fs6', 68)" onmouseover="showTip(event, 'fs6', 68)" class="f">codomain</span> <span class="n">2</span>
<span onmouseout="hideTip(event, 'fs6', 69)" onmouseover="showTip(event, 'fs6', 69)" class="f">codomain</span> <span class="o">&lt;|</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs34', 70)" onmouseover="showTip(event, 'fs34', 70)" class="i">x</span> <span onmouseout="hideTip(event, 'fs35', 71)" onmouseover="showTip(event, 'fs35', 71)" class="i">y</span> <span onmouseout="hideTip(event, 'fs36', 72)" onmouseover="showTip(event, 'fs36', 72)" class="i">z</span> <span onmouseout="hideTip(event, 'fs37', 73)" onmouseover="showTip(event, 'fs37', 73)" class="i">w</span> <span class="k">-&gt;</span> (<span onmouseout="hideTip(event, 'fs34', 74)" onmouseover="showTip(event, 'fs34', 74)" class="i">x</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs35', 75)" onmouseover="showTip(event, 'fs35', 75)" class="i">y</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs38', 76)" onmouseover="showTip(event, 'fs38', 76)" class="t">Int32</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 77)" onmouseover="showTip(event, 'fs39', 77)" class="f">Parse</span>(<span onmouseout="hideTip(event, 'fs36', 78)" onmouseover="showTip(event, 'fs36', 78)" class="i">z</span>) <span class="o">+</span> <span onmouseout="hideTip(event, 'fs37', 79)" onmouseover="showTip(event, 'fs37', 79)" class="i">w</span>)<span class="o">.</span><span class="f">ToString</span>()
<span onmouseout="hideTip(event, 'fs6', 80)" onmouseover="showTip(event, 'fs6', 80)" class="f">codomain</span> <span onmouseout="hideTip(event, 'fs6', 81)" onmouseover="showTip(event, 'fs6', 81)" class="f">codomain</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace Microsoft</div>
<div class="tip" id="fs3">namespace Microsoft.FSharp</div>
<div class="tip" id="fs4">namespace Microsoft.FSharp.Core</div>
<div class="tip" id="fs5">module OptimizedClosures<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs6">val codomain&lt;&#39;T&gt; : (&#39;T -&gt; Type)<br /><br />Full name: Script.codomain</div>
<div class="tip" id="fs7">type Type =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Assembly : Assembly<br />&#160;&#160;member AssemblyQualifiedName : string<br />&#160;&#160;member Attributes : TypeAttributes<br />&#160;&#160;member BaseType : Type<br />&#160;&#160;member ContainsGenericParameters : bool<br />&#160;&#160;member DeclaringMethod : MethodBase<br />&#160;&#160;member DeclaringType : Type<br />&#160;&#160;member Equals : o:obj -&gt; bool + 1 overload<br />&#160;&#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&gt; Type[]<br />&#160;&#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&gt; MemberInfo[]<br />&#160;&#160;...<br /><br />Full name: System.Type</div>
<div class="tip" id="fs8">val fsFunctionTypes : Set&lt;Guid&gt;</div>
<div class="tip" id="fs9">val typedefof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typedefof</div>
<div class="tip" id="fs10">Multiple items<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_&gt;<br /><br />--------------------<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;T3 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 * arg3:&#39;T3 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;T3 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_,_&gt;<br /><br />--------------------<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 * arg3:&#39;T3 * arg4:&#39;T4 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_,_,_&gt;<br /><br />--------------------<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;T5 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 * arg3:&#39;T3 * arg4:&#39;T4 * arg5:&#39;T5 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;T5 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_,_,_,_&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt;</div>
<div class="tip" id="fs11">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs12">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs13">val t : Type</div>
<div class="tip" id="fs14">property Type.GUID: Guid</div>
<div class="tip" id="fs15">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;member IsProperSupersetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Set&lt;_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>
<div class="tip" id="fs16">val ofSeq : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Set.ofSeq</div>
<div class="tip" id="fs17">val isFSharpFunc : (Type -&gt; bool)</div>
<div class="tip" id="fs18">property Type.IsGenericType: bool</div>
<div class="tip" id="fs19">Type.GetGenericTypeDefinition() : Type</div>
<div class="tip" id="fs20">member Set.Contains : value:&#39;T -&gt; bool</div>
<div class="tip" id="fs21">property Type.BaseType: Type</div>
<div class="tip" id="fs22">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs23">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs24">val traverse : (Type -&gt; Type)</div>
<div class="tip" id="fs25">Multiple items<br />active recognizer FSharpFunc: Type -&gt; Type option<br /><br />--------------------<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_&gt;<br /><br />--------------------<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;T3 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 * arg3:&#39;T3 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;T3 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_,_&gt;<br /><br />--------------------<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 * arg3:&#39;T3 * arg4:&#39;T4 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_,_,_&gt;<br /><br />--------------------<br />type FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt; =<br />&#160;&#160;inherit FSharpFunc&lt;&#39;T1,(&#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;T5 -&gt; &#39;U)&gt;<br />&#160;&#160;new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt;<br />&#160;&#160;abstract member Invoke : arg1:&#39;T1 * arg2:&#39;T2 * arg3:&#39;T3 * arg4:&#39;T4 * arg5:&#39;T5 -&gt; &#39;U<br />&#160;&#160;static member Adapt : func:(&#39;T1 -&gt; &#39;T2 -&gt; &#39;T3 -&gt; &#39;T4 -&gt; &#39;T5 -&gt; &#39;U) -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc&lt;_,_,_,_,_,_&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;U&gt;<br /><br />--------------------<br />new : unit -&gt; FSharpFunc&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;U&gt;</div>
<div class="tip" id="fs26">val func : Type</div>
<div class="tip" id="fs27">val funcTypes : Type []</div>
<div class="tip" id="fs28">Type.GetGenericArguments() : Type []</div>
<div class="tip" id="fs29">val returningType : Type</div>
<div class="tip" id="fs30">property Array.Length: int</div>
<div class="tip" id="fs31">val other : Type</div>
<div class="tip" id="fs32">val f : &#39;T</div>
<div class="tip" id="fs33">Object.GetType() : Type</div>
<div class="tip" id="fs34">val x : int</div>
<div class="tip" id="fs35">val y : int</div>
<div class="tip" id="fs36">val z : string</div>
<div class="tip" id="fs37">val w : int</div>
<div class="tip" id="fs38">type Int32 =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 3 overloads<br />&#160;&#160;&#160;&#160;static val MaxValue : int<br />&#160;&#160;&#160;&#160;static val MinValue : int<br />&#160;&#160;&#160;&#160;static member Parse : s:string -&gt; int + 3 overloads<br />&#160;&#160;&#160;&#160;static member TryParse : s:string * result:int -&gt; bool + 1 overload<br />&#160;&#160;end<br /><br />Full name: System.Int32</div>
<div class="tip" id="fs39">Int32.Parse(s: string) : int<br />Int32.Parse(s: string, provider: IFormatProvider) : int<br />Int32.Parse(s: string, style: Globalization.NumberStyles) : int<br />Int32.Parse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider) : int</div>

