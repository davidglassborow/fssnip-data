<h2><a name="Declarations" class="anchor" href="#Declarations">Declarations</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// The const function</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">ct</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">a</span> _ <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">a</span>

<span class="c">// The flip function (not used in this snippet)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="f">flip</span> <span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="f">f</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">x</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">y</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="f">f</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">y</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="i">x</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Use-case" class="anchor" href="#Use-case">Use case</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Code taken from a toy interpreter</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="t">Exp</span> <span class="o">=</span> 
    <span class="c">// ...</span>
    <span class="c">// Lambdas are expressed as F# an function that takes a list of Exps and an env</span>
    | <span onmouseout="hideTip(event, 'fs8', 12)" onmouseover="showTip(event, 'fs8', 12)" class="p">Lambda</span> <span class="k">of</span> (<span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="t">Exp</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="t">list</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="t">Env</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs7', 16)" onmouseover="showTip(event, 'fs7', 16)" class="t">Exp</span>)
    <span class="c">// ...</span>
<span class="k">and</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="t">Env</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="t">string</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs7', 19)" onmouseover="showTip(event, 'fs7', 19)" class="t">Exp</span>) <span onmouseout="hideTip(event, 'fs9', 20)" onmouseover="showTip(event, 'fs9', 20)" class="t">list</span>

<span class="c">// Built-ins receive evaluated arguments so they don&#39;t care about the env.</span>
<span class="c">// By composing the function we get with ct we&#39;re basically converting a function</span>
<span class="c">// of arity 1 to a function of arity 2 that just ignores its second argument</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 21)" onmouseover="showTip(event, 'fs12', 21)" class="f">builtin</span> <span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="f">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 23)" onmouseover="showTip(event, 'fs8', 23)" class="p">Lambda</span> (<span onmouseout="hideTip(event, 'fs13', 24)" onmouseover="showTip(event, 'fs13', 24)" class="f">f</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span onmouseout="hideTip(event, 'fs1', 25)" onmouseover="showTip(event, 'fs1', 25)" class="f">ct</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val ct : a:&#39;a -&gt; &#39;b -&gt; &#39;a<br /><br />Full name: Script.ct</div>
<div class="tip" id="fs2">val a : &#39;a</div>
<div class="tip" id="fs3">val flip : f:(&#39;a -&gt; &#39;b -&gt; &#39;c) -&gt; x:&#39;b -&gt; y:&#39;a -&gt; &#39;c<br /><br />Full name: Script.flip</div>
<div class="tip" id="fs4">val f : (&#39;a -&gt; &#39;b -&gt; &#39;c)</div>
<div class="tip" id="fs5">val x : &#39;b</div>
<div class="tip" id="fs6">val y : &#39;a</div>
<div class="tip" id="fs7">type Exp = | Lambda of (Exp list -&gt; Env -&gt; Exp)<br /><br />Full name: Script.Exp</div>
<div class="tip" id="fs8">union case Exp.Lambda: (Exp list -&gt; Env -&gt; Exp) -&gt; Exp</div>
<div class="tip" id="fs9">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs10">type Env = (string * Exp) list<br /><br />Full name: Script.Env</div>
<div class="tip" id="fs11">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs12">val builtin : f:(Exp list -&gt; Exp) -&gt; Exp<br /><br />Full name: Script.builtin</div>
<div class="tip" id="fs13">val f : (Exp list -&gt; Exp)</div>

