<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">type</span> <span class="t">BadBaseClass</span> <span class="o">=</span>
    <span class="k">val</span> <span class="k">mutable</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="v">state</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">string</span> 
    <span class="k">new</span> () <span class="k">as</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="v">o</span> <span class="o">=</span> 
        { <span class="v">state</span> <span class="o">=</span> <span class="s">&quot;BadBaseClass&quot;</span> }
           <span class="k">then</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="v">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="f">SetState</span>()
    <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="f">SetState</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="t">unit</span>
    <span class="k">default</span> <span onmouseout="hideTip(event, 'fs3', 9)" onmouseover="showTip(event, 'fs3', 9)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="f">SetState</span>() <span class="o">=</span> ()   

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="t">DerivedFromBad</span> <span class="o">=</span>
    <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="t">BadBaseClass</span>
    <span class="k">new</span> () <span class="k">as</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="v">o</span> <span class="o">=</span> 
        { <span class="k">inherit</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="t">BadBaseClass</span>();  } 
            <span class="k">then</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="v">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs1', 16)" onmouseover="showTip(event, 'fs1', 16)" class="v">state</span> <span class="o">&lt;-</span> <span class="s">&quot;DerivedFromBad &quot;</span>
            
    <span class="k">override</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 18)" onmouseover="showTip(event, 'fs11', 18)" class="f">SetState</span>() <span class="o">=</span>
            <span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="i">stdout</span><span class="o">.</span><span class="f">WriteLine</span>(<span onmouseout="hideTip(event, 'fs10', 20)" onmouseover="showTip(event, 'fs10', 20)" class="i">o</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs1', 21)" onmouseover="showTip(event, 'fs1', 21)" class="v">state</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs13', 22)" onmouseover="showTip(event, 'fs13', 22)" class="i">b</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs8', 23)" onmouseover="showTip(event, 'fs8', 23)" class="t">DerivedFromBad</span>()
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">BadBaseClass.state: string</div>
<div class="tip" id="fs2">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs3">val o : BadBaseClass</div>
<div class="tip" id="fs4">override BadBaseClass.SetState : unit -&gt; unit</div>
<div class="tip" id="fs5">abstract member BadBaseClass.SetState : unit -&gt; unit<br /><br />Full name: Script.BadBaseClass.SetState</div>
<div class="tip" id="fs6">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs7">override BadBaseClass.SetState : unit -&gt; unit<br /><br />Full name: Script.BadBaseClass.SetState</div>
<div class="tip" id="fs8">Multiple items<br />type DerivedFromBad =<br />&#160;&#160;inherit BadBaseClass<br />&#160;&#160;new : unit -&gt; DerivedFromBad<br />&#160;&#160;override SetState : unit -&gt; unit<br /><br />Full name: Script.DerivedFromBad<br /><br />--------------------<br />new : unit -&gt; DerivedFromBad</div>
<div class="tip" id="fs9">Multiple items<br />type BadBaseClass =<br />&#160;&#160;new : unit -&gt; BadBaseClass<br />&#160;&#160;val mutable state: string<br />&#160;&#160;abstract member SetState : unit -&gt; unit<br />&#160;&#160;override SetState : unit -&gt; unit<br /><br />Full name: Script.BadBaseClass<br /><br />--------------------<br />new : unit -&gt; BadBaseClass</div>
<div class="tip" id="fs10">val o : DerivedFromBad</div>
<div class="tip" id="fs11">override DerivedFromBad.SetState : unit -&gt; unit<br /><br />Full name: Script.DerivedFromBad.SetState</div>
<div class="tip" id="fs12">val stdout&lt;&#39;T&gt; : System.IO.TextWriter<br /><br />Full name: Microsoft.FSharp.Core.Operators.stdout</div>
<div class="tip" id="fs13">val b : DerivedFromBad<br /><br />Full name: Script.b</div>

