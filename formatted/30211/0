<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Computes the fibonacci sequence with the tail recursive O(n) algorithm.</span>
<span class="k">let</span> <span class="k">inline</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">fibonacci</span> (<span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">n</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">zero</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">LanguagePrimitives</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">GenericZero</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="i">one</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="t">LanguagePrimitives</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">GenericOne</span>

    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="f">fib</span> <span onmouseout="hideTip(event, 'fs9', 10)" onmouseover="showTip(event, 'fs9', 10)" class="i">a</span> <span onmouseout="hideTip(event, 'fs10', 11)" onmouseover="showTip(event, 'fs10', 11)" class="i">b</span> <span onmouseout="hideTip(event, 'fs11', 12)" onmouseover="showTip(event, 'fs11', 12)" class="i">n&#39;</span> <span class="o">=</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs11', 13)" onmouseover="showTip(event, 'fs11', 13)" class="i">n&#39;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 14)" onmouseover="showTip(event, 'fs3', 14)" class="i">zero</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs9', 15)" onmouseover="showTip(event, 'fs9', 15)" class="i">a</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="f">fib</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="i">b</span> (<span onmouseout="hideTip(event, 'fs9', 18)" onmouseover="showTip(event, 'fs9', 18)" class="i">a</span> <span class="o">+</span> <span onmouseout="hideTip(event, 'fs10', 19)" onmouseover="showTip(event, 'fs10', 19)" class="i">b</span>) (<span onmouseout="hideTip(event, 'fs11', 20)" onmouseover="showTip(event, 'fs11', 20)" class="i">n&#39;</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs6', 21)" onmouseover="showTip(event, 'fs6', 21)" class="i">one</span>)
    
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs2', 22)" onmouseover="showTip(event, 'fs2', 22)" class="i">n</span> <span class="o">&lt;</span> <span onmouseout="hideTip(event, 'fs3', 23)" onmouseover="showTip(event, 'fs3', 23)" class="i">zero</span> <span class="k">then</span>
        <span onmouseout="hideTip(event, 'fs12', 24)" onmouseover="showTip(event, 'fs12', 24)" class="f">failwith</span> <span class="s">&quot;Fibonacci sequences have no negatively indexed positions&quot;</span>
    <span class="k">else</span>
        <span onmouseout="hideTip(event, 'fs8', 25)" onmouseover="showTip(event, 'fs8', 25)" class="f">fib</span> <span onmouseout="hideTip(event, 'fs3', 26)" onmouseover="showTip(event, 'fs3', 26)" class="i">zero</span> <span onmouseout="hideTip(event, 'fs6', 27)" onmouseover="showTip(event, 'fs6', 27)" class="i">one</span> <span onmouseout="hideTip(event, 'fs2', 28)" onmouseover="showTip(event, 'fs2', 28)" class="i">n</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val fibonacci : n:&#39;a -&gt; &#39;a (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))<br /><br />Full name: Script.fibonacci</div>
<div class="tip" id="fs2">val n : &#39;a (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))</div>
<div class="tip" id="fs3">val zero : &#39;a (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))</div>
<div class="tip" id="fs4">module LanguagePrimitives<br /><br />from Microsoft.FSharp.Core</div>
<div class="tip" id="fs5">val GenericZero&lt;&#39;T (requires member get_Zero)&gt; : &#39;T (requires member get_Zero)<br /><br />Full name: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero</div>
<div class="tip" id="fs6">val one : &#39;a (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))</div>
<div class="tip" id="fs7">val GenericOne&lt;&#39;T (requires member get_One)&gt; : &#39;T (requires member get_One)<br /><br />Full name: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne</div>
<div class="tip" id="fs8">val fib : (&#39;a -&gt; &#39;a -&gt; &#39;a -&gt; &#39;a) (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))</div>
<div class="tip" id="fs9">val a : &#39;a (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))</div>
<div class="tip" id="fs10">val b : &#39;a (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))</div>
<div class="tip" id="fs11">val n&#39; : &#39;a (requires member get_Zero and member get_One and member ( - ) and comparison and member ( + ))</div>
<div class="tip" id="fs12">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>

