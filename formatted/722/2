<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">  1: </span>
<span class="l">  2: </span>
<span class="l">  3: </span>
<span class="l">  4: </span>
<span class="l">  5: </span>
<span class="l">  6: </span>
<span class="l">  7: </span>
<span class="l">  8: </span>
<span class="l">  9: </span>
<span class="l"> 10: </span>
<span class="l"> 11: </span>
<span class="l"> 12: </span>
<span class="l"> 13: </span>
<span class="l"> 14: </span>
<span class="l"> 15: </span>
<span class="l"> 16: </span>
<span class="l"> 17: </span>
<span class="l"> 18: </span>
<span class="l"> 19: </span>
<span class="l"> 20: </span>
<span class="l"> 21: </span>
<span class="l"> 22: </span>
<span class="l"> 23: </span>
<span class="l"> 24: </span>
<span class="l"> 25: </span>
<span class="l"> 26: </span>
<span class="l"> 27: </span>
<span class="l"> 28: </span>
<span class="l"> 29: </span>
<span class="l"> 30: </span>
<span class="l"> 31: </span>
<span class="l"> 32: </span>
<span class="l"> 33: </span>
<span class="l"> 34: </span>
<span class="l"> 35: </span>
<span class="l"> 36: </span>
<span class="l"> 37: </span>
<span class="l"> 38: </span>
<span class="l"> 39: </span>
<span class="l"> 40: </span>
<span class="l"> 41: </span>
<span class="l"> 42: </span>
<span class="l"> 43: </span>
<span class="l"> 44: </span>
<span class="l"> 45: </span>
<span class="l"> 46: </span>
<span class="l"> 47: </span>
<span class="l"> 48: </span>
<span class="l"> 49: </span>
<span class="l"> 50: </span>
<span class="l"> 51: </span>
<span class="l"> 52: </span>
<span class="l"> 53: </span>
<span class="l"> 54: </span>
<span class="l"> 55: </span>
<span class="l"> 56: </span>
<span class="l"> 57: </span>
<span class="l"> 58: </span>
<span class="l"> 59: </span>
<span class="l"> 60: </span>
<span class="l"> 61: </span>
<span class="l"> 62: </span>
<span class="l"> 63: </span>
<span class="l"> 64: </span>
<span class="l"> 65: </span>
<span class="l"> 66: </span>
<span class="l"> 67: </span>
<span class="l"> 68: </span>
<span class="l"> 69: </span>
<span class="l"> 70: </span>
<span class="l"> 71: </span>
<span class="l"> 72: </span>
<span class="l"> 73: </span>
<span class="l"> 74: </span>
<span class="l"> 75: </span>
<span class="l"> 76: </span>
<span class="l"> 77: </span>
<span class="l"> 78: </span>
<span class="l"> 79: </span>
<span class="l"> 80: </span>
<span class="l"> 81: </span>
<span class="l"> 82: </span>
<span class="l"> 83: </span>
<span class="l"> 84: </span>
<span class="l"> 85: </span>
<span class="l"> 86: </span>
<span class="l"> 87: </span>
<span class="l"> 88: </span>
<span class="l"> 89: </span>
<span class="l"> 90: </span>
<span class="l"> 91: </span>
<span class="l"> 92: </span>
<span class="l"> 93: </span>
<span class="l"> 94: </span>
<span class="l"> 95: </span>
<span class="l"> 96: </span>
<span class="l"> 97: </span>
<span class="l"> 98: </span>
<span class="l"> 99: </span>
<span class="l">100: </span>
<span class="l">101: </span>
<span class="l">102: </span>
<span class="l">103: </span>
<span class="l">104: </span>
<span class="l">105: </span>
<span class="l">106: </span>
<span class="l">107: </span>
<span class="l">108: </span>
<span class="l">109: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">module</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">BuilderExample</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">System</span>

<span class="c">//------------------------------------------------</span>
<span class="c">//Example 1: First try, just return</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">Nullable1Builder</span>() <span class="o">=</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="f">Return</span>(<span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="i">x</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="t">Nullable</span>(<span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="i">x</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">myNullable1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 10)" onmouseover="showTip(event, 'fs3', 10)" class="t">Nullable1Builder</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="i">MakeNullable</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs8', 12)" onmouseover="showTip(event, 'fs8', 12)" class="i">myNullable1</span>{
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="i">a</span> <span class="o">=</span> <span class="n">5</span> <span class="o">+</span> <span class="n">1</span>
        <span class="k">return</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="i">a</span> <span class="c">// calls builders Return(x)</span>
    }
<span class="c">//val test : Nullable&lt;int&gt; = 6</span>

<span class="c">//------------------------------------------------</span>
<span class="c">//Example 2: nullable { ... } with combining functionality</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="t">Nullable2Builder</span>() <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="f">hasValue</span> (<span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="i">a</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs7', 18)" onmouseover="showTip(event, 'fs7', 18)" class="t">Nullable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">a</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="i">a</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="i">HasValue</span> 
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs15', 21)" onmouseover="showTip(event, 'fs15', 21)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 22)" onmouseover="showTip(event, 'fs16', 22)" class="f">Return</span>(<span onmouseout="hideTip(event, 'fs17', 23)" onmouseover="showTip(event, 'fs17', 23)" class="i">x</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 24)" onmouseover="showTip(event, 'fs7', 24)" class="t">Nullable</span>(<span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="i">x</span>)
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 27)" onmouseover="showTip(event, 'fs18', 27)" class="f">Bind</span>(<span onmouseout="hideTip(event, 'fs19', 28)" onmouseover="showTip(event, 'fs19', 28)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs20', 29)" onmouseover="showTip(event, 'fs20', 29)" class="f">rest</span>) <span class="o">=</span> 
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs12', 30)" onmouseover="showTip(event, 'fs12', 30)" class="f">hasValue</span> <span onmouseout="hideTip(event, 'fs19', 31)" onmouseover="showTip(event, 'fs19', 31)" class="i">x</span> <span class="k">with</span> 
        | <span class="k">false</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs2', 32)" onmouseover="showTip(event, 'fs2', 32)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 33)" onmouseover="showTip(event, 'fs7', 33)" class="t">Nullable</span>() 
        | <span class="k">true</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 34)" onmouseover="showTip(event, 'fs20', 34)" class="f">rest</span>(<span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 36)" onmouseover="showTip(event, 'fs21', 36)" class="i">Value</span>)

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 37)" onmouseover="showTip(event, 'fs22', 37)" class="i">nullable</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 38)" onmouseover="showTip(event, 'fs11', 38)" class="t">Nullable2Builder</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 39)" onmouseover="showTip(event, 'fs23', 39)" class="i">test</span> <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs22', 40)" onmouseover="showTip(event, 'fs22', 40)" class="i">nullable</span>{
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs10', 41)" onmouseover="showTip(event, 'fs10', 41)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 42)" onmouseover="showTip(event, 'fs2', 42)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 43)" onmouseover="showTip(event, 'fs7', 43)" class="t">Nullable</span>(<span class="n">4</span>) <span class="c">// Call Bind</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 45)" onmouseover="showTip(event, 'fs2', 45)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 46)" onmouseover="showTip(event, 'fs7', 46)" class="t">Nullable</span>(<span class="n">5</span>) <span class="c">// Call Bind</span>

        <span class="c">//Inside computation expression(/monad): easy programming without Nullable-worries:</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 47)" onmouseover="showTip(event, 'fs25', 47)" class="i">mult</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 48)" onmouseover="showTip(event, 'fs10', 48)" class="i">a</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs24', 49)" onmouseover="showTip(event, 'fs24', 49)" class="i">b</span> 
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 50)" onmouseover="showTip(event, 'fs26', 50)" class="i">sum</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs25', 51)" onmouseover="showTip(event, 'fs25', 51)" class="i">mult</span> <span class="o">+</span> <span class="n">1</span> 

        <span class="k">return</span> <span onmouseout="hideTip(event, 'fs26', 52)" onmouseover="showTip(event, 'fs26', 52)" class="i">sum</span> <span class="c">//Call Return</span>
    }
<span class="c">//val test : Nullable&lt;int&gt; = 16</span>



<span class="c">//------------------------------------------------------------------------------</span>
<span class="c">// using e.g.</span>
<span class="c">//     let! b = System.Nullable() </span>
<span class="c">// would cause to return:</span>
<span class="c">//     val test : System.Nullable()</span>

<span class="c">// own { ...} syntax is made with implementing Builder-class</span>
<span class="c">// and (some of) the &quot;interface&quot; members</span>




<span class="c">//------------------------------------------------------------------------------</span>
<span class="c">// Some optional technical details:</span>
<span class="c">// Actual stack in example2, you don&#39;t have to care about this:</span>

<span class="c">// nullable.Bind(Nullable(3), (fun res1 -&gt;</span>
<span class="c">//   nullable.Bind(Nullable(5), (fun res2 -&gt;</span>
<span class="c">//     nullable.Let(res1*res2, (fun res3 -&gt;</span>
<span class="c">//       nullable.Let(res3+1, (fun res4 -&gt;</span>
<span class="c">//         nullable.Return(res4)))))))))</span>



<span class="c">//------------------------------------------------</span>

<span class="c">// Further reading:</span>
<span class="c">// Interface described in: http://msdn.microsoft.com/en-us/library/dd233182.aspx</span>
<span class="c">// More info: http://blogs.msdn.com/b/dsyme/archive/2007/09/22/some-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx</span>

<span class="c">// Check also Reactive Extensions 2.0 with F# observe { ... }:</span>
<span class="c">// https://github.com/panesofglass/FSharp.Reactive/blob/master/src/Observable.fs</span>

<span class="c">// and: http://fssnip.net/tags/computation+builder and http://fssnip.net/tags/monad</span>




<span class="c">//------------------------------------------------</span>
<span class="c">//&lt;just for intellisense&gt;</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs27', 53)" onmouseover="showTip(event, 'fs27', 53)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 54)" onmouseover="showTip(event, 'fs2', 54)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 55)" onmouseover="showTip(event, 'fs28', 55)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 56)" onmouseover="showTip(event, 'fs29', 56)" class="i">Generic</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 57)" onmouseover="showTip(event, 'fs30', 57)" class="t">IEnumerable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs31', 58)" onmouseover="showTip(event, 'fs31', 58)" class="t">ImplementJustWhatYouWantBuilder</span> <span class="o">=</span> 
<span class="c">//&lt;/just for intellisense&gt;</span>

<span class="c">// The builder methods are described in MSDN:</span>

      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs32', 59)" onmouseover="showTip(event, 'fs32', 59)" class="f">Bind</span><span class="o">:</span>  <span onmouseout="hideTip(event, 'fs27', 60)" onmouseover="showTip(event, 'fs27', 60)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">*</span> (<span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 61)" onmouseover="showTip(event, 'fs27', 61)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">U</span><span class="o">&gt;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 62)" onmouseover="showTip(event, 'fs27', 62)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">U</span><span class="o">&gt;</span>  <span class="c">// Called for let! and do! in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs33', 63)" onmouseover="showTip(event, 'fs33', 63)" class="f">Delay</span><span class="o">:</span>  (<span onmouseout="hideTip(event, 'fs34', 64)" onmouseover="showTip(event, 'fs34', 64)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 65)" onmouseover="showTip(event, 'fs27', 65)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 66)" onmouseover="showTip(event, 'fs27', 66)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Wraps a computation expression as a function.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs35', 67)" onmouseover="showTip(event, 'fs35', 67)" class="f">Return</span><span class="o">:</span>  <span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 68)" onmouseover="showTip(event, 'fs27', 68)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for return in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs36', 69)" onmouseover="showTip(event, 'fs36', 69)" class="f">ReturnFrom</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs27', 70)" onmouseover="showTip(event, 'fs27', 70)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 71)" onmouseover="showTip(event, 'fs27', 71)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for return! in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs37', 72)" onmouseover="showTip(event, 'fs37', 72)" class="f">Run</span><span class="o">:</span>  <span onmouseout="hideTip(event, 'fs27', 73)" onmouseover="showTip(event, 'fs27', 73)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 74)" onmouseover="showTip(event, 'fs27', 74)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>  <span class="c">// Executes a computation expression.</span>
<span class="c">// or abstract member Run:  M&lt;&#39;T&gt; -&gt; &#39;T //  Executes a computation expression.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs38', 75)" onmouseover="showTip(event, 'fs38', 75)" class="f">Combine</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs27', 76)" onmouseover="showTip(event, 'fs27', 76)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs27', 77)" onmouseover="showTip(event, 'fs27', 77)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 78)" onmouseover="showTip(event, 'fs27', 78)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for sequencing in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs39', 79)" onmouseover="showTip(event, 'fs39', 79)" class="f">Combine</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs27', 80)" onmouseover="showTip(event, 'fs27', 80)" class="t">M</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs34', 81)" onmouseover="showTip(event, 'fs34', 81)" class="t">unit</span><span class="o">&gt;</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs27', 82)" onmouseover="showTip(event, 'fs27', 82)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 83)" onmouseover="showTip(event, 'fs27', 83)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for sequencing in computation expressions. </span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs40', 84)" onmouseover="showTip(event, 'fs40', 84)" class="f">For</span><span class="o">:</span>  <span onmouseout="hideTip(event, 'fs41', 85)" onmouseover="showTip(event, 'fs41', 85)" class="t">seq</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">*</span> (<span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 86)" onmouseover="showTip(event, 'fs27', 86)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">U</span><span class="o">&gt;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 87)" onmouseover="showTip(event, 'fs27', 87)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">U</span><span class="o">&gt;</span>  <span class="c">// Called for for...do expressions in computation expressions.</span>
<span class="c">// or abstract member For:  seq&lt;&#39;T&gt; * (&#39;T -&gt; M&lt;&#39;U&gt;) -&gt; seq&lt;M&lt;&#39;U&gt;&gt; // Called for for...do expressions in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs42', 88)" onmouseover="showTip(event, 'fs42', 88)" class="f">TryFinally</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs27', 89)" onmouseover="showTip(event, 'fs27', 89)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">*</span> (<span onmouseout="hideTip(event, 'fs34', 90)" onmouseover="showTip(event, 'fs34', 90)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs34', 91)" onmouseover="showTip(event, 'fs34', 91)" class="t">unit</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 92)" onmouseover="showTip(event, 'fs27', 92)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for try...finally expressions in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs43', 93)" onmouseover="showTip(event, 'fs43', 93)" class="f">TryWith</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs27', 94)" onmouseover="showTip(event, 'fs27', 94)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">*</span> (<span onmouseout="hideTip(event, 'fs44', 95)" onmouseover="showTip(event, 'fs44', 95)" class="t">exn</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 96)" onmouseover="showTip(event, 'fs27', 96)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 97)" onmouseover="showTip(event, 'fs27', 97)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for try...with expressions in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs45', 98)" onmouseover="showTip(event, 'fs45', 98)" class="f">Using</span><span class="o">:</span>  <span class="o">&#39;</span><span class="i">T</span> <span class="o">*</span> (<span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 99)" onmouseover="showTip(event, 'fs27', 99)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">U</span><span class="o">&gt;</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 100)" onmouseover="showTip(event, 'fs27', 100)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">U</span><span class="o">&gt;</span> <span class="k">when</span> <span class="o">&#39;</span><span class="i">U</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs46', 101)" onmouseover="showTip(event, 'fs46', 101)" class="t">IDisposable</span> <span class="c">// Called for use bindings in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs47', 102)" onmouseover="showTip(event, 'fs47', 102)" class="f">While</span><span class="o">:</span>  (<span onmouseout="hideTip(event, 'fs34', 103)" onmouseover="showTip(event, 'fs34', 103)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs48', 104)" onmouseover="showTip(event, 'fs48', 104)" class="t">bool</span>) <span class="o">*</span> <span onmouseout="hideTip(event, 'fs27', 105)" onmouseover="showTip(event, 'fs27', 105)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 106)" onmouseover="showTip(event, 'fs27', 106)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for while...do expressions in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs49', 107)" onmouseover="showTip(event, 'fs49', 107)" class="f">Yield</span><span class="o">:</span>  <span class="o">&#39;</span><span class="i">T</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 108)" onmouseover="showTip(event, 'fs27', 108)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for yield expressions in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs50', 109)" onmouseover="showTip(event, 'fs50', 109)" class="f">YieldFrom</span><span class="o">:</span> <span onmouseout="hideTip(event, 'fs27', 110)" onmouseover="showTip(event, 'fs27', 110)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 111)" onmouseover="showTip(event, 'fs27', 111)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for yield! expressions in computation expressions.</span>
      <span class="k">abstract</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs51', 112)" onmouseover="showTip(event, 'fs51', 112)" class="f">Zero</span><span class="o">:</span>  <span onmouseout="hideTip(event, 'fs34', 113)" onmouseover="showTip(event, 'fs34', 113)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs27', 114)" onmouseover="showTip(event, 'fs27', 114)" class="t">M</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="c">// Called for empty else branches of if...then expressions in computation expressions.</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">module BuilderExample</div>
<div class="tip" id="fs2">namespace System</div>
<div class="tip" id="fs3">Multiple items<br />type Nullable1Builder =<br />&#160;&#160;new : unit -&gt; Nullable1Builder<br />&#160;&#160;member Return : x:&#39;a -&gt; Nullable&lt;&#39;a&gt; (requires default constructor and value type and &#39;a :&gt; ValueType)<br /><br />Full name: BuilderExample.Nullable1Builder<br /><br />--------------------<br />new : unit -&gt; Nullable1Builder</div>
<div class="tip" id="fs4">val this : Nullable1Builder</div>
<div class="tip" id="fs5">member Nullable1Builder.Return : x:&#39;a -&gt; Nullable&lt;&#39;a&gt; (requires default constructor and value type and &#39;a :&gt; ValueType)<br /><br />Full name: BuilderExample.Nullable1Builder.Return</div>
<div class="tip" id="fs6">val x : &#39;a (requires default constructor and value type and &#39;a :&gt; ValueType)</div>
<div class="tip" id="fs7">Multiple items<br />type Nullable =<br />&#160;&#160;static member Compare&lt;&#39;T&gt; : n1:Nullable&lt;&#39;T&gt; * n2:Nullable&lt;&#39;T&gt; -&gt; int<br />&#160;&#160;static member Equals&lt;&#39;T&gt; : n1:Nullable&lt;&#39;T&gt; * n2:Nullable&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;static member GetUnderlyingType : nullableType:Type -&gt; Type<br /><br />Full name: System.Nullable<br /><br />--------------------<br />type Nullable&lt;&#39;T (requires default constructor and value type and &#39;T :&gt; ValueType)&gt; =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;new : value:&#39;T -&gt; Nullable&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;member Equals : other:obj -&gt; bool<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetValueOrDefault : unit -&gt; &#39;T + 1 overload<br />&#160;&#160;&#160;&#160;member HasValue : bool<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;&#160;&#160;member Value : &#39;T<br />&#160;&#160;end<br /><br />Full name: System.Nullable&lt;_&gt;<br /><br />--------------------<br />Nullable()<br />Nullable(value: &#39;T) : unit</div>
<div class="tip" id="fs8">val myNullable1 : Nullable1Builder<br /><br />Full name: BuilderExample.myNullable1</div>
<div class="tip" id="fs9">val MakeNullable : Nullable&lt;int&gt;<br /><br />Full name: BuilderExample.MakeNullable</div>
<div class="tip" id="fs10">val a : int</div>
<div class="tip" id="fs11">Multiple items<br />type Nullable2Builder =<br />&#160;&#160;new : unit -&gt; Nullable2Builder<br />&#160;&#160;member Bind : x:Nullable&lt;&#39;a&gt; * rest:(&#39;a -&gt; Nullable&lt;&#39;b&gt;) -&gt; Nullable&lt;&#39;b&gt; (requires default constructor and value type and &#39;a :&gt; ValueType and default constructor and value type and &#39;b :&gt; ValueType)<br />&#160;&#160;member Return : x:&#39;c -&gt; Nullable&lt;&#39;c&gt; (requires default constructor and value type and &#39;c :&gt; ValueType)<br /><br />Full name: BuilderExample.Nullable2Builder<br /><br />--------------------<br />new : unit -&gt; Nullable2Builder</div>
<div class="tip" id="fs12">val hasValue : (Nullable&lt;&#39;a&gt; -&gt; bool) (requires default constructor and value type and &#39;a :&gt; ValueType)</div>
<div class="tip" id="fs13">val a : Nullable&lt;&#39;a&gt; (requires default constructor and value type and &#39;a :&gt; ValueType)</div>
<div class="tip" id="fs14">property Nullable.HasValue: bool</div>
<div class="tip" id="fs15">val t : Nullable2Builder</div>
<div class="tip" id="fs16">member Nullable2Builder.Return : x:&#39;c -&gt; Nullable&lt;&#39;c&gt; (requires default constructor and value type and &#39;c :&gt; ValueType)<br /><br />Full name: BuilderExample.Nullable2Builder.Return</div>
<div class="tip" id="fs17">val x : &#39;c (requires default constructor and value type and &#39;c :&gt; ValueType)</div>
<div class="tip" id="fs18">member Nullable2Builder.Bind : x:Nullable&lt;&#39;a&gt; * rest:(&#39;a -&gt; Nullable&lt;&#39;b&gt;) -&gt; Nullable&lt;&#39;b&gt; (requires default constructor and value type and &#39;a :&gt; ValueType and default constructor and value type and &#39;b :&gt; ValueType)<br /><br />Full name: BuilderExample.Nullable2Builder.Bind</div>
<div class="tip" id="fs19">val x : Nullable&lt;&#39;a&gt; (requires default constructor and value type and &#39;a :&gt; ValueType)</div>
<div class="tip" id="fs20">val rest : (&#39;a -&gt; Nullable&lt;&#39;b&gt;) (requires default constructor and value type and &#39;a :&gt; ValueType and default constructor and value type and &#39;b :&gt; ValueType)</div>
<div class="tip" id="fs21">property Nullable.Value: &#39;a</div>
<div class="tip" id="fs22">val nullable : Nullable2Builder<br /><br />Full name: BuilderExample.nullable</div>
<div class="tip" id="fs23">val test : Nullable&lt;int&gt;<br /><br />Full name: BuilderExample.test</div>
<div class="tip" id="fs24">val b : int</div>
<div class="tip" id="fs25">val mult : int</div>
<div class="tip" id="fs26">val sum : int</div>
<div class="tip" id="fs27">type M&lt;&#39;T&gt; = Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.M&lt;_&gt;</div>
<div class="tip" id="fs28">namespace System.Collections</div>
<div class="tip" id="fs29">namespace System.Collections.Generic</div>
<div class="tip" id="fs30">type IEnumerable&lt;&#39;T&gt; =<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;&#39;T&gt;<br /><br />Full name: System.Collections.Generic.IEnumerable&lt;_&gt;</div>
<div class="tip" id="fs31">type ImplementJustWhatYouWantBuilder =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Bind : M&lt;&#39;T&gt; * (&#39;T -&gt; M&lt;&#39;U&gt;) -&gt; M&lt;&#39;U&gt;<br />&#160;&#160;&#160;&#160;abstract member Combine : M&lt;&#39;T&gt; * M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;abstract member Combine : M&lt;unit&gt; * M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;abstract member Delay : (unit -&gt; M&lt;&#39;T&gt;) -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;abstract member For : seq&lt;&#39;T&gt; * (&#39;T -&gt; M&lt;&#39;U&gt;) -&gt; M&lt;&#39;U&gt;<br />&#160;&#160;&#160;&#160;abstract member Return : &#39;T -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;abstract member ReturnFrom : M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;abstract member Run : M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;abstract member TryFinally : M&lt;&#39;T&gt; * (unit -&gt; unit) -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;abstract member TryWith : M&lt;&#39;T&gt; * (exn -&gt; M&lt;&#39;T&gt;) -&gt; M&lt;&#39;T&gt;<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder</div>
<div class="tip" id="fs32">abstract member ImplementJustWhatYouWantBuilder.Bind : M&lt;&#39;T&gt; * (&#39;T -&gt; M&lt;&#39;U&gt;) -&gt; M&lt;&#39;U&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Bind</div>
<div class="tip" id="fs33">abstract member ImplementJustWhatYouWantBuilder.Delay : (unit -&gt; M&lt;&#39;T&gt;) -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Delay</div>
<div class="tip" id="fs34">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs35">abstract member ImplementJustWhatYouWantBuilder.Return : &#39;T -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Return</div>
<div class="tip" id="fs36">abstract member ImplementJustWhatYouWantBuilder.ReturnFrom : M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.ReturnFrom</div>
<div class="tip" id="fs37">abstract member ImplementJustWhatYouWantBuilder.Run : M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Run</div>
<div class="tip" id="fs38">abstract member ImplementJustWhatYouWantBuilder.Combine : M&lt;&#39;T&gt; * M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Combine</div>
<div class="tip" id="fs39">abstract member ImplementJustWhatYouWantBuilder.Combine : M&lt;unit&gt; * M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Combine</div>
<div class="tip" id="fs40">abstract member ImplementJustWhatYouWantBuilder.For : seq&lt;&#39;T&gt; * (&#39;T -&gt; M&lt;&#39;U&gt;) -&gt; M&lt;&#39;U&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.For</div>
<div class="tip" id="fs41">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs42">abstract member ImplementJustWhatYouWantBuilder.TryFinally : M&lt;&#39;T&gt; * (unit -&gt; unit) -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.TryFinally</div>
<div class="tip" id="fs43">abstract member ImplementJustWhatYouWantBuilder.TryWith : M&lt;&#39;T&gt; * (exn -&gt; M&lt;&#39;T&gt;) -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.TryWith</div>
<div class="tip" id="fs44">type exn = Exception<br /><br />Full name: Microsoft.FSharp.Core.exn</div>
<div class="tip" id="fs45">abstract member ImplementJustWhatYouWantBuilder.Using : &#39;T * (&#39;T -&gt; M&lt;&#39;U&gt;) -&gt; M&lt;&#39;U&gt; (requires &#39;U :&gt; IDisposable)<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Using</div>
<div class="tip" id="fs46">type IDisposable =<br />&#160;&#160;member Dispose : unit -&gt; unit<br /><br />Full name: System.IDisposable</div>
<div class="tip" id="fs47">abstract member ImplementJustWhatYouWantBuilder.While : (unit -&gt; bool) * M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.While</div>
<div class="tip" id="fs48">type bool = Boolean<br /><br />Full name: Microsoft.FSharp.Core.bool</div>
<div class="tip" id="fs49">abstract member ImplementJustWhatYouWantBuilder.Yield : &#39;T -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Yield</div>
<div class="tip" id="fs50">abstract member ImplementJustWhatYouWantBuilder.YieldFrom : M&lt;&#39;T&gt; -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.YieldFrom</div>
<div class="tip" id="fs51">abstract member ImplementJustWhatYouWantBuilder.Zero : unit -&gt; M&lt;&#39;T&gt;<br /><br />Full name: BuilderExample.ImplementJustWhatYouWantBuilder.Zero</div>

