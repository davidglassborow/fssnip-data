<h2><a name="Definition-of-imperative-computations" class="anchor" href="#Definition-of-imperative-computations">Definition of imperative computations</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// For more information about this snippet, see the blog post:</span>
<span class="c">// * http://tomasp.net/blog/imperative-i-return.aspx</span>

<span class="c">/// A type that represents imperative computation</span>
<span class="c">/// that runs and may return a result at the end</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">Imperative</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">option</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">ImperativeBuilder</span>() <span class="o">=</span> 
  <span class="c">// Creatae computation that returns the given value  </span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">Return</span>(<span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="i">v</span>) <span class="o">:</span> <span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="t">Imperative</span><span class="o">&lt;</span>_<span class="o">&gt;</span> <span class="o">=</span> 
    (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="i">v</span>))
  <span class="c">// Create computation that doesn&#39;t return any value</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 11)" onmouseover="showTip(event, 'fs5', 11)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="f">Zero</span>() <span class="o">=</span> (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="p">None</span>)

  <span class="c">// Return a computation that will evaluate the provided function  </span>
  <span class="c">// only when the computation is being evaluated</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 14)" onmouseover="showTip(event, 'fs5', 14)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="f">Delay</span>(<span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="f">f</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs2', 17)" onmouseover="showTip(event, 'fs2', 17)" class="t">unit</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs1', 18)" onmouseover="showTip(event, 'fs1', 18)" class="t">Imperative</span><span class="o">&lt;</span>_<span class="o">&gt;</span>) <span class="o">=</span> 
    (<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="f">f</span>()())
  
  <span class="c">// Combines two delayed computations (that may return </span>
  <span class="c">// value imperatively using &#39;return&#39;) into one  </span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 20)" onmouseover="showTip(event, 'fs5', 20)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="f">Combine</span>(<span onmouseout="hideTip(event, 'fs14', 22)" onmouseover="showTip(event, 'fs14', 22)" class="f">a</span>, <span onmouseout="hideTip(event, 'fs15', 23)" onmouseover="showTip(event, 'fs15', 23)" class="f">b</span>) <span class="o">=</span> (<span class="k">fun</span> () <span class="k">-&gt;</span>
    <span class="c">// run the first part of the computation</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs14', 24)" onmouseover="showTip(event, 'fs14', 24)" class="f">a</span>() <span class="k">with</span> 
    <span class="c">// if it returned, we can return the result immediately</span>
    | <span onmouseout="hideTip(event, 'fs8', 25)" onmouseover="showTip(event, 'fs8', 25)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs16', 26)" onmouseover="showTip(event, 'fs16', 26)" class="i">v</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs8', 27)" onmouseover="showTip(event, 'fs8', 27)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs16', 28)" onmouseover="showTip(event, 'fs16', 28)" class="i">v</span>) 
    <span class="c">// otherwise, we need to run the second part</span>
    | _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs15', 29)" onmouseover="showTip(event, 'fs15', 29)" class="f">b</span>() )
  
  <span class="c">// Execute the imperative computation </span>
  <span class="c">// expression given as an argument</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 30)" onmouseover="showTip(event, 'fs5', 30)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 31)" onmouseover="showTip(event, 'fs17', 31)" class="f">Run</span>(<span onmouseout="hideTip(event, 'fs18', 32)" onmouseover="showTip(event, 'fs18', 32)" class="f">imp</span>) <span class="o">=</span> 
    <span class="c">// run the computation and return the result or </span>
    <span class="c">// fail when the computation didn&#39;t return anything</span>
    <span class="k">match</span> <span onmouseout="hideTip(event, 'fs18', 33)" onmouseover="showTip(event, 'fs18', 33)" class="f">imp</span>() <span class="k">with</span> 
    | <span onmouseout="hideTip(event, 'fs8', 34)" onmouseover="showTip(event, 'fs8', 34)" class="p">Some</span>(<span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="i">v</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs19', 36)" onmouseover="showTip(event, 'fs19', 36)" class="i">v</span> 
    | <span onmouseout="hideTip(event, 'fs10', 37)" onmouseover="showTip(event, 'fs10', 37)" class="p">None</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="f">failwith</span> <span class="s">&quot;nothing returned!&quot;</span>

  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 39)" onmouseover="showTip(event, 'fs5', 39)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 40)" onmouseover="showTip(event, 'fs21', 40)" class="f">For</span>(<span onmouseout="hideTip(event, 'fs22', 41)" onmouseover="showTip(event, 'fs22', 41)" class="i">inp</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs23', 42)" onmouseover="showTip(event, 'fs23', 42)" class="t">seq</span><span class="o">&lt;</span>_<span class="o">&gt;</span>, <span onmouseout="hideTip(event, 'fs24', 43)" onmouseover="showTip(event, 'fs24', 43)" class="f">f</span>) <span class="o">=</span>
    <span class="c">// Process next element from the sequence</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs25', 44)" onmouseover="showTip(event, 'fs25', 44)" class="f">loop</span>(<span onmouseout="hideTip(event, 'fs26', 45)" onmouseover="showTip(event, 'fs26', 45)" class="i">en</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs27', 46)" onmouseover="showTip(event, 'fs27', 46)" class="t">IEnumerator</span><span class="o">&lt;</span>_<span class="o">&gt;</span>) <span class="o">=</span> 
      <span class="c">// If ther are no more elements, return empty computation</span>
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs28', 47)" onmouseover="showTip(event, 'fs28', 47)" class="f">not</span>(<span onmouseout="hideTip(event, 'fs26', 48)" onmouseover="showTip(event, 'fs26', 48)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 49)" onmouseover="showTip(event, 'fs29', 49)" class="f">MoveNext</span>()) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs5', 50)" onmouseover="showTip(event, 'fs5', 50)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 51)" onmouseover="showTip(event, 'fs30', 51)" class="f">Zero</span>() <span class="k">else</span>
        <span class="c">// Otherwise call body and combine it with a </span>
        <span class="c">// computation that continues looping</span>
        <span onmouseout="hideTip(event, 'fs5', 52)" onmouseover="showTip(event, 'fs5', 52)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 53)" onmouseover="showTip(event, 'fs31', 53)" class="f">Combine</span>(<span onmouseout="hideTip(event, 'fs24', 54)" onmouseover="showTip(event, 'fs24', 54)" class="f">f</span>(<span onmouseout="hideTip(event, 'fs26', 55)" onmouseover="showTip(event, 'fs26', 55)" class="i">en</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 56)" onmouseover="showTip(event, 'fs32', 56)" class="i">Current</span>), <span onmouseout="hideTip(event, 'fs5', 57)" onmouseover="showTip(event, 'fs5', 57)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 58)" onmouseover="showTip(event, 'fs33', 58)" class="f">Delay</span>(<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs25', 59)" onmouseover="showTip(event, 'fs25', 59)" class="f">loop</span>(<span onmouseout="hideTip(event, 'fs26', 60)" onmouseover="showTip(event, 'fs26', 60)" class="i">en</span>)))
    <span class="c">// Start enumerating from the first element</span>
    <span onmouseout="hideTip(event, 'fs25', 61)" onmouseover="showTip(event, 'fs25', 61)" class="f">loop</span>(<span onmouseout="hideTip(event, 'fs22', 62)" onmouseover="showTip(event, 'fs22', 62)" class="i">inp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs34', 63)" onmouseover="showTip(event, 'fs34', 63)" class="f">GetEnumerator</span>())
    
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 64)" onmouseover="showTip(event, 'fs5', 64)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 65)" onmouseover="showTip(event, 'fs35', 65)" class="f">While</span>(<span onmouseout="hideTip(event, 'fs36', 66)" onmouseover="showTip(event, 'fs36', 66)" class="f">gd</span>, <span onmouseout="hideTip(event, 'fs37', 67)" onmouseover="showTip(event, 'fs37', 67)" class="f">body</span>) <span class="o">=</span> 
    <span class="c">// Perform one step of the &#39;looping&#39;</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs38', 68)" onmouseover="showTip(event, 'fs38', 68)" class="f">loop</span>() <span class="o">=</span>
      <span class="c">// If the condition is false, return empty computation</span>
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs28', 69)" onmouseover="showTip(event, 'fs28', 69)" class="f">not</span>(<span onmouseout="hideTip(event, 'fs36', 70)" onmouseover="showTip(event, 'fs36', 70)" class="f">gd</span>()) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs5', 71)" onmouseover="showTip(event, 'fs5', 71)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 72)" onmouseover="showTip(event, 'fs30', 72)" class="f">Zero</span>() <span class="k">else</span>
        <span class="c">// Otherwise, call body and then loop again</span>
        <span onmouseout="hideTip(event, 'fs5', 73)" onmouseover="showTip(event, 'fs5', 73)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 74)" onmouseover="showTip(event, 'fs31', 74)" class="f">Combine</span>(<span onmouseout="hideTip(event, 'fs37', 75)" onmouseover="showTip(event, 'fs37', 75)" class="f">body</span>, <span onmouseout="hideTip(event, 'fs5', 76)" onmouseover="showTip(event, 'fs5', 76)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 77)" onmouseover="showTip(event, 'fs33', 77)" class="f">Delay</span>(<span class="k">fun</span> () <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs38', 78)" onmouseover="showTip(event, 'fs38', 78)" class="f">loop</span>()))
    <span onmouseout="hideTip(event, 'fs38', 79)" onmouseover="showTip(event, 'fs38', 79)" class="f">loop</span>()

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs39', 80)" onmouseover="showTip(event, 'fs39', 80)" class="i">imperative</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs4', 81)" onmouseover="showTip(event, 'fs4', 81)" class="t">ImperativeBuilder</span>()
</code></pre></td>
</tr>
</table>
<h2><a name="Basic-examples-of-imperative-computations" class="anchor" href="#Basic-examples-of-imperative-computations">Basic examples of imperative computations</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Code following the first &#39;return&#39; is never executed</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs40', 82)" onmouseover="showTip(event, 'fs40', 82)" class="f">test</span>(<span onmouseout="hideTip(event, 'fs41', 83)" onmouseover="showTip(event, 'fs41', 83)" class="i">b</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 84)" onmouseover="showTip(event, 'fs39', 84)" class="i">imperative</span> {
  <span class="k">if</span> <span onmouseout="hideTip(event, 'fs41', 85)" onmouseover="showTip(event, 'fs41', 85)" class="i">b</span> <span class="k">then</span> 
    <span class="k">return</span> <span class="n">0</span>
  <span onmouseout="hideTip(event, 'fs42', 86)" onmouseover="showTip(event, 'fs42', 86)" class="f">printfn</span> <span class="s">&quot;after return!&quot;</span>
  <span class="k">return</span> <span class="n">1</span> }

<span class="c">// Imperatively returns &#39;false&#39; if string fails to pass a check</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs43', 87)" onmouseover="showTip(event, 'fs43', 87)" class="f">validateName</span>(<span onmouseout="hideTip(event, 'fs44', 88)" onmouseover="showTip(event, 'fs44', 88)" class="i">arg</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs45', 89)" onmouseover="showTip(event, 'fs45', 89)" class="t">string</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 90)" onmouseover="showTip(event, 'fs39', 90)" class="i">imperative</span> {
  <span class="c">// Should be non-empty and should contain space</span>
  <span class="k">if</span> (<span onmouseout="hideTip(event, 'fs44', 91)" onmouseover="showTip(event, 'fs44', 91)" class="i">arg</span> <span class="o">=</span> <span class="k">null</span>) <span class="k">then</span> <span class="k">return</span> <span class="k">false</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs46', 92)" onmouseover="showTip(event, 'fs46', 92)" class="i">idx</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs44', 93)" onmouseover="showTip(event, 'fs44', 93)" class="i">arg</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 94)" onmouseover="showTip(event, 'fs47', 94)" class="f">IndexOf</span>(<span class="s">&quot; &quot;</span>)
  <span class="k">if</span> (<span onmouseout="hideTip(event, 'fs46', 95)" onmouseover="showTip(event, 'fs46', 95)" class="i">idx</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span>) <span class="k">then</span> <span class="k">return</span> <span class="k">false</span>
    
  <span class="c">// Verify the name and the surname</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 96)" onmouseover="showTip(event, 'fs48', 96)" class="i">name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs44', 97)" onmouseover="showTip(event, 'fs44', 97)" class="i">arg</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs49', 98)" onmouseover="showTip(event, 'fs49', 98)" class="f">Substring</span>(<span class="n">0</span>, <span onmouseout="hideTip(event, 'fs46', 99)" onmouseover="showTip(event, 'fs46', 99)" class="i">idx</span>)
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs50', 100)" onmouseover="showTip(event, 'fs50', 100)" class="i">surname</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs44', 101)" onmouseover="showTip(event, 'fs44', 101)" class="i">arg</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs49', 102)" onmouseover="showTip(event, 'fs49', 102)" class="f">Substring</span>(<span onmouseout="hideTip(event, 'fs46', 103)" onmouseover="showTip(event, 'fs46', 103)" class="i">idx</span> <span class="o">+</span> <span class="n">1</span>, <span onmouseout="hideTip(event, 'fs44', 104)" onmouseover="showTip(event, 'fs44', 104)" class="i">arg</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs51', 105)" onmouseover="showTip(event, 'fs51', 105)" class="i">Length</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs46', 106)" onmouseover="showTip(event, 'fs46', 106)" class="i">idx</span> <span class="o">-</span> <span class="n">1</span>)
  <span class="k">if</span> (<span onmouseout="hideTip(event, 'fs50', 107)" onmouseover="showTip(event, 'fs50', 107)" class="i">surname</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs51', 108)" onmouseover="showTip(event, 'fs51', 108)" class="i">Length</span> <span class="o">&lt;</span> <span class="n">1</span> <span class="o">||</span> <span onmouseout="hideTip(event, 'fs48', 109)" onmouseover="showTip(event, 'fs48', 109)" class="i">name</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs51', 110)" onmouseover="showTip(event, 'fs51', 110)" class="i">Length</span> <span class="o">&lt;</span> <span class="n">1</span>) <span class="k">then</span> <span class="k">return</span> <span class="k">false</span>
  <span class="k">if</span> (<span onmouseout="hideTip(event, 'fs52', 111)" onmouseover="showTip(event, 'fs52', 111)" class="t">Char</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs53', 112)" onmouseover="showTip(event, 'fs53', 112)" class="f">IsLower</span>(<span onmouseout="hideTip(event, 'fs50', 113)" onmouseover="showTip(event, 'fs50', 113)" class="i">surname</span><span class="o">.</span>[<span class="n">0</span>]) <span class="o">||</span> <span onmouseout="hideTip(event, 'fs52', 114)" onmouseover="showTip(event, 'fs52', 114)" class="t">Char</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs53', 115)" onmouseover="showTip(event, 'fs53', 115)" class="f">IsLower</span>(<span onmouseout="hideTip(event, 'fs48', 116)" onmouseover="showTip(event, 'fs48', 116)" class="i">name</span><span class="o">.</span>[<span class="n">0</span>])) <span class="k">then</span> <span class="k">return</span> <span class="k">false</span>

  <span class="c">// Looks like we&#39;ve got a valid name!</span>
  <span class="k">return</span> <span class="k">true</span> }
</code></pre></td>
</tr>
</table>
<h2><a name="Imperatively-returning-from-a-loop" class="anchor" href="#Imperatively-returning-from-a-loop">Imperatively returning from a loop</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">let</span> <span onmouseout="hideTip(event, 'fs54', 117)" onmouseover="showTip(event, 'fs54', 117)" class="f">readFirstName</span>() <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 118)" onmouseover="showTip(event, 'fs39', 118)" class="i">imperative</span> {
  <span class="c">// Loop until the user enters valid name</span>
  <span class="k">while</span> <span class="k">true</span> <span class="k">do</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 119)" onmouseover="showTip(event, 'fs48', 119)" class="i">name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs55', 120)" onmouseover="showTip(event, 'fs55', 120)" class="t">Console</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 121)" onmouseover="showTip(event, 'fs56', 121)" class="f">ReadLine</span>()
    <span class="c">// If the name is valid, we return it, otherwise</span>
    <span class="c">// we continue looping...</span>
    <span class="k">if</span> (<span onmouseout="hideTip(event, 'fs43', 122)" onmouseover="showTip(event, 'fs43', 122)" class="f">validateName</span>(<span onmouseout="hideTip(event, 'fs48', 123)" onmouseover="showTip(event, 'fs48', 123)" class="i">name</span>)) <span class="k">then</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs48', 124)" onmouseover="showTip(event, 'fs48', 124)" class="i">name</span>
    <span onmouseout="hideTip(event, 'fs42', 125)" onmouseover="showTip(event, 'fs42', 125)" class="f">printfn</span> <span class="s">&quot;That&#39;s not a valid name! Try again...&quot;</span> }

<span class="c">/// Imperatively returns &#39;true&#39; as soon as a value </span>
<span class="c">/// matching the specified predicate is found</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs57', 126)" onmouseover="showTip(event, 'fs57', 126)" class="f">exists</span> <span onmouseout="hideTip(event, 'fs58', 127)" onmouseover="showTip(event, 'fs58', 127)" class="f">f</span> <span onmouseout="hideTip(event, 'fs59', 128)" onmouseover="showTip(event, 'fs59', 128)" class="i">inp</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 129)" onmouseover="showTip(event, 'fs39', 129)" class="i">imperative</span> {
    <span class="k">for</span> <span onmouseout="hideTip(event, 'fs60', 130)" onmouseover="showTip(event, 'fs60', 130)" class="i">v</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs59', 131)" onmouseover="showTip(event, 'fs59', 131)" class="i">inp</span> <span class="k">do</span> 
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs58', 132)" onmouseover="showTip(event, 'fs58', 132)" class="f">f</span>(<span onmouseout="hideTip(event, 'fs60', 133)" onmouseover="showTip(event, 'fs60', 133)" class="i">v</span>) <span class="k">then</span> <span class="k">return</span> <span class="k">true</span>
    <span class="k">return</span> <span class="k">false</span> }

[ <span class="n">1</span> <span class="o">..</span> <span class="n">10</span> ] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs57', 134)" onmouseover="showTip(event, 'fs57', 134)" class="f">exists</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs61', 135)" onmouseover="showTip(event, 'fs61', 135)" class="i">v</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs61', 136)" onmouseover="showTip(event, 'fs61', 136)" class="i">v</span> <span class="o">%</span> <span class="n">3</span> <span class="o">=</span> <span class="n">0</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">type Imperative&lt;&#39;T&gt; = unit -&gt; &#39;T option<br /><br />Full name: Script.Imperative&lt;_&gt;<br /><em><br /><br />&#160;A type that represents imperative computation<br />&#160;that runs and may return a result at the end</em></div>
<div class="tip" id="fs2">type unit = Unit<br /><br />Full name: Microsoft.FSharp.Core.unit</div>
<div class="tip" id="fs3">type &#39;T option = Option&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.option&lt;_&gt;</div>
<div class="tip" id="fs4">Multiple items<br />type ImperativeBuilder =<br />&#160;&#160;new : unit -&gt; ImperativeBuilder<br />&#160;&#160;member Combine : a:(unit -&gt; &#39;e option) * b:(unit -&gt; &#39;e option) -&gt; (unit -&gt; &#39;e option)<br />&#160;&#160;member Delay : f:(unit -&gt; Imperative&lt;&#39;f&gt;) -&gt; (unit -&gt; &#39;f option)<br />&#160;&#160;member For : inp:seq&lt;&#39;b&gt; * f:(&#39;b -&gt; unit -&gt; &#39;c option) -&gt; (unit -&gt; &#39;c option)<br />&#160;&#160;member Return : v:&#39;h -&gt; Imperative&lt;&#39;h&gt;<br />&#160;&#160;member Run : imp:(unit -&gt; &#39;d option) -&gt; &#39;d<br />&#160;&#160;member While : gd:(unit -&gt; bool) * body:(unit -&gt; &#39;a option) -&gt; (unit -&gt; &#39;a option)<br />&#160;&#160;member Zero : unit -&gt; (unit -&gt; &#39;g option)<br /><br />Full name: Script.ImperativeBuilder<br /><br />--------------------<br />new : unit -&gt; ImperativeBuilder</div>
<div class="tip" id="fs5">val x : ImperativeBuilder</div>
<div class="tip" id="fs6">member ImperativeBuilder.Return : v:&#39;h -&gt; Imperative&lt;&#39;h&gt;<br /><br />Full name: Script.ImperativeBuilder.Return</div>
<div class="tip" id="fs7">val v : &#39;h</div>
<div class="tip" id="fs8">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs9">member ImperativeBuilder.Zero : unit -&gt; (unit -&gt; &#39;g option)<br /><br />Full name: Script.ImperativeBuilder.Zero</div>
<div class="tip" id="fs10">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs11">member ImperativeBuilder.Delay : f:(unit -&gt; Imperative&lt;&#39;f&gt;) -&gt; (unit -&gt; &#39;f option)<br /><br />Full name: Script.ImperativeBuilder.Delay</div>
<div class="tip" id="fs12">val f : (unit -&gt; Imperative&lt;&#39;f&gt;)</div>
<div class="tip" id="fs13">member ImperativeBuilder.Combine : a:(unit -&gt; &#39;e option) * b:(unit -&gt; &#39;e option) -&gt; (unit -&gt; &#39;e option)<br /><br />Full name: Script.ImperativeBuilder.Combine</div>
<div class="tip" id="fs14">val a : (unit -&gt; &#39;e option)</div>
<div class="tip" id="fs15">val b : (unit -&gt; &#39;e option)</div>
<div class="tip" id="fs16">val v : &#39;e</div>
<div class="tip" id="fs17">member ImperativeBuilder.Run : imp:(unit -&gt; &#39;d option) -&gt; &#39;d<br /><br />Full name: Script.ImperativeBuilder.Run</div>
<div class="tip" id="fs18">val imp : (unit -&gt; &#39;d option)</div>
<div class="tip" id="fs19">val v : &#39;d</div>
<div class="tip" id="fs20">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs21">member ImperativeBuilder.For : inp:seq&lt;&#39;b&gt; * f:(&#39;b -&gt; unit -&gt; &#39;c option) -&gt; (unit -&gt; &#39;c option)<br /><br />Full name: Script.ImperativeBuilder.For</div>
<div class="tip" id="fs22">val inp : seq&lt;&#39;b&gt;</div>
<div class="tip" id="fs23">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs24">val f : (&#39;b -&gt; unit -&gt; &#39;c option)</div>
<div class="tip" id="fs25">val loop : (IEnumerator&lt;&#39;b&gt; -&gt; unit -&gt; &#39;c option)</div>
<div class="tip" id="fs26">val en : IEnumerator&lt;&#39;b&gt;</div>
<div class="tip" id="fs27">type IEnumerator&lt;&#39;T&gt; =<br />&#160;&#160;member Current : &#39;T<br /><br />Full name: System.Collections.Generic.IEnumerator&lt;_&gt;</div>
<div class="tip" id="fs28">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs29">Collections.IEnumerator.MoveNext() : bool</div>
<div class="tip" id="fs30">member ImperativeBuilder.Zero : unit -&gt; (unit -&gt; &#39;g option)</div>
<div class="tip" id="fs31">member ImperativeBuilder.Combine : a:(unit -&gt; &#39;e option) * b:(unit -&gt; &#39;e option) -&gt; (unit -&gt; &#39;e option)</div>
<div class="tip" id="fs32">property IEnumerator.Current: &#39;b</div>
<div class="tip" id="fs33">member ImperativeBuilder.Delay : f:(unit -&gt; Imperative&lt;&#39;f&gt;) -&gt; (unit -&gt; &#39;f option)</div>
<div class="tip" id="fs34">IEnumerable.GetEnumerator() : IEnumerator&lt;&#39;b&gt;</div>
<div class="tip" id="fs35">member ImperativeBuilder.While : gd:(unit -&gt; bool) * body:(unit -&gt; &#39;a option) -&gt; (unit -&gt; &#39;a option)<br /><br />Full name: Script.ImperativeBuilder.While</div>
<div class="tip" id="fs36">val gd : (unit -&gt; bool)</div>
<div class="tip" id="fs37">val body : (unit -&gt; &#39;a option)</div>
<div class="tip" id="fs38">val loop : (unit -&gt; unit -&gt; &#39;a option)</div>
<div class="tip" id="fs39">val imperative : ImperativeBuilder<br /><br />Full name: Script.imperative</div>
<div class="tip" id="fs40">val test : b:bool -&gt; int<br /><br />Full name: Script.test</div>
<div class="tip" id="fs41">val b : bool</div>
<div class="tip" id="fs42">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs43">val validateName : arg:string -&gt; bool<br /><br />Full name: Script.validateName</div>
<div class="tip" id="fs44">val arg : string</div>
<div class="tip" id="fs45">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs46">val idx : int</div>
<div class="tip" id="fs47">String.IndexOf(value: string) : int<br />String.IndexOf(value: char) : int<br />String.IndexOf(value: string, comparisonType: StringComparison) : int<br />String.IndexOf(value: string, startIndex: int) : int<br />String.IndexOf(value: char, startIndex: int) : int<br />String.IndexOf(value: string, startIndex: int, comparisonType: StringComparison) : int<br />String.IndexOf(value: string, startIndex: int, count: int) : int<br />String.IndexOf(value: char, startIndex: int, count: int) : int<br />String.IndexOf(value: string, startIndex: int, count: int, comparisonType: StringComparison) : int</div>
<div class="tip" id="fs48">val name : string</div>
<div class="tip" id="fs49">String.Substring(startIndex: int) : string<br />String.Substring(startIndex: int, length: int) : string</div>
<div class="tip" id="fs50">val surname : string</div>
<div class="tip" id="fs51">property String.Length: int</div>
<div class="tip" id="fs52">type Char =<br />&#160;&#160;struct<br />&#160;&#160;&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;member Equals : obj:obj -&gt; bool + 1 overload<br />&#160;&#160;&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;&#160;&#160;member GetTypeCode : unit -&gt; TypeCode<br />&#160;&#160;&#160;&#160;member ToString : unit -&gt; string + 1 overload<br />&#160;&#160;&#160;&#160;static val MaxValue : char<br />&#160;&#160;&#160;&#160;static val MinValue : char<br />&#160;&#160;&#160;&#160;static member ConvertFromUtf32 : utf32:int -&gt; string<br />&#160;&#160;&#160;&#160;static member ConvertToUtf32 : highSurrogate:char * lowSurrogate:char -&gt; int + 1 overload<br />&#160;&#160;&#160;&#160;static member GetNumericValue : c:char -&gt; float + 1 overload<br />&#160;&#160;&#160;&#160;...<br />&#160;&#160;end<br /><br />Full name: System.Char</div>
<div class="tip" id="fs53">Char.IsLower(c: char) : bool<br />Char.IsLower(s: string, index: int) : bool</div>
<div class="tip" id="fs54">val readFirstName : unit -&gt; string<br /><br />Full name: Script.readFirstName</div>
<div class="tip" id="fs55">type Console =<br />&#160;&#160;static member BackgroundColor : ConsoleColor with get, set<br />&#160;&#160;static member Beep : unit -&gt; unit + 1 overload<br />&#160;&#160;static member BufferHeight : int with get, set<br />&#160;&#160;static member BufferWidth : int with get, set<br />&#160;&#160;static member CapsLock : bool<br />&#160;&#160;static member Clear : unit -&gt; unit<br />&#160;&#160;static member CursorLeft : int with get, set<br />&#160;&#160;static member CursorSize : int with get, set<br />&#160;&#160;static member CursorTop : int with get, set<br />&#160;&#160;static member CursorVisible : bool with get, set<br />&#160;&#160;...<br /><br />Full name: System.Console</div>
<div class="tip" id="fs56">Console.ReadLine() : string</div>
<div class="tip" id="fs57">val exists : f:(&#39;a -&gt; bool) -&gt; inp:seq&lt;&#39;a&gt; -&gt; bool<br /><br />Full name: Script.exists<br /><em><br /><br />&#160;Imperatively returns &#39;true&#39; as soon as a value <br />&#160;matching the specified predicate is found</em></div>
<div class="tip" id="fs58">val f : (&#39;a -&gt; bool)</div>
<div class="tip" id="fs59">val inp : seq&lt;&#39;a&gt;</div>
<div class="tip" id="fs60">val v : &#39;a</div>
<div class="tip" id="fs61">val v : int</div>

