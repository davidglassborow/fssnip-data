<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span>

<span class="c">/// Returns a value indicating whether the specified phrase occurs within the given text</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">containsPhrase</span> (<span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">phrase</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">string</span>) (<span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="t">string</span>) <span class="o">=</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="f">contains</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="i">index</span> <span class="o">=</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="i">index</span> <span class="o">&lt;=</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="i">text</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="i">Length</span> <span class="o">-</span> <span onmouseout="hideTip(event, 'fs3', 12)" onmouseover="showTip(event, 'fs3', 12)" class="i">phrase</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="i">Length</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="f">compare</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="i">index</span>
        <span class="k">else</span> <span class="k">false</span>
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs9', 16)" onmouseover="showTip(event, 'fs9', 16)" class="f">compare</span> <span onmouseout="hideTip(event, 'fs7', 17)" onmouseover="showTip(event, 'fs7', 17)" class="i">index</span> <span class="o">=</span>        
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs10', 18)" onmouseover="showTip(event, 'fs10', 18)" class="t">String</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 19)" onmouseover="showTip(event, 'fs11', 19)" class="f">Compare</span>(<span onmouseout="hideTip(event, 'fs5', 20)" onmouseover="showTip(event, 'fs5', 20)" class="i">text</span>, <span onmouseout="hideTip(event, 'fs7', 21)" onmouseover="showTip(event, 'fs7', 21)" class="i">index</span>, <span onmouseout="hideTip(event, 'fs3', 22)" onmouseover="showTip(event, 'fs3', 22)" class="i">phrase</span>, <span class="n">0</span>, <span onmouseout="hideTip(event, 'fs3', 23)" onmouseover="showTip(event, 'fs3', 23)" class="i">phrase</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 24)" onmouseover="showTip(event, 'fs8', 24)" class="i">Length</span>) <span class="o">&lt;&gt;</span> <span class="n">0</span>
        <span class="k">then</span> <span onmouseout="hideTip(event, 'fs12', 25)" onmouseover="showTip(event, 'fs12', 25)" class="f">nextWord</span> <span onmouseout="hideTip(event, 'fs7', 26)" onmouseover="showTip(event, 'fs7', 26)" class="i">index</span>
        <span class="k">else</span> <span class="k">true</span>
    <span class="k">and</span> <span onmouseout="hideTip(event, 'fs12', 27)" onmouseover="showTip(event, 'fs12', 27)" class="f">nextWord</span> <span onmouseout="hideTip(event, 'fs7', 28)" onmouseover="showTip(event, 'fs7', 28)" class="i">index</span> <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 29)" onmouseover="showTip(event, 'fs7', 29)" class="i">index</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 30)" onmouseover="showTip(event, 'fs5', 30)" class="i">text</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 31)" onmouseover="showTip(event, 'fs13', 31)" class="f">IndexOf</span>(<span class="s">&#39; &#39;</span>, <span onmouseout="hideTip(event, 'fs7', 32)" onmouseover="showTip(event, 'fs7', 32)" class="i">index</span>)
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs7', 33)" onmouseover="showTip(event, 'fs7', 33)" class="i">index</span> <span class="o">&gt;</span><span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs6', 34)" onmouseover="showTip(event, 'fs6', 34)" class="f">contains</span> (<span onmouseout="hideTip(event, 'fs7', 35)" onmouseover="showTip(event, 'fs7', 35)" class="i">index</span><span class="o">+</span><span class="n">1</span>)
        <span class="k">else</span> <span class="k">false</span>     
    <span onmouseout="hideTip(event, 'fs6', 36)" onmouseover="showTip(event, 'fs6', 36)" class="f">contains</span> <span class="n">0</span>

<span class="k">open</span> <span onmouseout="hideTip(event, 'fs14', 37)" onmouseover="showTip(event, 'fs14', 37)" class="i">NUnit</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 38)" onmouseover="showTip(event, 'fs15', 38)" class="i">Framework</span>

[&lt;<span onmouseout="hideTip(event, 'fs16', 39)" onmouseover="showTip(event, 'fs16', 39)" class="t">TestFixture</span>&gt;]
<span class="k">module</span> <span class="t">``Sample Tests``</span> <span class="o">=</span>

    [&lt;<span onmouseout="hideTip(event, 'fs17', 40)" onmouseover="showTip(event, 'fs17', 40)" class="t">TestCase</span>(<span class="s">&quot;&quot;</span>, <span class="s">&quot;&quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 41)" onmouseover="showTip(event, 'fs17', 41)" class="t">TestCase</span>(<span class="s">&quot;&quot;</span>, <span class="s">&quot; &quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 42)" onmouseover="showTip(event, 'fs17', 42)" class="t">TestCase</span>(<span class="s">&quot;&quot;</span>, <span class="s">&quot;  &quot;</span>)&gt;]
    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs18', 43)" onmouseover="showTip(event, 'fs18', 43)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs19', 44)" onmouseover="showTip(event, 'fs19', 44)" class="f">``Match empty phrase``</span> (<span onmouseout="hideTip(event, 'fs3', 45)" onmouseover="showTip(event, 'fs3', 45)" class="i">phrase</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 46)" onmouseover="showTip(event, 'fs4', 46)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs5', 47)" onmouseover="showTip(event, 'fs5', 47)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 48)" onmouseover="showTip(event, 'fs4', 48)" class="t">string</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs20', 49)" onmouseover="showTip(event, 'fs20', 49)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 50)" onmouseover="showTip(event, 'fs21', 50)" class="f">IsTrue</span>( <span onmouseout="hideTip(event, 'fs2', 51)" onmouseover="showTip(event, 'fs2', 51)" class="f">containsPhrase</span> <span onmouseout="hideTip(event, 'fs3', 52)" onmouseover="showTip(event, 'fs3', 52)" class="i">phrase</span> <span onmouseout="hideTip(event, 'fs5', 53)" onmouseover="showTip(event, 'fs5', 53)" class="i">text</span> )

    [&lt;<span onmouseout="hideTip(event, 'fs17', 54)" onmouseover="showTip(event, 'fs17', 54)" class="t">TestCase</span>(<span class="s">&quot;A&quot;</span>, <span class="s">&quot;A&quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 55)" onmouseover="showTip(event, 'fs17', 55)" class="t">TestCase</span>(<span class="s">&quot;B&quot;</span>, <span class="s">&quot; B&quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 56)" onmouseover="showTip(event, 'fs17', 56)" class="t">TestCase</span>(<span class="s">&quot;C&quot;</span>, <span class="s">&quot;C &quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 57)" onmouseover="showTip(event, 'fs17', 57)" class="t">TestCase</span>(<span class="s">&quot;C&quot;</span>, <span class="s">&quot; C &quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 58)" onmouseover="showTip(event, 'fs17', 58)" class="t">TestCase</span>(<span class="s">&quot;C&quot;</span>, <span class="s">&quot;  C &quot;</span>)&gt;]
    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs18', 59)" onmouseover="showTip(event, 'fs18', 59)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs22', 60)" onmouseover="showTip(event, 'fs22', 60)" class="f">``Finds single character phrase``</span> (<span onmouseout="hideTip(event, 'fs3', 61)" onmouseover="showTip(event, 'fs3', 61)" class="i">phrase</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 62)" onmouseover="showTip(event, 'fs4', 62)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs5', 63)" onmouseover="showTip(event, 'fs5', 63)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 64)" onmouseover="showTip(event, 'fs4', 64)" class="t">string</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs20', 65)" onmouseover="showTip(event, 'fs20', 65)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 66)" onmouseover="showTip(event, 'fs21', 66)" class="f">IsTrue</span>( <span onmouseout="hideTip(event, 'fs2', 67)" onmouseover="showTip(event, 'fs2', 67)" class="f">containsPhrase</span> <span onmouseout="hideTip(event, 'fs3', 68)" onmouseover="showTip(event, 'fs3', 68)" class="i">phrase</span> <span onmouseout="hideTip(event, 'fs5', 69)" onmouseover="showTip(event, 'fs5', 69)" class="i">text</span> )

    [&lt;<span onmouseout="hideTip(event, 'fs17', 70)" onmouseover="showTip(event, 'fs17', 70)" class="t">TestCase</span>(<span class="s">&quot;apple&quot;</span>, <span class="s">&quot;apple&quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 71)" onmouseover="showTip(event, 'fs17', 71)" class="t">TestCase</span>(<span class="s">&quot;orange&quot;</span>, <span class="s">&quot; orange&quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 72)" onmouseover="showTip(event, 'fs17', 72)" class="t">TestCase</span>(<span class="s">&quot;pear&quot;</span>, <span class="s">&quot;pear &quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 73)" onmouseover="showTip(event, 'fs17', 73)" class="t">TestCase</span>(<span class="s">&quot;banana&quot;</span>, <span class="s">&quot; banana &quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 74)" onmouseover="showTip(event, 'fs17', 74)" class="t">TestCase</span>(<span class="s">&quot;lemon&quot;</span>, <span class="s">&quot;  lemon &quot;</span>)&gt;]
    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs18', 75)" onmouseover="showTip(event, 'fs18', 75)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs23', 76)" onmouseover="showTip(event, 'fs23', 76)" class="f">``Finds multiple character phrase``</span> (<span onmouseout="hideTip(event, 'fs3', 77)" onmouseover="showTip(event, 'fs3', 77)" class="i">phrase</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 78)" onmouseover="showTip(event, 'fs4', 78)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs5', 79)" onmouseover="showTip(event, 'fs5', 79)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 80)" onmouseover="showTip(event, 'fs4', 80)" class="t">string</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs20', 81)" onmouseover="showTip(event, 'fs20', 81)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 82)" onmouseover="showTip(event, 'fs21', 82)" class="f">IsTrue</span>( <span onmouseout="hideTip(event, 'fs2', 83)" onmouseover="showTip(event, 'fs2', 83)" class="f">containsPhrase</span> <span onmouseout="hideTip(event, 'fs3', 84)" onmouseover="showTip(event, 'fs3', 84)" class="i">phrase</span> <span onmouseout="hideTip(event, 'fs5', 85)" onmouseover="showTip(event, 'fs5', 85)" class="i">text</span> )

    [&lt;<span onmouseout="hideTip(event, 'fs17', 86)" onmouseover="showTip(event, 'fs17', 86)" class="t">TestCase</span>(<span class="s">&quot;green apple&quot;</span>, <span class="s">&quot;green apple&quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 87)" onmouseover="showTip(event, 'fs17', 87)" class="t">TestCase</span>(<span class="s">&quot;orange orange&quot;</span>, <span class="s">&quot; orange orange&quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 88)" onmouseover="showTip(event, 'fs17', 88)" class="t">TestCase</span>(<span class="s">&quot;pair of pears&quot;</span>, <span class="s">&quot;pair of pears &quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 89)" onmouseover="showTip(event, 'fs17', 89)" class="t">TestCase</span>(<span class="s">&quot;yellow banana&quot;</span>, <span class="s">&quot; yellow banana &quot;</span>)&gt;]
    [&lt;<span onmouseout="hideTip(event, 'fs17', 90)" onmouseover="showTip(event, 'fs17', 90)" class="t">TestCase</span>(<span class="s">&quot;zesty lemon&quot;</span>, <span class="s">&quot;  zesty lemon &quot;</span>)&gt;]
    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs18', 91)" onmouseover="showTip(event, 'fs18', 91)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs24', 92)" onmouseover="showTip(event, 'fs24', 92)" class="f">``Finds multiple word phrase``</span> (<span onmouseout="hideTip(event, 'fs3', 93)" onmouseover="showTip(event, 'fs3', 93)" class="i">phrase</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 94)" onmouseover="showTip(event, 'fs4', 94)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs5', 95)" onmouseover="showTip(event, 'fs5', 95)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 96)" onmouseover="showTip(event, 'fs4', 96)" class="t">string</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs20', 97)" onmouseover="showTip(event, 'fs20', 97)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 98)" onmouseover="showTip(event, 'fs21', 98)" class="f">IsTrue</span>( <span onmouseout="hideTip(event, 'fs2', 99)" onmouseover="showTip(event, 'fs2', 99)" class="f">containsPhrase</span> <span onmouseout="hideTip(event, 'fs3', 100)" onmouseover="showTip(event, 'fs3', 100)" class="i">phrase</span> <span onmouseout="hideTip(event, 'fs5', 101)" onmouseover="showTip(event, 'fs5', 101)" class="i">text</span> )

    [&lt;<span onmouseout="hideTip(event, 'fs17', 102)" onmouseover="showTip(event, 'fs17', 102)" class="t">TestCase</span>(<span class="s">&quot;tea&quot;</span>, <span class="s">&quot;steak&quot;</span>)&gt;]
    <span class="k">let</span> [&lt;<span onmouseout="hideTip(event, 'fs18', 103)" onmouseover="showTip(event, 'fs18', 103)" class="t">Test</span>&gt;] <span onmouseout="hideTip(event, 'fs25', 104)" onmouseover="showTip(event, 'fs25', 104)" class="f">``Only finds exact phrases``</span> (<span onmouseout="hideTip(event, 'fs3', 105)" onmouseover="showTip(event, 'fs3', 105)" class="i">phrase</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 106)" onmouseover="showTip(event, 'fs4', 106)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs5', 107)" onmouseover="showTip(event, 'fs5', 107)" class="i">text</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 108)" onmouseover="showTip(event, 'fs4', 108)" class="t">string</span>) <span class="o">=</span>
        <span onmouseout="hideTip(event, 'fs20', 109)" onmouseover="showTip(event, 'fs20', 109)" class="t">Assert</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 110)" onmouseover="showTip(event, 'fs26', 110)" class="f">IsFalse</span>( <span onmouseout="hideTip(event, 'fs2', 111)" onmouseover="showTip(event, 'fs2', 111)" class="f">containsPhrase</span> <span onmouseout="hideTip(event, 'fs3', 112)" onmouseover="showTip(event, 'fs3', 112)" class="i">phrase</span> <span onmouseout="hideTip(event, 'fs5', 113)" onmouseover="showTip(event, 'fs5', 113)" class="i">text</span> )
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">val containsPhrase : phrase:string -&gt; text:string -&gt; bool<br /><br />Full name: Script.containsPhrase<br /><em><br /><br />&#160;Returns a value indicating whether the specified phrase occurs within the given text</em></div>
<div class="tip" id="fs3">val phrase : string</div>
<div class="tip" id="fs4">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs5">val text : string</div>
<div class="tip" id="fs6">val contains : (int -&gt; bool)</div>
<div class="tip" id="fs7">val index : int</div>
<div class="tip" id="fs8">property String.Length: int</div>
<div class="tip" id="fs9">val compare : (int -&gt; bool)</div>
<div class="tip" id="fs10">Multiple items<br />type String =<br />&#160;&#160;new : value:char -&gt; string + 7 overloads<br />&#160;&#160;member Chars : int -&gt; char<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CompareTo : value:obj -&gt; int + 1 overload<br />&#160;&#160;member Contains : value:string -&gt; bool<br />&#160;&#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&gt; unit<br />&#160;&#160;member EndsWith : value:string -&gt; bool + 2 overloads<br />&#160;&#160;member Equals : obj:obj -&gt; bool + 2 overloads<br />&#160;&#160;member GetEnumerator : unit -&gt; CharEnumerator<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;...<br /><br />Full name: System.String<br /><br />--------------------<br />String(value: nativeptr&lt;char&gt;) : unit<br />String(value: nativeptr&lt;sbyte&gt;) : unit<br />String(value: char []) : unit<br />String(c: char, count: int) : unit<br />String(value: nativeptr&lt;char&gt;, startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int) : unit<br />String(value: char [], startIndex: int, length: int) : unit<br />String(value: nativeptr&lt;sbyte&gt;, startIndex: int, length: int, enc: Text.Encoding) : unit</div>
<div class="tip" id="fs11">String.Compare(strA: string, strB: string) : int<br />String.Compare(strA: string, strB: string, comparisonType: StringComparison) : int<br />String.Compare(strA: string, strB: string, ignoreCase: bool) : int<br />String.Compare(strA: string, strB: string, ignoreCase: bool, culture: Globalization.CultureInfo) : int<br />String.Compare(strA: string, strB: string, culture: Globalization.CultureInfo, options: Globalization.CompareOptions) : int<br />String.Compare(strA: string, indexA: int, strB: string, indexB: int, length: int) : int<br />String.Compare(strA: string, indexA: int, strB: string, indexB: int, length: int, comparisonType: StringComparison) : int<br />String.Compare(strA: string, indexA: int, strB: string, indexB: int, length: int, ignoreCase: bool) : int<br />String.Compare(strA: string, indexA: int, strB: string, indexB: int, length: int, culture: Globalization.CultureInfo, options: Globalization.CompareOptions) : int<br />String.Compare(strA: string, indexA: int, strB: string, indexB: int, length: int, ignoreCase: bool, culture: Globalization.CultureInfo) : int</div>
<div class="tip" id="fs12">val nextWord : (int -&gt; bool)</div>
<div class="tip" id="fs13">String.IndexOf(value: string) : int<br />String.IndexOf(value: char) : int<br />String.IndexOf(value: string, comparisonType: StringComparison) : int<br />String.IndexOf(value: string, startIndex: int) : int<br />String.IndexOf(value: char, startIndex: int) : int<br />String.IndexOf(value: string, startIndex: int, comparisonType: StringComparison) : int<br />String.IndexOf(value: string, startIndex: int, count: int) : int<br />String.IndexOf(value: char, startIndex: int, count: int) : int<br />String.IndexOf(value: string, startIndex: int, count: int, comparisonType: StringComparison) : int</div>
<div class="tip" id="fs14">namespace NUnit</div>
<div class="tip" id="fs15">namespace NUnit.Framework</div>
<div class="tip" id="fs16">Multiple items<br />type TestFixtureAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; TestFixtureAttribute + 1 overload<br />&#160;&#160;member Arguments : obj[]<br />&#160;&#160;member Categories : IList<br />&#160;&#160;member Category : string with get, set<br />&#160;&#160;member Description : string with get, set<br />&#160;&#160;member Ignore : bool with get, set<br />&#160;&#160;member IgnoreReason : string with get, set<br />&#160;&#160;member TypeArgs : Type[] with get, set<br /><br />Full name: NUnit.Framework.TestFixtureAttribute<br /><br />--------------------<br />TestFixtureAttribute() : unit<br />TestFixtureAttribute([&lt;ParamArray&gt;] arguments: obj []) : unit</div>
<div class="tip" id="fs17">Multiple items<br />type TestCaseAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : [&lt;ParamArray&gt;] arguments:obj[] -&gt; TestCaseAttribute + 3 overloads<br />&#160;&#160;member Arguments : obj[]<br />&#160;&#160;member Categories : IList<br />&#160;&#160;member Category : string with get, set<br />&#160;&#160;member Description : string with get, set<br />&#160;&#160;member ExpectedException : Type with get, set<br />&#160;&#160;member ExpectedExceptionName : string with get, set<br />&#160;&#160;member ExpectedMessage : string with get, set<br />&#160;&#160;member ExpectedResult : obj with get, set<br />&#160;&#160;member Explicit : bool with get, set<br />&#160;&#160;...<br /><br />Full name: NUnit.Framework.TestCaseAttribute<br /><br />--------------------<br />TestCaseAttribute([&lt;ParamArray&gt;] arguments: obj []) : unit<br />TestCaseAttribute(arg: obj) : unit<br />TestCaseAttribute(arg1: obj, arg2: obj) : unit<br />TestCaseAttribute(arg1: obj, arg2: obj, arg3: obj) : unit</div>
<div class="tip" id="fs18">Multiple items<br />type TestAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; TestAttribute<br />&#160;&#160;member Description : string with get, set<br /><br />Full name: NUnit.Framework.TestAttribute<br /><br />--------------------<br />TestAttribute() : unit</div>
<div class="tip" id="fs19">val ( Match empty phrase ) : phrase:string * text:string -&gt; unit<br /><br />Full name: Script.Sample Tests.( Match empty phrase )</div>
<div class="tip" id="fs20">type Assert =<br />&#160;&#160;static member AreEqual : expected:int * actual:int -&gt; unit + 23 overloads<br />&#160;&#160;static member AreNotEqual : expected:int * actual:int -&gt; unit + 23 overloads<br />&#160;&#160;static member AreNotSame : expected:obj * actual:obj -&gt; unit + 2 overloads<br />&#160;&#160;static member AreSame : expected:obj * actual:obj -&gt; unit + 2 overloads<br />&#160;&#160;static member ByVal : actual:obj * expression:IResolveConstraint -&gt; unit + 2 overloads<br />&#160;&#160;static member Catch : code:TestDelegate -&gt; Exception + 8 overloads<br />&#160;&#160;static member Contains : expected:obj * actual:ICollection -&gt; unit + 2 overloads<br />&#160;&#160;static member Counter : int<br />&#160;&#160;static member DoesNotThrow : code:TestDelegate -&gt; unit + 2 overloads<br />&#160;&#160;static member Equals : a:obj * b:obj -&gt; bool<br />&#160;&#160;...<br /><br />Full name: NUnit.Framework.Assert</div>
<div class="tip" id="fs21">Assert.IsTrue(condition: bool) : unit<br />Assert.IsTrue(condition: bool, message: string) : unit<br />Assert.IsTrue(condition: bool, message: string, [&lt;ParamArray&gt;] args: obj []) : unit</div>
<div class="tip" id="fs22">val ( Finds single character phrase ) : phrase:string * text:string -&gt; unit<br /><br />Full name: Script.Sample Tests.( Finds single character phrase )</div>
<div class="tip" id="fs23">val ( Finds multiple character phrase ) : phrase:string * text:string -&gt; unit<br /><br />Full name: Script.Sample Tests.( Finds multiple character phrase )</div>
<div class="tip" id="fs24">val ( Finds multiple word phrase ) : phrase:string * text:string -&gt; unit<br /><br />Full name: Script.Sample Tests.( Finds multiple word phrase )</div>
<div class="tip" id="fs25">val ( Only finds exact phrases ) : phrase:string * text:string -&gt; unit<br /><br />Full name: Script.Sample Tests.( Only finds exact phrases )</div>
<div class="tip" id="fs26">Assert.IsFalse(condition: bool) : unit<br />Assert.IsFalse(condition: bool, message: string) : unit<br />Assert.IsFalse(condition: bool, message: string, [&lt;ParamArray&gt;] args: obj []) : unit</div>

