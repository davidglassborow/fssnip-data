<h2><a name="Ninety-Nine-F-Problems-Problems-95-99-Miscellaneous-problems" class="anchor" href="#Ninety-Nine-F-Problems-Problems-95-99-Miscellaneous-problems">Ninety-Nine F# Problems - Problems 95 - 99 - Miscellaneous problems</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">///</span>
<span class="c">/// These are F# solutions of Ninety-Nine F# Problems </span>
<span class="c">/// (http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_F#_Problems), </span>
<span class="c">/// which are themselves translations of Ninety-Nine Lisp Problems</span>
<span class="c">/// (http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html)</span>
<span class="c">/// and Ninety-Nine Prolog Problems</span>
<span class="c">/// (https://sites.google.com/site/prologsite/prolog-problems).</span>
<span class="c">///</span>
<span class="c">/// If you would like to contribute a solution or fix any bugs, send </span>
<span class="c">/// an email to paks at kitiara dot org with the subject &quot;99 F# problems&quot;. </span>
<span class="c">/// I&#39;ll try to update the problem as soon as possible.</span>
<span class="c">///</span>
<span class="c">/// The problems have different levels of difficulty. Those marked with a single asterisk (*) </span>
<span class="c">/// are easy. If you have successfully solved the preceeding problems you should be able to </span>
<span class="c">/// solve them within a few (say 15) minutes. Problems marked with two asterisks (**) are of </span>
<span class="c">/// intermediate difficulty. If you are a skilled F# programmer it shouldn&#39;t take you more than </span>
<span class="c">/// 30-90 minutes to solve them. Problems marked with three asterisks (***) are more difficult. </span>
<span class="c">/// You may need more time (i.e. a few hours or more) to find a good solution</span>
<span class="c">///</span>
<span class="c">/// Though the problems number from 1 to 99, there are some gaps and some additions marked with </span>
<span class="c">/// letters. There are actually only 88 problems.</span>
<span class="c">///</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-95-English-number-words" class="anchor" href="#Problem-95-English-number-words">(<em></em>) Problem 95 : English number words</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// On financial documents, like cheques, numbers must sometimes be written in full words. </span>
<span class="c">/// Example: 175 must be written as one-seven-five. Write a predicate full-words/1 to print </span>
<span class="c">/// (non-negative) integer numbers in full words.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; fullWords 175;;</span>
<span class="c">/// val it : string = &quot;one-seven-five&quot;</span>

<span id="fst1" onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1, document.getElementById('fst1'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-96-Syntax-checker" class="anchor" href="#Problem-96-Syntax-checker">(<em></em>) Problem 96 : Syntax checker</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// In a certain programming language (Ada) identifiers are defined by the syntax diagram below.</span>
<span class="c">///  </span>
<span class="c">///   ----&gt;|letter|---+-------------------------------------+------&gt;</span>
<span class="c">///                   |                                     |</span>
<span class="c">///                   +--------------+------&gt;|letter|---+---+</span>
<span class="c">///                   |             / \                 |</span>
<span class="c">///                   +---&gt;| - |---+   +----&gt;|digit |---+</span>
<span class="c">///                   |                                 |</span>
<span class="c">///                   +---------------------------------+</span>
<span class="c">///</span>
<span class="c">/// Transform the syntax diagram into a system of syntax diagrams which do not contain loops;</span>
<span class="c">/// i.e. which are purely recursive. Using these modified diagrams, write a predicate </span>
<span class="c">/// identifier/1 that can check whether or not a given string is a legal identifier.</span>
<span class="c">///  </span>
<span class="c">/// Example in Prolog: </span>
<span class="c">/// % identifier(Str) :- Str is a legal identifier </span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; identifier &quot;this-is-a-long-identifier&quot;;;</span>
<span class="c">/// val it : bool = true</span>
<span class="c">/// &gt; identifier &quot;this-ends-in-&quot;;;</span>
<span class="c">/// val it : bool = false</span>
<span class="c">/// &gt; identifier &quot;two--hyphens&quot;;;</span>
<span class="c">/// val it : bool = false</span>

<span id="fst2" onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2, document.getElementById('fst2'))" class="omitted">(Solution 1)</span>

<span id="fst3" onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3, document.getElementById('fst3'))" class="omitted">(Solution 2)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-97-Sudoku" class="anchor" href="#Problem-97-Sudoku">(<em></em>*) Problem 97 : Sudoku</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Sudoku puzzles go like this:</span>
<span class="c">///</span>
<span class="c">///       Problem statement                 Solution</span>
<span class="c">///</span>
<span class="c">///        .  .  4 | 8  .  . | .  1  7	        9  3  4 | 8  2  5 | 6  1  7	     </span>
<span class="c">///                |         |                          |         |</span>
<span class="c">///        6  7  . | 9  .  . | .  .  .	        6  7  2 | 9  1  4 | 8  5  3</span>
<span class="c">///                |         |                          |         |</span>
<span class="c">///        5  .  8 | .  3  . | .  .  4          5  1  8 | 6  3  7 | 9  2  4</span>
<span class="c">///        --------+---------+--------          --------+---------+--------</span>
<span class="c">///        3  .  . | 7  4  . | 1  .  .          3  2  5 | 7  4  8 | 1  6  9</span>
<span class="c">///                |         |                          |         |</span>
<span class="c">///        .  6  9 | .  .  . | 7  8  .          4  6  9 | 1  5  3 | 7  8  2</span>
<span class="c">///                |         |                          |         |</span>
<span class="c">///        .  .  1 | .  6  9 | .  .  5          7  8  1 | 2  6  9 | 4  3  5</span>
<span class="c">///        --------+---------+--------          --------+---------+--------</span>
<span class="c">///        1  .  . | .  8  . | 3  .  6	        1  9  7 | 5  8  2 | 3  4  6</span>
<span class="c">///                |         |                          |         |</span>
<span class="c">///        .  .  . | .  .  6 | .  9  1	        8  5  3 | 4  7  6 | 2  9  1</span>
<span class="c">///                |         |                          |         |</span>
<span class="c">///        2  4  . | .  .  1 | 5  .  .          2  4  6 | 3  9  1 | 5  7  8</span>
<span class="c">///</span>
<span class="c">/// Every spot in the puzzle belongs to a (horizontal) row and a (vertical) column, as well</span>
<span class="c">/// as to one single 3x3 square (which we call &quot;square&quot; for short). At the beginning, some </span>
<span class="c">/// of the spots carry a single-digit number between 1 and 9. The problem is to fill the </span>
<span class="c">/// missing spots with digits in such a way that every number between 1 and 9 appears exactly </span>
<span class="c">/// once in each row, in each column, and in each square.</span>

<span id="fst4" onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4, document.getElementById('fst4'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-98-Nonograms" class="anchor" href="#Problem-98-Nonograms">(<em></em>*) Problem 98 : Nonograms</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Around 1994, a certain kind of puzzle was very popular in England. The &quot;Sunday Telegraph&quot; </span>
<span class="c">/// newspaper wrote: &quot;Nonograms are puzzles from Japan and are currently published each week </span>
<span class="c">/// only in The Sunday Telegraph. Simply use your logic and skill to complete the grid and </span>
<span class="c">/// reveal a picture or diagram.&quot; As a Prolog programmer, you are in a better situation: you </span>
<span class="c">/// can have your computer do the work! Just write a little program ;-).</span>
<span class="c">///</span>
<span class="c">/// The puzzle goes like this: Essentially, each row and column of a rectangular bitmap is </span>
<span class="c">/// annotated with the respective lengths of its distinct strings of occupied cells. The </span>
<span class="c">/// person who solves the puzzle must complete the bitmap given only these lengths.</span>
<span class="c">///</span>
<span class="c">///             Problem statement:          Solution:</span>
<span class="c">///             |_|_|_|_|_|_|_|_| 3         |_|X|X|X|_|_|_|_| 3           </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 2 1       |X|X|_|X|_|_|_|_| 2 1         </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 3 2       |_|X|X|X|_|_|X|X| 3 2         </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 2 2       |_|_|X|X|_|_|X|X| 2 2         </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 6         |_|_|X|X|X|X|X|X| 6           </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 1 5       |X|_|X|X|X|X|X|_| 1 5         </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 6         |X|X|X|X|X|X|_|_| 6           </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 1         |_|_|_|_|X|_|_|_| 1           </span>
<span class="c">///             |_|_|_|_|_|_|_|_| 2         |_|_|_|X|X|_|_|_| 2           </span>
<span class="c">///              1 3 1 7 5 3 4 3             1 3 1 7 5 3 4 3              </span>
<span class="c">///              2 1 5 1                     2 1 5 1                      </span>
<span class="c">///      </span>
<span class="c">/// For the example above, the problem can be stated as the two lists [[3],[2,1],[3,2],[2,2]</span>
<span class="c">/// ,[6],[1,5],[6],[1],[2]] and [[1,2],[3,1],[1,5],[7,1],[5],[3],[4],[3]] which give the </span>
<span class="c">/// &quot;solid&quot; lengths of the rows and columns, top-to-bottom and left-to-right, respectively. </span>
<span class="c">/// Published puzzles are larger than this example, e.g. 25 x 20, and apparently always have </span>
<span class="c">/// unique solutions.</span>
<span class="c">///</span>
<span class="c">/// Example in F#:</span>
<span class="c">///</span>
<span class="c">/// &gt; printfn &quot;%s&quot; &lt;| nonogram [[3];[2;1];[3;2];[2;2];[6];[1;5];[6];[1];[2]]</span>
<span class="c">///                             [[1;2];[3;1];[1;5];[7;1];[5];[3];[4];[3]];;</span>
<span class="c">/// |_|X|X|X|_|_|_|_| 3</span>
<span class="c">/// |X|X|_|X|_|_|_|_| 2 1</span>
<span class="c">/// |_|X|X|X|_|_|X|X| 3 2</span>
<span class="c">/// |_|_|X|X|_|_|X|X| 2 2</span>
<span class="c">/// |_|_|X|X|X|X|X|X| 6</span>
<span class="c">/// |X|_|X|X|X|X|X|_| 1 5</span>
<span class="c">/// |X|X|X|X|X|X|_|_| 6</span>
<span class="c">/// |_|_|_|_|X|_|_|_| 1</span>
<span class="c">/// |_|_|_|X|X|_|_|_| 2</span>
<span class="c">///  1 3 1 7 5 3 4 3</span>
<span class="c">///  2 1 5 1</span>
<span class="c">///</span>

<span id="fst5" onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5, document.getElementById('fst5'))" class="omitted">(Solution needed)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-99-Crossword-puzzle" class="anchor" href="#Problem-99-Crossword-puzzle">(<em></em>*) Problem 99 : Crossword puzzle</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Given an empty (or almost empty) framework of a crossword puzzle and a set of words. The </span>
<span class="c">/// problem is to place the words into the framework.</span>
<span class="c">/// </span>
<span class="c">/// </span>
<span class="c">/// </span>
<span class="c">/// The particular crossword puzzle is specified in a text file which first lists the words</span>
<span class="c">/// (one word per line) in an arbitrary order. Then, after an empty line, the crossword </span>
<span class="c">/// framework is defined. In this framework specification, an empty character location is </span>
<span class="c">/// represented by a dot (.). In order to make the solution easier, character locations can </span>
<span class="c">/// also contain predefined character values. The puzzle above is defined in the file </span>
<span class="c">/// p99a.dat, other examples are p99b.dat and p99d.dat. There is also an example of a puzzle </span>
<span class="c">/// (p99c.dat) which does not have a solution.</span>
<span class="c">/// </span>
<span class="c">/// Words are strings (character lists) of at least two characters. A horizontal or vertical </span>
<span class="c">/// sequence of character places in the crossword puzzle framework is called a site. Our </span>
<span class="c">/// problem is to find a compatible way of placing words onto sites.</span>
<span class="c">/// </span>
<span class="c">/// Hints: (1) The problem is not easy. You will need some time to thoroughly understand it. </span>
<span class="c">/// So, don&#39;t give up too early! And remember that the objective is a clean solution, not </span>
<span class="c">/// just a quick-and-dirty hack!</span>
<span class="c">/// </span>
<span class="c">/// (2) Reading the data file is a tricky problem for which a solution is provided in the </span>
<span class="c">/// file p99-readfile.pl. See the predicate read_lines/2.</span>
<span class="c">/// </span>
<span class="c">/// (3) For efficiency reasons it is important, at least for larger puzzles, to sort the </span>
<span class="c">/// words and the sites in a particular order. For this part of the problem, the solution </span>
<span class="c">/// of P28 may be very helpful.</span>
<span class="c">/// </span>
<span class="c">/// Example in F#:</span>
<span class="c">/// </span>
<span class="c">/// ALPHA</span>
<span class="c">/// ARES</span>
<span class="c">/// POPPY</span>
<span class="c">/// </span>
<span class="c">///   .</span>
<span class="c">///   .</span>
<span class="c">/// .....</span>
<span class="c">///   . .</span>
<span class="c">///   . .</span>
<span class="c">///     .</span>
<span class="c">/// &gt; solve $ readCrossword &quot;ALPHA\nARES\nPOPPY\n\n  .  \n  .  \n.....\n  . .\n  . .\n    .\n&quot;</span>
<span class="c">///  </span>
<span class="c">/// [[((3,1),&#39;A&#39;);((3,2),&#39;L&#39;);((3,3),&#39;P&#39;);((3,4),&#39;H&#39;);((3,5),&#39;A&#39;);((1,3),&#39;P&#39;);((2,3)</span>
<span class="c">/// ,&#39;O&#39;);((3,3),&#39;P&#39;);((4,3),&#39;P&#39;);((5,3),&#39;Y&#39;);((3,5),&#39;A&#39;);((4,5),&#39;R&#39;);((5,5),&#39;E&#39;);((</span>
<span class="c">/// 6,5),&#39;S&#39;)]]</span>

<span id="fst6" onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6, document.getElementById('fst6'))" class="omitted">(Solution needed)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">let fullWords (n: int) = <br />&#160;&#160;&#160;&#160;let words = [| &quot;zero&quot;; &quot;one&quot;; &quot;two&quot;; &quot;three&quot;; &quot;four&quot;; &quot;five&quot;; &quot;six&quot;; &quot;seven&quot;; &quot;eight&quot;; &quot;nine&quot; |]<br />&#160;&#160;&#160;&#160;let digits = n.ToString() |&gt; Seq.map (fun c -&gt; int c - int &#39;0&#39;) |&gt; Seq.map (fun c -&gt; words.[c])|&gt; Array.ofSeq<br />&#160;&#160;&#160;&#160;System.String.Join(&quot;-&quot;, digits)</div>
<div class="tip" id="fs2">// identifier = letter((-)?(letter|digit))*<br />// Some people, when confronted with a problem, think &quot;I know, I&#39;ll use regular expressions.&quot; Now they have two problems.  - Jamie Zawinski<br />let identifier expr = System.Text.RegularExpressions.Regex.IsMatch(expr,@&quot;^([a-z]|[A-Z])((\-)?([0-9]|[a-z]|[A-Z]))*$&quot;)</div>
<div class="tip" id="fs3">// This is the overkill solution using a parser combinator.<br />// For a solution using fslex and fsyacc go here: https://github.com/paks/99-FSharp-Problems/tree/master/P96<br />// The combinator came from here: http://v2matveev.blogspot.com/2010/05/f-parsing-simple-language.html<br />type &#39;a ParserResult = Success of &#39;a * char list | Failed<br /><br />type &#39;a Parser = Parser of (char list -&gt; &#39;a ParserResult)<br /><br />let apply (Parser p) s = p s<br /><br />let run p l = apply p (Seq.toList l)<br /><br />let one v = Parser(fun cs -&gt; Success(v,cs))<br />let fail() = Parser(fun _ -&gt; Failed)<br /><br />let bind p f = Parser (fun cs -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match apply p cs with        <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Success(r, cs2) -&gt; apply (f r) cs2        <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Failed -&gt; Failed)    <br /><br />let choose f p = Parser(fun cs -&gt;<br />&#160;&#160;&#160;&#160;match cs with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| c::cs when f c -&gt; Success(p c, cs)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _ -&gt; Failed)<br /><br />let (&lt;|&gt;) p1 p2 = Parser(fun cs -&gt;<br />&#160;&#160;&#160;&#160;match apply p1 cs with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Failed -&gt; apply p2 cs<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| result -&gt; result)<br /><br />let (&lt;&amp;&gt;) p1 p2 = Parser(fun cs -&gt;<br />&#160;&#160;&#160;&#160;match apply p1 cs with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Success(_, cs2) -&gt; apply p2 cs2<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Failed -&gt; Failed)<br /><br />let letter = choose System.Char.IsLetter id    <br /><br />let letterOrDigit = choose System.Char.IsLetterOrDigit id    <br /><br />let hiphen = choose ((=) &#39;-&#39;) id    <br /><br />type ParseBuilder() =<br />&#160;&#160;&#160;&#160;member parser.Return(v) = one v<br />&#160;&#160;&#160;&#160;member parser.Bind(p, f) = bind p f<br />&#160;&#160;&#160;&#160;member parser.ReturnFrom(p) = p<br />&#160;&#160;&#160;&#160;member parser.Zero() = fail()<br /><br />let parser = new ParseBuilder()<br /><br />let rec zeroOrMany p f v0 = <br />&#160;&#160;&#160;&#160;parser {<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return! oneOrMany p f v0 &lt;|&gt; one v0<br />&#160;&#160;&#160;&#160;}<br /><br />and oneOrMany p f v0 = <br />&#160;&#160;&#160;&#160;parser {<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let! v1 = p<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return! zeroOrMany p f (f v0 v1)<br />&#160;&#160;&#160;&#160;}<br /><br />let hiphenLetterOrDigit = (hiphen &lt;&amp;&gt; letterOrDigit) &lt;|&gt; letterOrDigit<br /><br />let identifierP = parser {<br />&#160;&#160;&#160;&#160;let! l = letter<br />&#160;&#160;&#160;&#160;let sb = new System.Text.StringBuilder(l.ToString())<br />&#160;&#160;&#160;&#160;let! rest = sb |&gt; zeroOrMany hiphenLetterOrDigit (fun acc v -&gt; acc.Append(v))<br />&#160;&#160;&#160;&#160;return rest.ToString()<br />}<br /><br />let identifier&#39; str =<br />&#160;&#160;&#160;&#160;match run identifierP str with<br />&#160;&#160;&#160;&#160;| Success(_,[]) -&gt; true //if the parser consumed all the input, then it&#39;s an identifier<br />&#160;&#160;&#160;&#160;| _ -&gt; false</div>
<div class="tip" id="fs4">let solution97 = &quot;https://github.com/paks/ProjectEuler/blob/master/Euler2/P96/sudoku.fs&quot;</div>
<div class="tip" id="fs5">let solution98 = &quot;your solution here!!&quot;</div>
<div class="tip" id="fs6">let solution99 = &quot;your solution here!!&quot;</div>

