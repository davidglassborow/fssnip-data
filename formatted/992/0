<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">[&lt;<span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="t">AutoOpen</span>&gt;]
<span class="k">module</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">QuickLinqHelpers</span> <span class="o">=</span> 
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">System</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="i">Linq</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 6)" onmouseover="showTip(event, 'fs3', 6)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 7)" onmouseover="showTip(event, 'fs4', 7)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 8)" onmouseover="showTip(event, 'fs5', 8)" class="i">Expressions</span>
    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 9)" onmouseover="showTip(event, 'fs3', 9)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 10)" onmouseover="showTip(event, 'fs6', 10)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="i">Generic</span>

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs8', 12)" onmouseover="showTip(event, 'fs8', 12)" class="t">IQueryable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">with</span> 
        <span class="c">///  A version of Queryable.OrderBy which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs9', 13)" onmouseover="showTip(event, 'fs9', 13)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="f">OrderByQ</span>(<span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="i">keySelector</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span class="o">&#39;</span><span class="i">TKey</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 18)" onmouseover="showTip(event, 'fs3', 18)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 19)" onmouseover="showTip(event, 'fs4', 19)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 20)" onmouseover="showTip(event, 'fs14', 20)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 21)" onmouseover="showTip(event, 'fs15', 21)" class="f">OrderBy</span>(<span onmouseout="hideTip(event, 'fs9', 22)" onmouseover="showTip(event, 'fs9', 22)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs11', 23)" onmouseover="showTip(event, 'fs11', 23)" class="i">keySelector</span>)
        <span class="c">///  A version of Queryable.OrderByDescending which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs9', 24)" onmouseover="showTip(event, 'fs9', 24)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 25)" onmouseover="showTip(event, 'fs16', 25)" class="f">OrderByDescendingQ</span>(<span onmouseout="hideTip(event, 'fs11', 26)" onmouseover="showTip(event, 'fs11', 26)" class="i">keySelector</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 27)" onmouseover="showTip(event, 'fs12', 27)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 28)" onmouseover="showTip(event, 'fs13', 28)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span class="o">&#39;</span><span class="i">TKey</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 29)" onmouseover="showTip(event, 'fs3', 29)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 30)" onmouseover="showTip(event, 'fs4', 30)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 31)" onmouseover="showTip(event, 'fs14', 31)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 32)" onmouseover="showTip(event, 'fs17', 32)" class="f">OrderByDescending</span>(<span onmouseout="hideTip(event, 'fs9', 33)" onmouseover="showTip(event, 'fs9', 33)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs11', 34)" onmouseover="showTip(event, 'fs11', 34)" class="i">keySelector</span>)
        <span class="c">///  A version of Queryable.Select which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs9', 35)" onmouseover="showTip(event, 'fs9', 35)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 36)" onmouseover="showTip(event, 'fs18', 36)" class="f">SelectQ</span>(<span onmouseout="hideTip(event, 'fs19', 37)" onmouseover="showTip(event, 'fs19', 37)" class="i">selector</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 38)" onmouseover="showTip(event, 'fs12', 38)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 39)" onmouseover="showTip(event, 'fs13', 39)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span class="o">&#39;</span><span class="i">TResult</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 40)" onmouseover="showTip(event, 'fs3', 40)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 41)" onmouseover="showTip(event, 'fs4', 41)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 42)" onmouseover="showTip(event, 'fs14', 42)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 43)" onmouseover="showTip(event, 'fs20', 43)" class="f">Select</span>(<span onmouseout="hideTip(event, 'fs9', 44)" onmouseover="showTip(event, 'fs9', 44)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs19', 45)" onmouseover="showTip(event, 'fs19', 45)" class="i">selector</span>)
        <span class="c">///  A version of Queryable.SelectMany which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs9', 46)" onmouseover="showTip(event, 'fs9', 46)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 47)" onmouseover="showTip(event, 'fs21', 47)" class="f">SelectManyQ</span>(<span onmouseout="hideTip(event, 'fs22', 48)" onmouseover="showTip(event, 'fs22', 48)" class="i">selector</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 49)" onmouseover="showTip(event, 'fs12', 49)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 50)" onmouseover="showTip(event, 'fs13', 50)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span onmouseout="hideTip(event, 'fs23', 51)" onmouseover="showTip(event, 'fs23', 51)" class="t">IEnumerable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">TResult</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 52)" onmouseover="showTip(event, 'fs3', 52)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 53)" onmouseover="showTip(event, 'fs4', 53)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 54)" onmouseover="showTip(event, 'fs14', 54)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs24', 55)" onmouseover="showTip(event, 'fs24', 55)" class="f">SelectMany</span>(<span onmouseout="hideTip(event, 'fs9', 56)" onmouseover="showTip(event, 'fs9', 56)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs22', 57)" onmouseover="showTip(event, 'fs22', 57)" class="i">selector</span>)
        <span class="c">///  A version of Queryable.SkipWhile which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs9', 58)" onmouseover="showTip(event, 'fs9', 58)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs25', 59)" onmouseover="showTip(event, 'fs25', 59)" class="f">SkipWhileQ</span>(<span onmouseout="hideTip(event, 'fs26', 60)" onmouseover="showTip(event, 'fs26', 60)" class="i">predicate</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 61)" onmouseover="showTip(event, 'fs12', 61)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 62)" onmouseover="showTip(event, 'fs13', 62)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span onmouseout="hideTip(event, 'fs27', 63)" onmouseover="showTip(event, 'fs27', 63)" class="t">bool</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 64)" onmouseover="showTip(event, 'fs3', 64)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 65)" onmouseover="showTip(event, 'fs4', 65)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 66)" onmouseover="showTip(event, 'fs14', 66)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs28', 67)" onmouseover="showTip(event, 'fs28', 67)" class="f">SkipWhile</span>(<span onmouseout="hideTip(event, 'fs9', 68)" onmouseover="showTip(event, 'fs9', 68)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs26', 69)" onmouseover="showTip(event, 'fs26', 69)" class="i">predicate</span>)
        <span class="c">///  A version of Queryable.TakeWhile which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs9', 70)" onmouseover="showTip(event, 'fs9', 70)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 71)" onmouseover="showTip(event, 'fs29', 71)" class="f">TakeWhileQ</span>(<span onmouseout="hideTip(event, 'fs26', 72)" onmouseover="showTip(event, 'fs26', 72)" class="i">predicate</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 73)" onmouseover="showTip(event, 'fs12', 73)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 74)" onmouseover="showTip(event, 'fs13', 74)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span onmouseout="hideTip(event, 'fs27', 75)" onmouseover="showTip(event, 'fs27', 75)" class="t">bool</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 76)" onmouseover="showTip(event, 'fs3', 76)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 77)" onmouseover="showTip(event, 'fs4', 77)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 78)" onmouseover="showTip(event, 'fs14', 78)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 79)" onmouseover="showTip(event, 'fs30', 79)" class="f">TakeWhile</span>(<span onmouseout="hideTip(event, 'fs9', 80)" onmouseover="showTip(event, 'fs9', 80)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs26', 81)" onmouseover="showTip(event, 'fs26', 81)" class="i">predicate</span>)
        <span class="c">///  A version of Queryable.Where which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs9', 82)" onmouseover="showTip(event, 'fs9', 82)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs31', 83)" onmouseover="showTip(event, 'fs31', 83)" class="f">WhereQ</span>(<span onmouseout="hideTip(event, 'fs26', 84)" onmouseover="showTip(event, 'fs26', 84)" class="i">predicate</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 85)" onmouseover="showTip(event, 'fs12', 85)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 86)" onmouseover="showTip(event, 'fs13', 86)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span onmouseout="hideTip(event, 'fs27', 87)" onmouseover="showTip(event, 'fs27', 87)" class="t">bool</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 88)" onmouseover="showTip(event, 'fs3', 88)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 89)" onmouseover="showTip(event, 'fs4', 89)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 90)" onmouseover="showTip(event, 'fs14', 90)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 91)" onmouseover="showTip(event, 'fs32', 91)" class="f">Where</span>(<span onmouseout="hideTip(event, 'fs9', 92)" onmouseover="showTip(event, 'fs9', 92)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs26', 93)" onmouseover="showTip(event, 'fs26', 93)" class="i">predicate</span>)

    <span class="k">type</span> <span onmouseout="hideTip(event, 'fs33', 94)" onmouseover="showTip(event, 'fs33', 94)" class="t">IOrderedQueryable</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="k">with</span> 
        <span class="c">///  A version of Queryable.ThenBy which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs34', 95)" onmouseover="showTip(event, 'fs34', 95)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 96)" onmouseover="showTip(event, 'fs35', 96)" class="f">ThenByQ</span>(<span onmouseout="hideTip(event, 'fs11', 97)" onmouseover="showTip(event, 'fs11', 97)" class="i">keySelector</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 98)" onmouseover="showTip(event, 'fs12', 98)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 99)" onmouseover="showTip(event, 'fs13', 99)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span class="o">&#39;</span><span class="i">TKey</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 100)" onmouseover="showTip(event, 'fs3', 100)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 101)" onmouseover="showTip(event, 'fs4', 101)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 102)" onmouseover="showTip(event, 'fs14', 102)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 103)" onmouseover="showTip(event, 'fs36', 103)" class="f">ThenBy</span>(<span onmouseout="hideTip(event, 'fs34', 104)" onmouseover="showTip(event, 'fs34', 104)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs11', 105)" onmouseover="showTip(event, 'fs11', 105)" class="i">keySelector</span>)
        <span class="c">///  A version of Queryable.ThenByDescending which does not require a type annotation on the argument when used from F#</span>
        <span class="k">member</span> <span onmouseout="hideTip(event, 'fs34', 106)" onmouseover="showTip(event, 'fs34', 106)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 107)" onmouseover="showTip(event, 'fs37', 107)" class="f">ThenByDescendingQ</span>(<span onmouseout="hideTip(event, 'fs11', 108)" onmouseover="showTip(event, 'fs11', 108)" class="i">keySelector</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs12', 109)" onmouseover="showTip(event, 'fs12', 109)" class="t">Expression</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs13', 110)" onmouseover="showTip(event, 'fs13', 110)" class="t">Func</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span>,<span class="o">&#39;</span><span class="i">TKey</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 111)" onmouseover="showTip(event, 'fs3', 111)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 112)" onmouseover="showTip(event, 'fs4', 112)" class="i">Linq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 113)" onmouseover="showTip(event, 'fs14', 113)" class="t">Queryable</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 114)" onmouseover="showTip(event, 'fs38', 114)" class="f">ThenByDescending</span>(<span onmouseout="hideTip(event, 'fs34', 115)" onmouseover="showTip(event, 'fs34', 115)" class="i">x</span>,<span onmouseout="hideTip(event, 'fs11', 116)" onmouseover="showTip(event, 'fs11', 116)" class="i">keySelector</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">Multiple items<br />type AutoOpenAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; AutoOpenAttribute<br />&#160;&#160;new : path:string -&gt; AutoOpenAttribute<br />&#160;&#160;member Path : string<br /><br />Full name: Microsoft.FSharp.Core.AutoOpenAttribute<br /><br />--------------------<br />new : unit -&gt; AutoOpenAttribute<br />new : path:string -&gt; AutoOpenAttribute</div>
<div class="tip" id="fs2">module QuickLinqHelpers<br /><br />from Script</div>
<div class="tip" id="fs3">namespace System</div>
<div class="tip" id="fs4">namespace System.Linq</div>
<div class="tip" id="fs5">namespace System.Linq.Expressions</div>
<div class="tip" id="fs6">namespace System.Collections</div>
<div class="tip" id="fs7">namespace System.Collections.Generic</div>
<div class="tip" id="fs8">Multiple items<br />type IQueryable =<br />&#160;&#160;member ElementType : Type<br />&#160;&#160;member Expression : Expression<br />&#160;&#160;member Provider : IQueryProvider<br /><br />Full name: System.Linq.IQueryable<br /><br />--------------------<br />type IQueryable&lt;&#39;T&gt; =<br /><br />Full name: System.Linq.IQueryable&lt;_&gt;</div>
<div class="tip" id="fs9">val x : IQueryable&lt;&#39;T&gt;</div>
<div class="tip" id="fs10">member IQueryable.OrderByQ : keySelector:Expression&lt;Func&lt;&#39;T,&#39;TKey&gt;&gt; -&gt; IOrderedQueryable&lt;&#39;T&gt;<br /><br />Full name: Script.QuickLinqHelpers.OrderByQ<br /><em><br /><br />&#160;&#160;A version of Queryable.OrderBy which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs11">val keySelector : Expression&lt;Func&lt;&#39;T,&#39;TKey&gt;&gt;</div>
<div class="tip" id="fs12">Multiple items<br />type Expression =<br />&#160;&#160;member CanReduce : bool<br />&#160;&#160;member NodeType : ExpressionType<br />&#160;&#160;member Reduce : unit -&gt; Expression<br />&#160;&#160;member ReduceAndCheck : unit -&gt; Expression<br />&#160;&#160;member ReduceExtensions : unit -&gt; Expression<br />&#160;&#160;member ToString : unit -&gt; string<br />&#160;&#160;member Type : Type<br />&#160;&#160;static member Add : left:Expression * right:Expression -&gt; BinaryExpression + 1 overload<br />&#160;&#160;static member AddAssign : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;static member AddAssignChecked : left:Expression * right:Expression -&gt; BinaryExpression + 2 overloads<br />&#160;&#160;...<br /><br />Full name: System.Linq.Expressions.Expression<br /><br />--------------------<br />type Expression&lt;&#39;TDelegate&gt; =<br />&#160;&#160;inherit LambdaExpression<br />&#160;&#160;member Compile : unit -&gt; &#39;TDelegate + 1 overload<br />&#160;&#160;member Update : body:Expression * parameters:IEnumerable&lt;ParameterExpression&gt; -&gt; Expression&lt;&#39;TDelegate&gt;<br /><br />Full name: System.Linq.Expressions.Expression&lt;_&gt;</div>
<div class="tip" id="fs13">Multiple items<br />type Func&lt;&#39;TResult&gt; =<br />&#160;&#160;delegate of unit -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;<br /><br />--------------------<br />type Func&lt;&#39;T1,&#39;T2,&#39;T3,&#39;T4,&#39;T5,&#39;T6,&#39;T7,&#39;T8,&#39;T9,&#39;T10,&#39;T11,&#39;T12,&#39;T13,&#39;T14,&#39;T15,&#39;T16,&#39;TResult&gt; =<br />&#160;&#160;delegate of &#39;T1 * &#39;T2 * &#39;T3 * &#39;T4 * &#39;T5 * &#39;T6 * &#39;T7 * &#39;T8 * &#39;T9 * &#39;T10 * &#39;T11 * &#39;T12 * &#39;T13 * &#39;T14 * &#39;T15 * &#39;T16 -&gt; &#39;TResult<br /><br />Full name: System.Func&lt;_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_&gt;</div>
<div class="tip" id="fs14">type Queryable =<br />&#160;&#160;static member Aggregate&lt;&#39;TSource&gt; : source:IQueryable&lt;&#39;TSource&gt; * func:Expression&lt;Func&lt;&#39;TSource, &#39;TSource, &#39;TSource&gt;&gt; -&gt; &#39;TSource + 2 overloads<br />&#160;&#160;static member All&lt;&#39;TSource&gt; : source:IQueryable&lt;&#39;TSource&gt; * predicate:Expression&lt;Func&lt;&#39;TSource, bool&gt;&gt; -&gt; bool<br />&#160;&#160;static member Any&lt;&#39;TSource&gt; : source:IQueryable&lt;&#39;TSource&gt; -&gt; bool + 1 overload<br />&#160;&#160;static member AsQueryable&lt;&#39;TElement&gt; : source:IEnumerable&lt;&#39;TElement&gt; -&gt; IQueryable&lt;&#39;TElement&gt; + 1 overload<br />&#160;&#160;static member Average : source:IQueryable&lt;int&gt; -&gt; float + 19 overloads<br />&#160;&#160;static member Cast&lt;&#39;TResult&gt; : source:IQueryable -&gt; IQueryable&lt;&#39;TResult&gt;<br />&#160;&#160;static member Concat&lt;&#39;TSource&gt; : source1:IQueryable&lt;&#39;TSource&gt; * source2:IEnumerable&lt;&#39;TSource&gt; -&gt; IQueryable&lt;&#39;TSource&gt;<br />&#160;&#160;static member Contains&lt;&#39;TSource&gt; : source:IQueryable&lt;&#39;TSource&gt; * item:&#39;TSource -&gt; bool + 1 overload<br />&#160;&#160;static member Count&lt;&#39;TSource&gt; : source:IQueryable&lt;&#39;TSource&gt; -&gt; int + 1 overload<br />&#160;&#160;static member DefaultIfEmpty&lt;&#39;TSource&gt; : source:IQueryable&lt;&#39;TSource&gt; -&gt; IQueryable&lt;&#39;TSource&gt; + 1 overload<br />&#160;&#160;...<br /><br />Full name: System.Linq.Queryable</div>
<div class="tip" id="fs15">Queryable.OrderBy&lt;&#39;TSource,&#39;TKey&gt;(source: IQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;<br />Queryable.OrderBy&lt;&#39;TSource,&#39;TKey&gt;(source: IQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;, comparer: IComparer&lt;&#39;TKey&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;</div>
<div class="tip" id="fs16">member IQueryable.OrderByDescendingQ : keySelector:Expression&lt;Func&lt;&#39;T,&#39;TKey&gt;&gt; -&gt; IOrderedQueryable&lt;&#39;T&gt;<br /><br />Full name: Script.QuickLinqHelpers.OrderByDescendingQ<br /><em><br /><br />&#160;&#160;A version of Queryable.OrderByDescending which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs17">Queryable.OrderByDescending&lt;&#39;TSource,&#39;TKey&gt;(source: IQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;<br />Queryable.OrderByDescending&lt;&#39;TSource,&#39;TKey&gt;(source: IQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;, comparer: IComparer&lt;&#39;TKey&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;</div>
<div class="tip" id="fs18">member IQueryable.SelectQ : selector:Expression&lt;Func&lt;&#39;T,&#39;TResult&gt;&gt; -&gt; IQueryable&lt;&#39;TResult&gt;<br /><br />Full name: Script.QuickLinqHelpers.SelectQ<br /><em><br /><br />&#160;&#160;A version of Queryable.Select which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs19">val selector : Expression&lt;Func&lt;&#39;T,&#39;TResult&gt;&gt;</div>
<div class="tip" id="fs20">Queryable.Select&lt;&#39;TSource,&#39;TResult&gt;(source: IQueryable&lt;&#39;TSource&gt;, selector: Expression&lt;Func&lt;&#39;TSource,int,&#39;TResult&gt;&gt;) : IQueryable&lt;&#39;TResult&gt;<br />Queryable.Select&lt;&#39;TSource,&#39;TResult&gt;(source: IQueryable&lt;&#39;TSource&gt;, selector: Expression&lt;Func&lt;&#39;TSource,&#39;TResult&gt;&gt;) : IQueryable&lt;&#39;TResult&gt;</div>
<div class="tip" id="fs21">member IQueryable.SelectManyQ : selector:Expression&lt;Func&lt;&#39;T,IEnumerable&lt;&#39;TResult&gt;&gt;&gt; -&gt; IQueryable&lt;&#39;TResult&gt;<br /><br />Full name: Script.QuickLinqHelpers.SelectManyQ<br /><em><br /><br />&#160;&#160;A version of Queryable.SelectMany which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs22">val selector : Expression&lt;Func&lt;&#39;T,IEnumerable&lt;&#39;TResult&gt;&gt;&gt;</div>
<div class="tip" id="fs23">type IEnumerable&lt;&#39;T&gt; =<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator&lt;&#39;T&gt;<br /><br />Full name: System.Collections.Generic.IEnumerable&lt;_&gt;</div>
<div class="tip" id="fs24">Queryable.SelectMany&lt;&#39;TSource,&#39;TResult&gt;(source: IQueryable&lt;&#39;TSource&gt;, selector: Expression&lt;Func&lt;&#39;TSource,int,IEnumerable&lt;&#39;TResult&gt;&gt;&gt;) : IQueryable&lt;&#39;TResult&gt;<br />Queryable.SelectMany&lt;&#39;TSource,&#39;TResult&gt;(source: IQueryable&lt;&#39;TSource&gt;, selector: Expression&lt;Func&lt;&#39;TSource,IEnumerable&lt;&#39;TResult&gt;&gt;&gt;) : IQueryable&lt;&#39;TResult&gt;<br />Queryable.SelectMany&lt;&#39;TSource,&#39;TCollection,&#39;TResult&gt;(source: IQueryable&lt;&#39;TSource&gt;, collectionSelector: Expression&lt;Func&lt;&#39;TSource,IEnumerable&lt;&#39;TCollection&gt;&gt;&gt;, resultSelector: Expression&lt;Func&lt;&#39;TSource,&#39;TCollection,&#39;TResult&gt;&gt;) : IQueryable&lt;&#39;TResult&gt;<br />Queryable.SelectMany&lt;&#39;TSource,&#39;TCollection,&#39;TResult&gt;(source: IQueryable&lt;&#39;TSource&gt;, collectionSelector: Expression&lt;Func&lt;&#39;TSource,int,IEnumerable&lt;&#39;TCollection&gt;&gt;&gt;, resultSelector: Expression&lt;Func&lt;&#39;TSource,&#39;TCollection,&#39;TResult&gt;&gt;) : IQueryable&lt;&#39;TResult&gt;</div>
<div class="tip" id="fs25">member IQueryable.SkipWhileQ : predicate:Expression&lt;Func&lt;&#39;T,bool&gt;&gt; -&gt; IQueryable&lt;&#39;T&gt;<br /><br />Full name: Script.QuickLinqHelpers.SkipWhileQ<br /><em><br /><br />&#160;&#160;A version of Queryable.SkipWhile which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs26">val predicate : Expression&lt;Func&lt;&#39;T,bool&gt;&gt;</div>
<div class="tip" id="fs27">type bool = Boolean<br /><br />Full name: Microsoft.FSharp.Core.bool</div>
<div class="tip" id="fs28">Queryable.SkipWhile&lt;&#39;TSource&gt;(source: IQueryable&lt;&#39;TSource&gt;, predicate: Expression&lt;Func&lt;&#39;TSource,int,bool&gt;&gt;) : IQueryable&lt;&#39;TSource&gt;<br />Queryable.SkipWhile&lt;&#39;TSource&gt;(source: IQueryable&lt;&#39;TSource&gt;, predicate: Expression&lt;Func&lt;&#39;TSource,bool&gt;&gt;) : IQueryable&lt;&#39;TSource&gt;</div>
<div class="tip" id="fs29">member IQueryable.TakeWhileQ : predicate:Expression&lt;Func&lt;&#39;T,bool&gt;&gt; -&gt; IQueryable&lt;&#39;T&gt;<br /><br />Full name: Script.QuickLinqHelpers.TakeWhileQ<br /><em><br /><br />&#160;&#160;A version of Queryable.TakeWhile which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs30">Queryable.TakeWhile&lt;&#39;TSource&gt;(source: IQueryable&lt;&#39;TSource&gt;, predicate: Expression&lt;Func&lt;&#39;TSource,int,bool&gt;&gt;) : IQueryable&lt;&#39;TSource&gt;<br />Queryable.TakeWhile&lt;&#39;TSource&gt;(source: IQueryable&lt;&#39;TSource&gt;, predicate: Expression&lt;Func&lt;&#39;TSource,bool&gt;&gt;) : IQueryable&lt;&#39;TSource&gt;</div>
<div class="tip" id="fs31">member IQueryable.WhereQ : predicate:Expression&lt;Func&lt;&#39;T,bool&gt;&gt; -&gt; IQueryable&lt;&#39;T&gt;<br /><br />Full name: Script.QuickLinqHelpers.WhereQ<br /><em><br /><br />&#160;&#160;A version of Queryable.Where which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs32">Queryable.Where&lt;&#39;TSource&gt;(source: IQueryable&lt;&#39;TSource&gt;, predicate: Expression&lt;Func&lt;&#39;TSource,int,bool&gt;&gt;) : IQueryable&lt;&#39;TSource&gt;<br />Queryable.Where&lt;&#39;TSource&gt;(source: IQueryable&lt;&#39;TSource&gt;, predicate: Expression&lt;Func&lt;&#39;TSource,bool&gt;&gt;) : IQueryable&lt;&#39;TSource&gt;</div>
<div class="tip" id="fs33">Multiple items<br />type IOrderedQueryable =<br /><br />Full name: System.Linq.IOrderedQueryable<br /><br />--------------------<br />type IOrderedQueryable&lt;&#39;T&gt; =<br /><br />Full name: System.Linq.IOrderedQueryable&lt;_&gt;</div>
<div class="tip" id="fs34">val x : IOrderedQueryable&lt;&#39;T&gt;</div>
<div class="tip" id="fs35">member IOrderedQueryable.ThenByQ : keySelector:Expression&lt;Func&lt;&#39;T,&#39;TKey&gt;&gt; -&gt; IOrderedQueryable&lt;&#39;T&gt;<br /><br />Full name: Script.QuickLinqHelpers.ThenByQ<br /><em><br /><br />&#160;&#160;A version of Queryable.ThenBy which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs36">Queryable.ThenBy&lt;&#39;TSource,&#39;TKey&gt;(source: IOrderedQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;<br />Queryable.ThenBy&lt;&#39;TSource,&#39;TKey&gt;(source: IOrderedQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;, comparer: IComparer&lt;&#39;TKey&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;</div>
<div class="tip" id="fs37">member IOrderedQueryable.ThenByDescendingQ : keySelector:Expression&lt;Func&lt;&#39;T,&#39;TKey&gt;&gt; -&gt; IOrderedQueryable&lt;&#39;T&gt;<br /><br />Full name: Script.QuickLinqHelpers.ThenByDescendingQ<br /><em><br /><br />&#160;&#160;A version of Queryable.ThenByDescending which does not require a type annotation on the argument when used from F#</em></div>
<div class="tip" id="fs38">Queryable.ThenByDescending&lt;&#39;TSource,&#39;TKey&gt;(source: IOrderedQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;<br />Queryable.ThenByDescending&lt;&#39;TSource,&#39;TKey&gt;(source: IOrderedQueryable&lt;&#39;TSource&gt;, keySelector: Expression&lt;Func&lt;&#39;TSource,&#39;TKey&gt;&gt;, comparer: IComparer&lt;&#39;TKey&gt;) : IOrderedQueryable&lt;&#39;TSource&gt;</div>

