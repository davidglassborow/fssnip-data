<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Generic</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">Dictionary</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">K</span>,<span class="o">&#39;</span><span class="i">V</span><span class="o">&gt;</span> <span class="k">with</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">d</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="f">TryFind</span>(<span onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7)" class="i">k</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">K</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8)" class="v">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9)" class="f">ref</span> <span onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10)" class="t">Unchecked</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 11)" onmouseover="showTip(event, 'fs11', 11)" class="i">defaultof</span><span class="o">&lt;</span>_<span class="o">&gt;</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs5', 12)" onmouseover="showTip(event, 'fs5', 12)" class="i">d</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 13)" onmouseover="showTip(event, 'fs12', 13)" class="f">TryGetValue</span>(<span onmouseout="hideTip(event, 'fs7', 14)" onmouseover="showTip(event, 'fs7', 14)" class="i">k</span>, <span onmouseout="hideTip(event, 'fs8', 15)" onmouseover="showTip(event, 'fs8', 15)" class="v">v</span>) <span class="k">then</span> <span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs8', 17)" onmouseover="showTip(event, 'fs8', 17)" class="v">v</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 18)" onmouseover="showTip(event, 'fs14', 18)" class="i">Value</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs15', 19)" onmouseover="showTip(event, 'fs15', 19)" class="p">None</span>


<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs16', 20)" onmouseover="showTip(event, 'fs16', 20)" class="f">Y</span> <span onmouseout="hideTip(event, 'fs17', 21)" onmouseover="showTip(event, 'fs17', 21)" class="f">F</span> <span onmouseout="hideTip(event, 'fs18', 22)" onmouseover="showTip(event, 'fs18', 22)" class="i">x</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 23)" onmouseover="showTip(event, 'fs17', 23)" class="f">F</span> (<span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="f">Y</span> <span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="f">F</span>) <span onmouseout="hideTip(event, 'fs18', 26)" onmouseover="showTip(event, 'fs18', 26)" class="i">x</span>

<span class="c">// needs nicer name!</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 27)" onmouseover="showTip(event, 'fs19', 27)" class="f">Y2</span> (<span onmouseout="hideTip(event, 'fs20', 28)" onmouseover="showTip(event, 'fs20', 28)" class="f">F</span> <span class="o">:</span> (<span class="o">&#39;</span><span class="i">Seed</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span>) <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">Seed</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span>) <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 29)" onmouseover="showTip(event, 'fs21', 29)" class="i">dict</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs4', 30)" onmouseover="showTip(event, 'fs4', 30)" class="t">Dictionary</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">Seed</span>, (<span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span>) <span onmouseout="hideTip(event, 'fs9', 31)" onmouseover="showTip(event, 'fs9', 31)" class="t">ref</span><span class="o">&gt;</span> ()

    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 32)" onmouseover="showTip(event, 'fs22', 32)" class="f">F&#39;</span> (<span onmouseout="hideTip(event, 'fs23', 33)" onmouseover="showTip(event, 'fs23', 33)" class="f">f</span> <span class="o">:</span> (<span class="o">&#39;</span><span class="i">Seed</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">a</span> <span class="k">-&gt;</span> <span class="o">&#39;</span><span class="i">b</span>)) (<span onmouseout="hideTip(event, 'fs24', 34)" onmouseover="showTip(event, 'fs24', 34)" class="i">s</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">Seed</span>) <span class="o">=</span>
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 35)" onmouseover="showTip(event, 'fs25', 35)" class="v">fp</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs9', 36)" onmouseover="showTip(event, 'fs9', 36)" class="f">ref</span> (<span class="k">fun</span> _ <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs26', 37)" onmouseover="showTip(event, 'fs26', 37)" class="f">failwith</span> <span class="s">&quot;Cannot handle recursive calls in this context!&quot;</span>)
        <span onmouseout="hideTip(event, 'fs21', 38)" onmouseover="showTip(event, 'fs21', 38)" class="i">dict</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs27', 39)" onmouseover="showTip(event, 'fs27', 39)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs24', 40)" onmouseover="showTip(event, 'fs24', 40)" class="i">s</span>, <span onmouseout="hideTip(event, 'fs25', 41)" onmouseover="showTip(event, 'fs25', 41)" class="v">fp</span>)
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs28', 42)" onmouseover="showTip(event, 'fs28', 42)" class="f">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs20', 43)" onmouseover="showTip(event, 'fs20', 43)" class="f">F</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="i">s</span> <span class="k">-&gt;</span> <span class="k">match</span> <span onmouseout="hideTip(event, 'fs21', 45)" onmouseover="showTip(event, 'fs21', 45)" class="i">dict</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs29', 46)" onmouseover="showTip(event, 'fs29', 46)" class="f">TryFind</span> <span onmouseout="hideTip(event, 'fs24', 47)" onmouseover="showTip(event, 'fs24', 47)" class="i">s</span> <span class="k">with</span> <span onmouseout="hideTip(event, 'fs13', 48)" onmouseover="showTip(event, 'fs13', 48)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs30', 49)" onmouseover="showTip(event, 'fs30', 49)" class="v">r</span> <span class="k">-&gt;</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs31', 50)" onmouseover="showTip(event, 'fs31', 50)" class="i">a</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs30', 51)" onmouseover="showTip(event, 'fs30', 51)" class="v">r</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs32', 52)" onmouseover="showTip(event, 'fs32', 52)" class="f">Value</span> <span onmouseout="hideTip(event, 'fs31', 53)" onmouseover="showTip(event, 'fs31', 53)" class="i">a</span>) | <span onmouseout="hideTip(event, 'fs15', 54)" onmouseover="showTip(event, 'fs15', 54)" class="p">None</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs23', 55)" onmouseover="showTip(event, 'fs23', 55)" class="f">f</span> <span onmouseout="hideTip(event, 'fs24', 56)" onmouseover="showTip(event, 'fs24', 56)" class="i">s</span>) <span onmouseout="hideTip(event, 'fs24', 57)" onmouseover="showTip(event, 'fs24', 57)" class="i">s</span>
        <span onmouseout="hideTip(event, 'fs25', 58)" onmouseover="showTip(event, 'fs25', 58)" class="v">fp</span> <span class="o">:=</span> <span onmouseout="hideTip(event, 'fs28', 59)" onmouseover="showTip(event, 'fs28', 59)" class="f">f</span>
        <span onmouseout="hideTip(event, 'fs28', 60)" onmouseover="showTip(event, 'fs28', 60)" class="f">f</span>

    <span onmouseout="hideTip(event, 'fs16', 61)" onmouseover="showTip(event, 'fs16', 61)" class="f">Y</span> <span onmouseout="hideTip(event, 'fs22', 62)" onmouseover="showTip(event, 'fs22', 62)" class="f">F&#39;</span>

<span class="c">// example : computing the maximum depth of F# DUs</span>

<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 63)" onmouseover="showTip(event, 'fs1', 63)" class="i">System</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 64)" onmouseover="showTip(event, 'fs1', 64)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 65)" onmouseover="showTip(event, 'fs33', 65)" class="i">Reflection</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs34', 66)" onmouseover="showTip(event, 'fs34', 66)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs35', 67)" onmouseover="showTip(event, 'fs35', 67)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs36', 68)" onmouseover="showTip(event, 'fs36', 68)" class="i">Reflection</span>

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 69)" onmouseover="showTip(event, 'fs37', 69)" class="f">maxDepth</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs38', 70)" onmouseover="showTip(event, 'fs38', 70)" class="f">f</span> <span class="o">=</span> 
        <span onmouseout="hideTip(event, 'fs19', 71)" onmouseover="showTip(event, 'fs19', 71)" class="f">Y2</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs39', 72)" onmouseover="showTip(event, 'fs39', 72)" class="f">self</span> (<span onmouseout="hideTip(event, 'fs40', 73)" onmouseover="showTip(event, 'fs40', 73)" class="i">t</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs41', 74)" onmouseover="showTip(event, 'fs41', 74)" class="t">Type</span>) <span class="k">-&gt;</span>
                <span onmouseout="hideTip(event, 'fs42', 75)" onmouseover="showTip(event, 'fs42', 75)" class="f">printfn</span> <span class="s">&quot;Precomputing depth counter for </span><span class="pf">%A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs40', 76)" onmouseover="showTip(event, 'fs40', 76)" class="i">t</span>
                <span class="k">if</span> <span onmouseout="hideTip(event, 'fs43', 77)" onmouseover="showTip(event, 'fs43', 77)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs44', 78)" onmouseover="showTip(event, 'fs44', 78)" class="f">IsUnion</span> <span onmouseout="hideTip(event, 'fs40', 79)" onmouseover="showTip(event, 'fs40', 79)" class="i">t</span> <span class="k">then</span>
                    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs45', 80)" onmouseover="showTip(event, 'fs45', 80)" class="f">reader</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs46', 81)" onmouseover="showTip(event, 'fs46', 81)" class="t">FSharpValue</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs47', 82)" onmouseover="showTip(event, 'fs47', 82)" class="f">PreComputeUnionTagReader</span> <span onmouseout="hideTip(event, 'fs40', 83)" onmouseover="showTip(event, 'fs40', 83)" class="i">t</span>
                    <span class="c">// recursively precompute children</span>
                    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs48', 84)" onmouseover="showTip(event, 'fs48', 84)" class="f">fieldDepth</span> (<span onmouseout="hideTip(event, 'fs49', 85)" onmouseover="showTip(event, 'fs49', 85)" class="i">f</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs50', 86)" onmouseover="showTip(event, 'fs50', 86)" class="t">PropertyInfo</span>) <span class="o">=</span> <span class="k">let</span> <span onmouseout="hideTip(event, 'fs51', 87)" onmouseover="showTip(event, 'fs51', 87)" class="f">depthF</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs39', 88)" onmouseover="showTip(event, 'fs39', 88)" class="f">self</span> <span onmouseout="hideTip(event, 'fs49', 89)" onmouseover="showTip(event, 'fs49', 89)" class="i">f</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs52', 90)" onmouseover="showTip(event, 'fs52', 90)" class="i">PropertyType</span> <span class="k">in</span> <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs53', 91)" onmouseover="showTip(event, 'fs53', 91)" class="i">o</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs49', 92)" onmouseover="showTip(event, 'fs49', 92)" class="i">f</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs54', 93)" onmouseover="showTip(event, 'fs54', 93)" class="f">GetValue</span>(<span onmouseout="hideTip(event, 'fs53', 94)" onmouseover="showTip(event, 'fs53', 94)" class="i">o</span>, [||]) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs51', 95)" onmouseover="showTip(event, 'fs51', 95)" class="f">depthF</span>
                    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs55', 96)" onmouseover="showTip(event, 'fs55', 96)" class="i">ucis</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs43', 97)" onmouseover="showTip(event, 'fs43', 97)" class="t">FSharpType</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs56', 98)" onmouseover="showTip(event, 'fs56', 98)" class="f">GetUnionCases</span>(<span onmouseout="hideTip(event, 'fs40', 99)" onmouseover="showTip(event, 'fs40', 99)" class="i">t</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs57', 100)" onmouseover="showTip(event, 'fs57', 100)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs58', 101)" onmouseover="showTip(event, 'fs58', 101)" class="f">map</span>(<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs59', 102)" onmouseover="showTip(event, 'fs59', 102)" class="i">u</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs59', 103)" onmouseover="showTip(event, 'fs59', 103)" class="i">u</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs60', 104)" onmouseover="showTip(event, 'fs60', 104)" class="i">Tag</span>, <span onmouseout="hideTip(event, 'fs59', 105)" onmouseover="showTip(event, 'fs59', 105)" class="i">u</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs61', 106)" onmouseover="showTip(event, 'fs61', 106)" class="f">GetFields</span>() <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 107)" onmouseover="showTip(event, 'fs62', 107)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs63', 108)" onmouseover="showTip(event, 'fs63', 108)" class="f">map</span> <span onmouseout="hideTip(event, 'fs48', 109)" onmouseover="showTip(event, 'fs48', 109)" class="f">fieldDepth</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs64', 110)" onmouseover="showTip(event, 'fs64', 110)" class="t">Map</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs65', 111)" onmouseover="showTip(event, 'fs65', 111)" class="f">ofSeq</span>

                    <span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs66', 112)" onmouseover="showTip(event, 'fs66', 112)" class="i">o</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs67', 113)" onmouseover="showTip(event, 'fs67', 113)" class="t">obj</span>) <span class="k">-&gt;</span>
                        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs68', 114)" onmouseover="showTip(event, 'fs68', 114)" class="i">depths</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs55', 115)" onmouseover="showTip(event, 'fs55', 115)" class="i">ucis</span><span class="o">.</span>[<span onmouseout="hideTip(event, 'fs45', 116)" onmouseover="showTip(event, 'fs45', 116)" class="f">reader</span> <span onmouseout="hideTip(event, 'fs66', 117)" onmouseover="showTip(event, 'fs66', 117)" class="i">o</span>] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs62', 118)" onmouseover="showTip(event, 'fs62', 118)" class="t">Array</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs63', 119)" onmouseover="showTip(event, 'fs63', 119)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs38', 120)" onmouseover="showTip(event, 'fs38', 120)" class="f">f</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs38', 121)" onmouseover="showTip(event, 'fs38', 121)" class="f">f</span> <span onmouseout="hideTip(event, 'fs66', 122)" onmouseover="showTip(event, 'fs66', 122)" class="i">o</span>)
                        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs57', 123)" onmouseover="showTip(event, 'fs57', 123)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs69', 124)" onmouseover="showTip(event, 'fs69', 124)" class="f">isEmpty</span> <span onmouseout="hideTip(event, 'fs68', 125)" onmouseover="showTip(event, 'fs68', 125)" class="i">depths</span> <span class="k">then</span> <span class="n">0</span> <span class="k">else</span> (<span onmouseout="hideTip(event, 'fs57', 126)" onmouseover="showTip(event, 'fs57', 126)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs70', 127)" onmouseover="showTip(event, 'fs70', 127)" class="f">max</span> <span onmouseout="hideTip(event, 'fs68', 128)" onmouseover="showTip(event, 'fs68', 128)" class="i">depths</span>) <span class="o">+</span> <span class="n">1</span>
                <span class="k">else</span> <span class="k">fun</span> _ <span class="k">-&gt;</span> <span class="n">0</span>) <span onmouseout="hideTip(event, 'fs71', 129)" onmouseover="showTip(event, 'fs71', 129)" class="i">typeof</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>

    <span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs72', 130)" onmouseover="showTip(event, 'fs72', 130)" class="i">x</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">T</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs38', 131)" onmouseover="showTip(event, 'fs38', 131)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs72', 132)" onmouseover="showTip(event, 'fs72', 132)" class="i">x</span> <span class="o">:&gt;</span> <span onmouseout="hideTip(event, 'fs67', 133)" onmouseover="showTip(event, 'fs67', 133)" class="t">obj</span>)


<span class="k">type</span> <span onmouseout="hideTip(event, 'fs73', 134)" onmouseover="showTip(event, 'fs73', 134)" class="t">Peano</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs74', 135)" onmouseover="showTip(event, 'fs74', 135)" class="p">Zero</span> | <span onmouseout="hideTip(event, 'fs75', 136)" onmouseover="showTip(event, 'fs75', 136)" class="p">Succ</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs73', 137)" onmouseover="showTip(event, 'fs73', 137)" class="t">Peano</span>

<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs76', 138)" onmouseover="showTip(event, 'fs76', 138)" class="f">int2Peano</span> <span class="o">=</span> <span class="k">function</span> <span class="n">0</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs74', 139)" onmouseover="showTip(event, 'fs74', 139)" class="p">Zero</span> | <span onmouseout="hideTip(event, 'fs77', 140)" onmouseover="showTip(event, 'fs77', 140)" class="i">n</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs75', 141)" onmouseover="showTip(event, 'fs75', 141)" class="p">Succ</span>(<span onmouseout="hideTip(event, 'fs76', 142)" onmouseover="showTip(event, 'fs76', 142)" class="f">int2Peano</span>(<span onmouseout="hideTip(event, 'fs77', 143)" onmouseover="showTip(event, 'fs77', 143)" class="i">n</span><span class="o">-</span><span class="n">1</span>))

<span class="c">// Peano is recursive, would stack overflow if used regular Y combinator</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs78', 144)" onmouseover="showTip(event, 'fs78', 144)" class="f">d</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs37', 145)" onmouseover="showTip(event, 'fs37', 145)" class="f">maxDepth</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs73', 146)" onmouseover="showTip(event, 'fs73', 146)" class="t">Peano</span> <span onmouseout="hideTip(event, 'fs79', 147)" onmouseover="showTip(event, 'fs79', 147)" class="t">option</span><span class="o">&gt;</span>

<span onmouseout="hideTip(event, 'fs78', 148)" onmouseover="showTip(event, 'fs78', 148)" class="f">d</span> <span class="o">&lt;|</span> <span onmouseout="hideTip(event, 'fs13', 149)" onmouseover="showTip(event, 'fs13', 149)" class="p">Some</span> (<span onmouseout="hideTip(event, 'fs76', 150)" onmouseover="showTip(event, 'fs76', 150)" class="f">int2Peano</span> <span class="n">41</span>)
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace System</div>
<div class="tip" id="fs2">namespace System.Collections</div>
<div class="tip" id="fs3">namespace System.Collections.Generic</div>
<div class="tip" id="fs4">Multiple items<br />type Dictionary&lt;&#39;TKey,&#39;TValue&gt; =<br />&#160;&#160;new : unit -&gt; Dictionary&lt;&#39;TKey, &#39;TValue&gt; + 5 overloads<br />&#160;&#160;member Add : key:&#39;TKey * value:&#39;TValue -&gt; unit<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Comparer : IEqualityComparer&lt;&#39;TKey&gt;<br />&#160;&#160;member ContainsKey : key:&#39;TKey -&gt; bool<br />&#160;&#160;member ContainsValue : value:&#39;TValue -&gt; bool<br />&#160;&#160;member Count : int<br />&#160;&#160;member GetEnumerator : unit -&gt; Enumerator&lt;&#39;TKey, &#39;TValue&gt;<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;member Item : &#39;TKey -&gt; &#39;TValue with get, set<br />&#160;&#160;...<br />&#160;&#160;nested type Enumerator<br />&#160;&#160;nested type KeyCollection<br />&#160;&#160;nested type ValueCollection<br /><br />Full name: System.Collections.Generic.Dictionary&lt;_,_&gt;<br /><br />--------------------<br />Dictionary() : unit<br />Dictionary(capacity: int) : unit<br />Dictionary(comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />Dictionary(dictionary: IDictionary&lt;&#39;TKey,&#39;TValue&gt;) : unit<br />Dictionary(capacity: int, comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />Dictionary(dictionary: IDictionary&lt;&#39;TKey,&#39;TValue&gt;, comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit</div>
<div class="tip" id="fs5">val d : Dictionary&lt;&#39;TKey,&#39;TValue&gt;</div>
<div class="tip" id="fs6">member Dictionary.TryFind : k:&#39;TKey -&gt; &#39;TValue option<br /><br />Full name: Script.TryFind</div>
<div class="tip" id="fs7">val k : &#39;TKey</div>
<div class="tip" id="fs8">val v : &#39;TValue ref</div>
<div class="tip" id="fs9">Multiple items<br />val ref : value:&#39;T -&gt; &#39;T ref<br /><br />Full name: Microsoft.FSharp.Core.Operators.ref<br /><br />--------------------<br />type &#39;T ref = Ref&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.ref&lt;_&gt;</div>
<div class="tip" id="fs10">module Unchecked<br /><br />from Microsoft.FSharp.Core.Operators</div>
<div class="tip" id="fs11">val defaultof&lt;&#39;T&gt; : &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.Unchecked.defaultof</div>
<div class="tip" id="fs12">Dictionary.TryGetValue(key: &#39;TKey, value: byref&lt;&#39;TValue&gt;) : bool</div>
<div class="tip" id="fs13">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs14">property Ref.Value: &#39;TValue</div>
<div class="tip" id="fs15">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs16">val Y : F:((&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39;b) -&gt; x:&#39;a -&gt; &#39;b<br /><br />Full name: Script.Y</div>
<div class="tip" id="fs17">val F : ((&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs18">val x : &#39;a</div>
<div class="tip" id="fs19">val Y2 : F:((&#39;Seed -&gt; &#39;a -&gt; &#39;b) -&gt; &#39;Seed -&gt; &#39;a -&gt; &#39;b) -&gt; (&#39;Seed -&gt; &#39;a -&gt; &#39;b) (requires equality)<br /><br />Full name: Script.Y2</div>
<div class="tip" id="fs20">val F : ((&#39;Seed -&gt; &#39;a -&gt; &#39;b) -&gt; &#39;Seed -&gt; &#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs21">val dict : Dictionary&lt;&#39;Seed,(&#39;a -&gt; &#39;b) ref&gt; (requires equality)</div>
<div class="tip" id="fs22">val F&#39; : ((&#39;Seed -&gt; &#39;a -&gt; &#39;b) -&gt; &#39;Seed -&gt; &#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs23">val f : (&#39;Seed -&gt; &#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs24">val s : &#39;Seed (requires equality)</div>
<div class="tip" id="fs25">val fp : (&#39;a -&gt; &#39;b) ref</div>
<div class="tip" id="fs26">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs27">Dictionary.Add(key: &#39;Seed, value: (&#39;a -&gt; &#39;b) ref) : unit</div>
<div class="tip" id="fs28">val f : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs29">member Dictionary.TryFind : k:&#39;TKey -&gt; &#39;TValue option</div>
<div class="tip" id="fs30">val r : (&#39;a -&gt; &#39;b) ref</div>
<div class="tip" id="fs31">val a : &#39;a</div>
<div class="tip" id="fs32">property Ref.Value: &#39;a -&gt; &#39;b</div>
<div class="tip" id="fs33">namespace System.Reflection</div>
<div class="tip" id="fs34">namespace Microsoft</div>
<div class="tip" id="fs35">namespace Microsoft.FSharp</div>
<div class="tip" id="fs36">namespace Microsoft.FSharp.Reflection</div>
<div class="tip" id="fs37">val maxDepth&lt;&#39;T&gt; : (&#39;T -&gt; int)<br /><br />Full name: Script.maxDepth</div>
<div class="tip" id="fs38">val f : (obj -&gt; int)</div>
<div class="tip" id="fs39">val self : (Type -&gt; obj -&gt; int)</div>
<div class="tip" id="fs40">val t : Type</div>
<div class="tip" id="fs41">type Type =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Assembly : Assembly<br />&#160;&#160;member AssemblyQualifiedName : string<br />&#160;&#160;member Attributes : TypeAttributes<br />&#160;&#160;member BaseType : Type<br />&#160;&#160;member ContainsGenericParameters : bool<br />&#160;&#160;member DeclaringMethod : MethodBase<br />&#160;&#160;member DeclaringType : Type<br />&#160;&#160;member Equals : o:obj -&gt; bool + 1 overload<br />&#160;&#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&gt; Type[]<br />&#160;&#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&gt; MemberInfo[]<br />&#160;&#160;...<br /><br />Full name: System.Type</div>
<div class="tip" id="fs42">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs43">type FSharpType =<br />&#160;&#160;static member GetExceptionFields : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetFunctionElements : functionType:Type -&gt; Type * Type<br />&#160;&#160;static member GetRecordFields : recordType:Type * ?bindingFlags:BindingFlags -&gt; PropertyInfo []<br />&#160;&#160;static member GetTupleElements : tupleType:Type -&gt; Type []<br />&#160;&#160;static member GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []<br />&#160;&#160;static member IsExceptionRepresentation : exceptionType:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsFunction : typ:Type -&gt; bool<br />&#160;&#160;static member IsModule : typ:Type -&gt; bool<br />&#160;&#160;static member IsRecord : typ:Type * ?bindingFlags:BindingFlags -&gt; bool<br />&#160;&#160;static member IsTuple : typ:Type -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpType</div>
<div class="tip" id="fs44">static member FSharpType.IsUnion : typ:Type * ?allowAccessToPrivateRepresentation:bool -&gt; bool<br />static member FSharpType.IsUnion : typ:Type * ?bindingFlags:BindingFlags -&gt; bool</div>
<div class="tip" id="fs45">val reader : (obj -&gt; int)</div>
<div class="tip" id="fs46">type FSharpValue =<br />&#160;&#160;static member GetExceptionFields : exn:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetRecordField : record:obj * info:PropertyInfo -&gt; obj<br />&#160;&#160;static member GetRecordFields : record:obj * ?bindingFlags:BindingFlags -&gt; obj []<br />&#160;&#160;static member GetTupleField : tuple:obj * index:int -&gt; obj<br />&#160;&#160;static member GetTupleFields : tuple:obj -&gt; obj []<br />&#160;&#160;static member GetUnionFields : value:obj * unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo * obj []<br />&#160;&#160;static member MakeFunction : functionType:Type * implementation:(obj -&gt; obj) -&gt; obj<br />&#160;&#160;static member MakeRecord : recordType:Type * values:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;static member MakeTuple : tupleElements:obj [] * tupleType:Type -&gt; obj<br />&#160;&#160;static member MakeUnion : unionCase:UnionCaseInfo * args:obj [] * ?bindingFlags:BindingFlags -&gt; obj<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Reflection.FSharpValue</div>
<div class="tip" id="fs47">static member FSharpValue.PreComputeUnionTagReader : unionType:Type * ?allowAccessToPrivateRepresentation:bool -&gt; (obj -&gt; int)<br />static member FSharpValue.PreComputeUnionTagReader : unionType:Type * ?bindingFlags:BindingFlags -&gt; (obj -&gt; int)</div>
<div class="tip" id="fs48">val fieldDepth : (PropertyInfo -&gt; &#39;a -&gt; int)</div>
<div class="tip" id="fs49">val f : PropertyInfo</div>
<div class="tip" id="fs50">type PropertyInfo =<br />&#160;&#160;inherit MemberInfo<br />&#160;&#160;member Attributes : PropertyAttributes<br />&#160;&#160;member CanRead : bool<br />&#160;&#160;member CanWrite : bool<br />&#160;&#160;member Equals : obj:obj -&gt; bool<br />&#160;&#160;member GetAccessors : unit -&gt; MethodInfo[] + 1 overload<br />&#160;&#160;member GetConstantValue : unit -&gt; obj<br />&#160;&#160;member GetGetMethod : unit -&gt; MethodInfo + 1 overload<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetIndexParameters : unit -&gt; ParameterInfo[]<br />&#160;&#160;member GetOptionalCustomModifiers : unit -&gt; Type[]<br />&#160;&#160;...<br /><br />Full name: System.Reflection.PropertyInfo</div>
<div class="tip" id="fs51">val depthF : (obj -&gt; int)</div>
<div class="tip" id="fs52">property PropertyInfo.PropertyType: Type</div>
<div class="tip" id="fs53">val o : &#39;a</div>
<div class="tip" id="fs54">PropertyInfo.GetValue(obj: obj, index: obj []) : obj<br />PropertyInfo.GetValue(obj: obj, invokeAttr: BindingFlags, binder: Binder, index: obj [], culture: Globalization.CultureInfo) : obj</div>
<div class="tip" id="fs55">val ucis : Map&lt;int,(obj -&gt; int) []&gt;</div>
<div class="tip" id="fs56">static member FSharpType.GetUnionCases : unionType:Type * ?allowAccessToPrivateRepresentation:bool -&gt; UnionCaseInfo []<br />static member FSharpType.GetUnionCases : unionType:Type * ?bindingFlags:BindingFlags -&gt; UnionCaseInfo []</div>
<div class="tip" id="fs57">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs58">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs59">val u : UnionCaseInfo</div>
<div class="tip" id="fs60">property UnionCaseInfo.Tag: int</div>
<div class="tip" id="fs61">member UnionCaseInfo.GetFields : unit -&gt; PropertyInfo []</div>
<div class="tip" id="fs62">type Array =<br />&#160;&#160;member Clone : unit -&gt; obj<br />&#160;&#160;member CopyTo : array:Array * index:int -&gt; unit + 1 overload<br />&#160;&#160;member GetEnumerator : unit -&gt; IEnumerator<br />&#160;&#160;member GetLength : dimension:int -&gt; int<br />&#160;&#160;member GetLongLength : dimension:int -&gt; int64<br />&#160;&#160;member GetLowerBound : dimension:int -&gt; int<br />&#160;&#160;member GetUpperBound : dimension:int -&gt; int<br />&#160;&#160;member GetValue : [&lt;ParamArray&gt;] indices:int[] -&gt; obj + 7 overloads<br />&#160;&#160;member Initialize : unit -&gt; unit<br />&#160;&#160;member IsFixedSize : bool<br />&#160;&#160;...<br /><br />Full name: System.Array</div>
<div class="tip" id="fs63">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; array:&#39;T [] -&gt; &#39;U []<br /><br />Full name: Microsoft.FSharp.Collections.Array.map</div>
<div class="tip" id="fs64">Multiple items<br />module Map<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Map&lt;&#39;Key,&#39;Value (requires comparison)&gt; =<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface ICollection&lt;KeyValuePair&lt;&#39;Key,&#39;Value&gt;&gt;<br />&#160;&#160;interface IDictionary&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member Add : key:&#39;Key * value:&#39;Value -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;member ContainsKey : key:&#39;Key -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member Remove : key:&#39;Key -&gt; Map&lt;&#39;Key,&#39;Value&gt;<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Map&lt;_,_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;Key * &#39;Value&gt; -&gt; Map&lt;&#39;Key,&#39;Value&gt;</div>
<div class="tip" id="fs65">val ofSeq : elements:seq&lt;&#39;Key * &#39;T&gt; -&gt; Map&lt;&#39;Key,&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Map.ofSeq</div>
<div class="tip" id="fs66">val o : obj</div>
<div class="tip" id="fs67">type obj = Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs68">val depths : int []</div>
<div class="tip" id="fs69">val isEmpty : source:seq&lt;&#39;T&gt; -&gt; bool<br /><br />Full name: Microsoft.FSharp.Collections.Seq.isEmpty</div>
<div class="tip" id="fs70">val max : source:seq&lt;&#39;T&gt; -&gt; &#39;T (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.max</div>
<div class="tip" id="fs71">val typeof&lt;&#39;T&gt; : Type<br /><br />Full name: Microsoft.FSharp.Core.Operators.typeof</div>
<div class="tip" id="fs72">val x : &#39;T</div>
<div class="tip" id="fs73">type Peano =<br />&#160;&#160;| Zero<br />&#160;&#160;| Succ of Peano<br /><br />Full name: Script.Peano</div>
<div class="tip" id="fs74">union case Peano.Zero: Peano</div>
<div class="tip" id="fs75">union case Peano.Succ: Peano -&gt; Peano</div>
<div class="tip" id="fs76">val int2Peano : _arg1:int -&gt; Peano<br /><br />Full name: Script.int2Peano</div>
<div class="tip" id="fs77">val n : int</div>
<div class="tip" id="fs78">val d : (Peano option -&gt; int)<br /><br />Full name: Script.d</div>
<div class="tip" id="fs79">type &#39;T option = Option&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.option&lt;_&gt;</div>

