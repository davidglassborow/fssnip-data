<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// The world, in a functional programming sense.</span>
<span class="c">/// A reference type with some value semantics.</span>
<span class="k">and</span> <span class="i">World</span> <span class="o">=</span>
    { <span class="i">Game</span> <span class="o">:</span> <span class="i">Game</span>
      <span class="i">Subscriptions</span> <span class="o">:</span> <span class="i">Subscriptions</span>
      <span class="i">Mailboxes</span> <span class="o">:</span> <span class="i">Mailboxes</span> }
    <span class="k">interface</span> <span class="i">IWorld</span> <span class="k">with</span>
        <span class="k">member</span> <span class="i">this</span><span class="o">.</span><span class="i">TryFind</span> <span class="i">address</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">None</span>
        <span class="k">member</span> <span class="i">this</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">Set</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">e</span>, <span class="o">&#39;</span><span class="i">w</span> <span class="k">when</span> <span class="o">&#39;</span><span class="i">w</span> <span class="o">:&gt;</span> <span class="i">IWorld</span><span class="o">&gt;</span> (<span class="i">address</span> <span class="o">:</span> <span class="i">Address</span>) (<span class="i">element</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">e</span>) <span class="o">:</span> <span class="o">&#39;</span><span class="i">w</span> <span class="o">=</span> <span class="i">this</span>
        <span class="k">member</span> <span class="i">this</span><span class="o">.</span><span class="i">Remove</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">w</span> <span class="k">when</span> <span class="o">&#39;</span><span class="i">w</span> <span class="o">:&gt;</span> <span class="i">IWorld</span><span class="o">&gt;</span> <span class="i">address</span> <span class="o">=</span> <span class="i">this</span> <span class="o">:&gt;</span> <span class="i">IWorld</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs2">Multiple items<br />module Set<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type Set&lt;&#39;T (requires comparison)&gt; =<br />&#160;&#160;interface IComparable<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;interface ICollection&lt;&#39;T&gt;<br />&#160;&#160;new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Add : value:&#39;T -&gt; Set&lt;&#39;T&gt;<br />&#160;&#160;member Contains : value:&#39;T -&gt; bool<br />&#160;&#160;override Equals : obj -&gt; bool<br />&#160;&#160;member IsProperSubsetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;member IsProperSupersetOf : otherSet:Set&lt;&#39;T&gt; -&gt; bool<br />&#160;&#160;...<br /><br />Full name: Microsoft.FSharp.Collections.Set&lt;_&gt;<br /><br />--------------------<br />new : elements:seq&lt;&#39;T&gt; -&gt; Set&lt;&#39;T&gt;</div>

