<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// Reference assemblies that contain LINQ support for F#</span>
<span class="prep">#r</span> <span class="s">&quot;FSharp.PowerPack.Linq.dll&quot;</span>
<span class="k">open</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">Microsoft</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">FSharp</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="i">Linq</span>

<span class="c">// Define the database table structure (in F# 3.0, this would be </span>
<span class="c">// generated by a type provider, but for this example, we define the</span>
<span class="c">// types explicitly, because the fssnip.net web does not support F# 3.0)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="t">string</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">Task</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="t">string</span>

<span class="k">type</span> <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="t">Employees</span> <span class="o">=</span> { <span onmouseout="hideTip(event, 'fs8', 9)" onmouseover="showTip(event, 'fs8', 9)" class="i">Name</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="t">Name</span> }
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="t">Tasks</span> <span class="o">=</span> { <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">Name</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="t">Name</span>; <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="i">Task</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs11', 15)" onmouseover="showTip(event, 'fs11', 15)" class="t">Task</span> }
 
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 16)" onmouseover="showTip(event, 'fs12', 16)" class="i">employees</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs13', 17)" onmouseover="showTip(event, 'fs13', 17)" class="t">seq</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs7', 18)" onmouseover="showTip(event, 'fs7', 18)" class="t">Employees</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 19)" onmouseover="showTip(event, 'fs14', 19)" class="f">failwith</span> <span class="s">&quot;!&quot;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 20)" onmouseover="showTip(event, 'fs15', 20)" class="i">tasks</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="t">seq</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs9', 22)" onmouseover="showTip(event, 'fs9', 22)" class="t">Tasks</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="f">failwith</span> <span class="s">&quot;!&quot;</span>

<span class="c">/// A function that takes name &amp; task and generates F# quotation that</span>
<span class="c">/// checks whether the &quot;tasks&quot; database contains a specified pair</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs16', 24)" onmouseover="showTip(event, 'fs16', 24)" class="f">performs</span> (<span onmouseout="hideTip(event, 'fs17', 25)" onmouseover="showTip(event, 'fs17', 25)" class="i">name</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 26)" onmouseover="showTip(event, 'fs4', 26)" class="t">Name</span>, <span onmouseout="hideTip(event, 'fs18', 27)" onmouseover="showTip(event, 'fs18', 27)" class="i">task</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 28)" onmouseover="showTip(event, 'fs6', 28)" class="t">Task</span>) <span class="o">=</span>
  &lt;@ <span onmouseout="hideTip(event, 'fs15', 29)" onmouseover="showTip(event, 'fs15', 29)" class="i">tasks</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs19', 30)" onmouseover="showTip(event, 'fs19', 30)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs20', 31)" onmouseover="showTip(event, 'fs20', 31)" class="f">exists</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs21', 32)" onmouseover="showTip(event, 'fs21', 32)" class="i">t</span> <span class="k">-&gt;</span>
      <span onmouseout="hideTip(event, 'fs21', 33)" onmouseover="showTip(event, 'fs21', 33)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 34)" onmouseover="showTip(event, 'fs22', 34)" class="i">Name</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 35)" onmouseover="showTip(event, 'fs17', 35)" class="i">name</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs21', 36)" onmouseover="showTip(event, 'fs21', 36)" class="i">t</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 37)" onmouseover="showTip(event, 'fs23', 37)" class="i">Task</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs18', 38)" onmouseover="showTip(event, 'fs18', 38)" class="i">task</span>) @&gt;

<span class="c">/// Type representing predicates over employees</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs24', 39)" onmouseover="showTip(event, 'fs24', 39)" class="t">Predicate</span> <span class="o">=</span> 
  | <span onmouseout="hideTip(event, 'fs25', 40)" onmouseover="showTip(event, 'fs25', 40)" class="p">Perform</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs6', 41)" onmouseover="showTip(event, 'fs6', 41)" class="t">Task</span>
  | <span onmouseout="hideTip(event, 'fs26', 42)" onmouseover="showTip(event, 'fs26', 42)" class="p">And</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs24', 43)" onmouseover="showTip(event, 'fs24', 43)" class="t">Predicate</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="t">Predicate</span>
  | <span onmouseout="hideTip(event, 'fs27', 45)" onmouseover="showTip(event, 'fs27', 45)" class="p">Or</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs24', 46)" onmouseover="showTip(event, 'fs24', 46)" class="t">Predicate</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs24', 47)" onmouseover="showTip(event, 'fs24', 47)" class="t">Predicate</span>
  | <span onmouseout="hideTip(event, 'fs28', 48)" onmouseover="showTip(event, 'fs28', 48)" class="p">Not</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs24', 49)" onmouseover="showTip(event, 'fs24', 49)" class="t">Predicate</span> 

<span class="c">/// Function that takes a predicate and generates a quoted F# code</span>
<span class="c">/// (that can be translated to SQL), which checks </span>
<span class="c">/// whether the predicate holds</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs29', 50)" onmouseover="showTip(event, 'fs29', 50)" class="f">eval</span> <span class="o">=</span> <span class="k">function</span>
  | <span onmouseout="hideTip(event, 'fs25', 51)" onmouseover="showTip(event, 'fs25', 51)" class="p">Perform</span> <span onmouseout="hideTip(event, 'fs30', 52)" onmouseover="showTip(event, 'fs30', 52)" class="i">t</span> <span class="k">-&gt;</span> &lt;@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs31', 53)" onmouseover="showTip(event, 'fs31', 53)" class="i">n</span> <span class="k">-&gt;</span> <span class="o">%</span>(<span onmouseout="hideTip(event, 'fs16', 54)" onmouseover="showTip(event, 'fs16', 54)" class="f">performs</span>(<span onmouseout="hideTip(event, 'fs31', 55)" onmouseover="showTip(event, 'fs31', 55)" class="i">n</span>, <span onmouseout="hideTip(event, 'fs30', 56)" onmouseover="showTip(event, 'fs30', 56)" class="i">t</span>)) @&gt;
  | <span onmouseout="hideTip(event, 'fs26', 57)" onmouseover="showTip(event, 'fs26', 57)" class="p">And</span>(<span onmouseout="hideTip(event, 'fs32', 58)" onmouseover="showTip(event, 'fs32', 58)" class="i">p1</span>, <span onmouseout="hideTip(event, 'fs33', 59)" onmouseover="showTip(event, 'fs33', 59)" class="i">p2</span>) <span class="k">-&gt;</span> &lt;@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs31', 60)" onmouseover="showTip(event, 'fs31', 60)" class="i">n</span> <span class="k">-&gt;</span> (<span class="o">%</span>(<span onmouseout="hideTip(event, 'fs29', 61)" onmouseover="showTip(event, 'fs29', 61)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs32', 62)" onmouseover="showTip(event, 'fs32', 62)" class="i">p1</span>)) <span onmouseout="hideTip(event, 'fs31', 63)" onmouseover="showTip(event, 'fs31', 63)" class="i">n</span> <span class="o">&amp;&amp;</span> (<span class="o">%</span>(<span onmouseout="hideTip(event, 'fs29', 64)" onmouseover="showTip(event, 'fs29', 64)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs33', 65)" onmouseover="showTip(event, 'fs33', 65)" class="i">p2</span>)) <span onmouseout="hideTip(event, 'fs31', 66)" onmouseover="showTip(event, 'fs31', 66)" class="i">n</span> @&gt;
  | <span onmouseout="hideTip(event, 'fs27', 67)" onmouseover="showTip(event, 'fs27', 67)" class="p">Or</span>(<span onmouseout="hideTip(event, 'fs32', 68)" onmouseover="showTip(event, 'fs32', 68)" class="i">p1</span>, <span onmouseout="hideTip(event, 'fs33', 69)" onmouseover="showTip(event, 'fs33', 69)" class="i">p2</span>) <span class="k">-&gt;</span> &lt;@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs31', 70)" onmouseover="showTip(event, 'fs31', 70)" class="i">n</span> <span class="k">-&gt;</span> (<span class="o">%</span>(<span onmouseout="hideTip(event, 'fs29', 71)" onmouseover="showTip(event, 'fs29', 71)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs32', 72)" onmouseover="showTip(event, 'fs32', 72)" class="i">p1</span>)) <span onmouseout="hideTip(event, 'fs31', 73)" onmouseover="showTip(event, 'fs31', 73)" class="i">n</span> <span class="o">||</span> (<span class="o">%</span>(<span onmouseout="hideTip(event, 'fs29', 74)" onmouseover="showTip(event, 'fs29', 74)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs33', 75)" onmouseover="showTip(event, 'fs33', 75)" class="i">p2</span>)) <span onmouseout="hideTip(event, 'fs31', 76)" onmouseover="showTip(event, 'fs31', 76)" class="i">n</span> @&gt;
  | <span onmouseout="hideTip(event, 'fs28', 77)" onmouseover="showTip(event, 'fs28', 77)" class="p">Not</span>(<span onmouseout="hideTip(event, 'fs34', 78)" onmouseover="showTip(event, 'fs34', 78)" class="i">p</span>) <span class="k">-&gt;</span> &lt;@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs31', 79)" onmouseover="showTip(event, 'fs31', 79)" class="i">n</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs35', 80)" onmouseover="showTip(event, 'fs35', 80)" class="f">not</span> ((<span class="o">%</span>(<span onmouseout="hideTip(event, 'fs29', 81)" onmouseover="showTip(event, 'fs29', 81)" class="f">eval</span> <span onmouseout="hideTip(event, 'fs34', 82)" onmouseover="showTip(event, 'fs34', 82)" class="i">p</span>)) <span onmouseout="hideTip(event, 'fs31', 83)" onmouseover="showTip(event, 'fs31', 83)" class="i">n</span>) @&gt;

<span class="c">// ERROR: The following does not type check!  </span>
&lt;@ <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs36', 84)" onmouseover="showTip(event, 'fs36', 84)" class="i">n</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs29', 85)" onmouseover="showTip(event, 'fs29', 85)" class="f">eval</span> <span class="i">p1</span> <span onmouseout="hideTip(event, 'fs36', 86)" onmouseover="showTip(event, 'fs36', 86)" class="i">n</span> <span class="o">&amp;&amp;</span> <span onmouseout="hideTip(event, 'fs29', 87)" onmouseover="showTip(event, 'fs29', 87)" class="f">eval</span> <span class="i">p2</span> <span onmouseout="hideTip(event, 'fs36', 88)" onmouseover="showTip(event, 'fs36', 88)" class="i">n</span> @&gt;

<span class="c">// Construct a predicate and turn it into a quotation</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs37', 89)" onmouseover="showTip(event, 'fs37', 89)" class="i">f</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs29', 90)" onmouseover="showTip(event, 'fs29', 90)" class="f">eval</span>(<span onmouseout="hideTip(event, 'fs27', 91)" onmouseover="showTip(event, 'fs27', 91)" class="p">Or</span>(<span onmouseout="hideTip(event, 'fs25', 92)" onmouseover="showTip(event, 'fs25', 92)" class="p">Perform</span>(<span class="s">&quot;a&quot;</span>),<span onmouseout="hideTip(event, 'fs26', 93)" onmouseover="showTip(event, 'fs26', 93)" class="p">And</span>(<span onmouseout="hideTip(event, 'fs25', 94)" onmouseover="showTip(event, 'fs25', 94)" class="p">Perform</span>(<span class="s">&quot;b&quot;</span>),<span onmouseout="hideTip(event, 'fs28', 95)" onmouseover="showTip(event, 'fs28', 95)" class="p">Not</span>(<span onmouseout="hideTip(event, 'fs25', 96)" onmouseover="showTip(event, 'fs25', 96)" class="p">Perform</span>(<span class="s">&quot;c&quot;</span>)))))
<span class="c">// Run query that selects employees matching the predicate</span>
&lt;@ <span onmouseout="hideTip(event, 'fs13', 97)" onmouseover="showTip(event, 'fs13', 97)" class="i">seq</span> { <span class="k">for</span> <span onmouseout="hideTip(event, 'fs38', 98)" onmouseover="showTip(event, 'fs38', 98)" class="i">e</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs12', 99)" onmouseover="showTip(event, 'fs12', 99)" class="i">employees</span> <span class="k">do</span>
           <span class="k">if</span> (<span class="o">%</span><span onmouseout="hideTip(event, 'fs37', 100)" onmouseover="showTip(event, 'fs37', 100)" class="i">f</span>) <span onmouseout="hideTip(event, 'fs38', 101)" onmouseover="showTip(event, 'fs38', 101)" class="i">e</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 102)" onmouseover="showTip(event, 'fs39', 102)" class="i">Name</span> <span class="k">then</span> <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs38', 103)" onmouseover="showTip(event, 'fs38', 103)" class="i">e</span> } @&gt;
<span class="o">|&gt;</span> <span class="i">Query</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs40', 104)" onmouseover="showTip(event, 'fs40', 104)" class="i">query</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">namespace Microsoft</div>
<div class="tip" id="fs2">namespace Microsoft.FSharp</div>
<div class="tip" id="fs3">namespace Microsoft.FSharp.Linq</div>
<div class="tip" id="fs4">type Name = string<br /><br />Full name: Script.Name</div>
<div class="tip" id="fs5">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs6">type Task = string<br /><br />Full name: Script.Task</div>
<div class="tip" id="fs7">type Employees =<br />&#160;&#160;{Name: Name;}<br /><br />Full name: Script.Employees</div>
<div class="tip" id="fs8">Multiple items<br />Employees.Name: Name<br /><br />--------------------<br />type Name = string<br /><br />Full name: Script.Name</div>
<div class="tip" id="fs9">type Tasks =<br />&#160;&#160;{Name: Name;<br />&#160;&#160;&#160;Task: Task;}<br /><br />Full name: Script.Tasks</div>
<div class="tip" id="fs10">Multiple items<br />Tasks.Name: Name<br /><br />--------------------<br />type Name = string<br /><br />Full name: Script.Name</div>
<div class="tip" id="fs11">Multiple items<br />Tasks.Task: Task<br /><br />--------------------<br />type Task = string<br /><br />Full name: Script.Task</div>
<div class="tip" id="fs12">val employees : seq&lt;Employees&gt;<br /><br />Full name: Script.employees</div>
<div class="tip" id="fs13">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = System.Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs14">val failwith : message:string -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.failwith</div>
<div class="tip" id="fs15">val tasks : seq&lt;Tasks&gt;<br /><br />Full name: Script.tasks</div>
<div class="tip" id="fs16">val performs : name:Name * task:Task -&gt; Quotations.Expr&lt;bool&gt;<br /><br />Full name: Script.performs<br /><em><br /><br />&#160;A function that takes name &amp; task and generates F# quotation that<br />&#160;checks whether the &quot;tasks&quot; database contains a specified pair</em></div>
<div class="tip" id="fs17">val name : Name</div>
<div class="tip" id="fs18">val task : Task</div>
<div class="tip" id="fs19">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs20">val exists : predicate:(&#39;T -&gt; bool) -&gt; source:seq&lt;&#39;T&gt; -&gt; bool<br /><br />Full name: Microsoft.FSharp.Collections.Seq.exists</div>
<div class="tip" id="fs21">val t : Tasks</div>
<div class="tip" id="fs22">Tasks.Name: Name</div>
<div class="tip" id="fs23">Tasks.Task: Task</div>
<div class="tip" id="fs24">type Predicate =<br />&#160;&#160;| Perform of Task<br />&#160;&#160;| And of Predicate * Predicate<br />&#160;&#160;| Or of Predicate * Predicate<br />&#160;&#160;| Not of Predicate<br /><br />Full name: Script.Predicate<br /><em><br /><br />&#160;Type representing predicates over employees</em></div>
<div class="tip" id="fs25">union case Predicate.Perform: Task -&gt; Predicate</div>
<div class="tip" id="fs26">union case Predicate.And: Predicate * Predicate -&gt; Predicate</div>
<div class="tip" id="fs27">union case Predicate.Or: Predicate * Predicate -&gt; Predicate</div>
<div class="tip" id="fs28">union case Predicate.Not: Predicate -&gt; Predicate</div>
<div class="tip" id="fs29">val eval : _arg1:Predicate -&gt; Quotations.Expr&lt;(Name -&gt; bool)&gt;<br /><br />Full name: Script.eval<br /><em><br /><br />&#160;Function that takes a predicate and generates a quoted F# code<br />&#160;(that can be translated to SQL), which checks <br />&#160;whether the predicate holds</em></div>
<div class="tip" id="fs30">val t : Task</div>
<div class="tip" id="fs31">val n : Name</div>
<div class="tip" id="fs32">val p1 : Predicate</div>
<div class="tip" id="fs33">val p2 : Predicate</div>
<div class="tip" id="fs34">val p : Predicate</div>
<div class="tip" id="fs35">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs36">val n : obj</div>
<div class="tip" id="fs37">val f : Quotations.Expr&lt;(Name -&gt; bool)&gt;<br /><br />Full name: Script.f</div>
<div class="tip" id="fs38">val e : Employees</div>
<div class="tip" id="fs39">Employees.Name: Name</div>
<div class="tip" id="fs40">val query : QueryBuilder<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.query</div>

