<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// F# Survey 2016 results:</span>
<span class="c">// http://fsharpworks.com/survey.html</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">libraries</span> <span class="o">=</span> <span id="fst2" onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2, document.getElementById('fst2'))" class="omitted">(Long string with all the data)</span>

<span class="c">// Some people use space separated, some comma separated, so we</span>
<span class="c">// split each line using both space and comma and using just comma;</span>
<span onmouseout="hideTip(event, 'fs1', 3)" onmouseover="showTip(event, 'fs1', 3)" class="i">libraries</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs3', 4)" onmouseover="showTip(event, 'fs3', 4)" class="f">ToLower</span>()<span class="o">.</span><span class="f">Split</span>(<span class="s">&#39;\n&#39;</span>)
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 5)" onmouseover="showTip(event, 'fs4', 5)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">line</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="i">line</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="f">Split</span>(<span class="s">&#39; &#39;</span>,<span class="s">&#39;,&#39;</span>), <span onmouseout="hideTip(event, 'fs6', 10)" onmouseover="showTip(event, 'fs6', 10)" class="i">line</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs7', 11)" onmouseover="showTip(event, 'fs7', 11)" class="f">Split</span>(<span class="s">&#39;,&#39;</span>))
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 12)" onmouseover="showTip(event, 'fs4', 12)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="f">collect</span> (<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="i">bySpace</span>, <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="i">byComma</span>) <span class="k">-&gt;</span>
  <span class="c">// Append names with space and names without space</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="i">withSpace</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs10', 17)" onmouseover="showTip(event, 'fs10', 17)" class="i">byComma</span> <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 18)" onmouseover="showTip(event, 'fs4', 18)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 19)" onmouseover="showTip(event, 'fs12', 19)" class="f">filter</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 20)" onmouseover="showTip(event, 'fs13', 20)" class="i">s</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 22)" onmouseover="showTip(event, 'fs14', 22)" class="f">Contains</span>(<span class="s">&quot; &quot;</span>))
  <span onmouseout="hideTip(event, 'fs4', 23)" onmouseover="showTip(event, 'fs4', 23)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs15', 24)" onmouseover="showTip(event, 'fs15', 24)" class="f">append</span> <span onmouseout="hideTip(event, 'fs9', 25)" onmouseover="showTip(event, 'fs9', 25)" class="i">bySpace</span> <span onmouseout="hideTip(event, 'fs11', 26)" onmouseover="showTip(event, 'fs11', 26)" class="i">withSpace</span>)
<span class="c">// Trim, count and sort by frequency</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 27)" onmouseover="showTip(event, 'fs4', 27)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 28)" onmouseover="showTip(event, 'fs5', 28)" class="f">map</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs13', 29)" onmouseover="showTip(event, 'fs13', 29)" class="i">s</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs13', 30)" onmouseover="showTip(event, 'fs13', 30)" class="i">s</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 31)" onmouseover="showTip(event, 'fs16', 31)" class="f">Trim</span>())
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 32)" onmouseover="showTip(event, 'fs4', 32)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 33)" onmouseover="showTip(event, 'fs17', 33)" class="f">countBy</span> <span onmouseout="hideTip(event, 'fs18', 34)" onmouseover="showTip(event, 'fs18', 34)" class="f">id</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 35)" onmouseover="showTip(event, 'fs4', 35)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 36)" onmouseover="showTip(event, 'fs19', 36)" class="f">sortBy</span> (<span class="k">fun</span> (_, <span onmouseout="hideTip(event, 'fs20', 37)" onmouseover="showTip(event, 'fs20', 37)" class="i">c</span>) <span class="k">-&gt;</span> <span class="o">-</span><span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="i">c</span>)
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 39)" onmouseover="showTip(event, 'fs4', 39)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 40)" onmouseover="showTip(event, 'fs21', 40)" class="f">take</span> <span class="n">25</span>
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs4', 41)" onmouseover="showTip(event, 'fs4', 41)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs22', 42)" onmouseover="showTip(event, 'fs22', 42)" class="f">iter</span> (<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs23', 43)" onmouseover="showTip(event, 'fs23', 43)" class="i">l</span>, <span onmouseout="hideTip(event, 'fs20', 44)" onmouseover="showTip(event, 'fs20', 44)" class="i">c</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs24', 45)" onmouseover="showTip(event, 'fs24', 45)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> (</span><span class="pf">%d</span><span class="s">)&quot;</span> <span onmouseout="hideTip(event, 'fs23', 46)" onmouseover="showTip(event, 'fs23', 46)" class="i">l</span> <span onmouseout="hideTip(event, 'fs20', 47)" onmouseover="showTip(event, 'fs20', 47)" class="i">c</span>)

<span class="c">// Non-noise items from the printed results:</span>
<span class="c">// - fake (86)</span>
<span class="c">// - paket (74)</span>
<span class="c">// - fsharp.data (53)</span>
<span class="c">// - power (34) + tools (34)</span>
<span class="c">// - ionide (31)</span>
<span class="c">// - fscheck (31)</span>
<span class="c">// - suave (31)</span>
<span class="c">// - fparsec (24)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val libraries : string<br /><br />Full name: Script.libraries</div>
<div class="tip" id="fs2">&quot;&quot;&quot;<br />Paket, FAKE<br />FSharp.Data<br />F# Power Tools<br />FParsec<br />fparsec<br />Ionide<br />Fsharpx Fparsec<br />FSharp.Data Unquote<br />Fparsec, Fake<br />F# power tools, Akka.Net, Fsharp.Data, Ionide<br />fsharp.data, paket, mbrace, F# power tools, FParsec<br />Paket Fsi Fscheck<br />FSharp Power Tools FSharp.Data Accord.Net (OK, that is a .NET one, but...)<br />FAKE, Paket<br />vim-fsharp, Ionide, Mono, FParsec<br />FAKE, AKKA.fsharp, Chessie, Sqlprovider, fspickler<br />Ionide, Forge, Suave, FSharp.Data, FSharp.SqlClient<br />Fsharp.data Fsyacclex/lex Fss<br />FAKE<br />Paket Fake<br />Visual F# Power Tools for Visual Studio FsCheck Unquote<br />FSharp.Data for the different data providers are awesome. F# Power tools for Visual Studio.<br />Fscheck unquote<br />FAKE Ionide-fsharp<br />FsUnit Visual F# PowerTools Canopy WebSharper<br />Paket, FAKE, Suave, FsCheck, Ionide<br />Fake Paket<br />FAKE Paket FSharpPowerTools FsCheck FSharp.Formatting<br />FAKE Fsharp.Data FAKE<br />Ionide, paket, fake, fsharpx<br />Chessie.ErrorHandling changed my life coming from C#<br />Paket FSharp.Data Chessie<br />FSharp PowerTools<br />fscheck fake paket<br />Zero29<br />FAKE Paket FSharp.Formatting FsCheck FsEye<br />FsXaml FSharp.Control.Reactive FSharp.Data FSharp.Charting FsUnit<br />Paket Fake FSharp Typeproviders for Json, Html, Sql<br />Fake Canopy<br />Fake,Paket,ProjectScaffold<br />Iodide, FAKE, Paket, Chiron, Hopac<br />Vfspt Fsunit Fsharp.control.reactive Fsxaml Argu<br />FSharp.Data.SqlClient Type Provider Argu FsPickler Fake FSharp.Azure.Storage<br />visual F# power tools websharper<br />vim-fsharp, mono, fake, yeoman fsharp generator, ionide.<br />Suave, FsSql, Hopac, Fable, Ionide<br />Paket FAKE Suave Chessie FSharp.Data<br />FAKE Paket SQLProvider CSVProvider JSONProvider<br />Fsharp.data Freya Argu Paket Fake<br />FsCheck F# Power Tools Paket<br />Paket Fake MBrace<br />Suave.io FSharp.Data FsUnit Canopy JSONTypeProviders<br />F# Power tools Paket<br />VFPT Ionide<br />ExtCore<br />Ionide for Atom FSharp.Data FSharp.ViewModule<br />FSharp.Data Paket FSharp.Compiler.Service FSharp.Data.SqlClient<br />FSharp.Data Suave FParsec FSharpx Argu<br />FAKE Paket FSharp.Data Hopac<br />FSharp.Data RProvider FsLab FsReveal Suave<br />ExtCore SqlCommandProvider CsvProvider F# Power Tools<br />- Paket - FAKE - FsCheck - FParsec - FSharp.Data providers<br />Visual F# power tools FsUnit/FsCheck FSharpX Paket<br />Fable Ionide FSharp.Data<br />Suave Hopac YoLo Mono Xamarin Studio<br />Not sure as I&#39;m a beginner<br />FParsec, Hopac, Suave<br />Fake, Paket, F# data<br />ionide and mono making it possible to develop in linux. Suave is a wonderful webserver library making it possible to create nice web applications without the need for IIS or the whole MVC/ASP.net framework FSSQL has been a nice database wrapper I have used because SQL Type Providers are far from ready for production, especially with non MS SQL Server databases. Very interested in Fabel and similar for replacement of client side javascript<br />Fake, packet, iodide, Chesapeake (Railway oriented programming), REPL<br />Paket, Fake, and ionide have been great for flexible workflows AsyncSeq comes to mind as a great idea and also a good learning tool for comp. ex.<br />FeldSpar VS Code Union Args Parser Try FSharp.org<br />Suave, MonoDevelop<br />paket xamarin (both studio and mobile dev)<br />Fs check, Type Providers, Rx<br />Ionide Fake Paket Mbrace<br />FParsec, FsData, FsCheck<br />Fake Paket Data Providers by Patreicek Marvel (internal library at jet.com)<br />F# Power tools<br />1. FAKE 2. Paket 3. AsyncSeq 4. Ionide<br />Visual F# Power Tools ExtCore FsCheck FAKE FsLab<br />FSharp.data Xplot<br />Newtonsoft.Json, FSharp.Data, Xamarin&#39;s F# support<br />FsCheck FParsec WebSharper (especially the Formlets) Hopac Streams<br />Gluon Suave Freya FAKE Paket<br />Visual F# Power Tools FSharp.Data.SqlClient FsXaml FSharp.ViewModule FSharp.Data (CSV provider)<br />Web Sharper Visual Studio Xamarin<br />Ionide, dotnet CLI<br />FAKE, paket<br />Fable<br />FParsec VS integration WebSharper<br />I&#39;m not using F# dependencies, but C# dependencies work great!<br />FSharp.Data, PaketFsXAML<br />FAKE Paket Ionide<br />NCrunch, in general, has changed my life.<br />F# Interactive FSharp Power Tools<br />FsCheck FParsec Visual F# Power Tools Deedle Fake<br />Visual F# Power Tools FParsec Paket FAKE Fsharpx<br />Real-world functional programming<br />FAKE fsi<br />FAKE, Ionide, Paket, Mathnet Numerics, Ifsharp, XPlot.<br />F# Data Tools and Type Providers<br />VS<br />I only use the built-in ones<br />F# Power Tools, FSharpx, FAKE, Paket, Foq<br />WebSharper FSharp.Data<br />- Fsharp.Data - MS sql type providers - FAKE - Websharper - MailboxProcessor<br />- Akka.NET - Hopac - F# Power Tools (VS extension) - Task Parallel Library / Rx - Deedle<br />VS 2015 Suave Paket Type Providers<br />PowerPack FParsec<br />Fsharpx FsCheck<br />Interactive window, C# integration.<br />FParsec VS integration Otherwise I&#39;m fairly vanilla<br />FParsec Paket FAKE ProjectScaffold Suave<br />FSharp.Data.SqlClient F# Interactive WebSharper CSV type provider Paket<br />FAKE is really cool and I&#39;ve been using it a lot for many different projects. I&#39;ve not done a huge amount with F# yet as it&#39;s my first functional language so I&#39;m still trying to figure out what to do with it.<br />The available unit testing frameworks and libraries.<br />fsi VS fsharp tools<br />fake F# Outlining<br />Visual studio FSharp power tools FAKE<br />Power tools<br />Charting Suave.io Vim<br />Paket FAKE Suave Akka.Net Fleece<br />- FSharpData - Fake - FsCheck - WebSharper - FSharpCompilerServices<br />FsCheck FSharpx.Extras Argv FSharp.Configuration FAKE<br />REPL, Emacs Integration, Paket, Forge<br />FSharp.Data FSharp.Data.SqlClient<br />Ionide Xamarin Studio FSharp.Data<br />fsharp.data<br />None to be honest.<br />I mostly us FsLexYacc but i want to look more into Suave<br />Suave FsLab (and it&#39;s many member libraries) Ionide/FSI Interactive<br />FSharp Powerpack (RIP) Data CompilerServices<br />Visual studio 2015 Vfpt<br />Ionide F# Power Tools LinqPad F# support FSharp.Formatting Paket<br />FSharp.Control.Reactive Ionise F#, Fake,Packet for Visual Studio Code Fake Packet/Nuget<br />F# Power Tools F# Data<br />F# Interactive made it a lot more fun to script things<br />F# powertools<br />Akka Aether<br />1. LINQPad 2. Interactive coding<br />Fake, Suave, Paket, unquote<br />XAML type provider CSV type provider FSharp.Data<br />FParsec Z3<br />Suave, FSharp.Data, FAKE, Ionide, VSFSharpPowerTools<br />FsCheck, Unquote, FParsec, Suave, FSharp.Data type providers<br />Chessie FSharpx Paket Fake Sql Type Provider<br />FSI in Visual Studio Visual F# PowerTools Type Providers<br />FSharp.Data Ionide<br />Honestly, other than Visual Studio and a couple of emacs modes, I haven&#39;t really used any other tooling extensively. Most of the libraries I&#39;ve used were just from C#.<br />FSI and the script file format is fantastic, but insta REPL ala LightTable/Clojure would be a game changer. Remote fsi support would be fantastic for targeting other platforms/environments.<br />Paket FAKE FSharp.Formatting FSharp.Configuration<br />Emacs fsharp-mode Fsharp.Data Forge will be on this list next year<br />FSharp.SqlClient<br />Ionide FSharp.Data Paket FunScript Foq<br />F# power tools, Chessie, FsCheck, Websharper/funscript, Sql type provider<br />Visual F# Power Tools<br />F# power tool at home but it won&#39;t work on the solution at work WebSharper<br />The most effective library has to be FSharp.Data. It&#39;s incredibly handy. I like FSharpx.Collections for its NonEmptyList -- it really helps in precise modelling. I&#39;m obviously a fan of FAKE as well as FsUnit for writing cleaner tests.<br />Fsharp power tools, suave, fsharp.configuration, fsharp.data, ionide<br />Visual F# Power Tools, FsCheck, Nessos Streams, Paket, Suave.io<br />FsCheck, Unquote<br />Suave paket FAKE<br />Visual studio FAKE FsLab Deedle FsUnit<br />Suave.io Paket<br />Fsharp.Data.SqlClient<br />MathNet.Numerics RProvider FSPickler<br />FsCheck FsUnit<br />F# for Numerics and F# for Visualization.<br />FParsec, Alea GPU, OpenTK<br />Mathnet FSLab ParallelSeq<br />FParsec - parsing made fun<br />canopy Suave fsharp emacs plugin FSharp.Data FSharp.Data.SqlClient<br />Fsharp.data Fsharp power tools<br />F# plugin for Visual Studio 2015<br />FSharp.Data Chessie.ErrorHandling<br />Paket + FAKE, I want to use them all the time for all projects.<br />FSharp.Data Paket WebSharper<br />Sauve, Logary, FsCheck, F# Power Tools<br />FsXaml Math.net<br />VisualFSharpPowerTools Fake FSCheck FsLab MBrace<br />1. FSharp.Data 2. FsCheck 3. FSharp Interactive 4. Paket 5. Suave.io<br />Power Tools FSUnit NCrunch (not F# specific but awesome)<br />CSV and SQL type providers, Canopy, FsUnit, Paket, FAKE<br />FAKE FsCheck<br />ExtCore FsCheck VFPT (Visual F# Power Tools) FAKE<br />FsharpPowerTools Paket FAKE Deedle FsReveal<br />Vim-fsharpbinding Suave Extcore<br />FsXaml ProjectScaffold FSharp.ViewModule Math.NET Symbolics<br />Vs power tools, fake, paket, F# xamarin add in<br />FSharp.Data type provider FSReveal Paket Fake Azure storage type provider<br />FSharp.Data for type providers to xml etc.<br />F# syntax highlighting for Visual Studio<br />Parallseq FSLAB TypeProviders<br />ionide, try fsharp, akka.net<br />Fake F# Powertools Paket Suave FSharp.Data<br />Paket, FAKE, FSharp.Data, WebSharper, FSharp.Charting<br />F# Power Tools Unquote<br />FAKE, Paket, Deedle, FsLab<br />Fake FSharp.Data<br />suave, fake, the repl (fsi.exe)&quot;&quot;&quot;</div>
<div class="tip" id="fs3">System.String.ToLower() : string<br />System.String.ToLower(culture: System.Globalization.CultureInfo) : string</div>
<div class="tip" id="fs4">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs5">val map : mapping:(&#39;T -&gt; &#39;U) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.map</div>
<div class="tip" id="fs6">val line : string</div>
<div class="tip" id="fs7">System.String.Split([&lt;System.ParamArray&gt;] separator: char []) : string []<br />System.String.Split(separator: string [], options: System.StringSplitOptions) : string []<br />System.String.Split(separator: char [], options: System.StringSplitOptions) : string []<br />System.String.Split(separator: char [], count: int) : string []<br />System.String.Split(separator: string [], count: int, options: System.StringSplitOptions) : string []<br />System.String.Split(separator: char [], count: int, options: System.StringSplitOptions) : string []</div>
<div class="tip" id="fs8">val collect : mapping:(&#39;T -&gt; #seq&lt;&#39;U&gt;) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.collect</div>
<div class="tip" id="fs9">val bySpace : string []</div>
<div class="tip" id="fs10">val byComma : string []</div>
<div class="tip" id="fs11">val withSpace : seq&lt;string&gt;</div>
<div class="tip" id="fs12">val filter : predicate:(&#39;T -&gt; bool) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.filter</div>
<div class="tip" id="fs13">val s : string</div>
<div class="tip" id="fs14">System.String.Contains(value: string) : bool</div>
<div class="tip" id="fs15">val append : source1:seq&lt;&#39;T&gt; -&gt; source2:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.append</div>
<div class="tip" id="fs16">System.String.Trim() : string<br />System.String.Trim([&lt;System.ParamArray&gt;] trimChars: char []) : string</div>
<div class="tip" id="fs17">val countBy : projection:(&#39;T -&gt; &#39;Key) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;Key * int&gt; (requires equality)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.countBy</div>
<div class="tip" id="fs18">val id : x:&#39;T -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.Operators.id</div>
<div class="tip" id="fs19">val sortBy : projection:(&#39;T -&gt; &#39;Key) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt; (requires comparison)<br /><br />Full name: Microsoft.FSharp.Collections.Seq.sortBy</div>
<div class="tip" id="fs20">val c : int</div>
<div class="tip" id="fs21">val take : count:int -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.take</div>
<div class="tip" id="fs22">val iter : action:(&#39;T -&gt; unit) -&gt; source:seq&lt;&#39;T&gt; -&gt; unit<br /><br />Full name: Microsoft.FSharp.Collections.Seq.iter</div>
<div class="tip" id="fs23">val l : string</div>
<div class="tip" id="fs24">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>

