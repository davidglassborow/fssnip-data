<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// This does not work - no automatic conversion to &#39;obj&#39;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">objs1</span> <span class="o">=</span> [<span class="n">1</span>; <span class="s">&quot;hi&quot;</span>]
<span class="c">// ...but it works if compiler knows the type in advance</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">objs2</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">obj</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="t">list</span> <span class="o">=</span> [<span class="n">1</span>; <span class="s">&quot;hi&quot;</span>]

<span class="c">// But, that only works for simple types - so even if we</span>
<span class="c">// know the type in advance, it will not work for tuples :-(</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="i">objs2</span> <span class="o">:</span> (<span onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6)" class="t">string</span><span class="o">*</span><span onmouseout="hideTip(event, 'fs3', 7)" onmouseover="showTip(event, 'fs3', 7)" class="t">obj</span>) <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="t">list</span> <span class="o">=</span> [(<span class="s">&quot;hi&quot;</span>, <span class="n">1</span>)]

<span class="c">// We could define our own tuple type to make this possible</span>
<span class="c">// with a less generic base class - here, I just make base</span>
<span class="c">// class generic in key, but not in value</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs7', 9)" onmouseover="showTip(event, 'fs7', 9)" class="t">Tuple</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">K</span><span class="o">&gt;</span> <span class="o">=</span>  
  <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="i">Key</span> <span class="o">:</span> <span class="o">&#39;</span><span class="i">K</span>
  <span class="k">abstract</span> <span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="i">Value</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs3', 12)" onmouseover="showTip(event, 'fs3', 12)" class="t">obj</span>

<span class="c">// And then we have fully generic tuple that implements the</span>
<span class="c">// less-generic variant (and boxes the value)</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs10', 13)" onmouseover="showTip(event, 'fs10', 13)" class="t">Tuple</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">K</span>, <span class="o">&#39;</span><span class="i">V</span><span class="o">&gt;</span> <span class="o">=</span> 
  | <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="p">KV</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">K</span> <span class="o">*</span> <span class="o">&#39;</span><span class="i">V</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs12', 15)" onmouseover="showTip(event, 'fs12', 15)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 16)" onmouseover="showTip(event, 'fs13', 16)" class="i">Key</span> <span class="o">=</span> <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="p">KV</span>(<span onmouseout="hideTip(event, 'fs14', 18)" onmouseover="showTip(event, 'fs14', 18)" class="i">k</span>, <span onmouseout="hideTip(event, 'fs15', 19)" onmouseover="showTip(event, 'fs15', 19)" class="i">v</span>)) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="i">x</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs14', 21)" onmouseover="showTip(event, 'fs14', 21)" class="i">k</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs16', 23)" onmouseover="showTip(event, 'fs16', 23)" class="i">Value</span> <span class="o">=</span> <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs11', 24)" onmouseover="showTip(event, 'fs11', 24)" class="p">KV</span>(<span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="i">k</span>, <span onmouseout="hideTip(event, 'fs15', 26)" onmouseover="showTip(event, 'fs15', 26)" class="i">v</span>)) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 27)" onmouseover="showTip(event, 'fs12', 27)" class="i">x</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs15', 28)" onmouseover="showTip(event, 'fs15', 28)" class="i">v</span>
  <span class="k">interface</span> <span onmouseout="hideTip(event, 'fs10', 29)" onmouseover="showTip(event, 'fs10', 29)" class="t">Tuple</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">K</span><span class="o">&gt;</span> <span class="k">with</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs12', 30)" onmouseover="showTip(event, 'fs12', 30)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 31)" onmouseover="showTip(event, 'fs17', 31)" class="i">Key</span> <span class="o">=</span> <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs11', 32)" onmouseover="showTip(event, 'fs11', 32)" class="p">KV</span>(<span onmouseout="hideTip(event, 'fs14', 33)" onmouseover="showTip(event, 'fs14', 33)" class="i">k</span>, <span onmouseout="hideTip(event, 'fs15', 34)" onmouseover="showTip(event, 'fs15', 34)" class="i">v</span>)) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 35)" onmouseover="showTip(event, 'fs12', 35)" class="i">x</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs14', 36)" onmouseover="showTip(event, 'fs14', 36)" class="i">k</span>
    <span class="k">member</span> <span onmouseout="hideTip(event, 'fs12', 37)" onmouseover="showTip(event, 'fs12', 37)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 38)" onmouseover="showTip(event, 'fs18', 38)" class="i">Value</span> <span class="o">=</span> <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs11', 39)" onmouseover="showTip(event, 'fs11', 39)" class="p">KV</span>(<span onmouseout="hideTip(event, 'fs14', 40)" onmouseover="showTip(event, 'fs14', 40)" class="i">k</span>, <span onmouseout="hideTip(event, 'fs15', 41)" onmouseover="showTip(event, 'fs15', 41)" class="i">v</span>)) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs12', 42)" onmouseover="showTip(event, 'fs12', 42)" class="i">x</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs19', 43)" onmouseover="showTip(event, 'fs19', 43)" class="f">box</span> <span onmouseout="hideTip(event, 'fs15', 44)" onmouseover="showTip(event, 'fs15', 44)" class="i">v</span>
    
<span class="c">// Builds the more-generic version of the tuple</span>
<span class="k">let</span> (<span class="o">=&gt;</span>) <span onmouseout="hideTip(event, 'fs20', 45)" onmouseover="showTip(event, 'fs20', 45)" class="i">k</span> <span onmouseout="hideTip(event, 'fs21', 46)" onmouseover="showTip(event, 'fs21', 46)" class="i">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs11', 47)" onmouseover="showTip(event, 'fs11', 47)" class="p">KV</span>(<span onmouseout="hideTip(event, 'fs20', 48)" onmouseover="showTip(event, 'fs20', 48)" class="i">k</span>, <span onmouseout="hideTip(event, 'fs21', 49)" onmouseover="showTip(event, 'fs21', 49)" class="i">v</span>)

<span class="c">// This does not work, because we are creating list that</span>
<span class="c">// contains &#39;Tuple&lt;string, int&gt;&#39; and &#39;Tuple&lt;string, string&gt;&#39;</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs22', 50)" onmouseover="showTip(event, 'fs22', 50)" class="i">pars</span> <span class="o">=</span> [<span class="s">&quot;x&quot;</span> <span class="o">=&gt;</span> <span class="n">1</span>; <span class="s">&quot;y&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;42&quot;</span>]

<span class="c">// But we can make it work if we know the type in advance</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs23', 51)" onmouseover="showTip(event, 'fs23', 51)" class="f">namedPars</span> (<span onmouseout="hideTip(event, 'fs24', 52)" onmouseover="showTip(event, 'fs24', 52)" class="i">p</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 53)" onmouseover="showTip(event, 'fs4', 53)" class="t">list</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 54)" onmouseover="showTip(event, 'fs10', 54)" class="t">Tuple</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs6', 55)" onmouseover="showTip(event, 'fs6', 55)" class="t">string</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 56)" onmouseover="showTip(event, 'fs24', 56)" class="i">p</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs25', 57)" onmouseover="showTip(event, 'fs25', 57)" class="i">pars</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs23', 58)" onmouseover="showTip(event, 'fs23', 58)" class="f">namedPars</span> [<span class="s">&quot;x&quot;</span> <span class="o">=&gt;</span> <span class="n">1</span>; <span class="s">&quot;y&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;42&quot;</span>]

<span class="c">// Note that this will NOT work</span>
[<span class="s">&quot;x&quot;</span> <span class="o">=&gt;</span> <span class="n">1</span>; <span class="s">&quot;y&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;42&quot;</span>] <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs23', 59)" onmouseover="showTip(event, 'fs23', 59)" class="f">namedPars</span>

<span class="c">// It plays nicely with ParamArray too</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs26', 60)" onmouseover="showTip(event, 'fs26', 60)" class="t">R</span>() <span class="o">=</span>
  <span class="k">static</span> <span class="k">member</span> <span onmouseout="hideTip(event, 'fs27', 61)" onmouseover="showTip(event, 'fs27', 61)" class="f">plot</span>(<span onmouseout="hideTip(event, 'fs28', 62)" onmouseover="showTip(event, 'fs28', 62)" class="i">s</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs6', 63)" onmouseover="showTip(event, 'fs6', 63)" class="t">string</span>, [&lt;<span onmouseout="hideTip(event, 'fs29', 64)" onmouseover="showTip(event, 'fs29', 64)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs30', 65)" onmouseover="showTip(event, 'fs30', 65)" class="t">ParamArray</span>&gt;] <span onmouseout="hideTip(event, 'fs31', 66)" onmouseover="showTip(event, 'fs31', 66)" class="i">pars</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs10', 67)" onmouseover="showTip(event, 'fs10', 67)" class="t">Tuple</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs6', 68)" onmouseover="showTip(event, 'fs6', 68)" class="t">string</span><span class="o">&gt;</span>[]) <span class="o">=</span>
    <span onmouseout="hideTip(event, 'fs32', 69)" onmouseover="showTip(event, 'fs32', 69)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> - </span><span class="pf">%A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs28', 70)" onmouseover="showTip(event, 'fs28', 70)" class="i">s</span> <span onmouseout="hideTip(event, 'fs31', 71)" onmouseover="showTip(event, 'fs31', 71)" class="i">pars</span>

<span class="c">// This gives us what Howard suggested!</span>
<span onmouseout="hideTip(event, 'fs26', 72)" onmouseover="showTip(event, 'fs26', 72)" class="t">R</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs33', 73)" onmouseover="showTip(event, 'fs33', 73)" class="f">plot</span>(<span class="s">&quot;sin&quot;</span>, <span class="s">&quot;x&quot;</span> <span class="o">=&gt;</span> <span class="n">1</span>, <span class="s">&quot;y&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;42&quot;</span>)

<span class="c">// But we can still write functions that require Tuple&lt;string, int&gt; </span>
<span class="c">// rather than tuple with any type of values</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs34', 74)" onmouseover="showTip(event, 'fs34', 74)" class="f">fromNums</span> (<span onmouseout="hideTip(event, 'fs35', 75)" onmouseover="showTip(event, 'fs35', 75)" class="i">nums</span><span class="o">:</span><span onmouseout="hideTip(event, 'fs4', 76)" onmouseover="showTip(event, 'fs4', 76)" class="t">list</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs10', 77)" onmouseover="showTip(event, 'fs10', 77)" class="t">Tuple</span><span class="o">&lt;</span><span onmouseout="hideTip(event, 'fs6', 78)" onmouseover="showTip(event, 'fs6', 78)" class="t">string</span>, <span onmouseout="hideTip(event, 'fs36', 79)" onmouseover="showTip(event, 'fs36', 79)" class="t">int</span><span class="o">&gt;</span><span class="o">&gt;</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs35', 80)" onmouseover="showTip(event, 'fs35', 80)" class="i">nums</span>

<span class="c">// Fine</span>
<span onmouseout="hideTip(event, 'fs34', 81)" onmouseover="showTip(event, 'fs34', 81)" class="f">fromNums</span> [<span class="s">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="n">1</span>; <span class="s">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="n">3</span>]
<span class="c">// Not allowed</span>
<span onmouseout="hideTip(event, 'fs34', 82)" onmouseover="showTip(event, 'fs34', 82)" class="f">fromNums</span> [<span class="s">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="n">1</span>; <span class="s">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="s">&#39;a&#39;</span>]
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val objs1 : int list<br /><br />Full name: Script.objs1</div>
<div class="tip" id="fs2">val objs2 : obj list<br /><br />Full name: Script.objs2</div>
<div class="tip" id="fs3">type obj = System.Object<br /><br />Full name: Microsoft.FSharp.Core.obj</div>
<div class="tip" id="fs4">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs5">val objs2 : (string * obj) list<br /><br />Full name: Script.objs2</div>
<div class="tip" id="fs6">Multiple items<br />val string : value:&#39;T -&gt; string<br /><br />Full name: Microsoft.FSharp.Core.Operators.string<br /><br />--------------------<br />type string = System.String<br /><br />Full name: Microsoft.FSharp.Core.string</div>
<div class="tip" id="fs7">type Tuple&lt;&#39;K&gt; =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Key : &#39;K<br />&#160;&#160;&#160;&#160;abstract member Value : obj<br />&#160;&#160;end<br /><br />Full name: Script.Tuple&lt;_&gt;</div>
<div class="tip" id="fs8">abstract member Tuple.Key : &#39;K<br /><br />Full name: Script.Tuple`1.Key</div>
<div class="tip" id="fs9">abstract member Tuple.Value : obj<br /><br />Full name: Script.Tuple`1.Value</div>
<div class="tip" id="fs10">Multiple items<br />type Tuple&lt;&#39;K&gt; =<br />&#160;&#160;interface<br />&#160;&#160;&#160;&#160;abstract member Key : &#39;K<br />&#160;&#160;&#160;&#160;abstract member Value : obj<br />&#160;&#160;end<br /><br />Full name: Script.Tuple&lt;_&gt;<br /><br />--------------------<br />type Tuple&lt;&#39;K,&#39;V&gt; =<br />&#160;&#160;| KV of &#39;K * &#39;V<br />&#160;&#160;interface Tuple&lt;&#39;K&gt;<br />&#160;&#160;member Key : &#39;K<br />&#160;&#160;member Value : &#39;V<br /><br />Full name: Script.Tuple&lt;_,_&gt;</div>
<div class="tip" id="fs11">union case Tuple.KV: &#39;K * &#39;V -&gt; Tuple&lt;&#39;K,&#39;V&gt;</div>
<div class="tip" id="fs12">val x : Tuple&lt;&#39;K,&#39;V&gt;</div>
<div class="tip" id="fs13">member Tuple.Key : &#39;K<br /><br />Full name: Script.Tuple`2.Key</div>
<div class="tip" id="fs14">val k : &#39;K</div>
<div class="tip" id="fs15">val v : &#39;V</div>
<div class="tip" id="fs16">member Tuple.Value : &#39;V<br /><br />Full name: Script.Tuple`2.Value</div>
<div class="tip" id="fs17">override Tuple.Key : &#39;K<br /><br />Full name: Script.Tuple`2.Key</div>
<div class="tip" id="fs18">override Tuple.Value : obj<br /><br />Full name: Script.Tuple`2.Value</div>
<div class="tip" id="fs19">val box : value:&#39;T -&gt; obj<br /><br />Full name: Microsoft.FSharp.Core.Operators.box</div>
<div class="tip" id="fs20">val k : &#39;a</div>
<div class="tip" id="fs21">val v : &#39;b</div>
<div class="tip" id="fs22">val pars : Tuple&lt;string,int&gt; list<br /><br />Full name: Script.pars</div>
<div class="tip" id="fs23">val namedPars : p:Tuple&lt;string&gt; list -&gt; Tuple&lt;string&gt; list<br /><br />Full name: Script.namedPars</div>
<div class="tip" id="fs24">val p : Tuple&lt;string&gt; list</div>
<div class="tip" id="fs25">val pars : Tuple&lt;string&gt; list<br /><br />Full name: Script.pars</div>
<div class="tip" id="fs26">type R =<br />&#160;&#160;new : unit -&gt; R<br />&#160;&#160;static member plot : s:string * [&lt;ParamArray&gt;] pars:Tuple&lt;string&gt; [] -&gt; unit<br /><br />Full name: Script.R</div>
<div class="tip" id="fs27">static member R.plot : s:string * [&lt;System.ParamArray&gt;] pars:Tuple&lt;string&gt; [] -&gt; unit<br /><br />Full name: Script.R.plot</div>
<div class="tip" id="fs28">val s : string</div>
<div class="tip" id="fs29">namespace System</div>
<div class="tip" id="fs30">Multiple items<br />type ParamArrayAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; ParamArrayAttribute<br /><br />Full name: System.ParamArrayAttribute<br /><br />--------------------<br />System.ParamArrayAttribute() : unit</div>
<div class="tip" id="fs31">val pars : Tuple&lt;string&gt; []</div>
<div class="tip" id="fs32">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs33">static member R.plot : s:string * [&lt;System.ParamArray&gt;] pars:Tuple&lt;string&gt; [] -&gt; unit</div>
<div class="tip" id="fs34">val fromNums : nums:Tuple&lt;string,int&gt; list -&gt; Tuple&lt;string,int&gt; list<br /><br />Full name: Script.fromNums</div>
<div class="tip" id="fs35">val nums : Tuple&lt;string,int&gt; list</div>
<div class="tip" id="fs36">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>

