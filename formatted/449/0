<h2><a name="Creating-simple-asynchronous-sequence" class="anchor" href="#Creating-simple-asynchronous-sequence">Creating simple asynchronous sequence</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">  <span class="c">// When accessed, generates numbers 1 and 2. The number </span>
  <span class="c">// is returned 1 second after value is requested.</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="i">oneTwo</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">asyncSeq</span> { 
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="f">Sleep</span>(<span class="n">1000</span>)
    <span class="k">yield</span> <span class="n">1</span>
    <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs3', 5)" onmouseover="showTip(event, 'fs3', 5)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 6)" onmouseover="showTip(event, 'fs4', 6)" class="f">Sleep</span>(<span class="n">1000</span>)
    <span class="k">yield</span> <span class="n">2</span> }
</code></pre></td>
</tr>
</table>
<h2><a name="Downloading-web-pages-in-sequence" class="anchor" href="#Downloading-web-pages-in-sequence">Downloading web pages in sequence</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 7)" onmouseover="showTip(event, 'fs5', 7)" class="i">urls</span> <span class="o">=</span> 
    [ <span class="s">&quot;http://bing.com&quot;</span>; <span class="s">&quot;http://yahoo.com&quot;</span>; 
      <span class="s">&quot;http://google.com&quot;</span>; <span class="s">&quot;http://msn.com&quot;</span> ]

  <span class="c">// Asynchronous sequence that returns URLs and lengths</span>
  <span class="c">// of the downloaded HTML. Web pages from a given list</span>
  <span class="c">// are downloaded synchronously in sequence.</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 8)" onmouseover="showTip(event, 'fs6', 8)" class="i">pages</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 9)" onmouseover="showTip(event, 'fs2', 9)" class="i">asyncSeq</span> {
    <span class="k">use</span> <span onmouseout="hideTip(event, 'fs7', 10)" onmouseover="showTip(event, 'fs7', 10)" class="i">wc</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs8', 11)" onmouseover="showTip(event, 'fs8', 11)" class="t">WebClient</span>()
    <span class="k">for</span> <span onmouseout="hideTip(event, 'fs9', 12)" onmouseover="showTip(event, 'fs9', 12)" class="i">url</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs5', 13)" onmouseover="showTip(event, 'fs5', 13)" class="i">urls</span> <span class="k">do</span>
      <span class="k">try</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs10', 14)" onmouseover="showTip(event, 'fs10', 14)" class="i">html</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="i">wc</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="f">AsyncDownloadString</span>(<span onmouseout="hideTip(event, 'fs12', 17)" onmouseover="showTip(event, 'fs12', 17)" class="t">Uri</span>(<span onmouseout="hideTip(event, 'fs9', 18)" onmouseover="showTip(event, 'fs9', 18)" class="i">url</span>))
        <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs9', 19)" onmouseover="showTip(event, 'fs9', 19)" class="i">url</span>, <span onmouseout="hideTip(event, 'fs10', 20)" onmouseover="showTip(event, 'fs10', 20)" class="i">html</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">Length</span> 
      <span class="k">with</span> _ <span class="k">-&gt;</span> 
        <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs9', 22)" onmouseover="showTip(event, 'fs9', 22)" class="i">url</span>, <span class="o">-</span><span class="n">1</span> }    

  <span class="c">// Asynchronous workflow that prints results</span>
  <span onmouseout="hideTip(event, 'fs14', 23)" onmouseover="showTip(event, 'fs14', 23)" class="i">async</span> {
    <span class="k">for</span> <span onmouseout="hideTip(event, 'fs9', 24)" onmouseover="showTip(event, 'fs9', 24)" class="i">url</span>, <span onmouseout="hideTip(event, 'fs15', 25)" onmouseover="showTip(event, 'fs15', 25)" class="i">length</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs6', 26)" onmouseover="showTip(event, 'fs6', 26)" class="i">pages</span> <span class="k">do</span>
      <span onmouseout="hideTip(event, 'fs16', 27)" onmouseover="showTip(event, 'fs16', 27)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s"> (</span><span class="pf">%d</span><span class="s">)&quot;</span> <span class="i">url</span> <span onmouseout="hideTip(event, 'fs15', 28)" onmouseover="showTip(event, 'fs15', 28)" class="i">length</span> }
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs3', 29)" onmouseover="showTip(event, 'fs3', 29)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 30)" onmouseover="showTip(event, 'fs17', 30)" class="f">Start</span>

  <span class="c">// Print URL of pages that are smaller than 50k</span>
  <span onmouseout="hideTip(event, 'fs6', 31)" onmouseover="showTip(event, 'fs6', 31)" class="i">pages</span> 
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 32)" onmouseover="showTip(event, 'fs18', 32)" class="t">AsyncSeq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 33)" onmouseover="showTip(event, 'fs19', 33)" class="f">filter</span> (<span class="k">fun</span> (_, <span onmouseout="hideTip(event, 'fs20', 34)" onmouseover="showTip(event, 'fs20', 34)" class="i">len</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs20', 35)" onmouseover="showTip(event, 'fs20', 35)" class="i">len</span> <span class="o">&lt;</span> <span class="n">50000</span>)
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 36)" onmouseover="showTip(event, 'fs18', 36)" class="t">AsyncSeq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 37)" onmouseover="showTip(event, 'fs21', 37)" class="f">map</span> <span onmouseout="hideTip(event, 'fs22', 38)" onmouseover="showTip(event, 'fs22', 38)" class="f">fst</span>
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 39)" onmouseover="showTip(event, 'fs18', 39)" class="t">AsyncSeq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 40)" onmouseover="showTip(event, 'fs23', 40)" class="f">iter</span> (<span onmouseout="hideTip(event, 'fs16', 41)" onmouseover="showTip(event, 'fs16', 41)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s">&quot;</span>)
    <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs3', 42)" onmouseover="showTip(event, 'fs3', 42)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 43)" onmouseover="showTip(event, 'fs17', 43)" class="f">Start</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Sequential-web-crawler" class="anchor" href="#Sequential-web-crawler">Sequential web crawler</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">  <span class="k">open</span> <span class="i">HtmlAgilityPack</span>
  <span class="k">open</span> <span onmouseout="hideTip(event, 'fs24', 44)" onmouseover="showTip(event, 'fs24', 44)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs25', 45)" onmouseover="showTip(event, 'fs25', 45)" class="i">Text</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs26', 46)" onmouseover="showTip(event, 'fs26', 46)" class="i">RegularExpressions</span>

  <span class="c">/// Asynchronously download the document and parse the HTML</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs27', 47)" onmouseover="showTip(event, 'fs27', 47)" class="f">downloadDocument</span> <span onmouseout="hideTip(event, 'fs9', 48)" onmouseover="showTip(event, 'fs9', 48)" class="i">url</span> <span class="o">=</span> <span class="c">(*[omit:(...)*)</span><span onmouseout="hideTip(event, 'fs14', 49)" onmouseover="showTip(event, 'fs14', 49)" class="i">async</span> {
    <span class="k">try</span> <span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 50)" onmouseover="showTip(event, 'fs7', 50)" class="i">wc</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs8', 51)" onmouseover="showTip(event, 'fs8', 51)" class="t">WebClient</span>()
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs10', 52)" onmouseover="showTip(event, 'fs10', 52)" class="i">html</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 53)" onmouseover="showTip(event, 'fs7', 53)" class="i">wc</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs11', 54)" onmouseover="showTip(event, 'fs11', 54)" class="f">AsyncDownloadString</span>(<span onmouseout="hideTip(event, 'fs12', 55)" onmouseover="showTip(event, 'fs12', 55)" class="t">Uri</span>(<span onmouseout="hideTip(event, 'fs9', 56)" onmouseover="showTip(event, 'fs9', 56)" class="i">url</span>))
        <span class="k">let</span> <span onmouseout="hideTip(event, 'fs28', 57)" onmouseover="showTip(event, 'fs28', 57)" class="i">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="i">HtmlDocument</span>()
        <span onmouseout="hideTip(event, 'fs28', 58)" onmouseover="showTip(event, 'fs28', 58)" class="i">doc</span><span class="o">.</span><span class="i">LoadHtml</span>(<span onmouseout="hideTip(event, 'fs10', 59)" onmouseover="showTip(event, 'fs10', 59)" class="i">html</span>)
        <span class="k">return</span> <span onmouseout="hideTip(event, 'fs29', 60)" onmouseover="showTip(event, 'fs29', 60)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs28', 61)" onmouseover="showTip(event, 'fs28', 61)" class="i">doc</span> 
    <span class="k">with</span> _ <span class="k">-&gt;</span> <span class="k">return</span> <span onmouseout="hideTip(event, 'fs30', 62)" onmouseover="showTip(event, 'fs30', 62)" class="p">None</span> }<span class="c">(*[/omit]*)</span>

  <span class="c">/// Extract all links from the document that start with &quot;http://&quot;</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs31', 63)" onmouseover="showTip(event, 'fs31', 63)" class="f">extractLinks</span> (<span onmouseout="hideTip(event, 'fs28', 64)" onmouseover="showTip(event, 'fs28', 64)" class="i">doc</span><span class="o">:</span><span class="i">HtmlDocument</span>) <span class="o">=</span> <span id="fst32" onmouseout="hideTip(event, 'fs32', 65)" onmouseover="showTip(event, 'fs32', 65, document.getElementById('fst32'))" class="omitted">(...)</span>

  <span class="c">/// Extract the &lt;title&gt; of the web page</span>
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs33', 66)" onmouseover="showTip(event, 'fs33', 66)" class="f">getTitle</span> (<span onmouseout="hideTip(event, 'fs28', 67)" onmouseover="showTip(event, 'fs28', 67)" class="i">doc</span><span class="o">:</span><span class="i">HtmlDocument</span>) <span class="o">=</span> <span id="fst34" onmouseout="hideTip(event, 'fs34', 68)" onmouseover="showTip(event, 'fs34', 68, document.getElementById('fst34'))" class="omitted">(...)</span>

  <span class="c">/// Crawl the internet starting from the specified page.</span>
  <span class="c">/// From each page follow the first not-yet-visited page.</span>
  <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs35', 69)" onmouseover="showTip(event, 'fs35', 69)" class="f">randomCrawl</span> <span onmouseout="hideTip(event, 'fs9', 70)" onmouseover="showTip(event, 'fs9', 70)" class="i">url</span> <span class="o">=</span> 
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs36', 71)" onmouseover="showTip(event, 'fs36', 71)" class="i">visited</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs24', 72)" onmouseover="showTip(event, 'fs24', 72)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs37', 73)" onmouseover="showTip(event, 'fs37', 73)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs38', 74)" onmouseover="showTip(event, 'fs38', 74)" class="i">Generic</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs39', 75)" onmouseover="showTip(event, 'fs39', 75)" class="t">HashSet</span><span class="o">&lt;</span>_<span class="o">&gt;</span>()

    <span class="c">// Visits page and then recursively visits all referenced pages</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs40', 76)" onmouseover="showTip(event, 'fs40', 76)" class="f">loop</span> <span onmouseout="hideTip(event, 'fs9', 77)" onmouseover="showTip(event, 'fs9', 77)" class="i">url</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs2', 78)" onmouseover="showTip(event, 'fs2', 78)" class="i">asyncSeq</span> {
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs36', 79)" onmouseover="showTip(event, 'fs36', 79)" class="i">visited</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs41', 80)" onmouseover="showTip(event, 'fs41', 80)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs9', 81)" onmouseover="showTip(event, 'fs9', 81)" class="i">url</span>) <span class="k">then</span>
        <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs42', 82)" onmouseover="showTip(event, 'fs42', 82)" class="i">doc</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs27', 83)" onmouseover="showTip(event, 'fs27', 83)" class="f">downloadDocument</span> <span onmouseout="hideTip(event, 'fs9', 84)" onmouseover="showTip(event, 'fs9', 84)" class="i">url</span>
        <span class="k">match</span> <span onmouseout="hideTip(event, 'fs42', 85)" onmouseover="showTip(event, 'fs42', 85)" class="i">doc</span> <span class="k">with</span> 
        | <span onmouseout="hideTip(event, 'fs29', 86)" onmouseover="showTip(event, 'fs29', 86)" class="p">Some</span> <span onmouseout="hideTip(event, 'fs43', 87)" onmouseover="showTip(event, 'fs43', 87)" class="i">doc</span> <span class="k">-&gt;</span>
            <span class="c">// Yield url and title as the next element</span>
            <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs9', 88)" onmouseover="showTip(event, 'fs9', 88)" class="i">url</span>, <span onmouseout="hideTip(event, 'fs33', 89)" onmouseover="showTip(event, 'fs33', 89)" class="f">getTitle</span> <span onmouseout="hideTip(event, 'fs43', 90)" onmouseover="showTip(event, 'fs43', 90)" class="i">doc</span>
            <span class="c">// For every link, yield all referenced pages too</span>
            <span class="k">for</span> <span onmouseout="hideTip(event, 'fs44', 91)" onmouseover="showTip(event, 'fs44', 91)" class="i">link</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs31', 92)" onmouseover="showTip(event, 'fs31', 92)" class="f">extractLinks</span> <span onmouseout="hideTip(event, 'fs43', 93)" onmouseover="showTip(event, 'fs43', 93)" class="i">doc</span> <span class="k">do</span>
              <span class="k">yield!</span> <span onmouseout="hideTip(event, 'fs40', 94)" onmouseover="showTip(event, 'fs40', 94)" class="f">loop</span> <span onmouseout="hideTip(event, 'fs44', 95)" onmouseover="showTip(event, 'fs44', 95)" class="i">link</span> 
        | _ <span class="k">-&gt;</span> () }
    <span onmouseout="hideTip(event, 'fs40', 96)" onmouseover="showTip(event, 'fs40', 96)" class="f">loop</span> <span onmouseout="hideTip(event, 'fs9', 97)" onmouseover="showTip(event, 'fs9', 97)" class="i">url</span>

  <span class="c">// Use AsyncSeq combinators to print the titles of the first 10</span>
  <span class="c">// web sites that are from other domains than bing.com</span>
  <span onmouseout="hideTip(event, 'fs35', 98)" onmouseover="showTip(event, 'fs35', 98)" class="f">randomCrawl</span> <span class="s">&quot;http://news.bing.com&quot;</span>
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 99)" onmouseover="showTip(event, 'fs18', 99)" class="t">AsyncSeq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs19', 100)" onmouseover="showTip(event, 'fs19', 100)" class="f">filter</span> (<span class="k">fun</span> (<span onmouseout="hideTip(event, 'fs9', 101)" onmouseover="showTip(event, 'fs9', 101)" class="i">url</span>, <span onmouseout="hideTip(event, 'fs45', 102)" onmouseover="showTip(event, 'fs45', 102)" class="i">title</span>) <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs9', 103)" onmouseover="showTip(event, 'fs9', 103)" class="i">url</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs46', 104)" onmouseover="showTip(event, 'fs46', 104)" class="f">Contains</span>(<span class="s">&quot;bing.com&quot;</span>) <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs47', 105)" onmouseover="showTip(event, 'fs47', 105)" class="f">not</span>)
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 106)" onmouseover="showTip(event, 'fs18', 106)" class="t">AsyncSeq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs21', 107)" onmouseover="showTip(event, 'fs21', 107)" class="f">map</span> <span onmouseout="hideTip(event, 'fs48', 108)" onmouseover="showTip(event, 'fs48', 108)" class="f">snd</span>
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 109)" onmouseover="showTip(event, 'fs18', 109)" class="t">AsyncSeq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs49', 110)" onmouseover="showTip(event, 'fs49', 110)" class="f">take</span> <span class="n">10</span>
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs18', 111)" onmouseover="showTip(event, 'fs18', 111)" class="t">AsyncSeq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 112)" onmouseover="showTip(event, 'fs23', 112)" class="f">iter</span> (<span onmouseout="hideTip(event, 'fs16', 113)" onmouseover="showTip(event, 'fs16', 113)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%s</span><span class="s">&quot;</span>)
  <span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs3', 114)" onmouseover="showTip(event, 'fs3', 114)" class="t">Async</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs17', 115)" onmouseover="showTip(event, 'fs17', 115)" class="f">Start</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val oneTwo : AsyncSeq&lt;int&gt;<br /><br />Full name: Script.Samples.oneTwo</div>
<div class="tip" id="fs2">val asyncSeq : AsyncSeq.AsyncSeqBuilder<br /><br />Full name: Script.AsyncSeqExtensions.asyncSeq<br /><em><br /><br />&#160;Builds an asynchronou sequence using the computation builder syntax</em></div>
<div class="tip" id="fs3">Multiple items<br />type Async<br />static member AsBeginEnd : computation:(&#39;Arg -&gt; Async&lt;&#39;T&gt;) -&gt; (&#39;Arg * AsyncCallback * obj -&gt; IAsyncResult) * (IAsyncResult -&gt; &#39;T) * (IAsyncResult -&gt; unit)<br />static member AwaitEvent : event:IEvent&lt;&#39;Del,&#39;T&gt; * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt; (requires delegate and &#39;Del :&gt; Delegate)<br />static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member AwaitTask : task:Task&lt;&#39;T&gt; -&gt; Async&lt;&#39;T&gt;<br />static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&gt; Async&lt;bool&gt;<br />static member CancelDefaultToken : unit -&gt; unit<br />static member Catch : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;Choice&lt;&#39;T,exn&gt;&gt;<br />static member FromBeginEnd : beginAction:(AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg:&#39;Arg1 * beginAction:(&#39;Arg1 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * beginAction:(&#39;Arg1 * &#39;Arg2 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromBeginEnd : arg1:&#39;Arg1 * arg2:&#39;Arg2 * arg3:&#39;Arg3 * beginAction:(&#39;Arg1 * &#39;Arg2 * &#39;Arg3 * AsyncCallback * obj -&gt; IAsyncResult) * endAction:(IAsyncResult -&gt; &#39;T) * ?cancelAction:(unit -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member FromContinuations : callback:((&#39;T -&gt; unit) * (exn -&gt; unit) * (OperationCanceledException -&gt; unit) -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member Ignore : computation:Async&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;<br />static member OnCancel : interruption:(unit -&gt; unit) -&gt; Async&lt;IDisposable&gt;<br />static member Parallel : computations:seq&lt;Async&lt;&#39;T&gt;&gt; -&gt; Async&lt;&#39;T []&gt;<br />static member RunSynchronously : computation:Async&lt;&#39;T&gt; * ?timeout:int * ?cancellationToken:CancellationToken -&gt; &#39;T<br />static member Sleep : millisecondsDueTime:int -&gt; Async&lt;unit&gt;<br />static member Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&gt; Task&lt;&#39;T&gt;<br />static member StartChild : computation:Async&lt;&#39;T&gt; * ?millisecondsTimeout:int -&gt; Async&lt;Async&lt;&#39;T&gt;&gt;<br />static member StartChildAsTask : computation:Async&lt;&#39;T&gt; * ?taskCreationOptions:TaskCreationOptions -&gt; Async&lt;Task&lt;&#39;T&gt;&gt;<br />static member StartImmediate : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit<br />static member StartWithContinuations : computation:Async&lt;&#39;T&gt; * continuation:(&#39;T -&gt; unit) * exceptionContinuation:(exn -&gt; unit) * cancellationContinuation:(OperationCanceledException -&gt; unit) * ?cancellationToken:CancellationToken -&gt; unit<br />static member SwitchToContext : syncContext:SynchronizationContext -&gt; Async&lt;unit&gt;<br />static member SwitchToNewThread : unit -&gt; Async&lt;unit&gt;<br />static member SwitchToThreadPool : unit -&gt; Async&lt;unit&gt;<br />static member TryCancelled : computation:Async&lt;&#39;T&gt; * compensation:(OperationCanceledException -&gt; unit) -&gt; Async&lt;&#39;T&gt;<br />static member CancellationToken : Async&lt;CancellationToken&gt;<br />static member DefaultCancellationToken : CancellationToken<br /><br />Full name: Microsoft.FSharp.Control.Async<br /><br />--------------------<br />type Async&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Control.Async&lt;_&gt;</div>
<div class="tip" id="fs4">static member Async.Sleep : millisecondsDueTime:int -&gt; Async&lt;unit&gt;</div>
<div class="tip" id="fs5">val urls : string list<br /><br />Full name: Script.Samples.urls</div>
<div class="tip" id="fs6">val pages : AsyncSeq&lt;string * int&gt;<br /><br />Full name: Script.Samples.pages</div>
<div class="tip" id="fs7">val wc : WebClient</div>
<div class="tip" id="fs8">Multiple items<br />type WebClient =<br />&#160;&#160;inherit Component<br />&#160;&#160;new : unit -&gt; WebClient<br />&#160;&#160;member BaseAddress : string with get, set<br />&#160;&#160;member CachePolicy : RequestCachePolicy with get, set<br />&#160;&#160;member CancelAsync : unit -&gt; unit<br />&#160;&#160;member Credentials : ICredentials with get, set<br />&#160;&#160;member DownloadData : address:string -&gt; byte[] + 1 overload<br />&#160;&#160;member DownloadDataAsync : address:Uri -&gt; unit + 1 overload<br />&#160;&#160;member DownloadFile : address:string * fileName:string -&gt; unit + 1 overload<br />&#160;&#160;member DownloadFileAsync : address:Uri * fileName:string -&gt; unit + 1 overload<br />&#160;&#160;member DownloadString : address:string -&gt; string + 1 overload<br />&#160;&#160;...<br /><br />Full name: System.Net.WebClient<br /><br />--------------------<br />WebClient() : unit</div>
<div class="tip" id="fs9">val url : string</div>
<div class="tip" id="fs10">val html : string</div>
<div class="tip" id="fs11">member WebClient.AsyncDownloadString : address:Uri -&gt; Async&lt;string&gt;</div>
<div class="tip" id="fs12">Multiple items<br />type Uri =<br />&#160;&#160;new : uriString:string -&gt; Uri + 5 overloads<br />&#160;&#160;member AbsolutePath : string<br />&#160;&#160;member AbsoluteUri : string<br />&#160;&#160;member Authority : string<br />&#160;&#160;member DnsSafeHost : string<br />&#160;&#160;member Equals : comparand:obj -&gt; bool<br />&#160;&#160;member Fragment : string<br />&#160;&#160;member GetComponents : components:UriComponents * format:UriFormat -&gt; string<br />&#160;&#160;member GetHashCode : unit -&gt; int<br />&#160;&#160;member GetLeftPart : part:UriPartial -&gt; string<br />&#160;&#160;...<br /><br />Full name: System.Uri<br /><br />--------------------<br />Uri(uriString: string) : unit<br />Uri(uriString: string, uriKind: UriKind) : unit<br />Uri(baseUri: Uri, relativeUri: string) : unit<br />Uri(baseUri: Uri, relativeUri: Uri) : unit</div>
<div class="tip" id="fs13">property String.Length: int</div>
<div class="tip" id="fs14">val async : AsyncBuilder<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.async</div>
<div class="tip" id="fs15">val length : int</div>
<div class="tip" id="fs16">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs17">static member Async.Start : computation:Async&lt;unit&gt; * ?cancellationToken:CancellationToken -&gt; unit</div>
<div class="tip" id="fs18">Multiple items<br />module AsyncSeq<br /><br />from Script<br /><em><br /><br />&#160;Module with helper functions for working with asynchronous sequences</em><br /><br />--------------------<br />type AsyncSeq&lt;&#39;T&gt; = Async&lt;AsyncSeqInner&lt;&#39;T&gt;&gt;<br /><br />Full name: Script.AsyncSeq&lt;_&gt;<br /><em><br /><br />&#160;An asynchronous sequence represents a delayed computation that can be<br />&#160;started to produce either Cons value consisting of the next element of the <br />&#160;sequence (head) together with the next asynchronous sequence (tail) or a <br />&#160;special value representing the end of the sequence (Nil)</em></div>
<div class="tip" id="fs19">val filter : f:(&#39;T -&gt; bool) -&gt; input:AsyncSeq&lt;&#39;T&gt; -&gt; AsyncSeq&lt;&#39;T&gt;<br /><br />Full name: Script.AsyncSeq.filter<br /><em><br /><br />&#160;Same as AsyncSeq.filterAsync, but the specified predicate is synchronous<br />&#160;and processes the input element immediately.</em></div>
<div class="tip" id="fs20">val len : int</div>
<div class="tip" id="fs21">val map : f:(&#39;T -&gt; &#39;a) -&gt; input:AsyncSeq&lt;&#39;T&gt; -&gt; AsyncSeq&lt;&#39;a&gt;<br /><br />Full name: Script.AsyncSeq.map<br /><em><br /><br />&#160;Same as AsyncSeq.mapAsync, but the specified function is synchronous<br />&#160;and returns the result of projection immediately.</em></div>
<div class="tip" id="fs22">val fst : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T1<br /><br />Full name: Microsoft.FSharp.Core.Operators.fst</div>
<div class="tip" id="fs23">val iter : f:(&#39;T -&gt; unit) -&gt; input:AsyncSeq&lt;&#39;T&gt; -&gt; Async&lt;unit&gt;<br /><br />Full name: Script.AsyncSeq.iter<br /><em><br /><br />&#160;Same as AsyncSeq.iterAsync, but the specified function is synchronous<br />&#160;and performs the side-effect immediately.</em></div>
<div class="tip" id="fs24">namespace System</div>
<div class="tip" id="fs25">namespace System.Text</div>
<div class="tip" id="fs26">namespace System.Text.RegularExpressions</div>
<div class="tip" id="fs27">val downloadDocument : url:string -&gt; Async&lt;&#39;a option&gt;<br /><br />Full name: Script.Samples.downloadDocument<br /><em><br /><br />&#160;Asynchronously download the document and parse the HTML</em></div>
<div class="tip" id="fs28">val doc : &#39;a</div>
<div class="tip" id="fs29">union case Option.Some: Value: &#39;T -&gt; Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs30">union case Option.None: Option&lt;&#39;T&gt;</div>
<div class="tip" id="fs31">val extractLinks : doc:&#39;a -&gt; &#39;b list<br /><br />Full name: Script.Samples.extractLinks<br /><em><br /><br />&#160;Extract all links from the document that start with &quot;http://&quot;</em></div>
<div class="tip" id="fs32">try<br />&#160;&#160;&#160;&#160;&#160;&#160;[ for a in doc.DocumentNode.SelectNodes(&quot;//a&quot;) do<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if a.Attributes.Contains(&quot;href&quot;) then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let href = a.Attributes.[&quot;href&quot;].Value<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if href.StartsWith(&quot;http://&quot;) then <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let endl = href.IndexOf(&#39;?&#39;)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;yield if endl &gt; 0 then href.Substring(0, endl) else href ]<br />&#160;&#160;&#160;&#160;with _ -&gt; []</div>
<div class="tip" id="fs33">val getTitle : doc:&#39;a -&gt; string<br /><br />Full name: Script.Samples.getTitle<br /><em><br /><br />&#160;Extract the &lt;title&gt; of the web page</em></div>
<div class="tip" id="fs34">let title = doc.DocumentNode.SelectSingleNode(&quot;//title&quot;)<br />&#160;&#160;&#160;&#160;if title &lt;&gt; null then title.InnerText.Trim() else &quot;Untitled&quot;</div>
<div class="tip" id="fs35">val randomCrawl : url:string -&gt; AsyncSeq&lt;string * string&gt;<br /><br />Full name: Script.Samples.randomCrawl<br /><em><br /><br />&#160;Crawl the internet starting from the specified page.<br />&#160;From each page follow the first not-yet-visited page.</em></div>
<div class="tip" id="fs36">val visited : HashSet&lt;string&gt;</div>
<div class="tip" id="fs37">namespace System.Collections</div>
<div class="tip" id="fs38">namespace System.Collections.Generic</div>
<div class="tip" id="fs39">Multiple items<br />type HashSet&lt;&#39;T&gt; =<br />&#160;&#160;new : unit -&gt; HashSet&lt;&#39;T&gt; + 3 overloads<br />&#160;&#160;member Add : item:&#39;T -&gt; bool<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Comparer : IEqualityComparer&lt;&#39;T&gt;<br />&#160;&#160;member Contains : item:&#39;T -&gt; bool<br />&#160;&#160;member CopyTo : array:&#39;T[] -&gt; unit + 2 overloads<br />&#160;&#160;member Count : int<br />&#160;&#160;member ExceptWith : other:IEnumerable&lt;&#39;T&gt; -&gt; unit<br />&#160;&#160;member GetEnumerator : unit -&gt; Enumerator&lt;&#39;T&gt;<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;...<br />&#160;&#160;nested type Enumerator<br /><br />Full name: System.Collections.Generic.HashSet&lt;_&gt;<br /><br />--------------------<br />HashSet() : unit<br />HashSet(comparer: IEqualityComparer&lt;&#39;T&gt;) : unit<br />HashSet(collection: IEnumerable&lt;&#39;T&gt;) : unit<br />HashSet(collection: IEnumerable&lt;&#39;T&gt;, comparer: IEqualityComparer&lt;&#39;T&gt;) : unit</div>
<div class="tip" id="fs40">val loop : (string -&gt; AsyncSeq&lt;string * string&gt;)</div>
<div class="tip" id="fs41">HashSet.Add(item: string) : bool</div>
<div class="tip" id="fs42">val doc : obj option</div>
<div class="tip" id="fs43">val doc : obj</div>
<div class="tip" id="fs44">val link : string</div>
<div class="tip" id="fs45">val title : string</div>
<div class="tip" id="fs46">String.Contains(value: string) : bool</div>
<div class="tip" id="fs47">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs48">val snd : tuple:(&#39;T1 * &#39;T2) -&gt; &#39;T2<br /><br />Full name: Microsoft.FSharp.Core.Operators.snd</div>
<div class="tip" id="fs49">val take : count:int -&gt; input:AsyncSeq&lt;&#39;T&gt; -&gt; AsyncSeq&lt;&#39;T&gt;<br /><br />Full name: Script.AsyncSeq.take<br /><em><br /><br />&#160;Returns the first N elements of an asynchronous sequence</em></div>

