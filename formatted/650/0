<h2><a name="Ninety-Nine-F-Problems-Problems-70-73-Multiway-Trees" class="anchor" href="#Ninety-Nine-F-Problems-Problems-70-73-Multiway-Trees">Ninety-Nine F# Problems - Problems 70 - 73 - Multiway Trees</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
<span class="l">60: </span>
<span class="l">61: </span>
<span class="l">62: </span>
<span class="l">63: </span>
<span class="l">64: </span>
<span class="l">65: </span>
<span class="l">66: </span>
<span class="l">67: </span>
<span class="l">68: </span>
<span class="l">69: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// These are F# solutions of Ninety-Nine Haskell Problems </span>
<span class="c">/// (http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems), </span>
<span class="c">/// which are themselves translations of Ninety-Nine Lisp Problems</span>
<span class="c">/// (http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html)</span>
<span class="c">/// and Ninety-Nine Prolog Problems</span>
<span class="c">/// (https://sites.google.com/site/prologsite/prolog-problems).</span>
<span class="c">///</span>
<span class="c">/// If you would like to contribute a solution or fix any bugs, send </span>
<span class="c">/// an email to paks at kitiara dot org with the subject &quot;99 F# problems&quot;. </span>
<span class="c">/// I&#39;ll try to update the problem as soon as possible.</span>
<span class="c">///</span>
<span class="c">/// The problems have different levels of difficulty. Those marked with a single asterisk (*) </span>
<span class="c">/// are easy. If you have successfully solved the preceeding problems you should be able to </span>
<span class="c">/// solve them within a few (say 15) minutes. Problems marked with two asterisks (**) are of </span>
<span class="c">/// intermediate difficulty. If you are a skilled F# programmer it shouldn&#39;t take you more than </span>
<span class="c">/// 30-90 minutes to solve them. Problems marked with three asterisks (***) are more difficult. </span>
<span class="c">/// You may need more time (i.e. a few hours or more) to find a good solution</span>
<span class="c">///</span>
<span class="c">/// Though the problems number from 1 to 99, there are some gaps and some additions marked with </span>
<span class="c">/// letters. There are actually only 88 problems.</span>
<span class="c">///</span>
<span class="c">/// </span>
<span class="c">/// A multiway tree is composed of a root element and a (possibly empty) set of successors which are </span>
<span class="c">/// multiway trees themselves. A multiway tree is never empty. The set of successor trees is sometimes </span>
<span class="c">/// called a forest.</span>
<span class="c">///  </span>
<span class="c">///                              (a)</span>
<span class="c">///                            /  |  \</span>
<span class="c">///                          (f) (c) (b)</span>
<span class="c">///                           |      /  \</span>
<span class="c">///                          (g)   (d)  (e)</span>
<span class="c">/// </span>
<span class="c">/// Problem 70B </span>
<span class="c">/// </span>
<span class="c">/// (*) Check whether a given term represents a multiway tree. </span>
<span class="c">/// </span>
<span class="c">/// In Prolog or Lisp, one writes a predicate to check this. </span>
<span class="c">/// </span>
<span class="c">/// Example in Prolog: </span>
<span class="c">/// ?- istree(t(a,[t(f,[t(g,[])]),t(c,[]),t(b,[t(d,[]),t(e,[])])])).</span>
<span class="c">/// Yes</span>
<span class="c">///  </span>
<span class="c">/// In F#, we define multiway trees as a type.</span>
<span class="c">/// </span>
<span class="k">type</span> <span class="o">&#39;</span><span class="i">a</span> <span class="t">Tree</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="p">Node</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">a</span>  <span class="o">*</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">Tree</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">list</span>
<span class="c">///         </span>
<span class="c">/// Some example trees: </span>
<span class="c">/// </span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">tree1</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 5)" onmouseover="showTip(event, 'fs1', 5)" class="p">Node</span> (<span class="s">&#39;a&#39;</span>, [])

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 6)" onmouseover="showTip(event, 'fs5', 6)" class="i">tree2</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 7)" onmouseover="showTip(event, 'fs1', 7)" class="p">Node</span> (<span class="s">&#39;a&#39;</span>, [<span onmouseout="hideTip(event, 'fs1', 8)" onmouseover="showTip(event, 'fs1', 8)" class="p">Node</span> (<span class="s">&#39;b&#39;</span>, [])])

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 9)" onmouseover="showTip(event, 'fs6', 9)" class="i">tree3</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 10)" onmouseover="showTip(event, 'fs1', 10)" class="p">Node</span> (<span class="s">&#39;a&#39;</span>, [<span onmouseout="hideTip(event, 'fs1', 11)" onmouseover="showTip(event, 'fs1', 11)" class="p">Node</span> (<span class="s">&#39;b&#39;</span>, [<span onmouseout="hideTip(event, 'fs1', 12)" onmouseover="showTip(event, 'fs1', 12)" class="p">Node</span> (<span class="s">&#39;c&#39;</span>, [])])])

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="i">tree4</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 14)" onmouseover="showTip(event, 'fs1', 14)" class="p">Node</span> (<span class="s">&#39;b&#39;</span>, [<span onmouseout="hideTip(event, 'fs1', 15)" onmouseover="showTip(event, 'fs1', 15)" class="p">Node</span> (<span class="s">&#39;d&#39;</span>, []); <span onmouseout="hideTip(event, 'fs1', 16)" onmouseover="showTip(event, 'fs1', 16)" class="p">Node</span> (<span class="s">&#39;e&#39;</span>, [])])

<span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 17)" onmouseover="showTip(event, 'fs8', 17)" class="i">tree5</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 18)" onmouseover="showTip(event, 'fs1', 18)" class="p">Node</span> (<span class="s">&#39;a&#39;</span>, [
                        <span onmouseout="hideTip(event, 'fs1', 19)" onmouseover="showTip(event, 'fs1', 19)" class="p">Node</span> (<span class="s">&#39;f&#39;</span>, [<span onmouseout="hideTip(event, 'fs1', 20)" onmouseover="showTip(event, 'fs1', 20)" class="p">Node</span> (<span class="s">&#39;g&#39;</span>, [])]);
                        <span onmouseout="hideTip(event, 'fs1', 21)" onmouseover="showTip(event, 'fs1', 21)" class="p">Node</span> (<span class="s">&#39;c&#39;</span>, []);
                        <span onmouseout="hideTip(event, 'fs1', 22)" onmouseover="showTip(event, 'fs1', 22)" class="p">Node</span> (<span class="s">&#39;b&#39;</span>, [<span onmouseout="hideTip(event, 'fs1', 23)" onmouseover="showTip(event, 'fs1', 23)" class="p">Node</span> (<span class="s">&#39;d&#39;</span>, []); <span onmouseout="hideTip(event, 'fs1', 24)" onmouseover="showTip(event, 'fs1', 24)" class="p">Node</span> (<span class="s">&#39;e&#39;</span>, [])])
                       ] )

<span class="c">/// The last is the tree illustrated above. </span>
<span class="c">/// </span>
<span class="c">/// </span>
<span class="c">/// (*) Problem 70B : Check whether a given term represents a multiway tree</span>
<span class="c">/// As in problem 54A, all members of this type are multiway trees; there is no use for a predicate to </span>
<span class="c">/// test them.</span>
<span class="c">/// </span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-70C-Count-the-nodes-of-a-multiway-tree" class="anchor" href="#Problem-70C-Count-the-nodes-of-a-multiway-tree">(*) Problem 70C : Count the nodes of a multiway tree.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; nnodes tree2;;</span>
<span class="c">/// val it : int = 2 </span>

<span id="fst9" onmouseout="hideTip(event, 'fs9', 25)" onmouseover="showTip(event, 'fs9', 25, document.getElementById('fst9'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-70-Tree-construction-from-a-node-string" class="anchor" href="#Problem-70-Tree-construction-from-a-node-string">(<em></em>) Problem 70 : Tree construction from a node string.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// We suppose that the nodes of a multiway tree contain single characters. In the depth-first </span>
<span class="c">/// order sequence of its nodes, a special character ^ has been inserted whenever, during the </span>
<span class="c">/// tree traversal, the move is a backtrack to the previous level.</span>
<span class="c">///  </span>
<span class="c">/// By this rule, the tree below (tree5) is represented as: afg^^c^bd^e^^^ </span>
<span class="c">/// </span>
<span class="c">/// </span>
<span class="c">/// </span>
<span class="c">/// Define the syntax of the string and write a predicate tree(String,Tree) to construct the </span>
<span class="c">/// Tree when the String is given. Make your predicate work in both directions.</span>
<span class="c">///</span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; string2Tree &quot;afg^^c^bd^e^^^&quot;;;</span>
<span class="c">/// val it : char Tree =</span>
<span class="c">///   Node</span>
<span class="c">///     (&#39;a&#39;,</span>
<span class="c">///      [Node (&#39;f&#39;,[Node (&#39;g&#39;,[])]); Node (&#39;c&#39;,[]);</span>
<span class="c">///       Node (&#39;b&#39;,[Node (&#39;d&#39;,[]); Node (&#39;e&#39;,[])])])</span>
<span class="c">/// &gt; string2Tree &quot;afg^^c^bd^e^^^&quot; = tree5;;</span>
<span class="c">/// val it : bool = true</span>

<span id="fst10" onmouseout="hideTip(event, 'fs10', 26)" onmouseover="showTip(event, 'fs10', 26, document.getElementById('fst10'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-71-Determine-the-internal-path-length-of-a-tree" class="anchor" href="#Problem-71-Determine-the-internal-path-length-of-a-tree">(*) Problem 71 : Determine the internal path length of a tree.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// We define the internal path length of a multiway tree as the total sum of the path lengths from the </span>
<span class="c">/// root to all nodes of the tree. By this definition, tree5 has an internal path length of 9.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; ipl tree5;;</span>
<span class="c">/// val it : int = 9</span>
<span class="c">/// &gt; ipl tree4;;</span>
<span class="c">/// val it : int = 2</span>

<span id="fst11" onmouseout="hideTip(event, 'fs11', 27)" onmouseover="showTip(event, 'fs11', 27, document.getElementById('fst11'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-72-Construct-the-bottom-up-order-sequence-of-the-tree-nodes" class="anchor" href="#Problem-72-Construct-the-bottom-up-order-sequence-of-the-tree-nodes">(*) Problem 72 : Construct the bottom-up order sequence of the tree nodes.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Write a predicate bottom_up(Tree,Seq) which constructs the bottom-up sequence of the nodes of the </span>
<span class="c">/// multiway tree Tree.</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; bottom_up tree5;;</span>
<span class="c">/// val it : string = &quot;gfcdeba&quot;</span>
<span class="c">/// &gt; bottom_up tree4;;</span>
<span class="c">/// val it : string = &quot;deb&quot;</span>

<span id="fst12" onmouseout="hideTip(event, 'fs12', 28)" onmouseover="showTip(event, 'fs12', 28, document.getElementById('fst12'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-73-Lisp-like-tree-representation" class="anchor" href="#Problem-73-Lisp-like-tree-representation">(<em></em>) Problem 73 : Lisp-like tree representation.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// There is a particular notation for multiway trees in Lisp. Lisp is a prominent </span>
<span class="c">/// functional programming language, which is used primarily for artificial intelligence </span>
<span class="c">/// problems. As such it is one of the main competitors of Prolog. In Lisp almost everything</span>
<span class="c">/// is a list, just as in Prolog everything is a term.</span>
<span class="c">///  </span>
<span class="c">/// The following pictures show how multiway tree structures are represented in Lisp.</span>
<span class="c">///  </span>
<span class="c">///    (a)        (a)        (a)        (b)            (a)</span>
<span class="c">///                |          |        /   \         /  |  \</span>
<span class="c">///               (b)        (b)     (d)   (e)     (f)  (c)  (b)</span>
<span class="c">///                           |                     |       /   \</span>
<span class="c">///                          (c)                   (g)    (d)   (e)</span>
<span class="c">///</span>
<span class="c">///     a        (a b)    (a (b c))   (b d e)    (a (f g) c (b d e))</span>
<span class="c">///</span>
<span class="c">/// Note that in the &quot;lispy&quot; notation a node with successors (children) in the tree is always the first</span>
<span class="c">/// element in a list, followed by its children. The &quot;lispy&quot; representation of a multiway tree is a sequence</span>
<span class="c">/// of atoms and parentheses &#39;(&#39; and &#39;)&#39;, which we shall collectively call &quot;tokens&quot;. We can represent this</span>
<span class="c">/// sequence of tokens as a Prolog list; e.g. the lispy expression (a (b c)) could be represented as the </span>
<span class="c">/// Prolog list [&#39;(&#39;, a, &#39;(&#39;, b, c, &#39;)&#39;, &#39;)&#39;]. Write a predicate tree_ltl(T,LTL) which constructs the</span>
<span class="c">/// &quot;lispy token list&quot;</span>
<span class="c">/// LTL if the tree is given as term T in the usual Prolog notation.</span>
<span class="c">///  </span>
<span class="c">/// (The Prolog example given is incorrect.) </span>
<span class="c">/// </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; treeltl &quot;(x (a (f g) c (b d e)))&quot;;;</span>
<span class="c">/// val it : char list =</span>
<span class="c">///   [&#39;(&#39;; &#39;x&#39;; &#39;(&#39;; &#39;a&#39;; &#39;(&#39;; &#39;f&#39;; &#39;g&#39;; &#39;)&#39;; &#39;c&#39;; &#39;(&#39;; &#39;b&#39;; &#39;d&#39;; &#39;e&#39;; &#39;)&#39;; &#39;)&#39;;</span>
<span class="c">///    &#39;)&#39;]</span>
<span class="c">///</span>
<span class="c">/// &gt; displayList tree1;;</span>
<span class="c">/// val it : string = &quot;a&quot;</span>
<span class="c">/// &gt; displayLisp tree2;;</span>
<span class="c">/// val it : string = &quot;(a b)&quot;</span>
<span class="c">/// &gt; displayLisp tree3;;</span>
<span class="c">/// val it : string = &quot;(a (b c))&quot;</span>
<span class="c">/// &gt; displayLisp tree4;;</span>
<span class="c">/// val it : string = &quot;(b d e)&quot;</span>
<span class="c">/// &gt; displayLisp tree5;;</span>
<span class="c">/// val it : string = &quot;(a (f g) c (b d e))&quot;</span>
<span class="c">///</span>
<span class="c">/// &gt; lisp2Tree &quot;(a (f g) c (b d e))&quot; = tree5;;</span>
<span class="c">/// val it : bool = true</span>
<span class="c">///</span>
<span class="c">/// As a second, even more interesting exercise try to rewrite tree_ltl/2 in a way that the inverse</span>
<span class="c">/// conversion is also possible.</span>

<span id="fst13" onmouseout="hideTip(event, 'fs13', 29)" onmouseover="showTip(event, 'fs13', 29, document.getElementById('fst13'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">union case Tree.Node: &#39;a * &#39;a Tree list -&gt; &#39;a Tree</div>
<div class="tip" id="fs2">type &#39;a Tree = | Node of &#39;a * &#39;a Tree list<br /><br />Full name: Script.Tree&lt;_&gt;<br /><em><br /><br />&#160;These are F# solutions of Ninety-Nine Haskell Problems <br />&#160;(http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems), <br />&#160;which are themselves translations of Ninety-Nine Lisp Problems<br />&#160;(http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html)<br />&#160;and Ninety-Nine Prolog Problems<br />&#160;(https://sites.google.com/site/prologsite/prolog-problems).<br /><br />&#160;If you would like to contribute a solution or fix any bugs, send <br />&#160;an email to paks at kitiara dot org with the subject &quot;99 F# problems&quot;. <br />&#160;I&#39;ll try to update the problem as soon as possible.<br /><br />&#160;The problems have different levels of difficulty. Those marked with a single asterisk (*) <br />&#160;are easy. If you have successfully solved the preceeding problems you should be able to <br />&#160;solve them within a few (say 15) minutes. Problems marked with two asterisks (**) are of <br />&#160;intermediate difficulty. If you are a skilled F# programmer it shouldn&#39;t take you more than <br />&#160;30-90 minutes to solve them. Problems marked with three asterisks (***) are more difficult. <br />&#160;You may need more time (i.e. a few hours or more) to find a good solution<br /><br />&#160;Though the problems number from 1 to 99, there are some gaps and some additions marked with <br />&#160;letters. There are actually only 88 problems.<br /><br />&#160;<br />&#160;A multiway tree is composed of a root element and a (possibly empty) set of successors which are <br />&#160;multiway trees themselves. A multiway tree is never empty. The set of successor trees is sometimes <br />&#160;called a forest.<br />&#160;&#160;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(a)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/  |  \<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(f) (c) (b)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|      /  \<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(g)   (d)  (e)<br />&#160;<br />&#160;Problem 70B <br />&#160;<br />&#160;(*) Check whether a given term represents a multiway tree. <br />&#160;<br />&#160;In Prolog or Lisp, one writes a predicate to check this. <br />&#160;<br />&#160;Example in Prolog: <br />&#160;?- istree(t(a,[t(f,[t(g,[])]),t(c,[]),t(b,[t(d,[]),t(e,[])])])).<br />&#160;Yes<br />&#160;&#160;<br />&#160;In F#, we define multiway trees as a type.<br />&#160;</em></div>
<div class="tip" id="fs3">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs4">val tree1 : char Tree<br /><br />Full name: Script.tree1<br /><em><br /><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<br />&#160;Some example trees: <br />&#160;</em></div>
<div class="tip" id="fs5">val tree2 : char Tree<br /><br />Full name: Script.tree2</div>
<div class="tip" id="fs6">val tree3 : char Tree<br /><br />Full name: Script.tree3</div>
<div class="tip" id="fs7">val tree4 : char Tree<br /><br />Full name: Script.tree4</div>
<div class="tip" id="fs8">val tree5 : char Tree<br /><br />Full name: Script.tree5</div>
<div class="tip" id="fs9">let rec nnodes = function<br />&#160;&#160;&#160;&#160;| Node (_, []) -&gt; 1<br />&#160;&#160;&#160;&#160;| Node (_, xs) -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = xs |&gt; List.sumBy (nnodes)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1 + t</div>
<div class="tip" id="fs10">let string2Tree str =<br />&#160;&#160;&#160;&#160;let chars = str |&gt; List.ofSeq<br />&#160;&#160;&#160;&#160;let rec loop chars stack =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match chars with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#39;^&#39;::xs -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match stack with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [x] -&gt; x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| tx::Node(y, ty)::stack&#39; -&gt; loop xs (Node(y, ty @ [tx])::stack&#39;)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; failwith &quot;malformed text&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| x::xs -&gt; loop xs (Node(x,[])::stack)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; failwith &quot;malformed text&quot;<br />&#160;&#160;&#160;&#160;loop chars [] <br /><br />let tree2String tree =<br />&#160;&#160;&#160;&#160;let rec loop tree =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tree with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, []) -&gt; a.ToString() +  &quot;^&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, xs) -&gt; a.ToString() + (xs |&gt; List.fold(fun acc x -&gt; acc + loop x) &quot;&quot;)  + &quot;^&quot;<br />&#160;&#160;&#160;&#160;loop tree</div>
<div class="tip" id="fs11">let rec ipl tree = <br />&#160;&#160;&#160;&#160;let rec loop depth = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, []) -&gt; depth<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, xs) -&gt; depth + (xs |&gt; List.sumBy( fun x -&gt; loop (depth+1) x))<br />&#160;&#160;&#160;&#160;loop 0 tree</div>
<div class="tip" id="fs12">let bottom_up tree = <br />&#160;&#160;&#160;&#160;let rec loop = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, []) -&gt; a.ToString()<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, xs) -&gt; (xs |&gt; List.fold( fun acc x -&gt; acc + (loop x) ) &quot;&quot;) + a.ToString()<br />&#160;&#160;&#160;&#160;loop tree</div>
<div class="tip" id="fs13">let treeltl str = str |&gt; List.ofSeq |&gt; List.filter((&lt;&gt;) &#39; &#39;)<br /><br />let displayLisp tree = <br />&#160;&#160;&#160;&#160;let rec loop = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, []) -&gt; a.ToString()<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(a, xs) -&gt; &quot;(&quot; + a.ToString() + (xs |&gt; List.fold( fun acc x -&gt; acc + &quot; &quot; + (loop x) ) &quot;&quot;) + &quot;)&quot;<br />&#160;&#160;&#160;&#160;loop tree <br /><br />let lisp2Tree str = <br />&#160;&#160;&#160;&#160;let tokens = treeltl str<br />&#160;&#160;&#160;&#160;let rec loop tokens stack =<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match tokens with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#39;)&#39;::xs -&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match stack with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [x] -&gt; x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| tx::Node(y, ty)::stack&#39; -&gt; loop xs (Node(y, ty @ [tx])::stack&#39;)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; failwith &quot;malformed text&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| &#39;(&#39;::x::xs -&gt; loop xs (Node(x,[])::stack)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| x::xs -&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match stack with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; loop xs [Node(x,[])]<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Node(y,t)::stack -&gt; loop xs (Node(y,t @  [Node(x,[])])::stack)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; stack |&gt; List.head<br />&#160;&#160;&#160;&#160;loop tokens []</div>

