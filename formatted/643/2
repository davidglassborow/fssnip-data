<h2><a name="Ninety-Nine-F-Problems-Problems-1-10-Lists" class="anchor" href="#Ninety-Nine-F-Problems-Problems-1-10-Lists">Ninety-Nine F# Problems - Problems 1 - 10 - Lists</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// These are F# solutions of Ninety-Nine Haskell Problems </span>
<span class="c">/// (http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems), </span>
<span class="c">/// which are themselves translations of Ninety-Nine Lisp Problems</span>
<span class="c">/// (http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html)</span>
<span class="c">/// and Ninety-Nine Prolog Problems</span>
<span class="c">/// (https://sites.google.com/site/prologsite/prolog-problems).</span>
<span class="c">///</span>
<span class="c">/// If you would like to contribute a solution or fix any bugs, send </span>
<span class="c">/// an email to paks at kitiara dot org with the subject &quot;99 F# problems&quot;. </span>
<span class="c">/// I&#39;ll try to update the problem as soon as possible.</span>
<span class="c">///</span>
<span class="c">/// The problems have different levels of difficulty. Those marked with a single asterisk (*) </span>
<span class="c">/// are easy. If you have successfully solved the preceeding problems you should be able to </span>
<span class="c">/// solve them within a few (say 15) minutes. Problems marked with two asterisks (**) are of </span>
<span class="c">/// intermediate difficulty. If you are a skilled F# programmer it shouldn&#39;t take you more than </span>
<span class="c">/// 30-90 minutes to solve them. Problems marked with three asterisks (***) are more difficult. </span>
<span class="c">/// You may need more time (i.e. a few hours or more) to find a good solution</span>
<span class="c">///</span>
<span class="c">/// Though the problems number from 1 to 99, there are some gaps and some additions marked with </span>
<span class="c">/// letters. There are actually only 88 problems.</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-1-Find-the-last-element-of-a-list" class="anchor" href="#Problem-1-Find-the-last-element-of-a-list">(*) Problem 1 : Find the last element of a list.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Example in F#: </span>
<span class="c">/// &gt; myLast [1; 2; 3; 4];;</span>
<span class="c">/// val it : int = 4</span>
<span class="c">/// &gt; myLast [&#39;x&#39;;&#39;y&#39;;&#39;z&#39;];;</span>
<span class="c">/// val it : char = &#39;z&#39;</span>

<span id="fst1" onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1, document.getElementById('fst1'))" class="omitted">(Solution 1)</span>

<span id="fst2" onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2, document.getElementById('fst2'))" class="omitted">(Solution 2)</span>

<span id="fst3" onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3, document.getElementById('fst3'))" class="omitted">(Solution 3)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-2-Find-the-last-but-one-element-of-a-list" class="anchor" href="#Problem-2-Find-the-last-but-one-element-of-a-list">(*) Problem 2 : Find the last but one element of a list.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// (Note that the Lisp transcription of this problem is incorrect.) </span>
<span class="c">///</span>
<span class="c">/// Example in F#: </span>
<span class="c">/// myButLast [1; 2; 3; 4];;</span>
<span class="c">/// val it : int = 3</span>
<span class="c">/// &gt; myButLast [&#39;a&#39;..&#39;z&#39;];;</span>
<span class="c">/// val it : char = &#39;y&#39;</span>

<span id="fst4" onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4, document.getElementById('fst4'))" class="omitted">(Solution 1)</span>

<span id="fst5" onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5, document.getElementById('fst5'))" class="omitted">(Solution 2)</span>

<span id="fst6" onmouseout="hideTip(event, 'fs6', 6)" onmouseover="showTip(event, 'fs6', 6, document.getElementById('fst6'))" class="omitted">(Solution 3)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-3-Find-the-K-th-element-of-a-list-The-first-element-in-the-list-is-number-1" class="anchor" href="#Problem-3-Find-the-K-th-element-of-a-list-The-first-element-in-the-list-is-number-1">(*) Problem 3 : Find the K'th element of a list. The first element in the list is number 1.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Example: </span>
<span class="c">/// * (element-at &#39;(a b c d e) 3)</span>
<span class="c">/// c</span>
<span class="c">/// </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// &gt; elementAt [1; 2; 3] 2;;</span>
<span class="c">/// val it : int = 2</span>
<span class="c">/// &gt; elementAt (List.ofSeq &quot;fsharp&quot;) 5;;</span>
<span class="c">/// val it : char = &#39;r&#39;</span>

<span id="fst7" onmouseout="hideTip(event, 'fs7', 7)" onmouseover="showTip(event, 'fs7', 7, document.getElementById('fst7'))" class="omitted">(Solution 1)</span>

<span id="fst8" onmouseout="hideTip(event, 'fs8', 8)" onmouseover="showTip(event, 'fs8', 8, document.getElementById('fst8'))" class="omitted">(Solution 2)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-4-Find-the-number-of-elements-of-a-list" class="anchor" href="#Problem-4-Find-the-number-of-elements-of-a-list">(*) Problem 4 : Find the number of elements of a list.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; myLength [123; 456; 789];;</span>
<span class="c">/// val it : int = 3</span>
<span class="c">/// &gt; myLength &lt;| List.ofSeq &quot;Hello, world!&quot;</span>
<span class="c">/// val it : int = 13 </span>

<span id="fst9" onmouseout="hideTip(event, 'fs9', 9)" onmouseover="showTip(event, 'fs9', 9, document.getElementById('fst9'))" class="omitted">(Solution 1)</span>

<span id="fst10" onmouseout="hideTip(event, 'fs10', 10)" onmouseover="showTip(event, 'fs10', 10, document.getElementById('fst10'))" class="omitted">(Solution 2)</span>

<span id="fst11" onmouseout="hideTip(event, 'fs11', 11)" onmouseover="showTip(event, 'fs11', 11, document.getElementById('fst11'))" class="omitted">(Solution 3)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-5-Reverse-a-list" class="anchor" href="#Problem-5-Reverse-a-list">(*) Problem 5 : Reverse a list.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Example in F#: </span>
<span class="c">///</span>
<span class="c">/// &gt; reverse &lt;| List.ofSeq (&quot;A man, a plan, a canal, panama!&quot;)</span>
<span class="c">/// val it : char list =</span>
<span class="c">///  [&#39;!&#39;; &#39;a&#39;; &#39;m&#39;; &#39;a&#39;; &#39;n&#39;; &#39;a&#39;; &#39;p&#39;; &#39; &#39;; &#39;,&#39;; &#39;l&#39;; &#39;a&#39;; &#39;n&#39;; &#39;a&#39;; &#39;c&#39;; &#39; &#39;;</span>
<span class="c">///   &#39;a&#39;; &#39; &#39;; &#39;,&#39;; &#39;n&#39;; &#39;a&#39;; &#39;l&#39;; &#39;p&#39;; &#39; &#39;; &#39;a&#39;; &#39; &#39;; &#39;,&#39;; &#39;n&#39;; &#39;a&#39;; &#39;m&#39;; &#39; &#39;;</span>
<span class="c">///   &#39;A&#39;]</span>
<span class="c">/// &gt; reverse [1,2,3,4];;</span>
<span class="c">/// val it : int list = [4; 3; 2; 1]</span>

<span id="fst12" onmouseout="hideTip(event, 'fs12', 12)" onmouseover="showTip(event, 'fs12', 12, document.getElementById('fst12'))" class="omitted">(Solution 1)</span>

<span id="fst13" onmouseout="hideTip(event, 'fs13', 13)" onmouseover="showTip(event, 'fs13', 13, document.getElementById('fst13'))" class="omitted">(Solution 2)</span>

<span id="fst14" onmouseout="hideTip(event, 'fs14', 14)" onmouseover="showTip(event, 'fs14', 14, document.getElementById('fst14'))" class="omitted">(Solution 3)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-6-Find-out-whether-a-list-is-a-palindrome" class="anchor" href="#Problem-6-Find-out-whether-a-list-is-a-palindrome">(*) Problem 6 : Find out whether a list is a palindrome.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// A palindrome can be read forward or backward; e.g. (x a m a x).</span>
<span class="c">/// </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// &gt; isPalindrome [1;2;3];;</span>
<span class="c">/// val it : bool = false</span>
<span class="c">/// &gt; isPalindrome &lt;| List.ofSeq &quot;madamimadam&quot;;;</span>
<span class="c">/// val it : bool = true</span>
<span class="c">/// &gt; isPalindrome [1;2;4;8;16;8;4;2;1];;</span>
<span class="c">/// val it : bool = true</span>

<span id="fst15" onmouseout="hideTip(event, 'fs15', 15)" onmouseover="showTip(event, 'fs15', 15, document.getElementById('fst15'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-7-Flatten-a-nested-list-structure" class="anchor" href="#Problem-7-Flatten-a-nested-list-structure">(<em></em>) Problem 7 : Flatten a nested list structure.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Transform a list, possibly holding lists as elements into a `flat&#39; list by replacing each </span>
<span class="c">/// list with its elements (recursively).</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (my-flatten &#39;(a (b (c d) e)))</span>
<span class="c">/// (A B C D E)</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="k">type</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs16', 16)" onmouseover="showTip(event, 'fs16', 16)" class="t">NestedList</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs17', 17)" onmouseover="showTip(event, 'fs17', 17)" class="p">List</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">a</span> <span onmouseout="hideTip(event, 'fs16', 18)" onmouseover="showTip(event, 'fs16', 18)" class="t">NestedList</span> <span onmouseout="hideTip(event, 'fs18', 19)" onmouseover="showTip(event, 'fs18', 19)" class="t">list</span> | <span onmouseout="hideTip(event, 'fs19', 20)" onmouseover="showTip(event, 'fs19', 20)" class="p">Elem</span> <span class="k">of</span> <span class="o">&#39;</span><span class="i">a</span>
<span class="c">///</span>
<span class="c">/// &gt; flatten (Elem 5);;</span>
<span class="c">/// val it : int list = [5]</span>
<span class="c">/// &gt; flatten (List [Elem 1; List [Elem 2; List [Elem 3; Elem 4]; Elem 5]]);;</span>
<span class="c">/// val it : int list = [1;2;3;4;5]</span>
<span class="c">/// &gt; flatten (List [] : int NestedList);;</span>
<span class="c">/// val it : int list = []</span>

<span id="fst20" onmouseout="hideTip(event, 'fs20', 21)" onmouseover="showTip(event, 'fs20', 21, document.getElementById('fst20'))" class="omitted">(Solution 1)</span>

<span id="fst21" onmouseout="hideTip(event, 'fs21', 22)" onmouseover="showTip(event, 'fs21', 22, document.getElementById('fst21'))" class="omitted">(Solution 2)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-8-Eliminate-consecutive-duplicates-of-list-elements" class="anchor" href="#Problem-8-Eliminate-consecutive-duplicates-of-list-elements">(<em></em>) Problem 8 : Eliminate consecutive duplicates of list elements.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// If a list contains repeated elements they should be replaced with a single copy of the </span>
<span class="c">/// element. The order of the elements should not be changed.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (compress &#39;(a a a a b c c a a d e e e e))</span>
<span class="c">/// (A B C A D E)</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; compress [&quot;a&quot;;&quot;a&quot;;&quot;a&quot;;&quot;a&quot;;&quot;b&quot;;&quot;c&quot;;&quot;c&quot;;&quot;a&quot;;&quot;a&quot;;&quot;d&quot;;&quot;e&quot;;&quot;e&quot;;&quot;e&quot;;&quot;e&quot;];;</span>
<span class="c">/// val it : string list = [&quot;a&quot;;&quot;b&quot;;&quot;c&quot;;&quot;a&quot;;&quot;d&quot;;&quot;e&quot;]</span>

<span id="fst22" onmouseout="hideTip(event, 'fs22', 23)" onmouseover="showTip(event, 'fs22', 23, document.getElementById('fst22'))" class="omitted">(Solution 1)</span>

<span id="fst23" onmouseout="hideTip(event, 'fs23', 24)" onmouseover="showTip(event, 'fs23', 24, document.getElementById('fst23'))" class="omitted">(Solution 2)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-9-Pack-consecutive-duplicates-of-list-elements-into-sublists" class="anchor" href="#Problem-9-Pack-consecutive-duplicates-of-list-elements-into-sublists">(<em></em>) Problem 9 : Pack consecutive duplicates of list elements into sublists.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// If a list contains repeated elements they should be placed </span>
<span class="c">/// in separate sublists.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (pack &#39;(a a a a b c c a a d e e e e))</span>
<span class="c">/// ((A A A A) (B) (C C) (A A) (D) (E E E E))</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// &gt; pack [&#39;a&#39;; &#39;a&#39;; &#39;a&#39;; &#39;a&#39;; &#39;b&#39;; &#39;c&#39;; &#39;c&#39;; &#39;a&#39;; </span>
<span class="c">///         &#39;a&#39;; &#39;d&#39;; &#39;e&#39;; &#39;e&#39;; &#39;e&#39;; &#39;e&#39;]</span>
<span class="c">/// val it : char list list =</span>
<span class="c">///  [[&#39;a&#39;; &#39;a&#39;; &#39;a&#39;; &#39;a&#39;]; [&#39;b&#39;]; [&#39;c&#39;; &#39;c&#39;]; [&#39;a&#39;; &#39;a&#39;]; [&#39;d&#39;];</span>
<span class="c">///   [&#39;e&#39;; &#39;e&#39;; &#39;e&#39;; &#39;e&#39;]]</span>

<span id="fst24" onmouseout="hideTip(event, 'fs24', 25)" onmouseover="showTip(event, 'fs24', 25, document.getElementById('fst24'))" class="omitted">(Solution)</span>
</code></pre></td>
</tr>
</table>
<h2><a name="Problem-10-Run-length-encoding-of-a-list" class="anchor" href="#Problem-10-Run-length-encoding-of-a-list">(*) Problem 10 : Run-length encoding of a list.</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Use the result of problem P09 to implement the so-called run-length </span>
<span class="c">/// encoding data compression method. Consecutive duplicates of elements </span>
<span class="c">/// are encoded as lists (N E) where N is the number of duplicates of the element E.</span>
<span class="c">///  </span>
<span class="c">/// Example: </span>
<span class="c">/// * (encode &#39;(a a a a b c c a a d e e e e))</span>
<span class="c">/// ((4 A) (1 B) (2 C) (2 A) (1 D)(4 E))</span>
<span class="c">///  </span>
<span class="c">/// Example in F#: </span>
<span class="c">/// </span>
<span class="c">/// encode &lt;| List.ofSeq &quot;aaaabccaadeeee&quot;</span>
<span class="c">/// val it : (int * char) list =</span>
<span class="c">///   [(4,&#39;a&#39;);(1,&#39;b&#39;);(2,&#39;c&#39;);(2,&#39;a&#39;);(1,&#39;d&#39;);(4,&#39;e&#39;)]</span>

<span id="fst25" onmouseout="hideTip(event, 'fs25', 26)" onmouseover="showTip(event, 'fs25', 26, document.getElementById('fst25'))" class="omitted">(Solutions 1)</span>

<span id="fst26" onmouseout="hideTip(event, 'fs26', 27)" onmouseover="showTip(event, 'fs26', 27, document.getElementById('fst26'))" class="omitted">(Solutions 2)</span>

<span id="fst27" onmouseout="hideTip(event, 'fs27', 28)" onmouseover="showTip(event, 'fs27', 28, document.getElementById('fst27'))" class="omitted">(Solutions 3)</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">// Solution using recursion<br />let rec myLast xs = <br />&#160;&#160;&#160;&#160;match xs with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; failwith &quot;empty list you fool!&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [x] -&gt; x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _::xs -&gt; myLast xs</div>
<div class="tip" id="fs2">// Solution using higher-order functions<br />let myLast&#39; xs = xs |&gt; List.rev |&gt; List.head</div>
<div class="tip" id="fs3">// ignore the acumulator using reduce<br />let myLast&#39;&#39; xs = List.reduce(fun _ x -&gt; x) xs</div>
<div class="tip" id="fs4">// Solution with pattern matching<br />let rec myButLast = function<br />&#160;&#160;&#160;&#160;| [] -&gt; failwith &quot;empty list you fool!&quot;<br />&#160;&#160;&#160;&#160;| [x] -&gt; failwith &quot;singleton list you fool!&quot;<br />&#160;&#160;&#160;&#160;| [x;_] -&gt; x<br />&#160;&#160;&#160;&#160;| _::xs -&gt; myButLast xs</div>
<div class="tip" id="fs5">let myButLast&#39; xs = xs |&gt; List.rev |&gt; List.tail |&gt; List.head</div>
<div class="tip" id="fs6">let myButLast&#39;&#39; xs = <br />&#160;&#160;&#160;&#160;let flip f a b = f b a<br />&#160;&#160;&#160;&#160;xs |&gt; List.rev |&gt; flip List.nth 1</div>
<div class="tip" id="fs7">// List.nth is zero based<br />let elementAt xs n = List.nth xs (n - 1)</div>
<div class="tip" id="fs8">// Recursive solution with pattern matching<br />let rec elementAt&#39; xs n = <br />&#160;&#160;&#160;&#160;match xs,n with<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [],_   -&gt; failwith &quot;empty list you fool!&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| x::_,1 -&gt; x<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _::xs,n -&gt; elementAt&#39; xs (n - 1)</div>
<div class="tip" id="fs9">// Solution using the library method<br />let myLength = List.length</div>
<div class="tip" id="fs10">// replace the elemt with 1 and sum all the ones<br />let myLength&#39; xs = xs |&gt; List.sumBy(fun _ -&gt; 1)</div>
<div class="tip" id="fs11">// Solution using tail-recursion<br />let myLength&#39;&#39; xs =<br />&#160;&#160;&#160;&#160;let rec length acc = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; acc<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| _::xs  -&gt; length (acc+1) xs<br />&#160;&#160;&#160;&#160;length 0 xs</div>
<div class="tip" id="fs12">// Using tail-recursion<br />let reverse xs = <br />&#160;&#160;&#160;&#160;let rec rev acc = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; acc<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| x::xs -&gt; rev (x::acc) xs<br />&#160;&#160;&#160;&#160;rev [] xs</div>
<div class="tip" id="fs13">let reverse&#39; xs = List.fold(fun acc x -&gt; x::acc) [] xs</div>
<div class="tip" id="fs14">let reverse&#39;&#39; = List.rev</div>
<div class="tip" id="fs15">// A list is a palindrome is the list is equal to its reverse<br />let isPalindrome xs = xs = List.rev xs</div>
<div class="tip" id="fs16">type &#39;a NestedList =<br />&#160;&#160;| List of &#39;a NestedList list<br />&#160;&#160;| Elem of &#39;a<br /><br />Full name: Script.NestedList&lt;_&gt;<br /><em><br /><br />&#160;Transform a list, possibly holding lists as elements into a `flat&#39; list by replacing each <br />&#160;list with its elements (recursively).<br />&#160;&#160;<br />&#160;Example: <br />&#160;* (my-flatten &#39;(a (b (c d) e)))<br />&#160;(A B C D E)<br />&#160;&#160;<br />&#160;Example in F#: <br />&#160;</em></div>
<div class="tip" id="fs17">Multiple items<br />union case NestedList.List: &#39;a NestedList list -&gt; &#39;a NestedList<br /><br />--------------------<br />module List<br /><br />from Microsoft.FSharp.Collections<br /><br />--------------------<br />type List&lt;&#39;T&gt; =<br />&#160;&#160;| ( [] )<br />&#160;&#160;| ( :: ) of Head: &#39;T * Tail: &#39;T list<br />&#160;&#160;interface IEnumerable<br />&#160;&#160;interface IEnumerable&lt;&#39;T&gt;<br />&#160;&#160;member Head : &#39;T<br />&#160;&#160;member IsEmpty : bool<br />&#160;&#160;member Item : index:int -&gt; &#39;T with get<br />&#160;&#160;member Length : int<br />&#160;&#160;member Tail : &#39;T list<br />&#160;&#160;static member Cons : head:&#39;T * tail:&#39;T list -&gt; &#39;T list<br />&#160;&#160;static member Empty : &#39;T list<br /><br />Full name: Microsoft.FSharp.Collections.List&lt;_&gt;</div>
<div class="tip" id="fs18">type &#39;T list = List&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.list&lt;_&gt;</div>
<div class="tip" id="fs19">union case NestedList.Elem: &#39;a -&gt; &#39;a NestedList</div>
<div class="tip" id="fs20">let flatten ls = <br />&#160;&#160;&#160;&#160;let rec loop acc = function <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Elem x -&gt; x::acc<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| List xs -&gt; List.foldBack(fun x acc -&gt; loop acc x) xs acc<br />&#160;&#160;&#160;&#160;loop [] ls</div>
<div class="tip" id="fs21">#nowarn &quot;40&quot;<br />let flatten&#39; x =<br />&#160;&#160;&#160;&#160;let rec loop = List.collect(function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| Elem x -&gt; [x]<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| List xs -&gt; loop xs)<br />&#160;&#160;&#160;&#160;loop [x]</div>
<div class="tip" id="fs22">let compress xs = List.foldBack(fun x acc -&gt; if List.isEmpty acc then [x] elif x = List.head acc then acc else x::acc) xs []</div>
<div class="tip" id="fs23">let compress&#39; = function<br />&#160;&#160;&#160;&#160;| [] -&gt; []<br />&#160;&#160;&#160;&#160;| x::xs -&gt; List.fold(fun acc x -&gt; if x = List.head acc then acc else x::acc) [x] xs |&gt; List.rev</div>
<div class="tip" id="fs24">let pack xs = <br />&#160;&#160;&#160;&#160;let collect x = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (y::xs)::xss when x = y -&gt; (x::y::xs)::xss<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| xss -&gt; [x]::xss<br />&#160;&#160;&#160;&#160;List.foldBack collect xs []</div>
<div class="tip" id="fs25">let encode xs = xs |&gt; pack |&gt; List.map (Seq.countBy id &gt;&gt; Seq.head &gt;&gt; fun(a,b)-&gt; b,a)</div>
<div class="tip" id="fs26">let encode&#39; xs = xs |&gt; pack |&gt; List.map(fun xs -&gt; List.length xs, List.head xs)</div>
<div class="tip" id="fs27">let encode&#39;&#39; xs = <br />&#160;&#160;&#160;&#160;let collect x = function<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| [] -&gt; [(1, x)]<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;| (n,y)::xs as acc-&gt; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if x = y then<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(n+1, y)::xs<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(1,x)::acc<br />&#160;&#160;&#160;&#160;List.foldBack collect xs []</div>

