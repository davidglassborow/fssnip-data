<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
<span class="l">37: </span>
<span class="l">38: </span>
<span class="l">39: </span>
<span class="l">40: </span>
<span class="l">41: </span>
<span class="l">42: </span>
<span class="l">43: </span>
<span class="l">44: </span>
<span class="l">45: </span>
<span class="l">46: </span>
<span class="l">47: </span>
<span class="l">48: </span>
<span class="l">49: </span>
<span class="l">50: </span>
<span class="l">51: </span>
<span class="l">52: </span>
<span class="l">53: </span>
<span class="l">54: </span>
<span class="l">55: </span>
<span class="l">56: </span>
<span class="l">57: </span>
<span class="l">58: </span>
<span class="l">59: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// For a function, f, define fix(f) as the &quot;fixed point&quot; of f:</span>
<span class="c">/// A value, z, such that f(z) = z.</span>
<span class="c">///</span>
<span class="c">/// Substituting fix(f) for z, gives f(fix(f)) = fix(f), which</span>
<span class="c">/// we flip to fix(f) = f(fix(f)).</span>
<span class="c">///</span>
<span class="c">/// This fixed point, z, is itself a function that takes an</span>
<span class="c">/// argument, x. We have to make x explicit in the definition</span>
<span class="c">/// in order to avoid infinite recursion when fix is called.</span>
<span class="c">///</span>
<span class="c">/// (In a typed language like F#, fix has to be defined recursively.</span>
<span class="c">/// However, in an untyped system, such as the pure lambda calculus,</span>
<span class="c">/// fix can be defined without recursion. That version of fix is</span>
<span class="c">/// called the &quot;Y&quot; combinator.)</span>
<span class="c">///</span>
<span class="c">/// https://en.wikipedia.org/wiki/Fixed-point_combinator</span>
<span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">fix</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="f">f</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="f">z</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">x</span> <span class="o">=</span> (<span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="f">f</span> (<span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="f">fix</span> <span onmouseout="hideTip(event, 'fs2', 7)" onmouseover="showTip(event, 'fs2', 7)" class="f">f</span>)) <span onmouseout="hideTip(event, 'fs4', 8)" onmouseover="showTip(event, 'fs4', 8)" class="i">x</span>
    <span onmouseout="hideTip(event, 'fs3', 9)" onmouseover="showTip(event, 'fs3', 9)" class="f">z</span>

<span class="c">/// As an example, we create a factorial &quot;generator&quot;, which, when</span>
<span class="c">/// given a function that implements factorial correctly for inputs</span>
<span class="c">/// up to some number, n-1, answers a slightly better function that</span>
<span class="c">/// implements factorial correctly for n as well. Note that this</span>
<span class="c">/// function is not recursive.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="f">factorialGen</span> (<span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="f">factorialWeak</span> <span class="o">:</span> <span onmouseout="hideTip(event, 'fs7', 12)" onmouseover="showTip(event, 'fs7', 12)" class="t">int</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs7', 13)" onmouseover="showTip(event, 'fs7', 13)" class="t">int</span>) <span class="o">:</span> (<span onmouseout="hideTip(event, 'fs7', 14)" onmouseover="showTip(event, 'fs7', 14)" class="t">int</span> <span class="k">-&gt;</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="t">int</span>) <span class="o">=</span>
    <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs8', 16)" onmouseover="showTip(event, 'fs8', 16)" class="i">n</span> <span class="k">-&gt;</span>
        <span class="k">if</span> <span onmouseout="hideTip(event, 'fs8', 17)" onmouseover="showTip(event, 'fs8', 17)" class="i">n</span> <span class="o">=</span> <span class="n">0</span> <span class="k">then</span> <span class="n">1</span>
        <span class="k">else</span> <span onmouseout="hideTip(event, 'fs8', 18)" onmouseover="showTip(event, 'fs8', 18)" class="i">n</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs6', 19)" onmouseover="showTip(event, 'fs6', 19)" class="f">factorialWeak</span> (<span onmouseout="hideTip(event, 'fs8', 20)" onmouseover="showTip(event, 'fs8', 20)" class="i">n</span> <span class="o">-</span> <span class="n">1</span>)

<span class="c">/// We could feed such a generated function back into the generator</span>
<span class="c">/// to produce an even better version that works for all numbers</span>
<span class="c">/// up to n + 1. Instead, applying fix to the generator itself</span>
<span class="c">/// returns the generator&#39;s fixed point, as though we had iterated</span>
<span class="c">/// the feedback infinitely. The result is a function that implements</span>
<span class="c">/// factorial correctly for *all* inputs n.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs9', 21)" onmouseover="showTip(event, 'fs9', 21)" class="f">factorial</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 22)" onmouseover="showTip(event, 'fs1', 22)" class="f">fix</span> <span onmouseout="hideTip(event, 'fs5', 23)" onmouseover="showTip(event, 'fs5', 23)" class="f">factorialGen</span>

<span class="c">/// Another example: Fibonacci numbers. Again, fibGen itself isn&#39;t</span>
<span class="c">/// recursive. It only behaves recursively once we apply fix.</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs10', 24)" onmouseover="showTip(event, 'fs10', 24)" class="f">fib</span> <span class="o">=</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 25)" onmouseover="showTip(event, 'fs11', 25)" class="f">fibGen</span> <span onmouseout="hideTip(event, 'fs12', 26)" onmouseover="showTip(event, 'fs12', 26)" class="f">fibWeak</span> <span class="o">=</span>
        <span class="k">fun</span> <span onmouseout="hideTip(event, 'fs8', 27)" onmouseover="showTip(event, 'fs8', 27)" class="i">n</span> <span class="k">-&gt;</span>
            <span class="k">if</span> <span onmouseout="hideTip(event, 'fs8', 28)" onmouseover="showTip(event, 'fs8', 28)" class="i">n</span> <span class="o">&lt;=</span> <span class="n">1</span> <span class="k">then</span> <span class="n">1</span>
            <span class="k">else</span> <span onmouseout="hideTip(event, 'fs12', 29)" onmouseover="showTip(event, 'fs12', 29)" class="f">fibWeak</span> (<span onmouseout="hideTip(event, 'fs8', 30)" onmouseover="showTip(event, 'fs8', 30)" class="i">n</span> <span class="o">-</span> <span class="n">1</span>) <span class="o">+</span> <span onmouseout="hideTip(event, 'fs12', 31)" onmouseover="showTip(event, 'fs12', 31)" class="f">fibWeak</span> (<span onmouseout="hideTip(event, 'fs8', 32)" onmouseover="showTip(event, 'fs8', 32)" class="i">n</span> <span class="o">-</span> <span class="n">2</span>)
    <span onmouseout="hideTip(event, 'fs1', 33)" onmouseover="showTip(event, 'fs1', 33)" class="f">fix</span> <span onmouseout="hideTip(event, 'fs11', 34)" onmouseover="showTip(event, 'fs11', 34)" class="f">fibGen</span>

[&lt;<span onmouseout="hideTip(event, 'fs13', 35)" onmouseover="showTip(event, 'fs13', 35)" class="t">EntryPoint</span>&gt;]
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 36)" onmouseover="showTip(event, 'fs14', 36)" class="f">main</span> <span onmouseout="hideTip(event, 'fs15', 37)" onmouseover="showTip(event, 'fs15', 37)" class="i">argv</span> <span class="o">=</span>

    <span onmouseout="hideTip(event, 'fs16', 38)" onmouseover="showTip(event, 'fs16', 38)" class="f">printfn</span> <span class="s">&quot;&quot;</span>
    <span class="k">for</span> <span onmouseout="hideTip(event, 'fs17', 39)" onmouseover="showTip(event, 'fs17', 39)" class="i">i</span> <span class="o">=</span> <span class="n">0</span> <span class="k">to</span> <span class="n">10</span> <span class="k">do</span>
        <span onmouseout="hideTip(event, 'fs16', 40)" onmouseover="showTip(event, 'fs16', 40)" class="f">printfn</span> <span class="s">&quot;</span><span class="pf">%A</span><span class="s">!: </span><span class="pf">%A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs17', 41)" onmouseover="showTip(event, 'fs17', 41)" class="i">i</span> (<span onmouseout="hideTip(event, 'fs9', 42)" onmouseover="showTip(event, 'fs9', 42)" class="f">factorial</span> <span onmouseout="hideTip(event, 'fs17', 43)" onmouseover="showTip(event, 'fs17', 43)" class="i">i</span>)

    <span onmouseout="hideTip(event, 'fs16', 44)" onmouseover="showTip(event, 'fs16', 44)" class="f">printfn</span> <span class="s">&quot;&quot;</span>
    <span class="k">for</span> <span onmouseout="hideTip(event, 'fs17', 45)" onmouseover="showTip(event, 'fs17', 45)" class="i">i</span> <span class="o">=</span> <span class="n">0</span> <span class="k">to</span> <span class="n">10</span> <span class="k">do</span>
        <span onmouseout="hideTip(event, 'fs16', 46)" onmouseover="showTip(event, 'fs16', 46)" class="f">printfn</span> <span class="s">&quot;fib(</span><span class="pf">%A</span><span class="s">): </span><span class="pf">%A</span><span class="s">&quot;</span> <span onmouseout="hideTip(event, 'fs17', 47)" onmouseover="showTip(event, 'fs17', 47)" class="i">i</span> (<span onmouseout="hideTip(event, 'fs10', 48)" onmouseover="showTip(event, 'fs10', 48)" class="f">fib</span> <span onmouseout="hideTip(event, 'fs17', 49)" onmouseover="showTip(event, 'fs17', 49)" class="i">i</span>)

    <span class="n">0</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val fix : f:((&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39;b) -&gt; (&#39;a -&gt; &#39;b)<br /><br />Full name: Script.fix<br /><em><br /><br />&#160;For a function, f, define fix(f) as the &quot;fixed point&quot; of f:<br />&#160;A value, z, such that f(z) = z.<br /><br />&#160;Substituting fix(f) for z, gives f(fix(f)) = fix(f), which<br />&#160;we flip to fix(f) = f(fix(f)).<br /><br />&#160;This fixed point, z, is itself a function that takes an<br />&#160;argument, x. We have to make x explicit in the definition<br />&#160;in order to avoid infinite recursion when fix is called.<br /><br />&#160;(In a typed language like F#, fix has to be defined recursively.<br />&#160;However, in an untyped system, such as the pure lambda calculus,<br />&#160;fix can be defined without recursion. That version of fix is<br />&#160;called the &quot;Y&quot; combinator.)<br /><br />&#160;https://en.wikipedia.org/wiki/Fixed-point_combinator</em></div>
<div class="tip" id="fs2">val f : ((&#39;a -&gt; &#39;b) -&gt; &#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs3">val z : (&#39;a -&gt; &#39;b)</div>
<div class="tip" id="fs4">val x : &#39;a</div>
<div class="tip" id="fs5">val factorialGen : factorialWeak:(int -&gt; int) -&gt; n:int -&gt; int<br /><br />Full name: Script.factorialGen<br /><em><br /><br />&#160;As an example, we create a factorial &quot;generator&quot;, which, when<br />&#160;given a function that implements factorial correctly for inputs<br />&#160;up to some number, n-1, answers a slightly better function that<br />&#160;implements factorial correctly for n as well. Note that this<br />&#160;function is not recursive.</em></div>
<div class="tip" id="fs6">val factorialWeak : (int -&gt; int)</div>
<div class="tip" id="fs7">Multiple items<br />val int : value:&#39;T -&gt; int (requires member op_Explicit)<br /><br />Full name: Microsoft.FSharp.Core.Operators.int<br /><br />--------------------<br />type int = int32<br /><br />Full name: Microsoft.FSharp.Core.int<br /><br />--------------------<br />type int&lt;&#39;Measure&gt; = int<br /><br />Full name: Microsoft.FSharp.Core.int&lt;_&gt;</div>
<div class="tip" id="fs8">val n : int</div>
<div class="tip" id="fs9">val factorial : (int -&gt; int)<br /><br />Full name: Script.factorial<br /><em><br /><br />&#160;We could feed such a generated function back into the generator<br />&#160;to produce an even better version that works for all numbers<br />&#160;up to n + 1. Instead, applying fix to the generator itself<br />&#160;returns the generator&#39;s fixed point, as though we had iterated<br />&#160;the feedback infinitely. The result is a function that implements<br />&#160;factorial correctly for *all* inputs n.</em></div>
<div class="tip" id="fs10">val fib : (int -&gt; int)<br /><br />Full name: Script.fib<br /><em><br /><br />&#160;Another example: Fibonacci numbers. Again, fibGen itself isn&#39;t<br />&#160;recursive. It only behaves recursively once we apply fix.</em></div>
<div class="tip" id="fs11">val fibGen : ((int -&gt; int) -&gt; int -&gt; int)</div>
<div class="tip" id="fs12">val fibWeak : (int -&gt; int)</div>
<div class="tip" id="fs13">Multiple items<br />type EntryPointAttribute =<br />&#160;&#160;inherit Attribute<br />&#160;&#160;new : unit -&gt; EntryPointAttribute<br /><br />Full name: Microsoft.FSharp.Core.EntryPointAttribute<br /><br />--------------------<br />new : unit -&gt; EntryPointAttribute</div>
<div class="tip" id="fs14">val main : argv:string [] -&gt; int<br /><br />Full name: Script.main</div>
<div class="tip" id="fs15">val argv : string []</div>
<div class="tip" id="fs16">val printfn : format:Printf.TextWriterFormat&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn</div>
<div class="tip" id="fs17">val i : int</div>

