<h2><a name="Recursive-Fibonacci" class="anchor" href="#Recursive-Fibonacci">Recursive Fibonacci</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
<span class="l">8: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">  <span class="c">/// Inefficient recursive implementation of Fibonacci numbers.</span>
  <span class="c">/// </span>
  <span class="c">/// The problem is that &#39;fibs 3&#39; will call &#39;fibs 1&#39; recursively</span>
  <span class="c">/// three times. To solve this, we&#39;d like to keep the result of</span>
  <span class="c">/// previously calculated function calls using dynamic programming.</span>
  <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="f">fibs</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="i">n</span> <span class="o">=</span> 
    <span class="k">if</span> <span onmouseout="hideTip(event, 'fs2', 3)" onmouseover="showTip(event, 'fs2', 3)" class="i">n</span> <span class="o">&lt;</span> <span class="n">1</span> <span class="k">then</span> <span class="n">1</span> <span class="k">else</span>
    (<span onmouseout="hideTip(event, 'fs1', 4)" onmouseover="showTip(event, 'fs1', 4)" class="f">fibs</span> (<span onmouseout="hideTip(event, 'fs2', 5)" onmouseover="showTip(event, 'fs2', 5)" class="i">n</span> <span class="o">-</span> <span class="n">1</span>)) <span class="o">+</span> (<span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="f">fibs</span> (<span onmouseout="hideTip(event, 'fs2', 7)" onmouseover="showTip(event, 'fs2', 7)" class="i">n</span> <span class="o">-</span> <span class="n">2</span>))
</code></pre></td>
</tr>
</table>
<h2><a name="Reusable-memoization-function" class="anchor" href="#Reusable-memoization-function">Reusable memoization function</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">    <span class="k">open</span> <span onmouseout="hideTip(event, 'fs3', 8)" onmouseover="showTip(event, 'fs3', 8)" class="i">System</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs4', 9)" onmouseover="showTip(event, 'fs4', 9)" class="i">Collections</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 10)" onmouseover="showTip(event, 'fs5', 10)" class="i">Generic</span>
    
    <span class="c">/// The function creates a function that calls the argument &#39;f&#39;</span>
    <span class="c">/// only once and stores the result in a mutable dictionary (cache)</span>
    <span class="c">/// Repeated calls to the resulting function return cached values.</span>
    <span class="k">let</span> <span onmouseout="hideTip(event, 'fs6', 11)" onmouseover="showTip(event, 'fs6', 11)" class="f">memoize</span> <span onmouseout="hideTip(event, 'fs7', 12)" onmouseover="showTip(event, 'fs7', 12)" class="f">f</span> <span class="o">=</span>    
      <span class="c">// Create (mutable) cache that is used for storing results of </span>
      <span class="c">// for function arguments that were already calculated.</span>
      <span class="k">let</span> <span onmouseout="hideTip(event, 'fs8', 13)" onmouseover="showTip(event, 'fs8', 13)" class="i">cache</span> <span class="o">=</span> <span class="k">new</span> <span onmouseout="hideTip(event, 'fs9', 14)" onmouseover="showTip(event, 'fs9', 14)" class="t">Dictionary</span><span class="o">&lt;</span>_, _<span class="o">&gt;</span>()
      (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs10', 15)" onmouseover="showTip(event, 'fs10', 15)" class="i">x</span> <span class="k">-&gt;</span>
          <span class="c">// The returned function first performs a cache lookup</span>
          <span class="k">let</span> <span onmouseout="hideTip(event, 'fs11', 16)" onmouseover="showTip(event, 'fs11', 16)" class="i">succ</span>, <span onmouseout="hideTip(event, 'fs12', 17)" onmouseover="showTip(event, 'fs12', 17)" class="i">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 18)" onmouseover="showTip(event, 'fs8', 18)" class="i">cache</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs13', 19)" onmouseover="showTip(event, 'fs13', 19)" class="f">TryGetValue</span>(<span onmouseout="hideTip(event, 'fs10', 20)" onmouseover="showTip(event, 'fs10', 20)" class="i">x</span>)
          <span class="k">if</span> <span onmouseout="hideTip(event, 'fs11', 21)" onmouseover="showTip(event, 'fs11', 21)" class="i">succ</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs12', 22)" onmouseover="showTip(event, 'fs12', 22)" class="i">v</span> <span class="k">else</span> 
            <span class="c">// If value was not found, calculate &amp; cache it</span>
            <span class="k">let</span> <span onmouseout="hideTip(event, 'fs12', 23)" onmouseover="showTip(event, 'fs12', 23)" class="i">v</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 24)" onmouseover="showTip(event, 'fs7', 24)" class="f">f</span>(<span onmouseout="hideTip(event, 'fs10', 25)" onmouseover="showTip(event, 'fs10', 25)" class="i">x</span>) 
            <span onmouseout="hideTip(event, 'fs8', 26)" onmouseover="showTip(event, 'fs8', 26)" class="i">cache</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs14', 27)" onmouseover="showTip(event, 'fs14', 27)" class="f">Add</span>(<span onmouseout="hideTip(event, 'fs10', 28)" onmouseover="showTip(event, 'fs10', 28)" class="i">x</span>, <span onmouseout="hideTip(event, 'fs12', 29)" onmouseover="showTip(event, 'fs12', 29)" class="i">v</span>)
            <span onmouseout="hideTip(event, 'fs12', 30)" onmouseover="showTip(event, 'fs12', 30)" class="i">v</span>)
</code></pre></td>
</tr>
</table>
<h2><a name="Memoized-Fibonacci" class="anchor" href="#Memoized-Fibonacci">Memoized Fibonacci</a></h2>
<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l">1: </span>
<span class="l">2: </span>
<span class="l">3: </span>
<span class="l">4: </span>
<span class="l">5: </span>
<span class="l">6: </span>
<span class="l">7: </span>
<span class="l">8: </span>
<span class="l">9: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp">    <span class="c">/// Recursive function that implements Fibonacci using memoization.</span>
    <span class="c">/// Recursive calls are made to the memoized function, so previously</span>
    <span class="c">/// calculated values are retrieved from the cache.</span>
    <span class="k">let</span> <span class="k">rec</span> <span onmouseout="hideTip(event, 'fs15', 31)" onmouseover="showTip(event, 'fs15', 31)" class="f">fibs</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs6', 32)" onmouseover="showTip(event, 'fs6', 32)" class="f">memoize</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs2', 33)" onmouseover="showTip(event, 'fs2', 33)" class="i">n</span> <span class="k">-&gt;</span>
      <span class="k">if</span> <span onmouseout="hideTip(event, 'fs2', 34)" onmouseover="showTip(event, 'fs2', 34)" class="i">n</span> <span class="o">&lt;</span> <span class="n">1</span> <span class="k">then</span> <span class="n">1</span> <span class="k">else</span>
      (<span onmouseout="hideTip(event, 'fs15', 35)" onmouseover="showTip(event, 'fs15', 35)" class="f">fibs</span> (<span onmouseout="hideTip(event, 'fs2', 36)" onmouseover="showTip(event, 'fs2', 36)" class="i">n</span> <span class="o">-</span> <span class="n">1</span>)) <span class="o">+</span> (<span onmouseout="hideTip(event, 'fs15', 37)" onmouseover="showTip(event, 'fs15', 37)" class="f">fibs</span> (<span onmouseout="hideTip(event, 'fs2', 38)" onmouseover="showTip(event, 'fs2', 38)" class="i">n</span> <span class="o">-</span> <span class="n">2</span>)))

    <span class="c">// Note - add #nowarn &quot;40&quot; to disable warning complaining about recursive</span>
    <span class="c">// value reference. This is not an issue in this snippet.</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">val fibs : n:int -&gt; int<br /><br />Full name: Script.Simple.fibs<br /><em><br /><br />&#160;Inefficient recursive implementation of Fibonacci numbers.<br />&#160;<br />&#160;The problem is that &#39;fibs 3&#39; will call &#39;fibs 1&#39; recursively<br />&#160;three times. To solve this, we&#39;d like to keep the result of<br />&#160;previously calculated function calls using dynamic programming.</em></div>
<div class="tip" id="fs2">val n : int</div>
<div class="tip" id="fs3">namespace System</div>
<div class="tip" id="fs4">namespace System.Collections</div>
<div class="tip" id="fs5">namespace System.Collections.Generic</div>
<div class="tip" id="fs6">val memoize : f:(&#39;a -&gt; &#39;b) -&gt; (&#39;a -&gt; &#39;b) (requires equality)<br /><br />Full name: Script.Memoized.memoize<br /><em><br /><br />&#160;The function creates a function that calls the argument &#39;f&#39;<br />&#160;only once and stores the result in a mutable dictionary (cache)<br />&#160;Repeated calls to the resulting function return cached values.</em></div>
<div class="tip" id="fs7">val f : (&#39;a -&gt; &#39;b) (requires equality)</div>
<div class="tip" id="fs8">val cache : Dictionary&lt;&#39;a,&#39;b&gt; (requires equality)</div>
<div class="tip" id="fs9">Multiple items<br />type Dictionary&lt;&#39;TKey,&#39;TValue&gt; =<br />&#160;&#160;new : unit -&gt; Dictionary&lt;&#39;TKey, &#39;TValue&gt; + 5 overloads<br />&#160;&#160;member Add : key:&#39;TKey * value:&#39;TValue -&gt; unit<br />&#160;&#160;member Clear : unit -&gt; unit<br />&#160;&#160;member Comparer : IEqualityComparer&lt;&#39;TKey&gt;<br />&#160;&#160;member ContainsKey : key:&#39;TKey -&gt; bool<br />&#160;&#160;member ContainsValue : value:&#39;TValue -&gt; bool<br />&#160;&#160;member Count : int<br />&#160;&#160;member GetEnumerator : unit -&gt; Enumerator&lt;&#39;TKey, &#39;TValue&gt;<br />&#160;&#160;member GetObjectData : info:SerializationInfo * context:StreamingContext -&gt; unit<br />&#160;&#160;member Item : &#39;TKey -&gt; &#39;TValue with get, set<br />&#160;&#160;...<br />&#160;&#160;nested type Enumerator<br />&#160;&#160;nested type KeyCollection<br />&#160;&#160;nested type ValueCollection<br /><br />Full name: System.Collections.Generic.Dictionary&lt;_,_&gt;<br /><br />--------------------<br />Dictionary() : unit<br />Dictionary(capacity: int) : unit<br />Dictionary(comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />Dictionary(dictionary: IDictionary&lt;&#39;TKey,&#39;TValue&gt;) : unit<br />Dictionary(capacity: int, comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit<br />Dictionary(dictionary: IDictionary&lt;&#39;TKey,&#39;TValue&gt;, comparer: IEqualityComparer&lt;&#39;TKey&gt;) : unit</div>
<div class="tip" id="fs10">val x : &#39;a (requires equality)</div>
<div class="tip" id="fs11">val succ : bool</div>
<div class="tip" id="fs12">val v : &#39;b</div>
<div class="tip" id="fs13">Dictionary.TryGetValue(key: &#39;a, value: byref&lt;&#39;b&gt;) : bool</div>
<div class="tip" id="fs14">Dictionary.Add(key: &#39;a, value: &#39;b) : unit</div>
<div class="tip" id="fs15">val fibs : (int -&gt; int)<br /><br />Full name: Script.Memoized.fibs<br /><em><br /><br />&#160;Recursive function that implements Fibonacci using memoization.<br />&#160;Recursive calls are made to the memoized function, so previously<br />&#160;calculated values are retrieved from the cache.</em></div>

