<table class="pre"><tr><td class="lines"><pre class="fssnip"><span class="l"> 1: </span>
<span class="l"> 2: </span>
<span class="l"> 3: </span>
<span class="l"> 4: </span>
<span class="l"> 5: </span>
<span class="l"> 6: </span>
<span class="l"> 7: </span>
<span class="l"> 8: </span>
<span class="l"> 9: </span>
<span class="l">10: </span>
<span class="l">11: </span>
<span class="l">12: </span>
<span class="l">13: </span>
<span class="l">14: </span>
<span class="l">15: </span>
<span class="l">16: </span>
<span class="l">17: </span>
<span class="l">18: </span>
<span class="l">19: </span>
<span class="l">20: </span>
<span class="l">21: </span>
<span class="l">22: </span>
<span class="l">23: </span>
<span class="l">24: </span>
<span class="l">25: </span>
<span class="l">26: </span>
<span class="l">27: </span>
<span class="l">28: </span>
<span class="l">29: </span>
<span class="l">30: </span>
<span class="l">31: </span>
<span class="l">32: </span>
<span class="l">33: </span>
<span class="l">34: </span>
<span class="l">35: </span>
<span class="l">36: </span>
</pre></td>
<td class="snippet"><pre class="fssnip highlighted"><code lang="fsharp"><span class="c">/// Represents a non-deterministic computation that</span>
<span class="c">/// returns some calculated value of &#39;T</span>
<span class="k">type</span> <span class="t">Nondet</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 1)" onmouseover="showTip(event, 'fs1', 1)" class="p">ND</span> <span class="k">of</span> <span onmouseout="hideTip(event, 'fs2', 2)" onmouseover="showTip(event, 'fs2', 2)" class="t">seq</span><span class="o">&lt;</span><span class="o">&#39;</span><span class="i">T</span><span class="o">&gt;</span>

<span class="c">/// Simple computation builder for non-deterministic</span>
<span class="c">/// computations. You can use &#39;require&#39; to specify</span>
<span class="c">/// assertions and &#39;choose&#39; to generate possibilities.</span>
<span class="k">type</span> <span onmouseout="hideTip(event, 'fs3', 3)" onmouseover="showTip(event, 'fs3', 3)" class="t">NondetBuilder</span>() <span class="o">=</span>
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs4', 4)" onmouseover="showTip(event, 'fs4', 4)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs5', 5)" onmouseover="showTip(event, 'fs5', 5)" class="f">Bind</span>(<span onmouseout="hideTip(event, 'fs1', 6)" onmouseover="showTip(event, 'fs1', 6)" class="p">ND</span> <span onmouseout="hideTip(event, 'fs6', 7)" onmouseover="showTip(event, 'fs6', 7)" class="i">v</span>, <span onmouseout="hideTip(event, 'fs7', 8)" onmouseover="showTip(event, 'fs7', 8)" class="f">f</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 9)" onmouseover="showTip(event, 'fs1', 9)" class="p">ND</span> (<span onmouseout="hideTip(event, 'fs8', 10)" onmouseover="showTip(event, 'fs8', 10)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs9', 11)" onmouseover="showTip(event, 'fs9', 11)" class="f">collect</span> (<span class="k">fun</span> <span onmouseout="hideTip(event, 'fs10', 12)" onmouseover="showTip(event, 'fs10', 12)" class="i">v</span> <span class="k">-&gt;</span> <span class="k">let</span> (<span onmouseout="hideTip(event, 'fs1', 13)" onmouseover="showTip(event, 'fs1', 13)" class="p">ND</span> <span onmouseout="hideTip(event, 'fs11', 14)" onmouseover="showTip(event, 'fs11', 14)" class="i">s</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs7', 15)" onmouseover="showTip(event, 'fs7', 15)" class="f">f</span> <span onmouseout="hideTip(event, 'fs10', 16)" onmouseover="showTip(event, 'fs10', 16)" class="i">v</span> <span class="k">in</span> <span onmouseout="hideTip(event, 'fs11', 17)" onmouseover="showTip(event, 'fs11', 17)" class="i">s</span>) <span onmouseout="hideTip(event, 'fs6', 18)" onmouseover="showTip(event, 'fs6', 18)" class="i">v</span>)
  <span class="k">member</span> <span onmouseout="hideTip(event, 'fs4', 19)" onmouseover="showTip(event, 'fs4', 19)" class="i">x</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs12', 20)" onmouseover="showTip(event, 'fs12', 20)" class="f">Return</span>(<span onmouseout="hideTip(event, 'fs13', 21)" onmouseover="showTip(event, 'fs13', 21)" class="i">v</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 22)" onmouseover="showTip(event, 'fs1', 22)" class="p">ND</span> (<span onmouseout="hideTip(event, 'fs2', 23)" onmouseover="showTip(event, 'fs2', 23)" class="i">seq</span> { <span class="k">yield</span> <span onmouseout="hideTip(event, 'fs13', 24)" onmouseover="showTip(event, 'fs13', 24)" class="i">v</span> })

<span class="c">/// Computation builder for non-deterministic computations</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs14', 25)" onmouseover="showTip(event, 'fs14', 25)" class="i">nondet</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs3', 26)" onmouseover="showTip(event, 'fs3', 26)" class="t">NondetBuilder</span>()

<span class="c">/// Specifies an assertion on non-deterministic computation</span>
<span class="c">/// (the computation will only succeed if &#39;b&#39; is true)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs15', 27)" onmouseover="showTip(event, 'fs15', 27)" class="f">require</span> <span onmouseout="hideTip(event, 'fs16', 28)" onmouseover="showTip(event, 'fs16', 28)" class="i">b</span> <span class="o">=</span> 
  <span onmouseout="hideTip(event, 'fs1', 29)" onmouseover="showTip(event, 'fs1', 29)" class="p">ND</span> (<span class="k">if</span> <span onmouseout="hideTip(event, 'fs17', 30)" onmouseover="showTip(event, 'fs17', 30)" class="f">not</span> <span onmouseout="hideTip(event, 'fs16', 31)" onmouseover="showTip(event, 'fs16', 31)" class="i">b</span> <span class="k">then</span> <span onmouseout="hideTip(event, 'fs8', 32)" onmouseover="showTip(event, 'fs8', 32)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs18', 33)" onmouseover="showTip(event, 'fs18', 33)" class="i">empty</span> <span class="k">else</span> <span onmouseout="hideTip(event, 'fs2', 34)" onmouseover="showTip(event, 'fs2', 34)" class="i">seq</span> { <span class="k">yield</span> () })

<span class="c">/// Returns a nondeterministic computation that may </span>
<span class="c">/// return any of the specified values</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs19', 35)" onmouseover="showTip(event, 'fs19', 35)" class="f">choose</span> <span onmouseout="hideTip(event, 'fs20', 36)" onmouseover="showTip(event, 'fs20', 36)" class="i">opts</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs1', 37)" onmouseover="showTip(event, 'fs1', 37)" class="p">ND</span> <span onmouseout="hideTip(event, 'fs20', 38)" onmouseover="showTip(event, 'fs20', 38)" class="i">opts</span>

<span class="c">/// Find some solution of the non-deterministic computation</span>
<span class="c">/// (may run for really long time or fail!)</span>
<span class="k">let</span> <span onmouseout="hideTip(event, 'fs21', 39)" onmouseover="showTip(event, 'fs21', 39)" class="f">solve</span> (<span onmouseout="hideTip(event, 'fs1', 40)" onmouseover="showTip(event, 'fs1', 40)" class="p">ND</span> <span onmouseout="hideTip(event, 'fs22', 41)" onmouseover="showTip(event, 'fs22', 41)" class="i">c</span>) <span class="o">=</span> <span onmouseout="hideTip(event, 'fs8', 42)" onmouseover="showTip(event, 'fs8', 42)" class="t">Seq</span><span class="o">.</span><span onmouseout="hideTip(event, 'fs23', 43)" onmouseover="showTip(event, 'fs23', 43)" class="f">head</span> <span onmouseout="hideTip(event, 'fs22', 44)" onmouseover="showTip(event, 'fs22', 44)" class="i">c</span>

<span class="c">// Sample non-deterministic computation. Find &#39;a&#39; and &#39;b&#39;</span>
<span class="c">// from 1 to 50 such that &#39;a * b = 91&#39;</span>
<span onmouseout="hideTip(event, 'fs14', 45)" onmouseover="showTip(event, 'fs14', 45)" class="i">nondet</span> {
  <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs24', 46)" onmouseover="showTip(event, 'fs24', 46)" class="i">a</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 47)" onmouseover="showTip(event, 'fs19', 47)" class="f">choose</span> [ <span class="n">1</span> <span class="o">..</span> <span class="n">50</span> ]
  <span class="k">let!</span> <span onmouseout="hideTip(event, 'fs25', 48)" onmouseover="showTip(event, 'fs25', 48)" class="i">b</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs19', 49)" onmouseover="showTip(event, 'fs19', 49)" class="f">choose</span> [ <span class="n">1</span> <span class="o">..</span> <span class="n">50</span> ]
  <span class="k">let</span> <span onmouseout="hideTip(event, 'fs26', 50)" onmouseover="showTip(event, 'fs26', 50)" class="i">c</span> <span class="o">=</span> <span onmouseout="hideTip(event, 'fs24', 51)" onmouseover="showTip(event, 'fs24', 51)" class="i">a</span> <span class="o">*</span> <span onmouseout="hideTip(event, 'fs25', 52)" onmouseover="showTip(event, 'fs25', 52)" class="i">b</span>
  <span class="k">do!</span> <span onmouseout="hideTip(event, 'fs15', 53)" onmouseover="showTip(event, 'fs15', 53)" class="f">require</span> (<span onmouseout="hideTip(event, 'fs26', 54)" onmouseover="showTip(event, 'fs26', 54)" class="i">c</span> <span class="o">=</span> <span class="n">91</span>) 
  <span class="k">return</span> (<span onmouseout="hideTip(event, 'fs24', 55)" onmouseover="showTip(event, 'fs24', 55)" class="i">a</span>, <span onmouseout="hideTip(event, 'fs25', 56)" onmouseover="showTip(event, 'fs25', 56)" class="i">b</span>) }
<span class="o">|&gt;</span> <span onmouseout="hideTip(event, 'fs21', 57)" onmouseover="showTip(event, 'fs21', 57)" class="f">solve</span>
</code></pre></td>
</tr>
</table>
<div class="tip" id="fs1">union case Nondet.ND: seq&lt;&#39;T&gt; -&gt; Nondet&lt;&#39;T&gt;</div>
<div class="tip" id="fs2">Multiple items<br />val seq : sequence:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Core.Operators.seq<br /><br />--------------------<br />type seq&lt;&#39;T&gt; = System.Collections.Generic.IEnumerable&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.seq&lt;_&gt;</div>
<div class="tip" id="fs3">Multiple items<br />type NondetBuilder =<br />&#160;&#160;new : unit -&gt; NondetBuilder<br />&#160;&#160;member Bind : Nondet&lt;&#39;b&gt; * f:(&#39;b -&gt; Nondet&lt;&#39;c&gt;) -&gt; Nondet&lt;&#39;c&gt;<br />&#160;&#160;member Return : v:&#39;a -&gt; Nondet&lt;&#39;a&gt;<br /><br />Full name: Script.NondetBuilder<br /><em><br /><br />&#160;Simple computation builder for non-deterministic<br />&#160;computations. You can use &#39;require&#39; to specify<br />&#160;assertions and &#39;choose&#39; to generate possibilities.</em><br /><br />--------------------<br />new : unit -&gt; NondetBuilder</div>
<div class="tip" id="fs4">val x : NondetBuilder</div>
<div class="tip" id="fs5">member NondetBuilder.Bind : Nondet&lt;&#39;b&gt; * f:(&#39;b -&gt; Nondet&lt;&#39;c&gt;) -&gt; Nondet&lt;&#39;c&gt;<br /><br />Full name: Script.NondetBuilder.Bind</div>
<div class="tip" id="fs6">val v : seq&lt;&#39;b&gt;</div>
<div class="tip" id="fs7">val f : (&#39;b -&gt; Nondet&lt;&#39;c&gt;)</div>
<div class="tip" id="fs8">module Seq<br /><br />from Microsoft.FSharp.Collections</div>
<div class="tip" id="fs9">val collect : mapping:(&#39;T -&gt; #seq&lt;&#39;U&gt;) -&gt; source:seq&lt;&#39;T&gt; -&gt; seq&lt;&#39;U&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.collect</div>
<div class="tip" id="fs10">val v : &#39;b</div>
<div class="tip" id="fs11">val s : seq&lt;&#39;c&gt;</div>
<div class="tip" id="fs12">member NondetBuilder.Return : v:&#39;a -&gt; Nondet&lt;&#39;a&gt;<br /><br />Full name: Script.NondetBuilder.Return</div>
<div class="tip" id="fs13">val v : &#39;a</div>
<div class="tip" id="fs14">val nondet : NondetBuilder<br /><br />Full name: Script.nondet<br /><em><br /><br />&#160;Computation builder for non-deterministic computations</em></div>
<div class="tip" id="fs15">val require : b:bool -&gt; Nondet&lt;unit&gt;<br /><br />Full name: Script.require<br /><em><br /><br />&#160;Specifies an assertion on non-deterministic computation<br />&#160;(the computation will only succeed if &#39;b&#39; is true)</em></div>
<div class="tip" id="fs16">val b : bool</div>
<div class="tip" id="fs17">val not : value:bool -&gt; bool<br /><br />Full name: Microsoft.FSharp.Core.Operators.not</div>
<div class="tip" id="fs18">val empty&lt;&#39;T&gt; : seq&lt;&#39;T&gt;<br /><br />Full name: Microsoft.FSharp.Collections.Seq.empty</div>
<div class="tip" id="fs19">val choose : opts:seq&lt;&#39;a&gt; -&gt; Nondet&lt;&#39;a&gt;<br /><br />Full name: Script.choose<br /><em><br /><br />&#160;Returns a nondeterministic computation that may <br />&#160;return any of the specified values</em></div>
<div class="tip" id="fs20">val opts : seq&lt;&#39;a&gt;</div>
<div class="tip" id="fs21">val solve : Nondet&lt;&#39;a&gt; -&gt; &#39;a<br /><br />Full name: Script.solve<br /><em><br /><br />&#160;Find some solution of the non-deterministic computation<br />&#160;(may run for really long time or fail!)</em></div>
<div class="tip" id="fs22">val c : seq&lt;&#39;a&gt;</div>
<div class="tip" id="fs23">val head : source:seq&lt;&#39;T&gt; -&gt; &#39;T<br /><br />Full name: Microsoft.FSharp.Collections.Seq.head</div>
<div class="tip" id="fs24">val a : int</div>
<div class="tip" id="fs25">val b : int</div>
<div class="tip" id="fs26">val c : int</div>

