// http://www.fssnip.net/7WX

open System
open System.Text

module Option =

    // https://raw.githubusercontent.com/fsharp/fsharp/
    //                                   cb6cb5c410f537c81cf26825657ef3bb29a7e952/
    //                                   src/fsharp/FSharp.Core/option.fs r:20
    let defaultValue value option =
        match option with
            | None ->
                value
            | Some v ->
                v

type Terms =
    | NoTerms = 1
    | NegativeTerm = 2
    | MinusOneTerm = 3
    | OneTerm = 3
    | PositiveTerm = 4
    | MultipleTerms = 5

type Poly (coefficients : int64 list list) =

    do
        let rec innerNoZeroHighestCoefficient cs =
            match cs with
                | []
                | [ 0L ] ->
                    []
                | 0L :: ts when List.isEmpty (innerNoZeroHighestCoefficient ts) ->
                    []
                | _ ->
                    cs
        let rec outerNoZeroHighestCoefficient css =
            let mss = List.map innerNoZeroHighestCoefficient css
            match mss with
                | []
                | [ [] ] ->
                    []
                | [] :: tss when List.forall List.isEmpty (outerNoZeroHighestCoefficient tss) ->
                    []
                | _ ->
                    mss
        if coefficients <> outerNoZeroHighestCoefficient coefficients then
             invalidArg "coefficients" "Zero highest coefficient"

    member this.Coefficients =
        coefficients

    override this.ToString () =
        let innerTerm cs =
            let folder s c =
                match s, c with
                    | Option.Some Terms.NoTerms, 0L ->
                         Option.Some Terms.NoTerms
                    | Option.Some Terms.NoTerms, -1L ->
                         Option.Some Terms.MinusOneTerm
                    | Option.Some Terms.NoTerms, 1L ->
                         Option.Some Terms.OneTerm
                    | Option.Some Terms.NoTerms, _ when c < 0L ->
                         Option.Some Terms.NegativeTerm
                    | Option.Some Terms.NoTerms, _ ->
                         Option.Some Terms.PositiveTerm
                    | _, 0L ->
                         s
                    | Option.Some t, _ when t <> Terms.MultipleTerms ->
                         Option.Some Terms.MultipleTerms
                    | _ ->
                         None
            let initialState = Some Terms.NoTerms
            let scanning = Seq.scan folder initialState cs
            Option.get (Seq.last (Seq.takeWhile Option.isSome scanning))
        let printPowerOfVariable b x y leftTrim p =
            if p <> 0 then
                if not leftTrim then
                   Printf.bprintf b " "
                Printf.bprintf b "%s" x
                if p <> 1 then
                    Printf.bprintf b "^%d" p
                match y with
                    | None ->
                        ()
                    | Some r ->
                        Printf.bprintf b "(%s)" r
        let printTerm b n m explicitOne firstTerm p c =
            let f = Option.defaultValue true firstTerm
            if c > 1L || (c = 1L && Option.isNone firstTerm && p = 0) then
                if f then
                    Printf.bprintf b "%d" c
                else
                    Printf.bprintf b " + %d" c
            elif c = 1L then
                if not f then
                    Printf.bprintf b " + "
                if p = 0 && explicitOne then
                    Printf.bprintf b "1"
            elif c < -1L || (c = -1L && Option.isNone firstTerm && p = 0) then
                if f then
                    Printf.bprintf b "-%d" -c
                else
                    Printf.bprintf b " - %d" -c
            elif c = -1L then
                if f then
                    Printf.bprintf b "-"
                else
                    Printf.bprintf b " - "
                if p = 0 && explicitOne then
                    Printf.bprintf b "1"
            if c <> 0L then
                printPowerOfVariable b n m (c = 1L || c = -1L) p
            elif Option.isNone firstTerm then
                Printf.bprintf b "0"
        let printInnerPoly b n m firstTerm p cs =
            let itering u v f j (q, d) =
                printTerm b u v (q = 0) (Option.Some (f && j = 0)) q d
            let terms = seq {
                for i = List.length cs - 1 downto 0 do
                    let c = List.item i cs
                    if c <> 0L then
                        yield i, c
            }
            Seq.iteri (itering n m (Option.defaultValue true firstTerm)) terms
        let printInnerPolyTerm b n m x y singlePolyTerm firstPolyTerm p cs =
            let f = Option.defaultValue true firstPolyTerm
            let t = innerTerm cs
            if t = Terms.MultipleTerms && not singlePolyTerm then
                if not f then
                    Printf.bprintf b " + "
                Printf.bprintf b "("
            printInnerPoly b n m (Option.Some (f || t = Terms.MultipleTerms)) p cs
            if t = Terms.MultipleTerms && not singlePolyTerm then
                Printf.bprintf b ")"
            if t <> Terms.NoTerms then
                printPowerOfVariable b x y (t = Terms.MinusOneTerm || t = Terms.OneTerm) p
            elif Option.isNone firstPolyTerm then
                Printf.bprintf b "0"
        let printOuterPoly b n m x y firstPolyTerm css =
            let itering u v w z f j (q, ds) =
                printInnerPolyTerm b u v w z (List.length css = 1) (Option.Some (f && j = 0)) q ds
            let polyTerms = seq {
                for i = List.length css - 1 downto 0 do
                    let cs = List.item i css
                    if innerTerm cs <> Terms.NoTerms then
                        yield i, cs
            }
            Seq.iteri (itering n m x y (Option.defaultValue true firstPolyTerm)) polyTerms
        let printPoly b css =
            let innerTermIsNoTerms cs =
                innerTerm cs = Terms.NoTerms
            printOuterPoly b "n" Option.None "cos" (Option.Some "x") Option.None css
            if List.forall innerTermIsNoTerms css then
                Printf.bprintf b "0"
        let builder = StringBuilder ()
        printPoly builder coefficients
        builder.ToString ()
  
    static member FlexiblePoly (coefficients : int64 list list) =
        let rec innerNoZeroHighestCoefficient cs =
            match cs with
                | []
                | [ 0L ] ->
                    []
                | 0L :: ts when List.isEmpty (innerNoZeroHighestCoefficient ts) ->
                    []
                | _ ->
                    cs
        let rec outerNoZeroHighestCoefficient css =
            let mss = List.map innerNoZeroHighestCoefficient css
            match mss with
                | []
                | [ [] ] ->
                    []
                | [] :: tss when List.forall List.isEmpty (outerNoZeroHighestCoefficient tss) ->
                    []
                | _ ->
                    mss
        Poly (outerNoZeroHighestCoefficient coefficients)

    static member (~-) (p : Poly) =
        let innerNegate =
            List.map (~-)

        let outerNegate =
            List.map innerNegate
        Poly (outerNegate p.Coefficients)

    static member (+) (p : Poly, q : Poly) =
        let rec innerPlus (cs, ds) =
            match cs, ds with
                | _, [] ->
                    cs
                | [], _ ->
                    ds
                | g :: ts, h :: rs ->
                    (g + h) :: innerPlus (ts, rs)
        let rec outerPlus (css, dss) =
            match css, dss with
                | _, [] ->
                    css
                | [], _ ->
                    dss
                | gs :: tss, hs :: rss ->
                    innerPlus (gs, hs) :: outerPlus (tss, rss)
        Poly.FlexiblePoly (outerPlus (p.Coefficients, q.Coefficients))

    static member (-) (p : Poly, q : Poly) =
        p + (-q)

    static member (*) (n : int64, p : Poly) =
        let innerNaturalMultiply (m, cs) =
            List.map ((*) m) cs
        let innerNaturalMultiplyCurried m cs =
            innerNaturalMultiply (m, cs)
        let outerNaturalMultiply (m, css) =
            List.map (innerNaturalMultiplyCurried m) css
        Poly.FlexiblePoly (outerNaturalMultiply (n, p.Coefficients))

    static member (<<<) (p : Poly, n : int) =
        let rec increaseRank (css, m) =
            if n = 0 then
                css
            elif n < 0 then
                List.skip (-n) css
            else
                [] :: increaseRank (css, m - 1)
        Poly (increaseRank (p.Coefficients, n))

    static member (>>>) (p : Poly, n : int) =
        p <<< -n

    static member (*) (p : Poly, q : Poly) =
        let rec innerPlus (cs, ds) =
            match cs, ds with
                | _, [] ->
                    cs
                | [], _ ->
                    ds
                | g :: ts, h :: rs ->
                    (g + h) :: innerPlus (ts, rs)
        let folder ss cs =
            innerPlus (ss, cs)
        let innerNaturalMultiply (m, cs) =
            List.map ((*) m) cs
        let rec innerIncreaseRank (cs : int64 list, m) =
            if m = 0 then
                cs
            elif m < 0 then
                List.skip (-m) cs
            else
                0L :: innerIncreaseRank (cs, m - 1)
        let rec innerMultiply (cs : int64 list, ds : int64 list) =
            let innerMapper s i c =
                innerNaturalMultiply (c, innerIncreaseRank (s, i))
            let terms = Seq.mapi (innerMapper ds) cs
            Seq.fold innerPlus [] terms
        let outerMapper r j cs =
            cs * (r >>> j)
        Poly.FlexiblePoly (Seq.sum (Seq.mapi (outerMapper q) p.Coefficients))

    member this.Derivative =
        let innerNaturalMultiply (m, cs) =
            List.map ((*) m) cs
        let innerNaturalMultiplyCurried m cs =
            innerNaturalMultiply (m, cs)
        let innerNaturalMultiplyCurried32 m =
            innerNaturalMultiplyCurried (int64 m)
        Poly.FlexiblePoly (List.mapi innerNaturalMultiplyCurried32 this.Coefficients) >>> 1

// [<EntryPoint>]
// let main _args =
//     let a = Poly [ [ 1L; 2L ]; []; [ -1L; 0L; -3L ]]
//     printfn "%O" a
//     printfn "%O" (a - a)
//     printfn "%O" a.Derivative
//     0

// open System
// open System.Text

type ITermExpression =

    abstract member Zero : ITermExpression
    abstract member IsOne : bool
    abstract member Add : ITermExpression -> ITermExpression
    abstract member Int64Multiply : int64 -> ITermExpression
    abstract member Multiply : ITermExpression -> ITermExpression
    abstract member IsNegative : bool
    abstract member CoefficientString : bool * bool -> string

type Int64TermExpression (value : int64) =

    member this.Value =
        value

    member this.Zero =
        Int64TermExpression 0L

    member this.IsOne =
        this.Value = 1L

    member this.Add (right : ITermExpression) =
        match right with
            | :? Int64TermExpression as rightTermExpression ->
                Int64TermExpression (this.Value + rightTermExpression.Value)
            | _ ->
                invalidArg "right" "Not an Int64TermExpression"

    member this.Int64Multiply (scalingFactor : int64) =
        Int64TermExpression (scalingFactor * this.Value)

    member this.Multiply (right : ITermExpression) =
        match right with
            | :? Int64TermExpression as rightTermExpression ->
                Int64TermExpression (this.Value * rightTermExpression.Value)
            | _ ->
                invalidArg "right" "Not an Int64TermExpression"

    override this.ToString () =
        sprintf "%d" this.Value

    member this.IsNegative =
        this.Value < 0L

    member this.CoefficientString (first : bool, explicitOne : bool) =
        if explicitOne || not this.IsOne then
            if first then
                this.ToString ()
            elif this.Value < 0L then
                sprintf "- %d" -this.Value
            else
                sprintf "+ %d" this.Value
        else
            if first then
                String.Empty
            elif this.Value < 0L then
                "-"
            else
                "+"

    interface ITermExpression with
        member this.Zero =
            this.Zero :> ITermExpression
        member this.IsOne =
            this.IsOne
        member this.Add (right : ITermExpression) =
            this.Add right :> ITermExpression
        member this.Int64Multiply (scalingFactor : int64) =
            this.Int64Multiply scalingFactor :> ITermExpression
        member this.Multiply (right : ITermExpression) =
            this.Multiply right :> ITermExpression
        member this.IsNegative =
            this.IsNegative
        member this.CoefficientString (first : bool, explicitOne : bool) =
            this.CoefficientString (first, explicitOne)

    override this.GetHashCode () =
        this.Value.GetHashCode ()

    override this.Equals (right : obj) =
        match right with
            | null ->
                false
            | :? Int64TermExpression as rightTermExpression ->
                this.Value = rightTermExpression.Value
            | _ ->
                false

    static member op_Equality (r : Int64TermExpression, t : Int64TermExpression) =
        r.Equals t

    static member op_Inequality (r : Int64TermExpression, t : Int64TermExpression) =
        not (Int64TermExpression.op_Equality (r, t))

type Poly<'T when 'T : equality and 'T :> ITermExpression> (x : string, y : string, coefficients : 'T list) =

    static let isEmptyOrSingleton cs =
        match cs with
            | []
            | [_] ->
                true
            | _ ->
                false

    static let isZero (t : 'T) =
        let x = t :> ITermExpression
        // x = x.Zero
        let r = x = x.Zero
        r

    let rec exactlyOneNonZero (cs : 'T list) =
        match cs with
            | [] ->
                None
            | [c] ->
                Some c
            | h :: ts ->
                if isZero h then
                    None
                else
                    exactlyOneNonZero ts

    do
        let rec nonZeroHighestCoefficient cs =
            match cs with
                | [] ->
                    true
                | [c] when isZero c ->
                    false
                | _ :: ts ->
                    nonZeroHighestCoefficient ts
        if not (nonZeroHighestCoefficient coefficients) then
            invalidArg "coefficients" "Non-zero highest coefficient"
        elif isEmptyOrSingleton coefficients && x <> String.Empty then
            invalidArg "x" "Non-empty x for zero Poly"
        elif isEmptyOrSingleton coefficients && y <> String.Empty then
            invalidArg "y" "Non-empty x for zero Poly"

    static member Create (x : string, y : string, coefficients : 'T list) =
        let rec deZeroHighestCoefficient cs =
            match cs with
                | [] ->
                    []
                | [c] when isZero c ->
                    []
                | h :: ts ->
                    let deZeroTail = deZeroHighestCoefficient ts
                    if isZero h && List.isEmpty (deZeroHighestCoefficient ts) then
                        []
                    else
                        h :: deZeroTail
        let deZeroCoefficients = deZeroHighestCoefficient coefficients
        if isEmptyOrSingleton deZeroCoefficients then
            Poly (String.Empty, String.Empty, deZeroCoefficients)
        else
            Poly (x, y, coefficients)

    member this.X =
        x

    member this.Y =
        y

    member this.Coefficients =
        coefficients

    member this.Rank =
        List.length coefficients - 1

    member this.Zero =
        Poly (String.Empty, String.Empty, [])

    member this.IsZero =
        // let t = this :> ITermExpression
        // t = t.Zero
        List.isEmpty this.Coefficients

    member this.IsOne =
        match this.Coefficients with
            | [c] ->
                (c :> ITermExpression).IsOne
            | _ ->
                false

    member this.Add (right : ITermExpression) =
        match right with
            | :? Poly<'T> as rightPoly when (this.X = rightPoly.X && this.Y = rightPoly.Y)
                    || this.IsZero || rightPoly.IsZero ->
                if this.IsZero then
                    rightPoly
                else
                    let rec addition (cs, ds) =
                        match cs, ds with
                            | _, [] ->
                                cs
                            | [], _ ->
                                ds
                            | g :: ts, h :: rs ->
                                (g :> ITermExpression).Add h :?> 'T :: addition (ts, rs)
                    Poly.Create (this.X, this.Y, addition (this.Coefficients, rightPoly.Coefficients))
            | _ ->
                invalidArg "right" "Not an Poly in the same variable"

    member this.Int64Multiply (scalingFactor : int64) =
        let mapper f (t : 'T) =
            (t :> ITermExpression).Int64Multiply f
        Poly.Create (this.X, this.Y, List.map (mapper scalingFactor) this.Coefficients)

    member (* rec *) this.ShiftRank rankShift =
        if rankShift <= 0 then
            Poly.Create (this.X, this.Y, List.skip (-rankShift) this.Coefficients)
        elif this = this.Zero then
            this
        else
            Poly.Create (this.X, this.Y, (List.head this.Coefficients).Zero :?> 'T :: (this.ShiftRank (rankShift - 1)).Coefficients)

    member this.IsNegative =
        match exactlyOneNonZero this.Coefficients with
            | Some c ->
                (c :> ITermExpression).IsNegative
            | None ->
                false

    member this.IsMonomial =
        Option.isSome (exactlyOneNonZero this.Coefficients)

    member this.Negate =
        this.Int64Multiply -1L

    override this.ToString () =
        if this.IsZero then
            "0"
        else
            let polyTerms = seq {
                for k = this.Rank downto 0 do
                    let d = List.item k this.Coefficients
                    if not (isZero d) then
                        yield (k = this.Rank), (k = 0), k, d
            }
            let stringBuilder = StringBuilder()
            for fi, eo, p, c in polyTerms do
                let cs = c.CoefficientString (fi, eo)
                ignore (stringBuilder.Append cs)
                if p <> 0 then
                    if not (String.IsNullOrEmpty cs) && cs <> "-" && not (cs.EndsWith " ") then
                        ignore (stringBuilder.Append " ")
                    ignore (stringBuilder.Append this.X)
                    if p <> 1 then
                        ignore (stringBuilder.Append (sprintf "^%d" p))
                    ignore (stringBuilder.Append this.Y)
            stringBuilder.ToString ()

    member this.CoefficientString (first : bool, explicitOne : bool) =
        if explicitOne || (not this.IsOne && not this.Negate.IsOne) then
            if first then
                this.ToString ()
            elif this.IsZero || this.IsMonomial then
                if this.IsNegative then
                    sprintf " - %s" (this.Negate.ToString ())
                else
                    sprintf " + %s" (this.ToString ())
            else
                sprintf "(%s)" (this.ToString ())
        else
            if first then
                if this.IsOne then
                    String.Empty
                else
                    "-"
            elif this.IsNegative then
                " - "
            else
                " + "

    interface ITermExpression with
        member this.Zero =
            this.Zero :> ITermExpression
        member this.IsOne =
            this.IsOne
        member this.Add (right : ITermExpression) =
            this.Add right :> ITermExpression
        member this.Int64Multiply (scalingFactor : int64) =
            this.Int64Multiply scalingFactor :> ITermExpression
        member this.Multiply (right : ITermExpression) =
            invalidArg "right" "TODO"
        member this.IsNegative =
            this.IsNegative
        member this.CoefficientString (first, explicitOne) =
            this.CoefficientString (first, explicitOne)

    member this.Derivative =
        let mapper p (t : 'T) =
            (t :> ITermExpression).Int64Multiply (int64 p)
        (Poly.Create (this.X, this.Y, List.mapi mapper this.Coefficients)).ShiftRank -1

    static member (~-) (p : Poly<_>) =
        p.Negate

    static member (+) (p : Poly<_>, q : Poly<_>) =
        p.Add q

    static member (-) (p : Poly<_>, q : Poly<_>) =
        p + (-q)

    static member (*) (scalingFactor : int64, p : Poly<_>) =
        p.Int64Multiply scalingFactor

    static member (<<<) (p : Poly<_>, n : int) =
        p.ShiftRank n

    static member (>>>) (p : Poly<_>, n : int) =
        p <<< -n

    override this.GetHashCode () =
        let defaultEmpty (s : string) =
            if isNull s then
                String.Empty
            else
                s    
        this.Coefficients.GetHashCode () ^^^ ((defaultEmpty this.X).GetHashCode () <<< 1) ^^^ ((defaultEmpty this.Y).GetHashCode () <<< 2)

    override this.Equals (right : obj) =
        match right with
            | null ->
                false
            | :? Poly<'T> as rightPoly ->
                this.X = rightPoly.X && this.Y = rightPoly.Y && this.Coefficients = rightPoly.Coefficients
            | _ ->
                false

    static member op_Equality (r : Int64TermExpression, t : Int64TermExpression) =
        r.Equals t

    static member op_Inequality (r : Int64TermExpression, t : Int64TermExpression) =
        not (Int64TermExpression.op_Equality (r, t))

[<EntryPoint>]
let main _args =
    printfn "Terms"
    printfn "%O" (Poly ("", "", []))
    printfn "%O" (Poly ("", "", [Poly ("", "", [Int64TermExpression -2L])]))
    printfn "%O" (Poly ("", "", [Poly ("", "", [Int64TermExpression -1L])]))
    printfn "%O" (Poly ("", "", [Poly ("", "", [Int64TermExpression 1L])]))
    printfn "%O" (Poly ("", "", [Poly ("", "", [Int64TermExpression 2L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression -2L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression -1L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression 1L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression 2L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", [Int64TermExpression 2L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression -2L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", [Int64TermExpression 1L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression -1L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", [Int64TermExpression -1L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression 1L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", [Int64TermExpression -2L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression 2L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression 2L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression -2L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression 1L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression -1L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression -1L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression 1L])]))
    printfn "%O" (Poly ("cos", "(x)", [Poly ("", "", []); Poly ("", "", [Int64TermExpression -2L]); Poly ("", "", []); Poly ("", "", [Int64TermExpression 2L])]))
    ignore (Console.ReadKey ())
    0