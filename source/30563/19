// http://www.fssnip.net/7WX

open System
open System.Text

module Option =

    // https://raw.githubusercontent.com/fsharp/fsharp/
    //                                   cb6cb5c410f537c81cf26825657ef3bb29a7e952/
    //                                   src/fsharp/FSharp.Core/option.fs r:20
    let defaultValue value option =
        match option with
            | None ->
                value
            | Some v ->
                v

type Terms =
    | NoTerms = 1
    | NegativeTerm = 2
    | MinusOneTerm = 3
    | OneTerm = 3
    | PositiveTerm = 4
    | MultipleTerms = 5

type Poly (coefficients : int64 list list) =

    do
        let rec innerNoZeroHighestCoefficient cs =
            match cs with
                | []
                | [ 0L ] ->
                    []
                | 0L :: ts when List.isEmpty (innerNoZeroHighestCoefficient ts) ->
                    []
                | _ ->
                    cs
        let rec outerNoZeroHighestCoefficient css =
            let mss = List.map innerNoZeroHighestCoefficient css
            match mss with
                | []
                | [ [] ] ->
                    []
                | [] :: tss when List.forall List.isEmpty (outerNoZeroHighestCoefficient tss) ->
                    []
                | _ ->
                    mss
        if coefficients <> outerNoZeroHighestCoefficient coefficients then
             invalidArg "coefficients" "Zero highest coefficient"

    member this.Coefficients =
        coefficients

    override this.ToString () =
        let innerTerm cs =
            let folder s c =
                match s, c with
                    | Option.Some Terms.NoTerms, 0L ->
                         Option.Some Terms.NoTerms
                    | Option.Some Terms.NoTerms, -1L ->
                         Option.Some Terms.MinusOneTerm
                    | Option.Some Terms.NoTerms, 1L ->
                         Option.Some Terms.OneTerm
                    | Option.Some Terms.NoTerms, _ when c < 0L ->
                         Option.Some Terms.NegativeTerm
                    | Option.Some Terms.NoTerms, _ ->
                         Option.Some Terms.PositiveTerm
                    | _, 0L ->
                         s
                    | Option.Some t, _ when t <> Terms.MultipleTerms ->
                         Option.Some Terms.MultipleTerms
                    | _ ->
                         None
            let initialState = Some Terms.NoTerms
            let scanning = Seq.scan folder initialState cs
            Option.get (Seq.last (Seq.takeWhile Option.isSome scanning))
        let printPowerOfVariable b x y leftTrim p =
            if p <> 0 then
                if not leftTrim then
                   Printf.bprintf b " "
                Printf.bprintf b "%s" x
                if p <> 1 then
                    Printf.bprintf b "^%d" p
                match y with
                    | None ->
                        ()
                    | Some r ->
                        Printf.bprintf b "(%s)" r
        let printTerm b n m explicitOne firstTerm p c =
            let f = Option.defaultValue true firstTerm
            if c > 1L || (c = 1L && Option.isNone firstTerm && p = 0) then
                if f then
                    Printf.bprintf b "%d" c
                else
                    Printf.bprintf b " + %d" c
            elif c = 1L then
                if not f then
                    Printf.bprintf b " + "
                if p = 0 && explicitOne then
                    Printf.bprintf b "1"
            elif c < -1L || (c = -1L && Option.isNone firstTerm && p = 0) then
                if f then
                    Printf.bprintf b "-%d" -c
                else
                    Printf.bprintf b " - %d" -c
            elif c = -1L then
                if f then
                    Printf.bprintf b "-"
                else
                    Printf.bprintf b " - "
                if p = 0 && explicitOne then
                    Printf.bprintf b "1"
            if c <> 0L then
                printPowerOfVariable b n m (c = 1L || c = -1L) p
            elif Option.isNone firstTerm then
                Printf.bprintf b "0"
        let printInnerPoly b n m firstTerm p cs =
            let itering u v f j (q, d) =
                printTerm b u v (q = 0) (Option.Some (f && j = 0)) q d
            let terms = seq {
                for i = List.length cs - 1 downto 0 do
                    let c = List.item i cs
                    if c <> 0L then
                        yield i, c
            }
            Seq.iteri (itering n m (Option.defaultValue true firstTerm)) terms
        let printInnerPolyTerm b n m x y singlePolyTerm firstPolyTerm p cs =
            let f = Option.defaultValue true firstPolyTerm
            let t = innerTerm cs
            if t = Terms.MultipleTerms && not singlePolyTerm then
                if not f then
                    Printf.bprintf b " + "
                Printf.bprintf b "("
            printInnerPoly b n m (Option.Some (f || t = Terms.MultipleTerms)) p cs
            if t = Terms.MultipleTerms && not singlePolyTerm then
                Printf.bprintf b ")"
            if t <> Terms.NoTerms then
                printPowerOfVariable b x y (t = Terms.MinusOneTerm || t = Terms.OneTerm) p
            elif Option.isNone firstPolyTerm then
                Printf.bprintf b "0"
        let printOuterPoly b n m x y firstPolyTerm css =
            let itering u v w z f j (q, ds) =
                printInnerPolyTerm b u v w z (List.length css = 1) (Option.Some (f && j = 0)) q ds
            let polyTerms = seq {
                for i = List.length css - 1 downto 0 do
                    let cs = List.item i css
                    if innerTerm cs <> Terms.NoTerms then
                        yield i, cs
            }
            Seq.iteri (itering n m x y (Option.defaultValue true firstPolyTerm)) polyTerms
        let printPoly b css =
            let innerTermIsNoTerms cs =
                innerTerm cs = Terms.NoTerms
            printOuterPoly b "n" Option.None "cos" (Option.Some "x") Option.None css
            if List.forall innerTermIsNoTerms css then
                Printf.bprintf b "0"
        let builder = StringBuilder ()
        printPoly builder coefficients
        builder.ToString ()
  
    static member FlexiblePoly (coefficients : int64 list list) =
        let rec innerNoZeroHighestCoefficient cs =
            match cs with
                | []
                | [ 0L ] ->
                    []
                | 0L :: ts when List.isEmpty (innerNoZeroHighestCoefficient ts) ->
                    []
                | _ ->
                    cs
        let rec outerNoZeroHighestCoefficient css =
            let mss = List.map innerNoZeroHighestCoefficient css
            match mss with
                | []
                | [ [] ] ->
                    []
                | [] :: tss when List.forall List.isEmpty (outerNoZeroHighestCoefficient tss) ->
                    []
                | _ ->
                    mss
        Poly (outerNoZeroHighestCoefficient coefficients)

    static member (~-) (p : Poly) =
        let innerNegate =
            List.map (~-)

        let outerNegate =
            List.map innerNegate
        Poly (outerNegate p.Coefficients)

    static member (+) (p : Poly, q : Poly) =
        let rec innerPlus (cs, ds) =
            match cs, ds with
                | _, [] ->
                    cs
                | [], _ ->
                    ds
                | g :: ts, h :: rs ->
                    (g + h) :: innerPlus (ts, rs)
        let rec outerPlus (css, dss) =
            match css, dss with
                | _, [] ->
                    css
                | [], _ ->
                    dss
                | gs :: tss, hs :: rss ->
                    innerPlus (gs, hs) :: outerPlus (tss, rss)
        Poly.FlexiblePoly (outerPlus (p.Coefficients, q.Coefficients))

    static member (-) (p : Poly, q : Poly) =
        p + (-q)

    static member (*) (n : int64, p : Poly) =
        let innerNaturalMultiply (m, cs) =
            List.map ((*) m) cs
        let innerNaturalMultiplyCurried m cs =
            innerNaturalMultiply (m, cs)
        let outerNaturalMultiply (m, css) =
            List.map (innerNaturalMultiplyCurried m) css
        Poly.FlexiblePoly (outerNaturalMultiply (n, p.Coefficients))

    static member (<<<) (p : Poly, n : int) =
        let rec increaseRank (css, m) =
            if n = 0 then
                css
            elif n < 0 then
                List.skip (-n) css
            else
                [] :: increaseRank (css, m - 1)
        Poly (increaseRank (p.Coefficients, n))

    static member (>>>) (p : Poly, n : int) =
        p <<< -n

    static member (*) (p : Poly, q : Poly) =
        let rec innerPlus (cs, ds) =
            match cs, ds with
                | _, [] ->
                    cs
                | [], _ ->
                    ds
                | g :: ts, h :: rs ->
                    (g + h) :: innerPlus (ts, rs)
        let folder ss cs =
            innerPlus (ss, cs)
        let innerNaturalMultiply (m, cs) =
            List.map ((*) m) cs
        let rec innerIncreaseRank (cs : int64 list, m) =
            if m = 0 then
                cs
            elif m < 0 then
                List.skip (-m) cs
            else
                0L :: innerIncreaseRank (cs, m - 1)
        let rec innerMultiply (cs : int64 list, ds : int64 list) =
            let innerMapper s i c =
                innerNaturalMultiply (c, innerIncreaseRank (s, i))
            let terms = Seq.mapi (innerMapper ds) cs
            Seq.fold innerPlus [] terms
        let outerMapper r j cs =
            cs * (r >>> j)
        Poly.FlexiblePoly (Seq.sum (Seq.mapi (outerMapper q) p.Coefficients))

    member this.Derivative =
        let innerNaturalMultiply (m, cs) =
            List.map ((*) m) cs
        let innerNaturalMultiplyCurried m cs =
            innerNaturalMultiply (m, cs)
        let innerNaturalMultiplyCurried32 m =
            innerNaturalMultiplyCurried (int64 m)
        Poly.FlexiblePoly (List.mapi innerNaturalMultiplyCurried32 this.Coefficients) >>> 1

[<EntryPoint>]
let main _args =
    let a = Poly [ [ 1L; 2L ]; []; [ -1L; 0L; -3L ]]
    printfn "%O" a
    printfn "%O" (a - a)
    printfn "%O" a.Derivative
    0