// Learn more about F# at http://fsharp.org

open System

// Learn more about F# at http://fsharp.net
open Microsoft.FSharp.Control
open System.Threading
open System.IO

type RequestGate(n:int) = 
    let semaphore = new Semaphore(initialCount=n,maximumCount=n);
    member x.AcquireAsync(?timeout) = 
        async {
            let! ok = Async.AwaitWaitHandle (semaphore ,?millisecondsTimeout=timeout)
            if ok then 
                return 
                    { new System.IDisposable with 
                        member x.Dispose() = semaphore.Release() |> ignore }
            else
                return! failwith "couldn't adquire a semaphore"
        }

let requestGate = RequestGate(5)

let copyStream (input:Stream) (output:Stream) = 
    let buffer = Array.zeroCreate 32768;
    let mutable flag = true
    while flag do
        let read = input.Read (buffer, 0, buffer.Length);
        if (read <= 0) then
            flag <- false;
        else
            output.Write (buffer, 0, read);
            output.Flush()

let copy (s,t) = async { 
    //limit the amount of copy operations happening simultaneously
    use! holder = requestGate.AcquireAsync()
    use sourceStream = new FileStream(s,FileMode.Open,FileAccess.Read,FileShare.Read)
    use targetStream = new FileStream(t,FileMode.Create,FileAccess.ReadWrite,FileShare.None) 
    do! async { copyStream sourceStream targetStream }
    }

let synch (s,t) = async { 
    try
        do! copy (s,t) 
        //copy attributes
        File.SetCreationTime (t,File.GetCreationTime(s))
        File.SetLastWriteTime(t,File.GetLastWriteTime(s))
        //File.SetAccessControl(t,File.GetAccessControl(s))
        //File.SetAttributes   (t,File.GetAttributes(s))
    with ex -> printfn "ERROR: copy failed with: %s" ex.Message
    }

let createDirectory (source,target) = async {
    if Directory.Exists target then return Some(target)
    else
        use! holder = requestGate.AcquireAsync()
        try
            //printfn "Creating directory %s" target
            Directory.CreateDirectory(target) |> ignore
            Directory.SetCreationTime (target,Directory.GetCreationTime(source))
            Directory.SetLastWriteTime(target,Directory.GetLastWriteTime(source))
            //Directory.SetAccessControl(target,Directory.GetAccessControl(source))
            return Some(target)
        with ex ->
            printfn "ERROR: create directory '%s' failed with %s" target ex.Message
            return None
    }

let synchFolder filter mirror (source,target) = async { 
    let! target = createDirectory (source,target) 
    match target with 
    |Some(_) ->
        Directory.EnumerateFiles(source) 
        |> Seq.map(fun x -> (x,mirror x)) 
        |> Seq.filter filter 
        |> Seq.iter ( fun x ->  Async.Start (synch x) )
    |_ -> ()
    }

//filter files to copy over
let filter (s,t) =
    if File.Exists(t) then
        let source = new FileInfo(s)
        let target = new FileInfo(t)
        source.LastWriteTime > target.LastWriteTime
    else true

type SyncMessage = 
    // | SyncOne of string*string
    | SyncStart of string*string*Event<unit>
    | Sync of string*string
    //| SyncDone of AsyncReplyChannel<unit>
    | Decrement
    //| Wait of AsyncReplyChannel<unit>
    // | Wait of AsyncReplyChannel<unit>

let folderCollector (sourceDir:string,targetDir:string) =

    let mirror (f:string) = 
        if f.StartsWith(sourceDir) then
            let dif = f.Substring(sourceDir.Length)
            targetDir + dif
        else f |> sprintf "Invalid argument: %s" |> failwith

    MailboxProcessor.Start( fun self ->
        let rec loop (count:int) (eventOption: Event<unit> option)=
            async {
                let! msg = self.Receive()
                match msg with
                | SyncStart (s,t,e) ->
                    self.Post(Sync(s,t))
                    return! loop 0 (Some e)
                | Sync (s,t) ->
                    // Spawn a new task for the new folder
                    let q = async {
                        //printfn "processing (%d) %s -> %s" count s t
                        try
                            let! folders = synchFolder filter mirror (s,t)
                            for folder in Directory.EnumerateDirectories(s) do
                                do self.Post(Sync(folder, mirror folder))
                        with 
                            ex -> printf "ERROR: %s" ex.Message
                        do self.Post(Decrement)
                    }
                    do Async.Start q
                    return! loop (count + 1) eventOption
                | Decrement ->
                    if count = 1 then
                        match eventOption with
                        | Some e -> e.Trigger()
                        | _ -> ()
                    else
                        return! loop (count - 1) eventOption
            }
        loop 0 Option.None)


let synchronizeFolders (s:string, t:string) = 
    let collector = folderCollector (s,t)
    let finishedEvent = Event<_>()
    collector.Post(SyncStart(s, t, finishedEvent))
    Async.AwaitEvent finishedEvent.Publish |> Async.RunSynchronously


[<EntryPoint>]
let main argv =
    synchronizeFolders ("../source", "b/dest")
    0 // return an integer exit code

