/// allows fetching elements from same sequence
let continueSeq  (xs: 'a seq) = 
    use en = xs.GetEnumerator()

    fun(includeCurrent: bool) ->
        let s = seq { while en.MoveNext() do yield en.Current }
        let c = seq { en.Current }
        if includeCurrent then
            Seq.append c s
        else
            s

/// usage example:
let a = seq [1; 2; 3; 4; 5; 6; 7]

let seqfun = continueSeq  a 
let s1 = seqfun(false) |> Seq.takeWhile((>) 3) // take 1 and 2, 3 is current
let s2 = seqfun(true) |> Seq.take(2)    // take 3 and 4
let s3 = seqfun(false) |> Seq.skip(1)   // skip 5

let s = 
    s1 
    |> Seq.append <| s2 
    |> Seq.append <| s3 
    |> Seq.toList

// s = [1; 2; 3; 4; 6; 7]