module Main

type Element<'a> = | E of 'a

type DummyConcreteType1 = | DummyConcreteType1
type DummyConcreteType2 = | DummyConcreteType2

type Flattener =
    | Flattener
    static member inline (%-%) (Flattener, E a) = [ a ]
    static member inline (%-%) (Flattener, x : DummyConcreteType1) =
        failwith "this shouldn't be called, but is necessary..."
    static member inline (%-%) (Flattener, x : DummyConcreteType2) =
        failwith "...to trick the compiler into delaying resolution of the %-% operator"
    static member inline (%-%) (Flattener, list : ^a list) =
        [ for element in list do
            yield! Flattener %-% element
        ]

let inline flatten list = Flattener %-% list

[<EntryPoint>]
let main argv =
    let sample1 = 
        [ [ E "one" ]; [ E "two"; E "three" ] ]
    let flat1 = flatten sample1
    printfn "%A" flat1
    let sample2 =
        [   [ [E 1]; [E 2; E 3] ]
            [ [E 4; E 5]; [E 6; E 7] ]
        ]
    let flat2 = flatten sample2
    printfn "%A" flat2
    0 // return an integer exit code