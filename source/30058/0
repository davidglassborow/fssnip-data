//  Given a collection of intervals, merge all overlapping intervals. For example:
//  Given [8,10], [1,3], [15,18], [7,8], [4,5], [2,6], return [1,6], [7,10], [15,18].
let input=[(8,10); (1,3); (15,18); (7,8); (4,5); (2,6)]

let overlap (a,b) (c,d) = (a<=c && b>=c) || (a<=d && b>=d)

let lap (a,b) (c,d) = if overlap (a,b) (c,d) then (min a c, max b d) else (c,d)

let laple l0 e = 
    let  l1= List.filter ((<>) e) l0
    if   List.exists (overlap e) l1 then l1 |> List.map (lap e) else l0

let rec f3 l0 =
    let l1 = List.fold (fun a e ->  [e] |> List.map (laple a) 
                                    |> List.collect (fun x -> x) ) l0 l0
    if l1 <> l0 then l1 |> f3 else l0 

let f4 l = l |> List.sort |> f3

[] |> f4
[(8,10)] |> f4
[(8,10);(1,3)] |> f4
[(8,10);(1,3);(15,18)] |> f4
[(8,10);(1,3);(15,18);(7,8)] |> f4
[(8,10);(1,3);(15,18);(7,8);(4,5)] |> f4
[(8,10);(1,3);(15,18);(7,8);(4,5);(2,6)] |> f4

//  val it : (int * int) list = [(1, 6); (7, 10); (15, 18)]:
//  It works! Any improvements? please send to: MusaJ
